<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Any" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.Age
FROM Authors AS Extent1
 WHERE NOT EXISTS(SELECT
1 AS C1
FROM Books AS Extent2
 WHERE Extent1.Id = Extent2.Author_id)</value>
  </data>
  <data name="AverageSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Avg(Extent1.MinAge) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="AverageWithGrouping" xml:space="preserve">
    <value>SELECT
1 AS C1, 
GroupBy1.A1 AS C2
FROM (SELECT
Extent1.StoreId AS K1, 
AVG(Extent1.Freight) AS A1
FROM Orders AS Extent1
 GROUP BY 
Extent1.StoreId) AS GroupBy1</value>
  </data>
  <data name="AverageWithPredicate" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
AVG(Extent1.Freight) AS A1
FROM Orders AS Extent1
 WHERE Extent1.StoreId = 3) AS GroupBy1</value>
  </data>
  <data name="BigCountSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Count(Extent1.Id) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="CanGroupByMultipleColumns" xml:space="preserve">
    <value>SELECT
1 AS C1, 
GroupBy1.K1 AS Name, 
GroupBy1.A1 AS C2
FROM (SELECT
Extent1.Name AS K1, 
Extent1.DateBegan AS K2, 
Extent1.NumEmployees AS K3, 
COUNT(1) AS A1
FROM Companies AS Extent1
 GROUP BY 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees) AS GroupBy1</value>
  </data>
  <data name="CanGroupBySingleColumn" xml:space="preserve">
    <value>SELECT
1 AS C1, 
GroupBy1.K1 AS Name, 
GroupBy1.A1 AS C2
FROM (SELECT
Extent1.Name AS K1, 
COUNT(1) AS A1
FROM Companies AS Extent1
 GROUP BY 
Extent1.Name) AS GroupBy1</value>
  </data>
  <data name="CountSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Count(Extent1.Id) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="CountWithPredicate" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Count(Extent1.Id) AS A1
FROM Toys AS Extent1
 WHERE Extent1.MinAge &gt; 3) AS GroupBy1</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 WHERE EXISTS(SELECT
1 AS C1
FROM Toys AS Extent2
 WHERE (Extent1.Id = Extent2.SupplierId) AND (Extent2.MinAge &lt; 4))</value>
  </data>
  <data name="JoinOfUnionsOnRightSideOfJoin" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Join1.Id AS C1, 
Join1.Name AS C2, 
Join1.Id1 AS C3, 
Join1.Name1 AS C4
FROM Companies AS Extent1 INNER JOIN (SELECT
UnionAll1.Id, 
UnionAll1.Name, 
UnionAll2.Id AS Id1, 
UnionAll2.Name AS Name1
FROM (SELECT
Extent2.Id, 
Extent2.Name
FROM Toys AS Extent2 UNION ALL SELECT
Extent3.Id, 
Extent3.Name
FROM Stores AS Extent3) AS UnionAll1 INNER JOIN (SELECT
Extent4.Id, 
Extent4.Name
FROM Authors AS Extent4 UNION ALL SELECT
Extent5.Id, 
Extent5.Name
FROM Books AS Extent5) AS UnionAll2 ON UnionAll1.Id = UnionAll2.Id) AS Join1 ON Extent1.Id = Join1.Id</value>
  </data>
  <data name="JoinOnRightSideAsDerivedTable" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.EmployeeID, 
Extent1.LastName, 
Extent1.FirstName, 
Extent1.BirthTime, 
Extent1.Weight, 
Extent1.LastModified
FROM EmployeeChildren AS Extent1 INNER JOIN (SELECT
Extent2.Id, 
Extent2.LastName, 
Extent2.FirstName, 
Extent2.Age, 
Extent3.EmployeeId, 
Extent3.Salary
FROM Employees AS Extent2 LEFT OUTER JOIN SalariedEmployees AS Extent3 ON Extent2.Id = Extent3.EmployeeId) AS Join1 ON Extent1.EmployeeID = Join1.Id
 WHERE Extent1.Weight &gt; 7</value>
  </data>
  <data name="JoinOnRightSideNameClash" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Join1.Id AS Id1, 
Join1.Name AS Name1, 
Join1.Id1 AS Id2, 
Join1.Name1 AS Name2
FROM Companies AS Extent1 INNER JOIN (SELECT
Extent2.Id, 
Extent2.Name, 
Extent2.Age, 
Extent3.Id AS Id1, 
Extent3.Name AS Name1, 
Extent3.Pages, 
Extent3.Author_id, 
Extent3.Publisher_id
FROM Authors AS Extent2 INNER JOIN Books AS Extent3 ON Extent2.Id = Extent3.Id) AS Join1 ON Extent1.Id = Join1.Id</value>
  </data>
  <data name="MaxInSubQuery1" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Stores AS Extent1 INNER JOIN (SELECT
MAX(Extent2.StoreId) AS A1
FROM Orders AS Extent2) AS GroupBy1 ON Extent1.Id = GroupBy1.A1</value>
  </data>
  <data name="MaxInSubQuery2" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Stores AS Extent1 INNER JOIN (SELECT
MAX(Extent2.StoreId) AS A1
FROM Orders AS Extent2) AS GroupBy1 ON Extent1.Id = GroupBy1.A1</value>
  </data>
  <data name="MaxSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Max(Extent1.MinAge) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="MaxWithGrouping" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Extent1.StoreId AS K1, 
MAX(Extent1.Freight) AS A1
FROM Orders AS Extent1
 GROUP BY 
Extent1.StoreId) AS GroupBy1</value>
  </data>
  <data name="MaxWithPredicate" xml:space="preserve">
    <value>SELECT
1 AS C1, 
GroupBy1.A1 AS C2
FROM (SELECT
MAX(Extent1.Freight) AS A1
FROM Orders AS Extent1
 WHERE Extent1.StoreId = 1) AS GroupBy1</value>
  </data>
  <data name="MinSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Min(Extent1.MinAge) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="MinWithGrouping" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Extent1.StoreId AS K1, 
MIN(Extent1.Freight) AS A1
FROM Orders AS Extent1
 GROUP BY 
Extent1.StoreId) AS GroupBy1</value>
  </data>
  <data name="MinWithPredicate" xml:space="preserve">
    <value>SELECT
1 AS C1, 
GroupBy1.A1 AS C2
FROM (SELECT
MIN(Extent1.Freight) AS A1
FROM Orders AS Extent1
 WHERE Extent1.StoreId = 2) AS GroupBy1</value>
  </data>
  <data name="OrderBySimple" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 ORDER BY 
Extent1.Name ASC</value>
  </data>
  <data name="OrderByWithPredicate" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 WHERE Extent1.NumEmployees &gt; 100
 ORDER BY 
Extent1.Name ASC</value>
  </data>
  <data name="SelectWithComplexType" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.LastName
FROM Employees AS Extent1 LEFT OUTER JOIN SalariedEmployees AS Extent2 ON Extent1.Id = Extent2.EmployeeId
 WHERE Extent1.Age &gt; 20</value>
  </data>
  <data name="SimpleJoin" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent2.Name AS Name1
FROM Books AS Extent1 INNER JOIN Authors AS Extent2 ON Extent1.Author_id = Extent2.Id</value>
  </data>
  <data name="SimpleJoinWithPredicate" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent2.Name AS Name1
FROM Books AS Extent1 INNER JOIN Authors AS Extent2 ON Extent1.Author_id = Extent2.Id
 WHERE Extent1.Pages &gt; 300</value>
  </data>
  <data name="SimpleSelect" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.MinAge, 
Extent1.SupplierId
FROM Toys AS Extent1</value>
  </data>
  <data name="SimpleSelectWithFilter" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.MinAge, 
Extent1.SupplierId
FROM Toys AS Extent1
 WHERE Extent1.MinAge = 4</value>
  </data>
  <data name="SimpleSelectWithParam" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.MinAge, 
Extent1.SupplierId
FROM Toys AS Extent1
 WHERE Extent1.MinAge &gt; @age</value>
  </data>
  <data name="Skip" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 ORDER BY 
Extent1.Id ASC LIMIT 3,18446744073709551615</value>
  </data>
  <data name="SkipAndTakeSimple" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 ORDER BY 
Extent1.Id ASC LIMIT 2,2</value>
  </data>
  <data name="SkipAndTakeWithOrdering" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 ORDER BY 
Extent1.Name DESC LIMIT 2,2</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value />
  </data>
  <data name="SumSimple" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Sum(Extent1.MinAge) AS A1
FROM Toys AS Extent1) AS GroupBy1</value>
  </data>
  <data name="SumWithGrouping" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
Extent1.StoreId AS K1, 
SUM(Extent1.Freight) AS A1
FROM Orders AS Extent1
 GROUP BY 
Extent1.StoreId) AS GroupBy1</value>
  </data>
  <data name="SumWithPredicate" xml:space="preserve">
    <value>SELECT
GroupBy1.A1 AS C1
FROM (SELECT
SUM(Extent1.Freight) AS A1
FROM Orders AS Extent1
 WHERE Extent1.StoreId = 2) AS GroupBy1</value>
  </data>
  <data name="Top" xml:space="preserve">
    <value>SELECT
Id, 
Name, 
DateBegan, 
NumEmployees, 
Address, 
City, 
State, 
ZipCode
FROM Companies LIMIT 2</value>
  </data>
  <data name="UnionAll" xml:space="preserve">
    <value>SELECT
UnionAll1.Id AS C1, 
UnionAll1.Id1 AS C2, 
UnionAll1.Name AS C3
FROM (SELECT
Extent1.Id, 
Extent1.Id AS Id1, 
Extent1.Name
FROM Toys AS Extent1 UNION ALL SELECT
Extent2.Id, 
Extent2.Id AS Id1, 
Extent2.Name
FROM Companies AS Extent2) AS UnionAll1</value>
  </data>
  <data name="WhereLiteralOnRelation" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.DateBegan, 
Extent1.NumEmployees, 
Extent1.Address, 
Extent1.City, 
Extent1.State, 
Extent1.ZipCode
FROM Companies AS Extent1
 WHERE Extent1.City = @gp1</value>
  </data>
  <data name="WhereWithRelatedEntities1" xml:space="preserve">
    <value>SELECT
Extent1.Id, 
Extent1.Name, 
Extent1.MinAge, 
Extent1.SupplierId
FROM Toys AS Extent1 INNER JOIN Companies AS Extent2 ON Extent1.SupplierId = Extent2.Id
 WHERE Extent2.State = @gp1</value>
  </data>
  <data name="WhereWithRelatedEntities2" xml:space="preserve">
    <value>SELECT
Filter1.Id, 
Filter1.Name, 
Filter1.MinAge, 
Filter1.SupplierId
FROM (SELECT
Extent1.Id, 
Extent1.SupplierId, 
Extent1.Name, 
Extent1.MinAge, 
Extent2.Id AS Id1, 
Extent2.Name AS Name1, 
Extent2.DateBegan, 
Extent2.NumEmployees, 
Extent2.Address, 
Extent2.City, 
Extent2.State, 
Extent2.ZipCode
FROM Toys AS Extent1 INNER JOIN Companies AS Extent2 ON Extent1.SupplierId = Extent2.Id
 WHERE Extent2.State != @gp1) AS Filter1 LEFT OUTER JOIN Companies AS Extent3 ON Filter1.SupplierId = Extent3.Id
 WHERE Extent3.State != @gp2</value>
  </data>
</root>