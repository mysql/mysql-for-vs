//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 MySQL51Parser.g3 2011-09-12 11:57:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace MySqlParser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class MySQL51Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESSIBLE", "ACTION", "ADD", "ADDDATE", "AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARCHIVE", "AS", "ASC", "ASCII", "ASENSITIVE", "ASSIGN", "AT", "AUTHORS", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG", "AVG_ROW_LENGTH", "BACKUP", "BDB", "BEFORE", "BEGIN", "BERKELEYDB", "BETWEEN", "BIGINT", "BINARY", "BINARY_VALUE", "BINLOG", "BIT", "BITWISE_AND", "BITWISE_INVERSION", "BITWISE_OR", "BITWISE_XOR", "BIT_AND", "BIT_OR", "BIT_XOR", "BLACKHOLE", "BLOB", "BLOCK", "BOOL", "BOOLEAN", "BOTH", "BTREE", "BY", "BYTE", "CACHE", "CALL", "CASCADE", "CASCADED", "CASE", "CAST", "CHAIN", "CHANGE", "CHANGED", "CHAR", "CHARACTER", "CHARSET", "CHECK", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLLATE", "COLLATION", "COLON", "COLUMN", "COLUMNS", "COMMA", "COMMENT", "COMMENT_RULE", "COMMIT", "COMMITTED", "COMPACT", "COMPLETION", "COMPRESSED", "CONCURRENT", "CONDITION", "CONNECTION", "CONSISTENT", "CONSTRAINT", "CONTAINS", "CONTEXT", "CONTINUE", "CONTRIBUTORS", "CONVERT", "COUNT", "CPU", "CREATE", "CROSS", "CSV", "CUBE", "CURDATE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CURTIME", "C_COMMENT", "DASHDASH_COMMENT", "DATA", "DATABASE", "DATABASES", "DATAFILE", "DATE", "DATETIME", "DATE_ADD", "DATE_ADD_INTERVAL", "DATE_SUB", "DATE_SUB_INTERVAL", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFINER", "DELAYED", "DELAY_KEY_WRITE", "DELETE", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC", "DIGIT", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DISTINCT", "DISTINCTROW", "DIV", "DIVISION", "DO", "DOT", "DOUBLE", "DROP", "DUAL", "DUMPFILE", "DUPLICATE", "DYNAMIC", "EACH", "ELSE", "ELSEIF", "ENABLE", "ENCLOSED", "END", "ENDS", "ENGINE", "ENGINES", "ENUM", "EQUALS", "ERRORS", "ESCAPE", "ESCAPED", "ESCAPE_SEQUENCE", "EVENT", "EVENTS", "EVERY", "EXAMPLE", "EXECUTE", "EXISTS", "EXIT", "EXPANSION", "EXPLAIN", "EXTENDED", "EXTENT_SIZE", "EXTRACT", "FALSE", "FAST", "FAULTS", "FEDERATED", "FETCH", "FIELDS", "FILE", "FIRST", "FIXED", "FLOAT", "FLOAT4", "FLOAT8", "FLUSH", "FOR", "FORCE", "FOREIGN", "FOUND", "FRAC_SECOND", "FROM", "FULL", "FULLTEXT", "FUNCTION", "GEOMETRY", "GEOMETRYCOLLECTION", "GET_FORMAT", "GLOBAL", "GLOBAL_VARIABLE", "GOTO", "GRANT", "GRANTS", "GREATER_THAN", "GREATER_THAN_EQUAL", "GROUP", "GROUP_CONCAT", "HANDLER", "HASH", "HAVING", "HEAP", "HELP", "HEXA_VALUE", "HIGH_PRIORITY", "HOST", "HOSTS", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "ID", "IDENTIFIED", "IF", "IFNULL", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", "INFILE", "INITIAL_SIZE", "INNER", "INNOBASE", "INNODB", "INOUT", "INSENSITIVE", "INSERT", "INSERT_METHOD", "INSTALL", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERVAL", "INTO", "INT_NUMBER", "INVOKER", "IO", "IPC", "IS", "ISOLATION", "ISSUER", "ITERATE", "JOIN", "KEY", "KEYS", "KEY_BLOCK_SIZE", "KILL", "LABEL", "LANGUAGE", "LAST", "LCURLY", "LEADING", "LEAVE", "LEAVES", "LEFT", "LEFT_SHIFT", "LESS", "LESS_THAN", "LESS_THAN_EQUAL", "LEVEL", "LIKE", "LIMIT", "LINEAR", "LINES", "LINESTRING", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCK", "LOCKS", "LOGFILE", "LOGICAL_AND", "LOGICAL_OR", "LOGS", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "LPAREN", "MASTER", "MASTER_CONNECT_RETRY", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_SERVER_ID", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_KEY", "MASTER_SSL_VERIFY_SERVER_CERT", "MASTER_USER", "MATCH", "MAX", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MAX_VALUE", "MEDIUM", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEMORY", "MERGE", "MICROSECOND", "MID", "MIDDLEINT", "MIGRATE", "MIN", "MINUS", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", "MOD", "MODE", "MODIFIES", "MODIFY", "MODULO", "MONTH", "MULT", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "MUTEX", "MYISAM", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NDBCLUSTER", "NEW", "NEXT", "NO", "NODEGROUP", "NONE", "NOT", "NOT_EQUAL", "NOT_OP", "NOW", "NO_WAIT", "NO_WRITE_TO_BINLOG", "NULL", "NULLIF", "NULL_SAFE_NOT_EQUAL", "NUMBER", "NUMERIC", "NVARCHAR", "OFFSET", "OLD_PASSWORD", "ON", "ONE", "ONE_NUMBER", "ONE_SHOT", "OPEN", "OPTIMIZE", "OPTION", "OPTIONALLY", "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITION", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGINS", "PLUS", "POINT", "POLYGON", "PORT", "POSITION", "POUND_COMMENT", "PRECISION", "PREPARE", "PRESERVE", "PREV", "PRIMARY", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST", "PROFILE", "PROFILES", "PURGE", "QUARTER", "QUERY", "QUICK", "RANGE", "RCURLY", "READ", "READS", "READ_ONLY", "READ_WRITE", "REAL", "REAL_ID", "REBUILD", "RECOVER", "REDOFILE", "REDO_BUFFER_SIZE", "REDUNDANT", "REFERENCES", "REGEXP", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAY_THREAD", "RELEASE", "RELOAD", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", "REPEAT", "REPEATABLE", "REPLACE", "REPLICATION", "REQUIRE", "RESET", "RESOURCES", "RESTORE", "RESTRICT", "RESUME", "RETURN", "RETURNS", "REVOKE", "RIGHT", "RIGHT_SHIFT", "RLIKE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROW", "ROWS", "ROW_FORMAT", "RPAREN", "RTREE", "SAVEPOINT", "SCHEDULE", "SCHEDULER", "SCHEMA", "SCHEMAS", "SECOND", "SECOND_MICROSECOND", "SECURITY", "SELECT", "SEMI", "SENSITIVE", "SEPARATOR", "SERIAL", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SESSION_VARIABLE", "SET", "SHARE", "SHOW", "SHUTDOWN", "SIGNED", "SIMPLE", "SLAVE", "SMALLINT", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE", "SQL_SMALL_RESULT", "SQL_THREAD", "SSL", "START", "STARTING", "STARTS", "STATUS", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STOP", "STORAGE", "STRAIGHT_JOIN", "STRING", "STRING_KEYWORD", "SUBDATE", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUBSTR", "SUBSTRING", "SUM", "SUPER", "SUSPEND", "SWAPS", "SWITCHES", "SYSDATE", "SYSTEM_USER", "TABLE", "TABLES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", "TERMINATED", "TEXT", "THAN", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRANSACTION", "TRANSACTIONAL", "TRIGGER", "TRIGGERS", "TRIM", "TRUE", "TRUNCATE", "TYPE", "TYPES", "UDF_RETURNS", "UNCOMMITTED", "UNDEFINED", "UNDO", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNICODE", "UNINSTALL", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSIGNED", "UNTIL", "UPDATE", "UPGRADE", "USAGE", "USE", "USER", "USER_HOST", "USER_HOST_or_ID_or_STRING", "USE_FRM", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUE", "VALUES", "VALUE_PLACEHOLDER", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARIABLES", "VARIANCE", "VARYING", "VAR_POP", "VAR_SAMP", "VIEW", "WAIT", "WARNINGS", "WEEK", "WHEN", "WHERE", "WHILE", "WITH", "WORK", "WRAPPER", "WRITE", "WS", "X509", "XA", "XOR", "YEAR", "YEAR_MONTH", "ZERO", "ZEROFILL", "ALIAS", "COMMA_JOIN", "CONCAT", "COUNT_STAR", "CREATE_TABLE", "DEFINITION", "DEFINITIONS", "DIRECTION", "FIELD", "FUNC", "INDEX_HINTS", "INDEX_SYM", "INSERT_VALUES", "LOGILE", "NDB", "NOT_NULL", "OFFLINE", "ONLINE", "ROLLBACK_POINT", "SELECT_EXPR", "SUBSELECT", "UNARY_MINUS", "UNARY_PLUS"
	};
	public const int EOF=-1;
	public const int ACCESSIBLE=4;
	public const int ACTION=5;
	public const int ADD=6;
	public const int ADDDATE=7;
	public const int AFTER=8;
	public const int AGAINST=9;
	public const int AGGREGATE=10;
	public const int ALGORITHM=11;
	public const int ALL=12;
	public const int ALTER=13;
	public const int ANALYZE=14;
	public const int AND=15;
	public const int ANY=16;
	public const int ARCHIVE=17;
	public const int AS=18;
	public const int ASC=19;
	public const int ASCII=20;
	public const int ASENSITIVE=21;
	public const int ASSIGN=22;
	public const int AT=23;
	public const int AUTHORS=24;
	public const int AUTOEXTEND_SIZE=25;
	public const int AUTO_INCREMENT=26;
	public const int AVG=27;
	public const int AVG_ROW_LENGTH=28;
	public const int BACKUP=29;
	public const int BDB=30;
	public const int BEFORE=31;
	public const int BEGIN=32;
	public const int BERKELEYDB=33;
	public const int BETWEEN=34;
	public const int BIGINT=35;
	public const int BINARY=36;
	public const int BINARY_VALUE=37;
	public const int BINLOG=38;
	public const int BIT=39;
	public const int BITWISE_AND=40;
	public const int BITWISE_INVERSION=41;
	public const int BITWISE_OR=42;
	public const int BITWISE_XOR=43;
	public const int BIT_AND=44;
	public const int BIT_OR=45;
	public const int BIT_XOR=46;
	public const int BLACKHOLE=47;
	public const int BLOB=48;
	public const int BLOCK=49;
	public const int BOOL=50;
	public const int BOOLEAN=51;
	public const int BOTH=52;
	public const int BTREE=53;
	public const int BY=54;
	public const int BYTE=55;
	public const int CACHE=56;
	public const int CALL=57;
	public const int CASCADE=58;
	public const int CASCADED=59;
	public const int CASE=60;
	public const int CAST=61;
	public const int CHAIN=62;
	public const int CHANGE=63;
	public const int CHANGED=64;
	public const int CHAR=65;
	public const int CHARACTER=66;
	public const int CHARSET=67;
	public const int CHECK=68;
	public const int CHECKSUM=69;
	public const int CIPHER=70;
	public const int CLIENT=71;
	public const int CLOSE=72;
	public const int COALESCE=73;
	public const int CODE=74;
	public const int COLLATE=75;
	public const int COLLATION=76;
	public const int COLON=77;
	public const int COLUMN=78;
	public const int COLUMNS=79;
	public const int COMMA=80;
	public const int COMMENT=81;
	public const int COMMENT_RULE=82;
	public const int COMMIT=83;
	public const int COMMITTED=84;
	public const int COMPACT=85;
	public const int COMPLETION=86;
	public const int COMPRESSED=87;
	public const int CONCURRENT=88;
	public const int CONDITION=89;
	public const int CONNECTION=90;
	public const int CONSISTENT=91;
	public const int CONSTRAINT=92;
	public const int CONTAINS=93;
	public const int CONTEXT=94;
	public const int CONTINUE=95;
	public const int CONTRIBUTORS=96;
	public const int CONVERT=97;
	public const int COUNT=98;
	public const int CPU=99;
	public const int CREATE=100;
	public const int CROSS=101;
	public const int CSV=102;
	public const int CUBE=103;
	public const int CURDATE=104;
	public const int CURRENT_DATE=105;
	public const int CURRENT_TIME=106;
	public const int CURRENT_TIMESTAMP=107;
	public const int CURRENT_USER=108;
	public const int CURSOR=109;
	public const int CURTIME=110;
	public const int C_COMMENT=111;
	public const int DASHDASH_COMMENT=112;
	public const int DATA=113;
	public const int DATABASE=114;
	public const int DATABASES=115;
	public const int DATAFILE=116;
	public const int DATE=117;
	public const int DATETIME=118;
	public const int DATE_ADD=119;
	public const int DATE_ADD_INTERVAL=120;
	public const int DATE_SUB=121;
	public const int DATE_SUB_INTERVAL=122;
	public const int DAY=123;
	public const int DAY_HOUR=124;
	public const int DAY_MICROSECOND=125;
	public const int DAY_MINUTE=126;
	public const int DAY_SECOND=127;
	public const int DEALLOCATE=128;
	public const int DEC=129;
	public const int DECIMAL=130;
	public const int DECLARE=131;
	public const int DEFAULT=132;
	public const int DEFINER=133;
	public const int DELAYED=134;
	public const int DELAY_KEY_WRITE=135;
	public const int DELETE=136;
	public const int DESC=137;
	public const int DESCRIBE=138;
	public const int DES_KEY_FILE=139;
	public const int DETERMINISTIC=140;
	public const int DIGIT=141;
	public const int DIRECTORY=142;
	public const int DISABLE=143;
	public const int DISCARD=144;
	public const int DISK=145;
	public const int DISTINCT=146;
	public const int DISTINCTROW=147;
	public const int DIV=148;
	public const int DIVISION=149;
	public const int DO=150;
	public const int DOT=151;
	public const int DOUBLE=152;
	public const int DROP=153;
	public const int DUAL=154;
	public const int DUMPFILE=155;
	public const int DUPLICATE=156;
	public const int DYNAMIC=157;
	public const int EACH=158;
	public const int ELSE=159;
	public const int ELSEIF=160;
	public const int ENABLE=161;
	public const int ENCLOSED=162;
	public const int END=163;
	public const int ENDS=164;
	public const int ENGINE=165;
	public const int ENGINES=166;
	public const int ENUM=167;
	public const int EQUALS=168;
	public const int ERRORS=169;
	public const int ESCAPE=170;
	public const int ESCAPED=171;
	public const int ESCAPE_SEQUENCE=172;
	public const int EVENT=173;
	public const int EVENTS=174;
	public const int EVERY=175;
	public const int EXAMPLE=176;
	public const int EXECUTE=177;
	public const int EXISTS=178;
	public const int EXIT=179;
	public const int EXPANSION=180;
	public const int EXPLAIN=181;
	public const int EXTENDED=182;
	public const int EXTENT_SIZE=183;
	public const int EXTRACT=184;
	public const int FALSE=185;
	public const int FAST=186;
	public const int FAULTS=187;
	public const int FEDERATED=188;
	public const int FETCH=189;
	public const int FIELDS=190;
	public const int FILE=191;
	public const int FIRST=192;
	public const int FIXED=193;
	public const int FLOAT=194;
	public const int FLOAT4=195;
	public const int FLOAT8=196;
	public const int FLUSH=197;
	public const int FOR=198;
	public const int FORCE=199;
	public const int FOREIGN=200;
	public const int FOUND=201;
	public const int FRAC_SECOND=202;
	public const int FROM=203;
	public const int FULL=204;
	public const int FULLTEXT=205;
	public const int FUNCTION=206;
	public const int GEOMETRY=207;
	public const int GEOMETRYCOLLECTION=208;
	public const int GET_FORMAT=209;
	public const int GLOBAL=210;
	public const int GLOBAL_VARIABLE=211;
	public const int GOTO=212;
	public const int GRANT=213;
	public const int GRANTS=214;
	public const int GREATER_THAN=215;
	public const int GREATER_THAN_EQUAL=216;
	public const int GROUP=217;
	public const int GROUP_CONCAT=218;
	public const int HANDLER=219;
	public const int HASH=220;
	public const int HAVING=221;
	public const int HEAP=222;
	public const int HELP=223;
	public const int HEXA_VALUE=224;
	public const int HIGH_PRIORITY=225;
	public const int HOST=226;
	public const int HOSTS=227;
	public const int HOUR=228;
	public const int HOUR_MICROSECOND=229;
	public const int HOUR_MINUTE=230;
	public const int HOUR_SECOND=231;
	public const int ID=232;
	public const int IDENTIFIED=233;
	public const int IF=234;
	public const int IFNULL=235;
	public const int IGNORE=236;
	public const int IMPORT=237;
	public const int IN=238;
	public const int INDEX=239;
	public const int INDEXES=240;
	public const int INFILE=241;
	public const int INITIAL_SIZE=242;
	public const int INNER=243;
	public const int INNOBASE=244;
	public const int INNODB=245;
	public const int INOUT=246;
	public const int INSENSITIVE=247;
	public const int INSERT=248;
	public const int INSERT_METHOD=249;
	public const int INSTALL=250;
	public const int INT=251;
	public const int INT1=252;
	public const int INT2=253;
	public const int INT3=254;
	public const int INT4=255;
	public const int INT8=256;
	public const int INTEGER=257;
	public const int INTERVAL=258;
	public const int INTO=259;
	public const int INT_NUMBER=260;
	public const int INVOKER=261;
	public const int IO=262;
	public const int IPC=263;
	public const int IS=264;
	public const int ISOLATION=265;
	public const int ISSUER=266;
	public const int ITERATE=267;
	public const int JOIN=268;
	public const int KEY=269;
	public const int KEYS=270;
	public const int KEY_BLOCK_SIZE=271;
	public const int KILL=272;
	public const int LABEL=273;
	public const int LANGUAGE=274;
	public const int LAST=275;
	public const int LCURLY=276;
	public const int LEADING=277;
	public const int LEAVE=278;
	public const int LEAVES=279;
	public const int LEFT=280;
	public const int LEFT_SHIFT=281;
	public const int LESS=282;
	public const int LESS_THAN=283;
	public const int LESS_THAN_EQUAL=284;
	public const int LEVEL=285;
	public const int LIKE=286;
	public const int LIMIT=287;
	public const int LINEAR=288;
	public const int LINES=289;
	public const int LINESTRING=290;
	public const int LIST=291;
	public const int LOAD=292;
	public const int LOCAL=293;
	public const int LOCALTIME=294;
	public const int LOCALTIMESTAMP=295;
	public const int LOCK=296;
	public const int LOCKS=297;
	public const int LOGFILE=298;
	public const int LOGICAL_AND=299;
	public const int LOGICAL_OR=300;
	public const int LOGS=301;
	public const int LONG=302;
	public const int LONGBLOB=303;
	public const int LONGTEXT=304;
	public const int LOOP=305;
	public const int LOW_PRIORITY=306;
	public const int LPAREN=307;
	public const int MASTER=308;
	public const int MASTER_CONNECT_RETRY=309;
	public const int MASTER_HOST=310;
	public const int MASTER_LOG_FILE=311;
	public const int MASTER_LOG_POS=312;
	public const int MASTER_PASSWORD=313;
	public const int MASTER_PORT=314;
	public const int MASTER_SERVER_ID=315;
	public const int MASTER_SSL=316;
	public const int MASTER_SSL_CA=317;
	public const int MASTER_SSL_CAPATH=318;
	public const int MASTER_SSL_CERT=319;
	public const int MASTER_SSL_CIPHER=320;
	public const int MASTER_SSL_KEY=321;
	public const int MASTER_SSL_VERIFY_SERVER_CERT=322;
	public const int MASTER_USER=323;
	public const int MATCH=324;
	public const int MAX=325;
	public const int MAX_CONNECTIONS_PER_HOUR=326;
	public const int MAX_QUERIES_PER_HOUR=327;
	public const int MAX_ROWS=328;
	public const int MAX_SIZE=329;
	public const int MAX_UPDATES_PER_HOUR=330;
	public const int MAX_USER_CONNECTIONS=331;
	public const int MAX_VALUE=332;
	public const int MEDIUM=333;
	public const int MEDIUMBLOB=334;
	public const int MEDIUMINT=335;
	public const int MEDIUMTEXT=336;
	public const int MEMORY=337;
	public const int MERGE=338;
	public const int MICROSECOND=339;
	public const int MID=340;
	public const int MIDDLEINT=341;
	public const int MIGRATE=342;
	public const int MIN=343;
	public const int MINUS=344;
	public const int MINUTE=345;
	public const int MINUTE_MICROSECOND=346;
	public const int MINUTE_SECOND=347;
	public const int MIN_ROWS=348;
	public const int MOD=349;
	public const int MODE=350;
	public const int MODIFIES=351;
	public const int MODIFY=352;
	public const int MODULO=353;
	public const int MONTH=354;
	public const int MULT=355;
	public const int MULTILINESTRING=356;
	public const int MULTIPOINT=357;
	public const int MULTIPOLYGON=358;
	public const int MUTEX=359;
	public const int MYISAM=360;
	public const int NAME=361;
	public const int NAMES=362;
	public const int NATIONAL=363;
	public const int NATURAL=364;
	public const int NCHAR=365;
	public const int NDBCLUSTER=366;
	public const int NEW=367;
	public const int NEXT=368;
	public const int NO=369;
	public const int NODEGROUP=370;
	public const int NONE=371;
	public const int NOT=372;
	public const int NOT_EQUAL=373;
	public const int NOT_OP=374;
	public const int NOW=375;
	public const int NO_WAIT=376;
	public const int NO_WRITE_TO_BINLOG=377;
	public const int NULL=378;
	public const int NULLIF=379;
	public const int NULL_SAFE_NOT_EQUAL=380;
	public const int NUMBER=381;
	public const int NUMERIC=382;
	public const int NVARCHAR=383;
	public const int OFFSET=384;
	public const int OLD_PASSWORD=385;
	public const int ON=386;
	public const int ONE=387;
	public const int ONE_NUMBER=388;
	public const int ONE_SHOT=389;
	public const int OPEN=390;
	public const int OPTIMIZE=391;
	public const int OPTION=392;
	public const int OPTIONALLY=393;
	public const int OPTIONS=394;
	public const int OR=395;
	public const int ORDER=396;
	public const int OUT=397;
	public const int OUTER=398;
	public const int OUTFILE=399;
	public const int OWNER=400;
	public const int PACK_KEYS=401;
	public const int PAGE=402;
	public const int PARSER=403;
	public const int PARTIAL=404;
	public const int PARTITION=405;
	public const int PARTITIONING=406;
	public const int PARTITIONS=407;
	public const int PASSWORD=408;
	public const int PHASE=409;
	public const int PLUGIN=410;
	public const int PLUGINS=411;
	public const int PLUS=412;
	public const int POINT=413;
	public const int POLYGON=414;
	public const int PORT=415;
	public const int POSITION=416;
	public const int POUND_COMMENT=417;
	public const int PRECISION=418;
	public const int PREPARE=419;
	public const int PRESERVE=420;
	public const int PREV=421;
	public const int PRIMARY=422;
	public const int PRIVILEGES=423;
	public const int PROCEDURE=424;
	public const int PROCESS=425;
	public const int PROCESSLIST=426;
	public const int PROFILE=427;
	public const int PROFILES=428;
	public const int PURGE=429;
	public const int QUARTER=430;
	public const int QUERY=431;
	public const int QUICK=432;
	public const int RANGE=433;
	public const int RCURLY=434;
	public const int READ=435;
	public const int READS=436;
	public const int READ_ONLY=437;
	public const int READ_WRITE=438;
	public const int REAL=439;
	public const int REAL_ID=440;
	public const int REBUILD=441;
	public const int RECOVER=442;
	public const int REDOFILE=443;
	public const int REDO_BUFFER_SIZE=444;
	public const int REDUNDANT=445;
	public const int REFERENCES=446;
	public const int REGEXP=447;
	public const int RELAY_LOG_FILE=448;
	public const int RELAY_LOG_POS=449;
	public const int RELAY_THREAD=450;
	public const int RELEASE=451;
	public const int RELOAD=452;
	public const int REMOVE=453;
	public const int RENAME=454;
	public const int REORGANIZE=455;
	public const int REPAIR=456;
	public const int REPEAT=457;
	public const int REPEATABLE=458;
	public const int REPLACE=459;
	public const int REPLICATION=460;
	public const int REQUIRE=461;
	public const int RESET=462;
	public const int RESOURCES=463;
	public const int RESTORE=464;
	public const int RESTRICT=465;
	public const int RESUME=466;
	public const int RETURN=467;
	public const int RETURNS=468;
	public const int REVOKE=469;
	public const int RIGHT=470;
	public const int RIGHT_SHIFT=471;
	public const int RLIKE=472;
	public const int ROLLBACK=473;
	public const int ROLLUP=474;
	public const int ROUTINE=475;
	public const int ROW=476;
	public const int ROWS=477;
	public const int ROW_FORMAT=478;
	public const int RPAREN=479;
	public const int RTREE=480;
	public const int SAVEPOINT=481;
	public const int SCHEDULE=482;
	public const int SCHEDULER=483;
	public const int SCHEMA=484;
	public const int SCHEMAS=485;
	public const int SECOND=486;
	public const int SECOND_MICROSECOND=487;
	public const int SECURITY=488;
	public const int SELECT=489;
	public const int SEMI=490;
	public const int SENSITIVE=491;
	public const int SEPARATOR=492;
	public const int SERIAL=493;
	public const int SERIALIZABLE=494;
	public const int SERVER=495;
	public const int SESSION=496;
	public const int SESSION_USER=497;
	public const int SESSION_VARIABLE=498;
	public const int SET=499;
	public const int SHARE=500;
	public const int SHOW=501;
	public const int SHUTDOWN=502;
	public const int SIGNED=503;
	public const int SIMPLE=504;
	public const int SLAVE=505;
	public const int SMALLINT=506;
	public const int SNAPSHOT=507;
	public const int SOCKET=508;
	public const int SOME=509;
	public const int SONAME=510;
	public const int SOUNDS=511;
	public const int SOURCE=512;
	public const int SPATIAL=513;
	public const int SPECIFIC=514;
	public const int SQL=515;
	public const int SQLEXCEPTION=516;
	public const int SQLSTATE=517;
	public const int SQLWARNING=518;
	public const int SQL_BIG_RESULT=519;
	public const int SQL_BUFFER_RESULT=520;
	public const int SQL_CACHE=521;
	public const int SQL_CALC_FOUND_ROWS=522;
	public const int SQL_NO_CACHE=523;
	public const int SQL_SMALL_RESULT=524;
	public const int SQL_THREAD=525;
	public const int SSL=526;
	public const int START=527;
	public const int STARTING=528;
	public const int STARTS=529;
	public const int STATUS=530;
	public const int STD=531;
	public const int STDDEV=532;
	public const int STDDEV_POP=533;
	public const int STDDEV_SAMP=534;
	public const int STOP=535;
	public const int STORAGE=536;
	public const int STRAIGHT_JOIN=537;
	public const int STRING=538;
	public const int STRING_KEYWORD=539;
	public const int SUBDATE=540;
	public const int SUBJECT=541;
	public const int SUBPARTITION=542;
	public const int SUBPARTITIONS=543;
	public const int SUBSTR=544;
	public const int SUBSTRING=545;
	public const int SUM=546;
	public const int SUPER=547;
	public const int SUSPEND=548;
	public const int SWAPS=549;
	public const int SWITCHES=550;
	public const int SYSDATE=551;
	public const int SYSTEM_USER=552;
	public const int TABLE=553;
	public const int TABLES=554;
	public const int TABLESPACE=555;
	public const int TEMPORARY=556;
	public const int TEMPTABLE=557;
	public const int TERMINATED=558;
	public const int TEXT=559;
	public const int THAN=560;
	public const int THEN=561;
	public const int TIME=562;
	public const int TIMESTAMP=563;
	public const int TIMESTAMP_ADD=564;
	public const int TIMESTAMP_DIFF=565;
	public const int TINYBLOB=566;
	public const int TINYINT=567;
	public const int TINYTEXT=568;
	public const int TO=569;
	public const int TRAILING=570;
	public const int TRANSACTION=571;
	public const int TRANSACTIONAL=572;
	public const int TRIGGER=573;
	public const int TRIGGERS=574;
	public const int TRIM=575;
	public const int TRUE=576;
	public const int TRUNCATE=577;
	public const int TYPE=578;
	public const int TYPES=579;
	public const int UDF_RETURNS=580;
	public const int UNCOMMITTED=581;
	public const int UNDEFINED=582;
	public const int UNDO=583;
	public const int UNDOFILE=584;
	public const int UNDO_BUFFER_SIZE=585;
	public const int UNICODE=586;
	public const int UNINSTALL=587;
	public const int UNION=588;
	public const int UNIQUE=589;
	public const int UNKNOWN=590;
	public const int UNLOCK=591;
	public const int UNSIGNED=592;
	public const int UNTIL=593;
	public const int UPDATE=594;
	public const int UPGRADE=595;
	public const int USAGE=596;
	public const int USE=597;
	public const int USER=598;
	public const int USER_HOST=599;
	public const int USER_HOST_or_ID_or_STRING=600;
	public const int USE_FRM=601;
	public const int USING=602;
	public const int UTC_DATE=603;
	public const int UTC_TIME=604;
	public const int UTC_TIMESTAMP=605;
	public const int VALUE=606;
	public const int VALUES=607;
	public const int VALUE_PLACEHOLDER=608;
	public const int VARBINARY=609;
	public const int VARCHAR=610;
	public const int VARCHARACTER=611;
	public const int VARIABLES=612;
	public const int VARIANCE=613;
	public const int VARYING=614;
	public const int VAR_POP=615;
	public const int VAR_SAMP=616;
	public const int VIEW=617;
	public const int WAIT=618;
	public const int WARNINGS=619;
	public const int WEEK=620;
	public const int WHEN=621;
	public const int WHERE=622;
	public const int WHILE=623;
	public const int WITH=624;
	public const int WORK=625;
	public const int WRAPPER=626;
	public const int WRITE=627;
	public const int WS=628;
	public const int X509=629;
	public const int XA=630;
	public const int XOR=631;
	public const int YEAR=632;
	public const int YEAR_MONTH=633;
	public const int ZERO=634;
	public const int ZEROFILL=635;
	public const int ALIAS=636;
	public const int COMMA_JOIN=637;
	public const int CONCAT=638;
	public const int COUNT_STAR=639;
	public const int CREATE_TABLE=640;
	public const int DEFINITION=641;
	public const int DEFINITIONS=642;
	public const int DIRECTION=643;
	public const int FIELD=644;
	public const int FUNC=645;
	public const int INDEX_HINTS=646;
	public const int INDEX_SYM=647;
	public const int INSERT_VALUES=648;
	public const int LOGILE=649;
	public const int NDB=650;
	public const int NOT_NULL=651;
	public const int OFFLINE=652;
	public const int ONLINE=653;
	public const int ROLLBACK_POINT=654;
	public const int SELECT_EXPR=655;
	public const int SUBSELECT=656;
	public const int UNARY_MINUS=657;
	public const int UNARY_PLUS=658;

	// delegates
	// delegators

	public MySQL51Parser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public MySQL51Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[140+1];

		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return MySQL51Parser.tokenNames; } }
	public override string GrammarFileName { get { return "MySQL51Parser.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class statement_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statement_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// MySQL51Parser.g3:40:8: public statement_list :stmts+= statement ( SEMI stmts+= statement )* ( SEMI )* EOF -> ( $stmts)+ ;
	[GrammarRule("statement_list")]
	public MySQL51Parser.statement_list_return statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 1);
		TraceIn("statement_list", 1);
		MySQL51Parser.statement_list_return retval = new MySQL51Parser.statement_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMI1 = default(IToken);
		IToken SEMI2 = default(IToken);
		IToken EOF3 = default(IToken);
		List<object> list_stmts = null;
		MySQL51Parser.statement_return stmts = default(MySQL51Parser.statement_return);
		object SEMI1_tree = default(object);
		object SEMI2_tree = default(object);
		object EOF3_tree = default(object);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(40, 1);
		try
		{
			// MySQL51Parser.g3:41:2: (stmts+= statement ( SEMI stmts+= statement )* ( SEMI )* EOF -> ( $stmts)+ )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:41:4: stmts+= statement ( SEMI stmts+= statement )* ( SEMI )* EOF
			{
			DebugLocation(41, 9);
			PushFollow(Follow._statement_in_statement_list124);
			stmts=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_statement.Add(stmts.Tree);
			if (list_stmts==null) list_stmts=new List<object>();
			list_stmts.Add(stmts.Tree);

			DebugLocation(41, 21);
			// MySQL51Parser.g3:41:21: ( SEMI stmts+= statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==SEMI))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1==ACTION||(LA1_1>=ADDDATE && LA1_1<=ALGORITHM)||LA1_1==ANY||LA1_1==ASCII||(LA1_1>=AT && LA1_1<=BACKUP)||LA1_1==BEGIN||(LA1_1>=BINLOG && LA1_1<=BIT)||(LA1_1>=BLOCK && LA1_1<=BOOLEAN)||LA1_1==BTREE||(LA1_1>=BYTE && LA1_1<=CACHE)||LA1_1==CASCADED||LA1_1==CHAIN||LA1_1==CHANGED||LA1_1==CHARSET||(LA1_1>=CHECKSUM && LA1_1<=CODE)||LA1_1==COLLATION||LA1_1==COLUMNS||(LA1_1>=COMMENT && LA1_1<=CONCURRENT)||(LA1_1>=CONNECTION && LA1_1<=CONSISTENT)||(LA1_1>=CONTAINS && LA1_1<=CONTEXT)||LA1_1==CONTRIBUTORS||(LA1_1>=CPU && LA1_1<=CREATE)||LA1_1==CUBE||LA1_1==DATA||(LA1_1>=DATAFILE && LA1_1<=DATETIME)||LA1_1==DAY||LA1_1==DEALLOCATE||LA1_1==DEFINER||(LA1_1>=DELAY_KEY_WRITE && LA1_1<=DELETE)||LA1_1==DES_KEY_FILE||(LA1_1>=DIRECTORY && LA1_1<=DISK)||LA1_1==DO||LA1_1==DROP||(LA1_1>=DUMPFILE && LA1_1<=DYNAMIC)||LA1_1==ENABLE||(LA1_1>=END && LA1_1<=ENUM)||(LA1_1>=ERRORS && LA1_1<=ESCAPE)||(LA1_1>=EVENT && LA1_1<=EVERY)||LA1_1==EXECUTE||(LA1_1>=EXPANSION && LA1_1<=EXTENT_SIZE)||(LA1_1>=FAST && LA1_1<=FAULTS)||(LA1_1>=FIELDS && LA1_1<=FIXED)||LA1_1==FLUSH||(LA1_1>=FOUND && LA1_1<=FRAC_SECOND)||LA1_1==FULL||(LA1_1>=FUNCTION && LA1_1<=GLOBAL)||LA1_1==GRANTS||LA1_1==GROUP||(LA1_1>=HANDLER && LA1_1<=HASH)||LA1_1==HELP||(LA1_1>=HOST && LA1_1<=HOUR)||(LA1_1>=ID && LA1_1<=IDENTIFIED)||LA1_1==IMPORT||LA1_1==INDEXES||LA1_1==INITIAL_SIZE||LA1_1==INNOBASE||(LA1_1>=INSERT && LA1_1<=INSTALL)||(LA1_1>=INVOKER && LA1_1<=IPC)||(LA1_1>=ISOLATION && LA1_1<=ISSUER)||LA1_1==KEY_BLOCK_SIZE||(LA1_1>=LABEL && LA1_1<=LAST)||LA1_1==LEAVES||LA1_1==LESS||LA1_1==LEVEL||(LA1_1>=LINESTRING && LA1_1<=LIST)||LA1_1==LOCAL||(LA1_1>=LOCK && LA1_1<=LOGFILE)||LA1_1==LOGS||(LA1_1>=LPAREN && LA1_1<=MASTER_SSL_KEY)||LA1_1==MASTER_USER||(LA1_1>=MAX_CONNECTIONS_PER_HOUR && LA1_1<=MEDIUM)||(LA1_1>=MEMORY && LA1_1<=MICROSECOND)||LA1_1==MIGRATE||LA1_1==MINUTE||LA1_1==MIN_ROWS||LA1_1==MODE||LA1_1==MODIFY||LA1_1==MONTH||(LA1_1>=MULTILINESTRING && LA1_1<=MUTEX)||(LA1_1>=NAME && LA1_1<=NATIONAL)||(LA1_1>=NCHAR && LA1_1<=NONE)||LA1_1==NO_WAIT||(LA1_1>=NVARCHAR && LA1_1<=OLD_PASSWORD)||LA1_1==ONE||(LA1_1>=ONE_SHOT && LA1_1<=OPEN)||LA1_1==OPTIONS||(LA1_1>=OWNER && LA1_1<=PLUGINS)||(LA1_1>=POINT && LA1_1<=PORT)||(LA1_1>=PREPARE && LA1_1<=PREV)||LA1_1==PRIVILEGES||(LA1_1>=PROCESS && LA1_1<=PROFILES)||(LA1_1>=QUARTER && LA1_1<=QUICK)||(LA1_1>=REBUILD && LA1_1<=REDUNDANT)||(LA1_1>=RELAY_LOG_FILE && LA1_1<=REPAIR)||LA1_1==REPEATABLE||LA1_1==REPLICATION||(LA1_1>=RESET && LA1_1<=RESTORE)||LA1_1==RESUME||LA1_1==RETURNS||(LA1_1>=ROLLBACK && LA1_1<=ROW_FORMAT)||(LA1_1>=RTREE && LA1_1<=SCHEDULE)||LA1_1==SECOND||(LA1_1>=SECURITY && LA1_1<=SELECT)||(LA1_1>=SERIAL && LA1_1<=SESSION)||(LA1_1>=SET && LA1_1<=SLAVE)||(LA1_1>=SNAPSHOT && LA1_1<=SOCKET)||(LA1_1>=SONAME && LA1_1<=SOURCE)||(LA1_1>=SQL_BUFFER_RESULT && LA1_1<=SQL_CACHE)||LA1_1==SQL_NO_CACHE||LA1_1==SQL_THREAD||LA1_1==START||(LA1_1>=STARTS && LA1_1<=STATUS)||(LA1_1>=STOP && LA1_1<=STORAGE)||(LA1_1>=STRING_KEYWORD && LA1_1<=SUBPARTITIONS)||(LA1_1>=SUPER && LA1_1<=SWITCHES)||(LA1_1>=TABLES && LA1_1<=TEMPTABLE)||(LA1_1>=TEXT && LA1_1<=THAN)||(LA1_1>=TIME && LA1_1<=TIMESTAMP_DIFF)||(LA1_1>=TRANSACTION && LA1_1<=TRANSACTIONAL)||LA1_1==TRIGGERS||(LA1_1>=TRUNCATE && LA1_1<=UNDEFINED)||(LA1_1>=UNDOFILE && LA1_1<=UNINSTALL)||(LA1_1>=UNKNOWN && LA1_1<=UNLOCK)||(LA1_1>=UNTIL && LA1_1<=UPGRADE)||LA1_1==USER||LA1_1==USE_FRM||LA1_1==VALUE||LA1_1==VARIABLES||(LA1_1>=VIEW && LA1_1<=WEEK)||(LA1_1>=WORK && LA1_1<=WRAPPER)||(LA1_1>=X509 && LA1_1<=XA)||LA1_1==YEAR))
					{
						alt1 = 1;
					}


				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:41:22: SEMI stmts+= statement
					{
					DebugLocation(41, 22);
					SEMI1=(IToken)Match(input,SEMI,Follow._SEMI_in_statement_list127); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI1);

					DebugLocation(41, 32);
					PushFollow(Follow._statement_in_statement_list131);
					stmts=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(stmts.Tree);
					if (list_stmts==null) list_stmts=new List<object>();
					list_stmts.Add(stmts.Tree);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(41, 46);
			// MySQL51Parser.g3:41:46: ( SEMI )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==SEMI))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:41:46: SEMI
					{
					DebugLocation(41, 46);
					SEMI2=(IToken)Match(input,SEMI,Follow._SEMI_in_statement_list135); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI2);


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(41, 52);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_statement_list138); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: stmts
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: stmts
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"token stmts",list_stmts);
			root_0 = (object)adaptor.Nil();
			// 42:3: -> ( $stmts)+
			{
				DebugLocation(42, 7);
				if (!(stream_stmts.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmts.HasNext )
				{
					DebugLocation(42, 7);
					adaptor.AddChild(root_0, stream_stmts.NextTree());

				}
				stream_stmts.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 1);
			LeaveRule("statement_list", 1);
			LeaveRule_statement_list();
		}
		DebugLocation(43, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	private sealed partial class statement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statement_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// MySQL51Parser.g3:45:1: statement options {backtrack=true; memoize=true; } : ( select | do_stmt | show_stmt | explain_stmt | insert | update | delete | transaction | COMMENT_RULE | create_table | create_database | drop_database | drop_event | drop_routine | drop_index | drop_logfile | drop_server | drop_table | drop_trigger | drop_view | rename_database | rename_table | truncate_table | begin_end_stmt ) ;
	[GrammarRule("statement")]
	private MySQL51Parser.statement_return statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		TraceIn("statement", 2);
		MySQL51Parser.statement_return retval = new MySQL51Parser.statement_return(this);
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;
		object root_0 = default(object);

		IToken COMMENT_RULE12 = default(IToken);
		MySQL51Parser.select_return select4 = default(MySQL51Parser.select_return);
		MySQL51Parser.do_stmt_return do_stmt5 = default(MySQL51Parser.do_stmt_return);
		MySQL51Parser.show_stmt_return show_stmt6 = default(MySQL51Parser.show_stmt_return);
		MySQL51Parser.explain_stmt_return explain_stmt7 = default(MySQL51Parser.explain_stmt_return);
		MySQL51Parser.insert_return insert8 = default(MySQL51Parser.insert_return);
		MySQL51Parser.update_return update9 = default(MySQL51Parser.update_return);
		MySQL51Parser.delete_return delete10 = default(MySQL51Parser.delete_return);
		MySQL51Parser.transaction_return transaction11 = default(MySQL51Parser.transaction_return);
		MySQL51Parser.create_table_return create_table13 = default(MySQL51Parser.create_table_return);
		MySQL51Parser.create_database_return create_database14 = default(MySQL51Parser.create_database_return);
		MySQL51Parser.drop_database_return drop_database15 = default(MySQL51Parser.drop_database_return);
		MySQL51Parser.drop_event_return drop_event16 = default(MySQL51Parser.drop_event_return);
		MySQL51Parser.drop_routine_return drop_routine17 = default(MySQL51Parser.drop_routine_return);
		MySQL51Parser.drop_index_return drop_index18 = default(MySQL51Parser.drop_index_return);
		MySQL51Parser.drop_logfile_return drop_logfile19 = default(MySQL51Parser.drop_logfile_return);
		MySQL51Parser.drop_server_return drop_server20 = default(MySQL51Parser.drop_server_return);
		MySQL51Parser.drop_table_return drop_table21 = default(MySQL51Parser.drop_table_return);
		MySQL51Parser.drop_trigger_return drop_trigger22 = default(MySQL51Parser.drop_trigger_return);
		MySQL51Parser.drop_view_return drop_view23 = default(MySQL51Parser.drop_view_return);
		MySQL51Parser.rename_database_return rename_database24 = default(MySQL51Parser.rename_database_return);
		MySQL51Parser.rename_table_return rename_table25 = default(MySQL51Parser.rename_table_return);
		MySQL51Parser.truncate_table_return truncate_table26 = default(MySQL51Parser.truncate_table_return);
		MySQL51Parser.begin_end_stmt_return begin_end_stmt27 = default(MySQL51Parser.begin_end_stmt_return);

		object COMMENT_RULE12_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(45, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }
			// MySQL51Parser.g3:46:2: ( ( select | do_stmt | show_stmt | explain_stmt | insert | update | delete | transaction | COMMENT_RULE | create_table | create_database | drop_database | drop_event | drop_routine | drop_index | drop_logfile | drop_server | drop_table | drop_trigger | drop_view | rename_database | rename_table | truncate_table | begin_end_stmt ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:46:4: ( select | do_stmt | show_stmt | explain_stmt | insert | update | delete | transaction | COMMENT_RULE | create_table | create_database | drop_database | drop_event | drop_routine | drop_index | drop_logfile | drop_server | drop_table | drop_trigger | drop_view | rename_database | rename_table | truncate_table | begin_end_stmt )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(46, 4);
			// MySQL51Parser.g3:46:4: ( select | do_stmt | show_stmt | explain_stmt | insert | update | delete | transaction | COMMENT_RULE | create_table | create_database | drop_database | drop_event | drop_routine | drop_index | drop_logfile | drop_server | drop_table | drop_trigger | drop_view | rename_database | rename_table | truncate_table | begin_end_stmt )
			int alt3=24;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			try
			{
				alt3 = dfa3.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:46:6: select
				{
				DebugLocation(46, 6);
				PushFollow(Follow._select_in_statement173);
				select4=select();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:47:5: do_stmt
				{
				DebugLocation(47, 5);
				PushFollow(Follow._do_stmt_in_statement179);
				do_stmt5=do_stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, do_stmt5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:48:5: show_stmt
				{
				DebugLocation(48, 5);
				PushFollow(Follow._show_stmt_in_statement185);
				show_stmt6=show_stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, show_stmt6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:49:5: explain_stmt
				{
				DebugLocation(49, 5);
				PushFollow(Follow._explain_stmt_in_statement191);
				explain_stmt7=explain_stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explain_stmt7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:50:5: insert
				{
				DebugLocation(50, 5);
				PushFollow(Follow._insert_in_statement197);
				insert8=insert();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insert8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:51:5: update
				{
				DebugLocation(51, 5);
				PushFollow(Follow._update_in_statement203);
				update9=update();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, update9.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:52:5: delete
				{
				DebugLocation(52, 5);
				PushFollow(Follow._delete_in_statement209);
				delete10=delete();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delete10.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:53:5: transaction
				{
				DebugLocation(53, 5);
				PushFollow(Follow._transaction_in_statement215);
				transaction11=transaction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, transaction11.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:54:5: COMMENT_RULE
				{
				DebugLocation(54, 5);
				COMMENT_RULE12=(IToken)Match(input,COMMENT_RULE,Follow._COMMENT_RULE_in_statement221); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMENT_RULE12_tree = (object)adaptor.Create(COMMENT_RULE12);
				adaptor.AddChild(root_0, COMMENT_RULE12_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:55:5: create_table
				{
				DebugLocation(55, 5);
				PushFollow(Follow._create_table_in_statement227);
				create_table13=create_table();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_table13.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:56:29: create_database
				{
				DebugLocation(56, 29);
				PushFollow(Follow._create_database_in_statement236);
				create_database14=create_database();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_database14.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:57:5: drop_database
				{
				DebugLocation(57, 5);
				PushFollow(Follow._drop_database_in_statement244);
				drop_database15=drop_database();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_database15.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:58:5: drop_event
				{
				DebugLocation(58, 5);
				PushFollow(Follow._drop_event_in_statement250);
				drop_event16=drop_event();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_event16.Tree);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:59:5: drop_routine
				{
				DebugLocation(59, 5);
				PushFollow(Follow._drop_routine_in_statement256);
				drop_routine17=drop_routine();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_routine17.Tree);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:60:5: drop_index
				{
				DebugLocation(60, 5);
				PushFollow(Follow._drop_index_in_statement262);
				drop_index18=drop_index();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_index18.Tree);

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:61:5: drop_logfile
				{
				DebugLocation(61, 5);
				PushFollow(Follow._drop_logfile_in_statement268);
				drop_logfile19=drop_logfile();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_logfile19.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:62:5: drop_server
				{
				DebugLocation(62, 5);
				PushFollow(Follow._drop_server_in_statement274);
				drop_server20=drop_server();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_server20.Tree);

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:63:5: drop_table
				{
				DebugLocation(63, 5);
				PushFollow(Follow._drop_table_in_statement280);
				drop_table21=drop_table();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table21.Tree);

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// MySQL51Parser.g3:64:5: drop_trigger
				{
				DebugLocation(64, 5);
				PushFollow(Follow._drop_trigger_in_statement286);
				drop_trigger22=drop_trigger();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_trigger22.Tree);

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// MySQL51Parser.g3:65:5: drop_view
				{
				DebugLocation(65, 5);
				PushFollow(Follow._drop_view_in_statement292);
				drop_view23=drop_view();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view23.Tree);

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// MySQL51Parser.g3:66:5: rename_database
				{
				DebugLocation(66, 5);
				PushFollow(Follow._rename_database_in_statement298);
				rename_database24=rename_database();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rename_database24.Tree);

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// MySQL51Parser.g3:67:5: rename_table
				{
				DebugLocation(67, 5);
				PushFollow(Follow._rename_table_in_statement304);
				rename_table25=rename_table();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rename_table25.Tree);

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// MySQL51Parser.g3:68:5: truncate_table
				{
				DebugLocation(68, 5);
				PushFollow(Follow._truncate_table_in_statement310);
				truncate_table26=truncate_table();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncate_table26.Tree);

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// MySQL51Parser.g3:69:5: begin_end_stmt
				{
				DebugLocation(69, 5);
				PushFollow(Follow._begin_end_stmt_in_statement316);
				begin_end_stmt27=begin_end_stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, begin_end_stmt27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 2, statement_StartIndex); }
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	private sealed partial class begin_end_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public begin_end_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_begin_end_stmt();
	partial void LeaveRule_begin_end_stmt();

	// $ANTLR start "begin_end_stmt"
	// MySQL51Parser.g3:75:1: begin_end_stmt : ( ident COLON )? BEGIN ( declare_stmt )* statement_list END ident ;
	[GrammarRule("begin_end_stmt")]
	private MySQL51Parser.begin_end_stmt_return begin_end_stmt()
	{
		EnterRule_begin_end_stmt();
		EnterRule("begin_end_stmt", 3);
		TraceIn("begin_end_stmt", 3);
		MySQL51Parser.begin_end_stmt_return retval = new MySQL51Parser.begin_end_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COLON29 = default(IToken);
		IToken BEGIN30 = default(IToken);
		IToken END33 = default(IToken);
		MySQL51Parser.ident_return ident28 = default(MySQL51Parser.ident_return);
		MySQL51Parser.declare_stmt_return declare_stmt31 = default(MySQL51Parser.declare_stmt_return);
		MySQL51Parser.statement_list_return statement_list32 = default(MySQL51Parser.statement_list_return);
		MySQL51Parser.ident_return ident34 = default(MySQL51Parser.ident_return);

		object COLON29_tree = default(object);
		object BEGIN30_tree = default(object);
		object END33_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "begin_end_stmt");
		DebugLocation(75, 1);
		try
		{
			// MySQL51Parser.g3:76:2: ( ( ident COLON )? BEGIN ( declare_stmt )* statement_list END ident )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:76:4: ( ident COLON )? BEGIN ( declare_stmt )* statement_list END ident
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 4);
			// MySQL51Parser.g3:76:4: ( ident COLON )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==ACTION||(LA4_0>=ADDDATE && LA4_0<=ALGORITHM)||LA4_0==ANY||LA4_0==ASCII||(LA4_0>=AT && LA4_0<=BACKUP)||(LA4_0>=BINLOG && LA4_0<=BIT)||(LA4_0>=BLOCK && LA4_0<=BOOLEAN)||LA4_0==BTREE||(LA4_0>=BYTE && LA4_0<=CACHE)||LA4_0==CASCADED||LA4_0==CHAIN||LA4_0==CHANGED||LA4_0==CHARSET||(LA4_0>=CHECKSUM && LA4_0<=CODE)||LA4_0==COLLATION||LA4_0==COLUMNS||LA4_0==COMMENT||(LA4_0>=COMMIT && LA4_0<=CONCURRENT)||(LA4_0>=CONNECTION && LA4_0<=CONSISTENT)||(LA4_0>=CONTAINS && LA4_0<=CONTEXT)||LA4_0==CONTRIBUTORS||LA4_0==CPU||LA4_0==CUBE||LA4_0==DATA||(LA4_0>=DATAFILE && LA4_0<=DATETIME)||LA4_0==DAY||LA4_0==DEALLOCATE||LA4_0==DEFINER||LA4_0==DELAY_KEY_WRITE||LA4_0==DES_KEY_FILE||(LA4_0>=DIRECTORY && LA4_0<=DISK)||LA4_0==DO||(LA4_0>=DUMPFILE && LA4_0<=DYNAMIC)||LA4_0==ENABLE||(LA4_0>=END && LA4_0<=ENUM)||(LA4_0>=ERRORS && LA4_0<=ESCAPE)||(LA4_0>=EVENT && LA4_0<=EVERY)||LA4_0==EXECUTE||LA4_0==EXPANSION||(LA4_0>=EXTENDED && LA4_0<=EXTENT_SIZE)||(LA4_0>=FAST && LA4_0<=FAULTS)||(LA4_0>=FIELDS && LA4_0<=FIXED)||LA4_0==FLUSH||(LA4_0>=FOUND && LA4_0<=FRAC_SECOND)||LA4_0==FULL||(LA4_0>=FUNCTION && LA4_0<=GLOBAL)||LA4_0==GRANTS||LA4_0==GROUP||(LA4_0>=HANDLER && LA4_0<=HASH)||LA4_0==HELP||(LA4_0>=HOST && LA4_0<=HOUR)||(LA4_0>=ID && LA4_0<=IDENTIFIED)||LA4_0==IMPORT||LA4_0==INDEXES||LA4_0==INITIAL_SIZE||LA4_0==INNOBASE||(LA4_0>=INSERT_METHOD && LA4_0<=INSTALL)||(LA4_0>=INVOKER && LA4_0<=IPC)||(LA4_0>=ISOLATION && LA4_0<=ISSUER)||LA4_0==KEY_BLOCK_SIZE||(LA4_0>=LABEL && LA4_0<=LAST)||LA4_0==LEAVES||LA4_0==LESS||LA4_0==LEVEL||(LA4_0>=LINESTRING && LA4_0<=LIST)||LA4_0==LOCAL||(LA4_0>=LOCKS && LA4_0<=LOGFILE)||LA4_0==LOGS||(LA4_0>=MASTER && LA4_0<=MASTER_SSL_KEY)||LA4_0==MASTER_USER||(LA4_0>=MAX_CONNECTIONS_PER_HOUR && LA4_0<=MEDIUM)||(LA4_0>=MEMORY && LA4_0<=MICROSECOND)||LA4_0==MIGRATE||LA4_0==MINUTE||LA4_0==MIN_ROWS||LA4_0==MODE||LA4_0==MODIFY||LA4_0==MONTH||(LA4_0>=MULTILINESTRING && LA4_0<=MUTEX)||(LA4_0>=NAME && LA4_0<=NATIONAL)||(LA4_0>=NCHAR && LA4_0<=NONE)||LA4_0==NO_WAIT||(LA4_0>=NVARCHAR && LA4_0<=OLD_PASSWORD)||LA4_0==ONE||(LA4_0>=ONE_SHOT && LA4_0<=OPEN)||LA4_0==OPTIONS||(LA4_0>=OWNER && LA4_0<=PLUGINS)||(LA4_0>=POINT && LA4_0<=PORT)||(LA4_0>=PREPARE && LA4_0<=PREV)||LA4_0==PRIVILEGES||(LA4_0>=PROCESS && LA4_0<=PROFILES)||(LA4_0>=QUARTER && LA4_0<=QUICK)||(LA4_0>=REBUILD && LA4_0<=REDUNDANT)||(LA4_0>=RELAY_LOG_FILE && LA4_0<=RELAY_THREAD)||(LA4_0>=RELOAD && LA4_0<=REMOVE)||(LA4_0>=REORGANIZE && LA4_0<=REPAIR)||LA4_0==REPEATABLE||LA4_0==REPLICATION||(LA4_0>=RESET && LA4_0<=RESTORE)||LA4_0==RESUME||LA4_0==RETURNS||(LA4_0>=ROLLBACK && LA4_0<=ROW_FORMAT)||(LA4_0>=RTREE && LA4_0<=SCHEDULE)||LA4_0==SECOND||LA4_0==SECURITY||(LA4_0>=SERIAL && LA4_0<=SESSION)||LA4_0==SHARE||(LA4_0>=SHUTDOWN && LA4_0<=SLAVE)||(LA4_0>=SNAPSHOT && LA4_0<=SOCKET)||(LA4_0>=SONAME && LA4_0<=SOURCE)||(LA4_0>=SQL_BUFFER_RESULT && LA4_0<=SQL_CACHE)||LA4_0==SQL_NO_CACHE||LA4_0==SQL_THREAD||LA4_0==START||(LA4_0>=STARTS && LA4_0<=STATUS)||(LA4_0>=STOP && LA4_0<=STORAGE)||(LA4_0>=STRING_KEYWORD && LA4_0<=SUBPARTITIONS)||(LA4_0>=SUPER && LA4_0<=SWITCHES)||(LA4_0>=TABLES && LA4_0<=TEMPTABLE)||(LA4_0>=TEXT && LA4_0<=THAN)||(LA4_0>=TIME && LA4_0<=TIMESTAMP_DIFF)||(LA4_0>=TRANSACTION && LA4_0<=TRANSACTIONAL)||LA4_0==TRIGGERS||(LA4_0>=TRUNCATE && LA4_0<=UNDEFINED)||(LA4_0>=UNDOFILE && LA4_0<=UNINSTALL)||LA4_0==UNKNOWN||LA4_0==UNTIL||LA4_0==UPGRADE||LA4_0==USER||LA4_0==USE_FRM||LA4_0==VALUE||LA4_0==VARIABLES||(LA4_0>=VIEW && LA4_0<=WEEK)||(LA4_0>=WORK && LA4_0<=WRAPPER)||(LA4_0>=X509 && LA4_0<=XA)||LA4_0==YEAR))
			{
				alt4 = 1;
			}
			else if ((LA4_0==BEGIN))
			{
				int LA4_2 = input.LA(2);

				if ((LA4_2==COLON))
				{
					alt4 = 1;
				}
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:76:6: ident COLON
				{
				DebugLocation(76, 6);
				PushFollow(Follow._ident_in_begin_end_stmt335);
				ident28=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident28.Tree);
				DebugLocation(76, 12);
				COLON29=(IToken)Match(input,COLON,Follow._COLON_in_begin_end_stmt337); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON29_tree = (object)adaptor.Create(COLON29);
				adaptor.AddChild(root_0, COLON29_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(76, 21);
			BEGIN30=(IToken)Match(input,BEGIN,Follow._BEGIN_in_begin_end_stmt342); if (state.failed) return retval;
			if (state.backtracking == 0) {
			BEGIN30_tree = (object)adaptor.Create(BEGIN30);
			adaptor.AddChild(root_0, BEGIN30_tree);
			}
			DebugLocation(76, 27);
			// MySQL51Parser.g3:76:27: ( declare_stmt )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==DECLARE))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:76:27: declare_stmt
					{
					DebugLocation(76, 27);
					PushFollow(Follow._declare_stmt_in_begin_end_stmt344);
					declare_stmt31=declare_stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declare_stmt31.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(76, 41);
			PushFollow(Follow._statement_list_in_begin_end_stmt347);
			statement_list32=statement_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list32.Tree);
			DebugLocation(76, 56);
			END33=(IToken)Match(input,END,Follow._END_in_begin_end_stmt349); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END33_tree = (object)adaptor.Create(END33);
			adaptor.AddChild(root_0, END33_tree);
			}
			DebugLocation(76, 60);
			PushFollow(Follow._ident_in_begin_end_stmt351);
			ident34=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident34.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("begin_end_stmt", 3);
			LeaveRule("begin_end_stmt", 3);
			LeaveRule_begin_end_stmt();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "begin_end_stmt"); }
		return retval;

	}
	// $ANTLR end "begin_end_stmt"

	private sealed partial class declare_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public declare_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_declare_stmt();
	partial void LeaveRule_declare_stmt();

	// $ANTLR start "declare_stmt"
	// MySQL51Parser.g3:79:1: declare_stmt : DECLARE ident ( COMMA ident )* data_type ;
	[GrammarRule("declare_stmt")]
	private MySQL51Parser.declare_stmt_return declare_stmt()
	{
		EnterRule_declare_stmt();
		EnterRule("declare_stmt", 4);
		TraceIn("declare_stmt", 4);
		MySQL51Parser.declare_stmt_return retval = new MySQL51Parser.declare_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DECLARE35 = default(IToken);
		IToken COMMA37 = default(IToken);
		MySQL51Parser.ident_return ident36 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident38 = default(MySQL51Parser.ident_return);
		MySQL51Parser.data_type_return data_type39 = default(MySQL51Parser.data_type_return);

		object DECLARE35_tree = default(object);
		object COMMA37_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "declare_stmt");
		DebugLocation(79, 1);
		try
		{
			// MySQL51Parser.g3:80:2: ( DECLARE ident ( COMMA ident )* data_type )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:80:4: DECLARE ident ( COMMA ident )* data_type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(80, 4);
			DECLARE35=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_stmt363); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECLARE35_tree = (object)adaptor.Create(DECLARE35);
			adaptor.AddChild(root_0, DECLARE35_tree);
			}
			DebugLocation(80, 12);
			PushFollow(Follow._ident_in_declare_stmt365);
			ident36=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident36.Tree);
			DebugLocation(80, 18);
			// MySQL51Parser.g3:80:18: ( COMMA ident )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==COMMA))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:80:20: COMMA ident
					{
					DebugLocation(80, 20);
					COMMA37=(IToken)Match(input,COMMA,Follow._COMMA_in_declare_stmt369); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA37_tree = (object)adaptor.Create(COMMA37);
					adaptor.AddChild(root_0, COMMA37_tree);
					}
					DebugLocation(80, 26);
					PushFollow(Follow._ident_in_declare_stmt371);
					ident38=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident38.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(80, 35);
			PushFollow(Follow._data_type_in_declare_stmt376);
			data_type39=data_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, data_type39.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_stmt", 4);
			LeaveRule("declare_stmt", 4);
			LeaveRule_declare_stmt();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_stmt"); }
		return retval;

	}
	// $ANTLR end "declare_stmt"

	private sealed partial class create_database_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_database_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_database();
	partial void LeaveRule_create_database();

	// $ANTLR start "create_database"
	// MySQL51Parser.g3:83:1: create_database : CREATE ( DATABASE | SCHEMA ) ( IF NOT EXISTS )? ident ( create_specification )* -> ^( CREATE DATABASE ident ) ;
	[GrammarRule("create_database")]
	private MySQL51Parser.create_database_return create_database()
	{
		EnterRule_create_database();
		EnterRule("create_database", 5);
		TraceIn("create_database", 5);
		MySQL51Parser.create_database_return retval = new MySQL51Parser.create_database_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CREATE40 = default(IToken);
		IToken DATABASE41 = default(IToken);
		IToken SCHEMA42 = default(IToken);
		IToken IF43 = default(IToken);
		IToken NOT44 = default(IToken);
		IToken EXISTS45 = default(IToken);
		MySQL51Parser.ident_return ident46 = default(MySQL51Parser.ident_return);
		MySQL51Parser.create_specification_return create_specification47 = default(MySQL51Parser.create_specification_return);

		object CREATE40_tree = default(object);
		object DATABASE41_tree = default(object);
		object SCHEMA42_tree = default(object);
		object IF43_tree = default(object);
		object NOT44_tree = default(object);
		object EXISTS45_tree = default(object);
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_DATABASE=new RewriteRuleITokenStream(adaptor,"token DATABASE");
		RewriteRuleITokenStream stream_SCHEMA=new RewriteRuleITokenStream(adaptor,"token SCHEMA");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_create_specification=new RewriteRuleSubtreeStream(adaptor,"rule create_specification");
		try { DebugEnterRule(GrammarFileName, "create_database");
		DebugLocation(83, 1);
		try
		{
			// MySQL51Parser.g3:84:2: ( CREATE ( DATABASE | SCHEMA ) ( IF NOT EXISTS )? ident ( create_specification )* -> ^( CREATE DATABASE ident ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:84:4: CREATE ( DATABASE | SCHEMA ) ( IF NOT EXISTS )? ident ( create_specification )*
			{
			DebugLocation(84, 4);
			CREATE40=(IToken)Match(input,CREATE,Follow._CREATE_in_create_database387); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE40);

			DebugLocation(84, 11);
			// MySQL51Parser.g3:84:11: ( DATABASE | SCHEMA )
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==DATABASE))
			{
				alt7 = 1;
			}
			else if ((LA7_0==SCHEMA))
			{
				alt7 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:84:13: DATABASE
				{
				DebugLocation(84, 13);
				DATABASE41=(IToken)Match(input,DATABASE,Follow._DATABASE_in_create_database391); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATABASE.Add(DATABASE41);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:84:24: SCHEMA
				{
				DebugLocation(84, 24);
				SCHEMA42=(IToken)Match(input,SCHEMA,Follow._SCHEMA_in_create_database395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SCHEMA.Add(SCHEMA42);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(84, 33);
			// MySQL51Parser.g3:84:33: ( IF NOT EXISTS )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==IF))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:84:35: IF NOT EXISTS
				{
				DebugLocation(84, 35);
				IF43=(IToken)Match(input,IF,Follow._IF_in_create_database401); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF43);

				DebugLocation(84, 38);
				NOT44=(IToken)Match(input,NOT,Follow._NOT_in_create_database403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT44);

				DebugLocation(84, 42);
				EXISTS45=(IToken)Match(input,EXISTS,Follow._EXISTS_in_create_database405); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS45);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(84, 52);
			PushFollow(Follow._ident_in_create_database410);
			ident46=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident46.Tree);
			DebugLocation(84, 58);
			// MySQL51Parser.g3:84:58: ( create_specification )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==CHARACTER||LA9_0==COLLATE||LA9_0==DEFAULT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:84:58: create_specification
					{
					DebugLocation(84, 58);
					PushFollow(Follow._create_specification_in_create_database412);
					create_specification47=create_specification();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_create_specification.Add(create_specification47.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: CREATE, DATABASE, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 84:80: -> ^( CREATE DATABASE ident )
			{
				DebugLocation(84, 83);
				// MySQL51Parser.g3:84:83: ^( CREATE DATABASE ident )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(84, 85);
				root_1 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_1);

				DebugLocation(84, 92);
				adaptor.AddChild(root_1, stream_DATABASE.NextNode());
				DebugLocation(84, 101);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_database", 5);
			LeaveRule("create_database", 5);
			LeaveRule_create_database();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "create_database"); }
		return retval;

	}
	// $ANTLR end "create_database"

	private sealed partial class return_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public return_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_return_stmt();
	partial void LeaveRule_return_stmt();

	// $ANTLR start "return_stmt"
	// MySQL51Parser.g3:88:1: return_stmt : RETURN expr ;
	[GrammarRule("return_stmt")]
	private MySQL51Parser.return_stmt_return return_stmt()
	{
		EnterRule_return_stmt();
		EnterRule("return_stmt", 6);
		TraceIn("return_stmt", 6);
		MySQL51Parser.return_stmt_return retval = new MySQL51Parser.return_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RETURN48 = default(IToken);
		MySQL51Parser.expr_return expr49 = default(MySQL51Parser.expr_return);

		object RETURN48_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "return_stmt");
		DebugLocation(88, 1);
		try
		{
			// MySQL51Parser.g3:89:2: ( RETURN expr )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:89:4: RETURN expr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(89, 4);
			RETURN48=(IToken)Match(input,RETURN,Follow._RETURN_in_return_stmt436); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RETURN48_tree = (object)adaptor.Create(RETURN48);
			adaptor.AddChild(root_0, RETURN48_tree);
			}
			DebugLocation(89, 11);
			PushFollow(Follow._expr_in_return_stmt438);
			expr49=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_stmt", 6);
			LeaveRule("return_stmt", 6);
			LeaveRule_return_stmt();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "return_stmt"); }
		return retval;

	}
	// $ANTLR end "return_stmt"

	private sealed partial class do_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public do_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_do_stmt();
	partial void LeaveRule_do_stmt();

	// $ANTLR start "do_stmt"
	// MySQL51Parser.g3:92:1: do_stmt : DO exprList -> ^( DO exprList ) ;
	[GrammarRule("do_stmt")]
	private MySQL51Parser.do_stmt_return do_stmt()
	{
		EnterRule_do_stmt();
		EnterRule("do_stmt", 7);
		TraceIn("do_stmt", 7);
		MySQL51Parser.do_stmt_return retval = new MySQL51Parser.do_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DO50 = default(IToken);
		MySQL51Parser.exprList_return exprList51 = default(MySQL51Parser.exprList_return);

		object DO50_tree = default(object);
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		try { DebugEnterRule(GrammarFileName, "do_stmt");
		DebugLocation(92, 1);
		try
		{
			// MySQL51Parser.g3:92:9: ( DO exprList -> ^( DO exprList ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:92:11: DO exprList
			{
			DebugLocation(92, 11);
			DO50=(IToken)Match(input,DO,Follow._DO_in_do_stmt448); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DO.Add(DO50);

			DebugLocation(92, 14);
			PushFollow(Follow._exprList_in_do_stmt450);
			exprList51=exprList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_exprList.Add(exprList51.Tree);


			{
			// AST REWRITE
			// elements: DO, exprList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 92:24: -> ^( DO exprList )
			{
				DebugLocation(92, 27);
				// MySQL51Parser.g3:92:27: ^( DO exprList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(92, 29);
				root_1 = (object)adaptor.BecomeRoot(stream_DO.NextNode(), root_1);

				DebugLocation(92, 32);
				adaptor.AddChild(root_1, stream_exprList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("do_stmt", 7);
			LeaveRule("do_stmt", 7);
			LeaveRule_do_stmt();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "do_stmt"); }
		return retval;

	}
	// $ANTLR end "do_stmt"

	private sealed partial class show_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public show_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_show_stmt();
	partial void LeaveRule_show_stmt();

	// $ANTLR start "show_stmt"
	// MySQL51Parser.g3:95:1: show_stmt : ( SHOW -> ^( SHOW ) ) ( AUTHORS -> ^( $show_stmt ^( AUTHORS ) ) | BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) ) | CHARACTER SET ( like_or_where )? -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) ) | COLLATION ( like_or_where )? -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) ) | ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) ) | CONTRIBUTORS -> ^( $show_stmt ^( CONTRIBUTORS ) ) | CREATE DATABASE ident -> ^( $show_stmt ^( CREATE DATABASE ident ) ) | CREATE EVENT ident -> ^( $show_stmt ^( CREATE EVENT ident ) ) | CREATE FUNCTION ident -> ^( $show_stmt ^( CREATE FUNCTION ident ) ) | CREATE PROCEDURE ident -> ^( $show_stmt ^( CREATE PROCEDURE ident ) ) | CREATE TABLE simple_table_ref_no_alias -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) ) | CREATE TRIGGER ident -> ^( $show_stmt ^( CREATE TRIGGER ident ) ) | CREATE VIEW ident -> ^( $show_stmt ^( CREATE VIEW ident ) ) | DATABASES ( like_or_where )? -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) ) | ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX ) -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) ) | ( STORAGE )? ENGINES -> ^( $show_stmt ^( ENGINES ) ) | ERRORS ( limit )? -> ^( $show_stmt ^( ERRORS ( limit )? ) ) | ( FULL )? EVENTS -> ^( $show_stmt ^( EVENTS ( FULL )? ) ) | FUNCTION CODE ident -> ^( $show_stmt ^( CODE FUNCTION ident ) ) | FUNCTION STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) ) | GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN ) -> ^( $show_stmt ^( GRANTS $whom) ) | INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )? -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) ) | INNODB STATUS -> ^( $show_stmt ^( INNODB STATUS ) ) | OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) ) | PLUGINS -> ^( $show_stmt ^( PLUGINS ) ) | PROCEDURE CODE ident -> ^( $show_stmt ^( CODE PROCEDURE ident ) ) | PROCEDURE STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS PROCEDURE ident ) ) | PRIVILEGES -> ^( $show_stmt ^( PRIVILEGES ) ) | ( FULL )? PROCESSLIST -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) ) | PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) ) | PROFILES -> ^( $show_stmt ^( PROFILES ) ) | SCHEDULER STATUS -> ^( $show_stmt ^( STATUS SCHEDULER ) ) | optScopeModifier STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) ) | TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) ) | TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) ) | TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) ) | optScopeModifier VARIABLES ( like_or_where )? -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) ) | WARNINGS ( limit )? -> ^( $show_stmt ^( WARNINGS ( limit )? ) ) | SLAVE HOSTS -> ^( $show_stmt ^( SLAVE HOSTS ) ) | SLAVE STATUS -> ^( $show_stmt ^( SLAVE STATUS ) ) | MASTER STATUS -> ^( $show_stmt ^( MASTER STATUS ) ) | BINARY LOGS -> ^( $show_stmt ^( BINARY LOGS ) ) | MASTER LOGS -> ^( $show_stmt ^( MASTER LOGS ) ) ) ;
	[GrammarRule("show_stmt")]
	private MySQL51Parser.show_stmt_return show_stmt()
	{
		EnterRule_show_stmt();
		EnterRule("show_stmt", 8);
		TraceIn("show_stmt", 8);
		MySQL51Parser.show_stmt_return retval = new MySQL51Parser.show_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken logName = default(IToken);
		IToken what = default(IToken);
		IToken SHOW52 = default(IToken);
		IToken AUTHORS53 = default(IToken);
		IToken BINLOG54 = default(IToken);
		IToken EVENTS55 = default(IToken);
		IToken IN56 = default(IToken);
		IToken FROM57 = default(IToken);
		IToken INT_NUMBER58 = default(IToken);
		IToken CHARACTER60 = default(IToken);
		IToken SET61 = default(IToken);
		IToken COLLATION63 = default(IToken);
		IToken FULL65 = default(IToken);
		IToken COLUMNS66 = default(IToken);
		IToken FROM67 = default(IToken);
		IToken IN68 = default(IToken);
		IToken FROM70 = default(IToken);
		IToken IN71 = default(IToken);
		IToken CONTRIBUTORS74 = default(IToken);
		IToken CREATE75 = default(IToken);
		IToken DATABASE76 = default(IToken);
		IToken CREATE78 = default(IToken);
		IToken EVENT79 = default(IToken);
		IToken CREATE81 = default(IToken);
		IToken FUNCTION82 = default(IToken);
		IToken CREATE84 = default(IToken);
		IToken PROCEDURE85 = default(IToken);
		IToken CREATE87 = default(IToken);
		IToken TABLE88 = default(IToken);
		IToken CREATE90 = default(IToken);
		IToken TRIGGER91 = default(IToken);
		IToken CREATE93 = default(IToken);
		IToken VIEW94 = default(IToken);
		IToken DATABASES96 = default(IToken);
		IToken ENGINE98 = default(IToken);
		IToken INNODB99 = default(IToken);
		IToken STORAGE101 = default(IToken);
		IToken ENGINES102 = default(IToken);
		IToken ERRORS103 = default(IToken);
		IToken FULL105 = default(IToken);
		IToken EVENTS106 = default(IToken);
		IToken FUNCTION107 = default(IToken);
		IToken CODE108 = default(IToken);
		IToken FUNCTION110 = default(IToken);
		IToken STATUS111 = default(IToken);
		IToken GRANTS113 = default(IToken);
		IToken FOR114 = default(IToken);
		IToken LPAREN115 = default(IToken);
		IToken RPAREN116 = default(IToken);
		IToken INDEX_SYM117 = default(IToken);
		IToken FROM118 = default(IToken);
		IToken FROM120 = default(IToken);
		IToken IN121 = default(IToken);
		IToken INNODB123 = default(IToken);
		IToken STATUS124 = default(IToken);
		IToken OPEN125 = default(IToken);
		IToken TABLES126 = default(IToken);
		IToken FROM127 = default(IToken);
		IToken IN128 = default(IToken);
		IToken PLUGINS131 = default(IToken);
		IToken PROCEDURE132 = default(IToken);
		IToken CODE133 = default(IToken);
		IToken PROCEDURE135 = default(IToken);
		IToken STATUS136 = default(IToken);
		IToken PRIVILEGES138 = default(IToken);
		IToken FULL139 = default(IToken);
		IToken PROCESSLIST140 = default(IToken);
		IToken PROFILE141 = default(IToken);
		IToken FOR143 = default(IToken);
		IToken QUERY144 = default(IToken);
		IToken INT_NUMBER145 = default(IToken);
		IToken PROFILES147 = default(IToken);
		IToken SCHEDULER148 = default(IToken);
		IToken STATUS149 = default(IToken);
		IToken STATUS151 = default(IToken);
		IToken TABLE153 = default(IToken);
		IToken STATUS154 = default(IToken);
		IToken FROM155 = default(IToken);
		IToken IN156 = default(IToken);
		IToken TABLES159 = default(IToken);
		IToken FROM160 = default(IToken);
		IToken IN161 = default(IToken);
		IToken TRIGGERS164 = default(IToken);
		IToken FROM165 = default(IToken);
		IToken IN166 = default(IToken);
		IToken VARIABLES170 = default(IToken);
		IToken WARNINGS172 = default(IToken);
		IToken SLAVE174 = default(IToken);
		IToken HOSTS175 = default(IToken);
		IToken SLAVE176 = default(IToken);
		IToken STATUS177 = default(IToken);
		IToken MASTER178 = default(IToken);
		IToken STATUS179 = default(IToken);
		IToken BINARY180 = default(IToken);
		IToken LOGS181 = default(IToken);
		IToken MASTER182 = default(IToken);
		IToken LOGS183 = default(IToken);
		IToken whom = default(IToken);
		List<IToken> list_whom = null;
		MySQL51Parser.limit_return limit59 = default(MySQL51Parser.limit_return);
		MySQL51Parser.like_or_where_return like_or_where62 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.like_or_where_return like_or_where64 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias69 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.ident_return ident72 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where73 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident77 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident80 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident83 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident86 = default(MySQL51Parser.ident_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias89 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.ident_return ident92 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident95 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where97 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident100 = default(MySQL51Parser.ident_return);
		MySQL51Parser.limit_return limit104 = default(MySQL51Parser.limit_return);
		MySQL51Parser.ident_return ident109 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where112 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias119 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.ident_return ident122 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident129 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where130 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident134 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where137 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.show_profile_types_return show_profile_types142 = default(MySQL51Parser.show_profile_types_return);
		MySQL51Parser.limit_return limit146 = default(MySQL51Parser.limit_return);
		MySQL51Parser.optScopeModifier_return optScopeModifier150 = default(MySQL51Parser.optScopeModifier_return);
		MySQL51Parser.like_or_where_return like_or_where152 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident157 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where158 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident162 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where163 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.ident_return ident167 = default(MySQL51Parser.ident_return);
		MySQL51Parser.like_or_where_return like_or_where168 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.optScopeModifier_return optScopeModifier169 = default(MySQL51Parser.optScopeModifier_return);
		MySQL51Parser.like_or_where_return like_or_where171 = default(MySQL51Parser.like_or_where_return);
		MySQL51Parser.limit_return limit173 = default(MySQL51Parser.limit_return);

		object logName_tree = default(object);
		object what_tree = default(object);
		object SHOW52_tree = default(object);
		object AUTHORS53_tree = default(object);
		object BINLOG54_tree = default(object);
		object EVENTS55_tree = default(object);
		object IN56_tree = default(object);
		object FROM57_tree = default(object);
		object INT_NUMBER58_tree = default(object);
		object CHARACTER60_tree = default(object);
		object SET61_tree = default(object);
		object COLLATION63_tree = default(object);
		object FULL65_tree = default(object);
		object COLUMNS66_tree = default(object);
		object FROM67_tree = default(object);
		object IN68_tree = default(object);
		object FROM70_tree = default(object);
		object IN71_tree = default(object);
		object CONTRIBUTORS74_tree = default(object);
		object CREATE75_tree = default(object);
		object DATABASE76_tree = default(object);
		object CREATE78_tree = default(object);
		object EVENT79_tree = default(object);
		object CREATE81_tree = default(object);
		object FUNCTION82_tree = default(object);
		object CREATE84_tree = default(object);
		object PROCEDURE85_tree = default(object);
		object CREATE87_tree = default(object);
		object TABLE88_tree = default(object);
		object CREATE90_tree = default(object);
		object TRIGGER91_tree = default(object);
		object CREATE93_tree = default(object);
		object VIEW94_tree = default(object);
		object DATABASES96_tree = default(object);
		object ENGINE98_tree = default(object);
		object INNODB99_tree = default(object);
		object STORAGE101_tree = default(object);
		object ENGINES102_tree = default(object);
		object ERRORS103_tree = default(object);
		object FULL105_tree = default(object);
		object EVENTS106_tree = default(object);
		object FUNCTION107_tree = default(object);
		object CODE108_tree = default(object);
		object FUNCTION110_tree = default(object);
		object STATUS111_tree = default(object);
		object GRANTS113_tree = default(object);
		object FOR114_tree = default(object);
		object LPAREN115_tree = default(object);
		object RPAREN116_tree = default(object);
		object INDEX_SYM117_tree = default(object);
		object FROM118_tree = default(object);
		object FROM120_tree = default(object);
		object IN121_tree = default(object);
		object INNODB123_tree = default(object);
		object STATUS124_tree = default(object);
		object OPEN125_tree = default(object);
		object TABLES126_tree = default(object);
		object FROM127_tree = default(object);
		object IN128_tree = default(object);
		object PLUGINS131_tree = default(object);
		object PROCEDURE132_tree = default(object);
		object CODE133_tree = default(object);
		object PROCEDURE135_tree = default(object);
		object STATUS136_tree = default(object);
		object PRIVILEGES138_tree = default(object);
		object FULL139_tree = default(object);
		object PROCESSLIST140_tree = default(object);
		object PROFILE141_tree = default(object);
		object FOR143_tree = default(object);
		object QUERY144_tree = default(object);
		object INT_NUMBER145_tree = default(object);
		object PROFILES147_tree = default(object);
		object SCHEDULER148_tree = default(object);
		object STATUS149_tree = default(object);
		object STATUS151_tree = default(object);
		object TABLE153_tree = default(object);
		object STATUS154_tree = default(object);
		object FROM155_tree = default(object);
		object IN156_tree = default(object);
		object TABLES159_tree = default(object);
		object FROM160_tree = default(object);
		object IN161_tree = default(object);
		object TRIGGERS164_tree = default(object);
		object FROM165_tree = default(object);
		object IN166_tree = default(object);
		object VARIABLES170_tree = default(object);
		object WARNINGS172_tree = default(object);
		object SLAVE174_tree = default(object);
		object HOSTS175_tree = default(object);
		object SLAVE176_tree = default(object);
		object STATUS177_tree = default(object);
		object MASTER178_tree = default(object);
		object STATUS179_tree = default(object);
		object BINARY180_tree = default(object);
		object LOGS181_tree = default(object);
		object MASTER182_tree = default(object);
		object LOGS183_tree = default(object);
		object whom_tree = default(object);
		RewriteRuleITokenStream stream_SHOW=new RewriteRuleITokenStream(adaptor,"token SHOW");
		RewriteRuleITokenStream stream_AUTHORS=new RewriteRuleITokenStream(adaptor,"token AUTHORS");
		RewriteRuleITokenStream stream_BINLOG=new RewriteRuleITokenStream(adaptor,"token BINLOG");
		RewriteRuleITokenStream stream_EVENTS=new RewriteRuleITokenStream(adaptor,"token EVENTS");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_INT_NUMBER=new RewriteRuleITokenStream(adaptor,"token INT_NUMBER");
		RewriteRuleITokenStream stream_CHARACTER=new RewriteRuleITokenStream(adaptor,"token CHARACTER");
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COLLATION=new RewriteRuleITokenStream(adaptor,"token COLLATION");
		RewriteRuleITokenStream stream_FULL=new RewriteRuleITokenStream(adaptor,"token FULL");
		RewriteRuleITokenStream stream_COLUMNS=new RewriteRuleITokenStream(adaptor,"token COLUMNS");
		RewriteRuleITokenStream stream_CONTRIBUTORS=new RewriteRuleITokenStream(adaptor,"token CONTRIBUTORS");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_DATABASE=new RewriteRuleITokenStream(adaptor,"token DATABASE");
		RewriteRuleITokenStream stream_EVENT=new RewriteRuleITokenStream(adaptor,"token EVENT");
		RewriteRuleITokenStream stream_FUNCTION=new RewriteRuleITokenStream(adaptor,"token FUNCTION");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_TRIGGER=new RewriteRuleITokenStream(adaptor,"token TRIGGER");
		RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
		RewriteRuleITokenStream stream_DATABASES=new RewriteRuleITokenStream(adaptor,"token DATABASES");
		RewriteRuleITokenStream stream_ENGINE=new RewriteRuleITokenStream(adaptor,"token ENGINE");
		RewriteRuleITokenStream stream_INNODB=new RewriteRuleITokenStream(adaptor,"token INNODB");
		RewriteRuleITokenStream stream_STATUS=new RewriteRuleITokenStream(adaptor,"token STATUS");
		RewriteRuleITokenStream stream_MUTEX=new RewriteRuleITokenStream(adaptor,"token MUTEX");
		RewriteRuleITokenStream stream_STORAGE=new RewriteRuleITokenStream(adaptor,"token STORAGE");
		RewriteRuleITokenStream stream_ENGINES=new RewriteRuleITokenStream(adaptor,"token ENGINES");
		RewriteRuleITokenStream stream_ERRORS=new RewriteRuleITokenStream(adaptor,"token ERRORS");
		RewriteRuleITokenStream stream_CODE=new RewriteRuleITokenStream(adaptor,"token CODE");
		RewriteRuleITokenStream stream_GRANTS=new RewriteRuleITokenStream(adaptor,"token GRANTS");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_USER_HOST=new RewriteRuleITokenStream(adaptor,"token USER_HOST");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_CURRENT_USER=new RewriteRuleITokenStream(adaptor,"token CURRENT_USER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_INDEX_SYM=new RewriteRuleITokenStream(adaptor,"token INDEX_SYM");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_TABLES=new RewriteRuleITokenStream(adaptor,"token TABLES");
		RewriteRuleITokenStream stream_PLUGINS=new RewriteRuleITokenStream(adaptor,"token PLUGINS");
		RewriteRuleITokenStream stream_PRIVILEGES=new RewriteRuleITokenStream(adaptor,"token PRIVILEGES");
		RewriteRuleITokenStream stream_PROCESSLIST=new RewriteRuleITokenStream(adaptor,"token PROCESSLIST");
		RewriteRuleITokenStream stream_PROFILE=new RewriteRuleITokenStream(adaptor,"token PROFILE");
		RewriteRuleITokenStream stream_QUERY=new RewriteRuleITokenStream(adaptor,"token QUERY");
		RewriteRuleITokenStream stream_PROFILES=new RewriteRuleITokenStream(adaptor,"token PROFILES");
		RewriteRuleITokenStream stream_SCHEDULER=new RewriteRuleITokenStream(adaptor,"token SCHEDULER");
		RewriteRuleITokenStream stream_TRIGGERS=new RewriteRuleITokenStream(adaptor,"token TRIGGERS");
		RewriteRuleITokenStream stream_VARIABLES=new RewriteRuleITokenStream(adaptor,"token VARIABLES");
		RewriteRuleITokenStream stream_WARNINGS=new RewriteRuleITokenStream(adaptor,"token WARNINGS");
		RewriteRuleITokenStream stream_SLAVE=new RewriteRuleITokenStream(adaptor,"token SLAVE");
		RewriteRuleITokenStream stream_HOSTS=new RewriteRuleITokenStream(adaptor,"token HOSTS");
		RewriteRuleITokenStream stream_MASTER=new RewriteRuleITokenStream(adaptor,"token MASTER");
		RewriteRuleITokenStream stream_BINARY=new RewriteRuleITokenStream(adaptor,"token BINARY");
		RewriteRuleITokenStream stream_LOGS=new RewriteRuleITokenStream(adaptor,"token LOGS");
		RewriteRuleSubtreeStream stream_limit=new RewriteRuleSubtreeStream(adaptor,"rule limit");
		RewriteRuleSubtreeStream stream_like_or_where=new RewriteRuleSubtreeStream(adaptor,"rule like_or_where");
		RewriteRuleSubtreeStream stream_simple_table_ref_no_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_no_alias");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_show_profile_types=new RewriteRuleSubtreeStream(adaptor,"rule show_profile_types");
		RewriteRuleSubtreeStream stream_optScopeModifier=new RewriteRuleSubtreeStream(adaptor,"rule optScopeModifier");
		try { DebugEnterRule(GrammarFileName, "show_stmt");
		DebugLocation(95, 2);
		try
		{
			// MySQL51Parser.g3:96:3: ( ( SHOW -> ^( SHOW ) ) ( AUTHORS -> ^( $show_stmt ^( AUTHORS ) ) | BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) ) | CHARACTER SET ( like_or_where )? -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) ) | COLLATION ( like_or_where )? -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) ) | ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) ) | CONTRIBUTORS -> ^( $show_stmt ^( CONTRIBUTORS ) ) | CREATE DATABASE ident -> ^( $show_stmt ^( CREATE DATABASE ident ) ) | CREATE EVENT ident -> ^( $show_stmt ^( CREATE EVENT ident ) ) | CREATE FUNCTION ident -> ^( $show_stmt ^( CREATE FUNCTION ident ) ) | CREATE PROCEDURE ident -> ^( $show_stmt ^( CREATE PROCEDURE ident ) ) | CREATE TABLE simple_table_ref_no_alias -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) ) | CREATE TRIGGER ident -> ^( $show_stmt ^( CREATE TRIGGER ident ) ) | CREATE VIEW ident -> ^( $show_stmt ^( CREATE VIEW ident ) ) | DATABASES ( like_or_where )? -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) ) | ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX ) -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) ) | ( STORAGE )? ENGINES -> ^( $show_stmt ^( ENGINES ) ) | ERRORS ( limit )? -> ^( $show_stmt ^( ERRORS ( limit )? ) ) | ( FULL )? EVENTS -> ^( $show_stmt ^( EVENTS ( FULL )? ) ) | FUNCTION CODE ident -> ^( $show_stmt ^( CODE FUNCTION ident ) ) | FUNCTION STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) ) | GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN ) -> ^( $show_stmt ^( GRANTS $whom) ) | INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )? -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) ) | INNODB STATUS -> ^( $show_stmt ^( INNODB STATUS ) ) | OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) ) | PLUGINS -> ^( $show_stmt ^( PLUGINS ) ) | PROCEDURE CODE ident -> ^( $show_stmt ^( CODE PROCEDURE ident ) ) | PROCEDURE STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS PROCEDURE ident ) ) | PRIVILEGES -> ^( $show_stmt ^( PRIVILEGES ) ) | ( FULL )? PROCESSLIST -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) ) | PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) ) | PROFILES -> ^( $show_stmt ^( PROFILES ) ) | SCHEDULER STATUS -> ^( $show_stmt ^( STATUS SCHEDULER ) ) | optScopeModifier STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) ) | TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) ) | TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) ) | TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) ) | optScopeModifier VARIABLES ( like_or_where )? -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) ) | WARNINGS ( limit )? -> ^( $show_stmt ^( WARNINGS ( limit )? ) ) | SLAVE HOSTS -> ^( $show_stmt ^( SLAVE HOSTS ) ) | SLAVE STATUS -> ^( $show_stmt ^( SLAVE STATUS ) ) | MASTER STATUS -> ^( $show_stmt ^( MASTER STATUS ) ) | BINARY LOGS -> ^( $show_stmt ^( BINARY LOGS ) ) | MASTER LOGS -> ^( $show_stmt ^( MASTER LOGS ) ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:96:5: ( SHOW -> ^( SHOW ) ) ( AUTHORS -> ^( $show_stmt ^( AUTHORS ) ) | BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) ) | CHARACTER SET ( like_or_where )? -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) ) | COLLATION ( like_or_where )? -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) ) | ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) ) | CONTRIBUTORS -> ^( $show_stmt ^( CONTRIBUTORS ) ) | CREATE DATABASE ident -> ^( $show_stmt ^( CREATE DATABASE ident ) ) | CREATE EVENT ident -> ^( $show_stmt ^( CREATE EVENT ident ) ) | CREATE FUNCTION ident -> ^( $show_stmt ^( CREATE FUNCTION ident ) ) | CREATE PROCEDURE ident -> ^( $show_stmt ^( CREATE PROCEDURE ident ) ) | CREATE TABLE simple_table_ref_no_alias -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) ) | CREATE TRIGGER ident -> ^( $show_stmt ^( CREATE TRIGGER ident ) ) | CREATE VIEW ident -> ^( $show_stmt ^( CREATE VIEW ident ) ) | DATABASES ( like_or_where )? -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) ) | ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX ) -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) ) | ( STORAGE )? ENGINES -> ^( $show_stmt ^( ENGINES ) ) | ERRORS ( limit )? -> ^( $show_stmt ^( ERRORS ( limit )? ) ) | ( FULL )? EVENTS -> ^( $show_stmt ^( EVENTS ( FULL )? ) ) | FUNCTION CODE ident -> ^( $show_stmt ^( CODE FUNCTION ident ) ) | FUNCTION STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) ) | GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN ) -> ^( $show_stmt ^( GRANTS $whom) ) | INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )? -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) ) | INNODB STATUS -> ^( $show_stmt ^( INNODB STATUS ) ) | OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) ) | PLUGINS -> ^( $show_stmt ^( PLUGINS ) ) | PROCEDURE CODE ident -> ^( $show_stmt ^( CODE PROCEDURE ident ) ) | PROCEDURE STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS PROCEDURE ident ) ) | PRIVILEGES -> ^( $show_stmt ^( PRIVILEGES ) ) | ( FULL )? PROCESSLIST -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) ) | PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) ) | PROFILES -> ^( $show_stmt ^( PROFILES ) ) | SCHEDULER STATUS -> ^( $show_stmt ^( STATUS SCHEDULER ) ) | optScopeModifier STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) ) | TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) ) | TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) ) | TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) ) | optScopeModifier VARIABLES ( like_or_where )? -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) ) | WARNINGS ( limit )? -> ^( $show_stmt ^( WARNINGS ( limit )? ) ) | SLAVE HOSTS -> ^( $show_stmt ^( SLAVE HOSTS ) ) | SLAVE STATUS -> ^( $show_stmt ^( SLAVE STATUS ) ) | MASTER STATUS -> ^( $show_stmt ^( MASTER STATUS ) ) | BINARY LOGS -> ^( $show_stmt ^( BINARY LOGS ) ) | MASTER LOGS -> ^( $show_stmt ^( MASTER LOGS ) ) )
			{
			DebugLocation(96, 5);
			// MySQL51Parser.g3:96:5: ( SHOW -> ^( SHOW ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:96:6: SHOW
			{
			DebugLocation(96, 6);
			SHOW52=(IToken)Match(input,SHOW,Follow._SHOW_in_show_stmt473); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SHOW.Add(SHOW52);



			{
			// AST REWRITE
			// elements: SHOW
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 96:11: -> ^( SHOW )
			{
				DebugLocation(96, 14);
				// MySQL51Parser.g3:96:14: ^( SHOW )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(96, 16);
				root_1 = (object)adaptor.BecomeRoot(stream_SHOW.NextNode(), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(97, 5);
			// MySQL51Parser.g3:97:5: ( AUTHORS -> ^( $show_stmt ^( AUTHORS ) ) | BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) ) | CHARACTER SET ( like_or_where )? -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) ) | COLLATION ( like_or_where )? -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) ) | ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) ) | CONTRIBUTORS -> ^( $show_stmt ^( CONTRIBUTORS ) ) | CREATE DATABASE ident -> ^( $show_stmt ^( CREATE DATABASE ident ) ) | CREATE EVENT ident -> ^( $show_stmt ^( CREATE EVENT ident ) ) | CREATE FUNCTION ident -> ^( $show_stmt ^( CREATE FUNCTION ident ) ) | CREATE PROCEDURE ident -> ^( $show_stmt ^( CREATE PROCEDURE ident ) ) | CREATE TABLE simple_table_ref_no_alias -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) ) | CREATE TRIGGER ident -> ^( $show_stmt ^( CREATE TRIGGER ident ) ) | CREATE VIEW ident -> ^( $show_stmt ^( CREATE VIEW ident ) ) | DATABASES ( like_or_where )? -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) ) | ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX ) -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) ) | ( STORAGE )? ENGINES -> ^( $show_stmt ^( ENGINES ) ) | ERRORS ( limit )? -> ^( $show_stmt ^( ERRORS ( limit )? ) ) | ( FULL )? EVENTS -> ^( $show_stmt ^( EVENTS ( FULL )? ) ) | FUNCTION CODE ident -> ^( $show_stmt ^( CODE FUNCTION ident ) ) | FUNCTION STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) ) | GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN ) -> ^( $show_stmt ^( GRANTS $whom) ) | INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )? -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) ) | INNODB STATUS -> ^( $show_stmt ^( INNODB STATUS ) ) | OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) ) | PLUGINS -> ^( $show_stmt ^( PLUGINS ) ) | PROCEDURE CODE ident -> ^( $show_stmt ^( CODE PROCEDURE ident ) ) | PROCEDURE STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS PROCEDURE ident ) ) | PRIVILEGES -> ^( $show_stmt ^( PRIVILEGES ) ) | ( FULL )? PROCESSLIST -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) ) | PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) ) | PROFILES -> ^( $show_stmt ^( PROFILES ) ) | SCHEDULER STATUS -> ^( $show_stmt ^( STATUS SCHEDULER ) ) | optScopeModifier STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) ) | TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) ) | TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) ) | TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) ) | optScopeModifier VARIABLES ( like_or_where )? -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) ) | WARNINGS ( limit )? -> ^( $show_stmt ^( WARNINGS ( limit )? ) ) | SLAVE HOSTS -> ^( $show_stmt ^( SLAVE HOSTS ) ) | SLAVE STATUS -> ^( $show_stmt ^( SLAVE STATUS ) ) | MASTER STATUS -> ^( $show_stmt ^( MASTER STATUS ) ) | BINARY LOGS -> ^( $show_stmt ^( BINARY LOGS ) ) | MASTER LOGS -> ^( $show_stmt ^( MASTER LOGS ) ) )
			int alt51=43;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			try
			{
				alt51 = dfa51.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:97:7: AUTHORS
				{
				DebugLocation(97, 7);
				AUTHORS53=(IToken)Match(input,AUTHORS,Follow._AUTHORS_in_show_stmt488); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AUTHORS.Add(AUTHORS53);



				{
				// AST REWRITE
				// elements: show_stmt, AUTHORS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 97:19: -> ^( $show_stmt ^( AUTHORS ) )
				{
					DebugLocation(97, 22);
					// MySQL51Parser.g3:97:22: ^( $show_stmt ^( AUTHORS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(97, 25);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(97, 35);
					// MySQL51Parser.g3:97:35: ^( AUTHORS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(97, 37);
					root_2 = (object)adaptor.BecomeRoot(stream_AUTHORS.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:98:7: BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )?
				{
				DebugLocation(98, 7);
				BINLOG54=(IToken)Match(input,BINLOG,Follow._BINLOG_in_show_stmt511); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BINLOG.Add(BINLOG54);

				DebugLocation(98, 14);
				EVENTS55=(IToken)Match(input,EVENTS,Follow._EVENTS_in_show_stmt513); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EVENTS.Add(EVENTS55);

				DebugLocation(98, 21);
				// MySQL51Parser.g3:98:21: ( IN logName= STRING )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==IN))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:98:22: IN logName= STRING
					{
					DebugLocation(98, 22);
					IN56=(IToken)Match(input,IN,Follow._IN_in_show_stmt516); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IN.Add(IN56);

					DebugLocation(98, 32);
					logName=(IToken)Match(input,STRING,Follow._STRING_in_show_stmt520); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(logName);


					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(98, 42);
				// MySQL51Parser.g3:98:42: ( FROM INT_NUMBER )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==FROM))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:98:43: FROM INT_NUMBER
					{
					DebugLocation(98, 43);
					FROM57=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt525); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FROM.Add(FROM57);

					DebugLocation(98, 48);
					INT_NUMBER58=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_show_stmt527); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INT_NUMBER.Add(INT_NUMBER58);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(98, 61);
				// MySQL51Parser.g3:98:61: ( limit )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==LIMIT))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:98:61: limit
					{
					DebugLocation(98, 61);
					PushFollow(Follow._limit_in_show_stmt531);
					limit59=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit59.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }



				{
				// AST REWRITE
				// elements: show_stmt, BINLOG, logName, INT_NUMBER, limit
				// token labels: logName
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_logName=new RewriteRuleITokenStream(adaptor,"token logName",logName);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 98:69: -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) )
				{
					DebugLocation(98, 72);
					// MySQL51Parser.g3:98:72: ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(98, 75);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(98, 85);
					// MySQL51Parser.g3:98:85: ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(98, 87);
					root_2 = (object)adaptor.BecomeRoot(stream_BINLOG.NextNode(), root_2);

					DebugLocation(98, 95);
					// MySQL51Parser.g3:98:95: ( $logName)?
					if (stream_logName.HasNext)
					{
						DebugLocation(98, 95);
						adaptor.AddChild(root_2, stream_logName.NextNode());

					}
					stream_logName.Reset();
					DebugLocation(98, 104);
					// MySQL51Parser.g3:98:104: ( INT_NUMBER )?
					if (stream_INT_NUMBER.HasNext)
					{
						DebugLocation(98, 104);
						adaptor.AddChild(root_2, stream_INT_NUMBER.NextNode());

					}
					stream_INT_NUMBER.Reset();
					DebugLocation(98, 116);
					// MySQL51Parser.g3:98:116: ( limit )?
					if (stream_limit.HasNext)
					{
						DebugLocation(98, 116);
						adaptor.AddChild(root_2, stream_limit.NextTree());

					}
					stream_limit.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:99:7: CHARACTER SET ( like_or_where )?
				{
				DebugLocation(99, 7);
				CHARACTER60=(IToken)Match(input,CHARACTER,Follow._CHARACTER_in_show_stmt562); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CHARACTER.Add(CHARACTER60);

				DebugLocation(99, 17);
				SET61=(IToken)Match(input,SET,Follow._SET_in_show_stmt564); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET61);

				DebugLocation(99, 21);
				// MySQL51Parser.g3:99:21: ( like_or_where )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==LIKE||LA13_0==WHERE))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:99:21: like_or_where
					{
					DebugLocation(99, 21);
					PushFollow(Follow._like_or_where_in_show_stmt566);
					like_or_where62=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where62.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: show_stmt, CHARACTER, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 99:37: -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) )
				{
					DebugLocation(99, 40);
					// MySQL51Parser.g3:99:40: ^( $show_stmt ^( CHARACTER ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(99, 43);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(99, 53);
					// MySQL51Parser.g3:99:53: ^( CHARACTER ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(99, 55);
					root_2 = (object)adaptor.BecomeRoot(stream_CHARACTER.NextNode(), root_2);

					DebugLocation(99, 65);
					// MySQL51Parser.g3:99:65: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(99, 65);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:100:7: COLLATION ( like_or_where )?
				{
				DebugLocation(100, 7);
				COLLATION63=(IToken)Match(input,COLLATION,Follow._COLLATION_in_show_stmt590); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLLATION.Add(COLLATION63);

				DebugLocation(100, 17);
				// MySQL51Parser.g3:100:17: ( like_or_where )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==LIKE||LA14_0==WHERE))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:100:17: like_or_where
					{
					DebugLocation(100, 17);
					PushFollow(Follow._like_or_where_in_show_stmt592);
					like_or_where64=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where64.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }



				{
				// AST REWRITE
				// elements: show_stmt, COLLATION, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 100:35: -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) )
				{
					DebugLocation(100, 38);
					// MySQL51Parser.g3:100:38: ^( $show_stmt ^( COLLATION ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(100, 41);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(100, 51);
					// MySQL51Parser.g3:100:51: ^( COLLATION ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(100, 53);
					root_2 = (object)adaptor.BecomeRoot(stream_COLLATION.NextNode(), root_2);

					DebugLocation(100, 63);
					// MySQL51Parser.g3:100:63: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(100, 63);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:101:7: ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )?
				{
				DebugLocation(101, 7);
				// MySQL51Parser.g3:101:7: ( FULL )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==FULL))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:101:7: FULL
					{
					DebugLocation(101, 7);
					FULL65=(IToken)Match(input,FULL,Follow._FULL_in_show_stmt618); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FULL.Add(FULL65);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(101, 13);
				COLUMNS66=(IToken)Match(input,COLUMNS,Follow._COLUMNS_in_show_stmt621); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLUMNS.Add(COLUMNS66);

				DebugLocation(101, 21);
				// MySQL51Parser.g3:101:21: ( FROM | IN )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==FROM))
				{
					alt16 = 1;
				}
				else if ((LA16_0==IN))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:101:22: FROM
					{
					DebugLocation(101, 22);
					FROM67=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt624); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FROM.Add(FROM67);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:101:27: IN
					{
					DebugLocation(101, 27);
					IN68=(IToken)Match(input,IN,Follow._IN_in_show_stmt626); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IN.Add(IN68);


					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(101, 31);
				PushFollow(Follow._simple_table_ref_no_alias_in_show_stmt629);
				simple_table_ref_no_alias69=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(simple_table_ref_no_alias69.Tree);
				DebugLocation(101, 57);
				// MySQL51Parser.g3:101:57: ( ( FROM | IN ) ident )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==FROM||LA18_0==IN))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:101:58: ( FROM | IN ) ident
					{
					DebugLocation(101, 58);
					// MySQL51Parser.g3:101:58: ( FROM | IN )
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==FROM))
					{
						alt17 = 1;
					}
					else if ((LA17_0==IN))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:101:59: FROM
						{
						DebugLocation(101, 59);
						FROM70=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt633); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM70);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:101:64: IN
						{
						DebugLocation(101, 64);
						IN71=(IToken)Match(input,IN,Follow._IN_in_show_stmt635); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN71);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(101, 68);
					PushFollow(Follow._ident_in_show_stmt638);
					ident72=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident72.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(101, 76);
				// MySQL51Parser.g3:101:76: ( like_or_where )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==LIKE||LA19_0==WHERE))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:101:76: like_or_where
					{
					DebugLocation(101, 76);
					PushFollow(Follow._like_or_where_in_show_stmt642);
					like_or_where73=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where73.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: show_stmt, COLUMNS, FULL, simple_table_ref_no_alias, ident, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 101:91: -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) )
				{
					DebugLocation(101, 94);
					// MySQL51Parser.g3:101:94: ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(101, 97);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(101, 107);
					// MySQL51Parser.g3:101:107: ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(101, 109);
					root_2 = (object)adaptor.BecomeRoot(stream_COLUMNS.NextNode(), root_2);

					DebugLocation(101, 117);
					// MySQL51Parser.g3:101:117: ( FULL )?
					if (stream_FULL.HasNext)
					{
						DebugLocation(101, 117);
						adaptor.AddChild(root_2, stream_FULL.NextNode());

					}
					stream_FULL.Reset();
					DebugLocation(101, 123);
					adaptor.AddChild(root_2, stream_simple_table_ref_no_alias.NextTree());
					DebugLocation(101, 149);
					// MySQL51Parser.g3:101:149: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(101, 149);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(101, 156);
					// MySQL51Parser.g3:101:156: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(101, 156);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:102:7: CONTRIBUTORS
				{
				DebugLocation(102, 7);
				CONTRIBUTORS74=(IToken)Match(input,CONTRIBUTORS,Follow._CONTRIBUTORS_in_show_stmt673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTRIBUTORS.Add(CONTRIBUTORS74);



				{
				// AST REWRITE
				// elements: show_stmt, CONTRIBUTORS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 102:21: -> ^( $show_stmt ^( CONTRIBUTORS ) )
				{
					DebugLocation(102, 24);
					// MySQL51Parser.g3:102:24: ^( $show_stmt ^( CONTRIBUTORS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(102, 27);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(102, 37);
					// MySQL51Parser.g3:102:37: ^( CONTRIBUTORS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(102, 39);
					root_2 = (object)adaptor.BecomeRoot(stream_CONTRIBUTORS.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:103:4: CREATE DATABASE ident
				{
				DebugLocation(103, 4);
				CREATE75=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt694); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE75);

				DebugLocation(103, 11);
				DATABASE76=(IToken)Match(input,DATABASE,Follow._DATABASE_in_show_stmt696); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATABASE.Add(DATABASE76);

				DebugLocation(103, 20);
				PushFollow(Follow._ident_in_show_stmt698);
				ident77=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident77.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, DATABASE, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 103:26: -> ^( $show_stmt ^( CREATE DATABASE ident ) )
				{
					DebugLocation(103, 29);
					// MySQL51Parser.g3:103:29: ^( $show_stmt ^( CREATE DATABASE ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(103, 32);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(103, 42);
					// MySQL51Parser.g3:103:42: ^( CREATE DATABASE ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(103, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(103, 51);
					adaptor.AddChild(root_2, stream_DATABASE.NextNode());
					DebugLocation(103, 60);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:104:7: CREATE EVENT ident
				{
				DebugLocation(104, 7);
				CREATE78=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE78);

				DebugLocation(104, 14);
				EVENT79=(IToken)Match(input,EVENT,Follow._EVENT_in_show_stmt723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EVENT.Add(EVENT79);

				DebugLocation(104, 20);
				PushFollow(Follow._ident_in_show_stmt725);
				ident80=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident80.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, EVENT, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 104:29: -> ^( $show_stmt ^( CREATE EVENT ident ) )
				{
					DebugLocation(104, 32);
					// MySQL51Parser.g3:104:32: ^( $show_stmt ^( CREATE EVENT ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(104, 35);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(104, 45);
					// MySQL51Parser.g3:104:45: ^( CREATE EVENT ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(104, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(104, 54);
					adaptor.AddChild(root_2, stream_EVENT.NextNode());
					DebugLocation(104, 60);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:105:7: CREATE FUNCTION ident
				{
				DebugLocation(105, 7);
				CREATE81=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt751); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE81);

				DebugLocation(105, 14);
				FUNCTION82=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_show_stmt753); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FUNCTION.Add(FUNCTION82);

				DebugLocation(105, 23);
				PushFollow(Follow._ident_in_show_stmt755);
				ident83=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident83.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, FUNCTION, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 105:29: -> ^( $show_stmt ^( CREATE FUNCTION ident ) )
				{
					DebugLocation(105, 32);
					// MySQL51Parser.g3:105:32: ^( $show_stmt ^( CREATE FUNCTION ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(105, 35);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(105, 45);
					// MySQL51Parser.g3:105:45: ^( CREATE FUNCTION ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(105, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(105, 54);
					adaptor.AddChild(root_2, stream_FUNCTION.NextNode());
					DebugLocation(105, 63);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:106:7: CREATE PROCEDURE ident
				{
				DebugLocation(106, 7);
				CREATE84=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt778); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE84);

				DebugLocation(106, 14);
				PROCEDURE85=(IToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_show_stmt780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE85);

				DebugLocation(106, 24);
				PushFollow(Follow._ident_in_show_stmt782);
				ident86=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident86.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, PROCEDURE, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 106:31: -> ^( $show_stmt ^( CREATE PROCEDURE ident ) )
				{
					DebugLocation(106, 34);
					// MySQL51Parser.g3:106:34: ^( $show_stmt ^( CREATE PROCEDURE ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(106, 37);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(106, 47);
					// MySQL51Parser.g3:106:47: ^( CREATE PROCEDURE ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(106, 49);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(106, 56);
					adaptor.AddChild(root_2, stream_PROCEDURE.NextNode());
					DebugLocation(106, 66);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:107:7: CREATE TABLE simple_table_ref_no_alias
				{
				DebugLocation(107, 7);
				CREATE87=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt806); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE87);

				DebugLocation(107, 14);
				TABLE88=(IToken)Match(input,TABLE,Follow._TABLE_in_show_stmt808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLE.Add(TABLE88);

				DebugLocation(107, 20);
				PushFollow(Follow._simple_table_ref_no_alias_in_show_stmt810);
				simple_table_ref_no_alias89=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(simple_table_ref_no_alias89.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, TABLE, simple_table_ref_no_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 107:47: -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) )
				{
					DebugLocation(107, 50);
					// MySQL51Parser.g3:107:50: ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(107, 53);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(107, 63);
					// MySQL51Parser.g3:107:63: ^( CREATE TABLE simple_table_ref_no_alias )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(107, 65);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(107, 72);
					adaptor.AddChild(root_2, stream_TABLE.NextNode());
					DebugLocation(107, 78);
					adaptor.AddChild(root_2, stream_simple_table_ref_no_alias.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:108:7: CREATE TRIGGER ident
				{
				DebugLocation(108, 7);
				CREATE90=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt834); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE90);

				DebugLocation(108, 14);
				TRIGGER91=(IToken)Match(input,TRIGGER,Follow._TRIGGER_in_show_stmt836); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRIGGER.Add(TRIGGER91);

				DebugLocation(108, 22);
				PushFollow(Follow._ident_in_show_stmt838);
				ident92=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident92.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, TRIGGER, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 108:29: -> ^( $show_stmt ^( CREATE TRIGGER ident ) )
				{
					DebugLocation(108, 32);
					// MySQL51Parser.g3:108:32: ^( $show_stmt ^( CREATE TRIGGER ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(108, 35);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(108, 45);
					// MySQL51Parser.g3:108:45: ^( CREATE TRIGGER ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(108, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(108, 54);
					adaptor.AddChild(root_2, stream_TRIGGER.NextNode());
					DebugLocation(108, 62);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:109:7: CREATE VIEW ident
				{
				DebugLocation(109, 7);
				CREATE93=(IToken)Match(input,CREATE,Follow._CREATE_in_show_stmt862); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE93);

				DebugLocation(109, 14);
				VIEW94=(IToken)Match(input,VIEW,Follow._VIEW_in_show_stmt864); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VIEW.Add(VIEW94);

				DebugLocation(109, 19);
				PushFollow(Follow._ident_in_show_stmt866);
				ident95=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident95.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CREATE, VIEW, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 109:27: -> ^( $show_stmt ^( CREATE VIEW ident ) )
				{
					DebugLocation(109, 30);
					// MySQL51Parser.g3:109:30: ^( $show_stmt ^( CREATE VIEW ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(109, 33);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(109, 43);
					// MySQL51Parser.g3:109:43: ^( CREATE VIEW ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(109, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_CREATE.NextNode(), root_2);

					DebugLocation(109, 52);
					adaptor.AddChild(root_2, stream_VIEW.NextNode());
					DebugLocation(109, 57);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:110:7: DATABASES ( like_or_where )?
				{
				DebugLocation(110, 7);
				DATABASES96=(IToken)Match(input,DATABASES,Follow._DATABASES_in_show_stmt891); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATABASES.Add(DATABASES96);

				DebugLocation(110, 17);
				// MySQL51Parser.g3:110:17: ( like_or_where )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==LIKE||LA20_0==WHERE))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:110:17: like_or_where
					{
					DebugLocation(110, 17);
					PushFollow(Follow._like_or_where_in_show_stmt893);
					like_or_where97=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where97.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: show_stmt, DATABASES, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 110:33: -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) )
				{
					DebugLocation(110, 36);
					// MySQL51Parser.g3:110:36: ^( $show_stmt ^( DATABASES ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(110, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(110, 49);
					// MySQL51Parser.g3:110:49: ^( DATABASES ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(110, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_DATABASES.NextNode(), root_2);

					DebugLocation(110, 61);
					// MySQL51Parser.g3:110:61: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(110, 61);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:111:7: ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX )
				{
				DebugLocation(111, 7);
				ENGINE98=(IToken)Match(input,ENGINE,Follow._ENGINE_in_show_stmt917); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ENGINE.Add(ENGINE98);

				DebugLocation(111, 14);
				// MySQL51Parser.g3:111:14: ( INNODB | ident )
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==INNODB))
				{
					alt21 = 1;
				}
				else if ((LA21_0==ACTION||(LA21_0>=ADDDATE && LA21_0<=ALGORITHM)||LA21_0==ANY||LA21_0==ASCII||(LA21_0>=AT && LA21_0<=BACKUP)||LA21_0==BEGIN||(LA21_0>=BINLOG && LA21_0<=BIT)||(LA21_0>=BLOCK && LA21_0<=BOOLEAN)||LA21_0==BTREE||(LA21_0>=BYTE && LA21_0<=CACHE)||LA21_0==CASCADED||LA21_0==CHAIN||LA21_0==CHANGED||LA21_0==CHARSET||(LA21_0>=CHECKSUM && LA21_0<=CODE)||LA21_0==COLLATION||LA21_0==COLUMNS||LA21_0==COMMENT||(LA21_0>=COMMIT && LA21_0<=CONCURRENT)||(LA21_0>=CONNECTION && LA21_0<=CONSISTENT)||(LA21_0>=CONTAINS && LA21_0<=CONTEXT)||LA21_0==CONTRIBUTORS||LA21_0==CPU||LA21_0==CUBE||LA21_0==DATA||(LA21_0>=DATAFILE && LA21_0<=DATETIME)||LA21_0==DAY||LA21_0==DEALLOCATE||LA21_0==DEFINER||LA21_0==DELAY_KEY_WRITE||LA21_0==DES_KEY_FILE||(LA21_0>=DIRECTORY && LA21_0<=DISK)||LA21_0==DO||(LA21_0>=DUMPFILE && LA21_0<=DYNAMIC)||LA21_0==ENABLE||(LA21_0>=END && LA21_0<=ENUM)||(LA21_0>=ERRORS && LA21_0<=ESCAPE)||(LA21_0>=EVENT && LA21_0<=EVERY)||LA21_0==EXECUTE||LA21_0==EXPANSION||(LA21_0>=EXTENDED && LA21_0<=EXTENT_SIZE)||(LA21_0>=FAST && LA21_0<=FAULTS)||(LA21_0>=FIELDS && LA21_0<=FIXED)||LA21_0==FLUSH||(LA21_0>=FOUND && LA21_0<=FRAC_SECOND)||LA21_0==FULL||(LA21_0>=FUNCTION && LA21_0<=GLOBAL)||LA21_0==GRANTS||LA21_0==GROUP||(LA21_0>=HANDLER && LA21_0<=HASH)||LA21_0==HELP||(LA21_0>=HOST && LA21_0<=HOUR)||(LA21_0>=ID && LA21_0<=IDENTIFIED)||LA21_0==IMPORT||LA21_0==INDEXES||LA21_0==INITIAL_SIZE||LA21_0==INNOBASE||(LA21_0>=INSERT_METHOD && LA21_0<=INSTALL)||(LA21_0>=INVOKER && LA21_0<=IPC)||(LA21_0>=ISOLATION && LA21_0<=ISSUER)||LA21_0==KEY_BLOCK_SIZE||(LA21_0>=LABEL && LA21_0<=LAST)||LA21_0==LEAVES||LA21_0==LESS||LA21_0==LEVEL||(LA21_0>=LINESTRING && LA21_0<=LIST)||LA21_0==LOCAL||(LA21_0>=LOCKS && LA21_0<=LOGFILE)||LA21_0==LOGS||(LA21_0>=MASTER && LA21_0<=MASTER_SSL_KEY)||LA21_0==MASTER_USER||(LA21_0>=MAX_CONNECTIONS_PER_HOUR && LA21_0<=MEDIUM)||(LA21_0>=MEMORY && LA21_0<=MICROSECOND)||LA21_0==MIGRATE||LA21_0==MINUTE||LA21_0==MIN_ROWS||LA21_0==MODE||LA21_0==MODIFY||LA21_0==MONTH||(LA21_0>=MULTILINESTRING && LA21_0<=MUTEX)||(LA21_0>=NAME && LA21_0<=NATIONAL)||(LA21_0>=NCHAR && LA21_0<=NONE)||LA21_0==NO_WAIT||(LA21_0>=NVARCHAR && LA21_0<=OLD_PASSWORD)||LA21_0==ONE||(LA21_0>=ONE_SHOT && LA21_0<=OPEN)||LA21_0==OPTIONS||(LA21_0>=OWNER && LA21_0<=PLUGINS)||(LA21_0>=POINT && LA21_0<=PORT)||(LA21_0>=PREPARE && LA21_0<=PREV)||LA21_0==PRIVILEGES||(LA21_0>=PROCESS && LA21_0<=PROFILES)||(LA21_0>=QUARTER && LA21_0<=QUICK)||(LA21_0>=REBUILD && LA21_0<=REDUNDANT)||(LA21_0>=RELAY_LOG_FILE && LA21_0<=RELAY_THREAD)||(LA21_0>=RELOAD && LA21_0<=REMOVE)||(LA21_0>=REORGANIZE && LA21_0<=REPAIR)||LA21_0==REPEATABLE||LA21_0==REPLICATION||(LA21_0>=RESET && LA21_0<=RESTORE)||LA21_0==RESUME||LA21_0==RETURNS||(LA21_0>=ROLLBACK && LA21_0<=ROW_FORMAT)||(LA21_0>=RTREE && LA21_0<=SCHEDULE)||LA21_0==SECOND||LA21_0==SECURITY||(LA21_0>=SERIAL && LA21_0<=SESSION)||LA21_0==SHARE||(LA21_0>=SHUTDOWN && LA21_0<=SLAVE)||(LA21_0>=SNAPSHOT && LA21_0<=SOCKET)||(LA21_0>=SONAME && LA21_0<=SOURCE)||(LA21_0>=SQL_BUFFER_RESULT && LA21_0<=SQL_CACHE)||LA21_0==SQL_NO_CACHE||LA21_0==SQL_THREAD||LA21_0==START||(LA21_0>=STARTS && LA21_0<=STATUS)||(LA21_0>=STOP && LA21_0<=STORAGE)||(LA21_0>=STRING_KEYWORD && LA21_0<=SUBPARTITIONS)||(LA21_0>=SUPER && LA21_0<=SWITCHES)||(LA21_0>=TABLES && LA21_0<=TEMPTABLE)||(LA21_0>=TEXT && LA21_0<=THAN)||(LA21_0>=TIME && LA21_0<=TIMESTAMP_DIFF)||(LA21_0>=TRANSACTION && LA21_0<=TRANSACTIONAL)||LA21_0==TRIGGERS||(LA21_0>=TRUNCATE && LA21_0<=UNDEFINED)||(LA21_0>=UNDOFILE && LA21_0<=UNINSTALL)||LA21_0==UNKNOWN||LA21_0==UNTIL||LA21_0==UPGRADE||LA21_0==USER||LA21_0==USE_FRM||LA21_0==VALUE||LA21_0==VARIABLES||(LA21_0>=VIEW && LA21_0<=WEEK)||(LA21_0>=WORK && LA21_0<=WRAPPER)||(LA21_0>=X509 && LA21_0<=XA)||LA21_0==YEAR))
				{
					alt21 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:111:15: INNODB
					{
					DebugLocation(111, 15);
					INNODB99=(IToken)Match(input,INNODB,Follow._INNODB_in_show_stmt920); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INNODB.Add(INNODB99);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:111:24: ident
					{
					DebugLocation(111, 24);
					PushFollow(Follow._ident_in_show_stmt924);
					ident100=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident100.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(21); }

				DebugLocation(111, 31);
				// MySQL51Parser.g3:111:31: (what= STATUS |what= MUTEX )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==STATUS))
				{
					alt22 = 1;
				}
				else if ((LA22_0==MUTEX))
				{
					alt22 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:111:32: what= STATUS
					{
					DebugLocation(111, 36);
					what=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt930); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STATUS.Add(what);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:111:46: what= MUTEX
					{
					DebugLocation(111, 50);
					what=(IToken)Match(input,MUTEX,Follow._MUTEX_in_show_stmt936); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_MUTEX.Add(what);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: show_stmt, ENGINE, INNODB, ident, what
				// token labels: what
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_what=new RewriteRuleITokenStream(adaptor,"token what",what);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 112:21: -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) )
				{
					DebugLocation(112, 24);
					// MySQL51Parser.g3:112:24: ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(112, 27);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(112, 37);
					// MySQL51Parser.g3:112:37: ^( ENGINE ( INNODB )? ( ident )? $what)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(112, 39);
					root_2 = (object)adaptor.BecomeRoot(stream_ENGINE.NextNode(), root_2);

					DebugLocation(112, 46);
					// MySQL51Parser.g3:112:46: ( INNODB )?
					if (stream_INNODB.HasNext)
					{
						DebugLocation(112, 46);
						adaptor.AddChild(root_2, stream_INNODB.NextNode());

					}
					stream_INNODB.Reset();
					DebugLocation(112, 54);
					// MySQL51Parser.g3:112:54: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(112, 54);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(112, 62);
					adaptor.AddChild(root_2, stream_what.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:113:7: ( STORAGE )? ENGINES
				{
				DebugLocation(113, 7);
				// MySQL51Parser.g3:113:7: ( STORAGE )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==STORAGE))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:113:7: STORAGE
					{
					DebugLocation(113, 7);
					STORAGE101=(IToken)Match(input,STORAGE,Follow._STORAGE_in_show_stmt986); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STORAGE.Add(STORAGE101);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(113, 16);
				ENGINES102=(IToken)Match(input,ENGINES,Follow._ENGINES_in_show_stmt989); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ENGINES.Add(ENGINES102);



				{
				// AST REWRITE
				// elements: show_stmt, ENGINES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 113:27: -> ^( $show_stmt ^( ENGINES ) )
				{
					DebugLocation(113, 30);
					// MySQL51Parser.g3:113:30: ^( $show_stmt ^( ENGINES ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(113, 33);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(113, 43);
					// MySQL51Parser.g3:113:43: ^( ENGINES )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(113, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_ENGINES.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:114:7: ERRORS ( limit )?
				{
				DebugLocation(114, 7);
				ERRORS103=(IToken)Match(input,ERRORS,Follow._ERRORS_in_show_stmt1011); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ERRORS.Add(ERRORS103);

				DebugLocation(114, 14);
				// MySQL51Parser.g3:114:14: ( limit )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==LIMIT))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:114:14: limit
					{
					DebugLocation(114, 14);
					PushFollow(Follow._limit_in_show_stmt1013);
					limit104=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit104.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(24); }



				{
				// AST REWRITE
				// elements: show_stmt, ERRORS, limit
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:25: -> ^( $show_stmt ^( ERRORS ( limit )? ) )
				{
					DebugLocation(114, 28);
					// MySQL51Parser.g3:114:28: ^( $show_stmt ^( ERRORS ( limit )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(114, 31);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(114, 41);
					// MySQL51Parser.g3:114:41: ^( ERRORS ( limit )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(114, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_ERRORS.NextNode(), root_2);

					DebugLocation(114, 50);
					// MySQL51Parser.g3:114:50: ( limit )?
					if (stream_limit.HasNext)
					{
						DebugLocation(114, 50);
						adaptor.AddChild(root_2, stream_limit.NextTree());

					}
					stream_limit.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:115:7: ( FULL )? EVENTS
				{
				DebugLocation(115, 7);
				// MySQL51Parser.g3:115:7: ( FULL )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==FULL))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:115:7: FULL
					{
					DebugLocation(115, 7);
					FULL105=(IToken)Match(input,FULL,Follow._FULL_in_show_stmt1040); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FULL.Add(FULL105);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(115, 13);
				EVENTS106=(IToken)Match(input,EVENTS,Follow._EVENTS_in_show_stmt1043); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EVENTS.Add(EVENTS106);



				{
				// AST REWRITE
				// elements: show_stmt, EVENTS, FULL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 115:25: -> ^( $show_stmt ^( EVENTS ( FULL )? ) )
				{
					DebugLocation(115, 28);
					// MySQL51Parser.g3:115:28: ^( $show_stmt ^( EVENTS ( FULL )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(115, 31);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(115, 41);
					// MySQL51Parser.g3:115:41: ^( EVENTS ( FULL )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(115, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_EVENTS.NextNode(), root_2);

					DebugLocation(115, 50);
					// MySQL51Parser.g3:115:50: ( FULL )?
					if (stream_FULL.HasNext)
					{
						DebugLocation(115, 50);
						adaptor.AddChild(root_2, stream_FULL.NextNode());

					}
					stream_FULL.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// MySQL51Parser.g3:116:7: FUNCTION CODE ident
				{
				DebugLocation(116, 7);
				FUNCTION107=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_show_stmt1070); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FUNCTION.Add(FUNCTION107);

				DebugLocation(116, 16);
				CODE108=(IToken)Match(input,CODE,Follow._CODE_in_show_stmt1072); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CODE.Add(CODE108);

				DebugLocation(116, 21);
				PushFollow(Follow._ident_in_show_stmt1074);
				ident109=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident109.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CODE, FUNCTION, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 116:29: -> ^( $show_stmt ^( CODE FUNCTION ident ) )
				{
					DebugLocation(116, 32);
					// MySQL51Parser.g3:116:32: ^( $show_stmt ^( CODE FUNCTION ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(116, 35);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(116, 45);
					// MySQL51Parser.g3:116:45: ^( CODE FUNCTION ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(116, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_CODE.NextNode(), root_2);

					DebugLocation(116, 52);
					adaptor.AddChild(root_2, stream_FUNCTION.NextNode());
					DebugLocation(116, 61);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// MySQL51Parser.g3:117:7: FUNCTION STATUS ( like_or_where )?
				{
				DebugLocation(117, 7);
				FUNCTION110=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_show_stmt1099); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FUNCTION.Add(FUNCTION110);

				DebugLocation(117, 16);
				STATUS111=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1101); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS111);

				DebugLocation(117, 23);
				// MySQL51Parser.g3:117:23: ( like_or_where )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==LIKE||LA26_0==WHERE))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:117:23: like_or_where
					{
					DebugLocation(117, 23);
					PushFollow(Follow._like_or_where_in_show_stmt1103);
					like_or_where112=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where112.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }



				{
				// AST REWRITE
				// elements: show_stmt, STATUS, FUNCTION, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 117:39: -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) )
				{
					DebugLocation(117, 42);
					// MySQL51Parser.g3:117:42: ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(117, 45);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(117, 55);
					// MySQL51Parser.g3:117:55: ^( STATUS FUNCTION ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(117, 57);
					root_2 = (object)adaptor.BecomeRoot(stream_STATUS.NextNode(), root_2);

					DebugLocation(117, 64);
					adaptor.AddChild(root_2, stream_FUNCTION.NextNode());
					DebugLocation(117, 73);
					// MySQL51Parser.g3:117:73: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(117, 73);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// MySQL51Parser.g3:118:7: GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN )
				{
				DebugLocation(118, 7);
				GRANTS113=(IToken)Match(input,GRANTS,Follow._GRANTS_in_show_stmt1129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_GRANTS.Add(GRANTS113);

				DebugLocation(118, 14);
				FOR114=(IToken)Match(input,FOR,Follow._FOR_in_show_stmt1131); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FOR.Add(FOR114);

				DebugLocation(119, 9);
				// MySQL51Parser.g3:119:9: (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN )
				int alt29=4;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				switch (input.LA(1))
				{
				case STRING:
					{
					alt29 = 1;
					}
					break;
				case ID:
					{
					alt29 = 2;
					}
					break;
				case CURRENT_USER:
					{
					int LA29_3 = input.LA(2);

					if ((LA29_3==LPAREN))
					{
						alt29 = 4;
					}
					else if ((LA29_3==EOF||LA29_3==SEMI))
					{
						alt29 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 29, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:120:5: whom+= STRING (whom+= USER_HOST )?
					{
					DebugLocation(120, 9);
					whom=(IToken)Match(input,STRING,Follow._STRING_in_show_stmt1154); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(whom);

					if (list_whom==null) list_whom=new List<IToken>();
					list_whom.Add(whom);

					DebugLocation(120, 22);
					// MySQL51Parser.g3:120:22: (whom+= USER_HOST )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==USER_HOST))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:120:22: whom+= USER_HOST
						{
						DebugLocation(120, 22);
						whom=(IToken)Match(input,USER_HOST,Follow._USER_HOST_in_show_stmt1158); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_USER_HOST.Add(whom);

						if (list_whom==null) list_whom=new List<IToken>();
						list_whom.Add(whom);


						}
						break;

					}
					} finally { DebugExitSubRule(27); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:121:5: whom+= ID (whom+= USER_HOST )?
					{
					DebugLocation(121, 9);
					whom=(IToken)Match(input,ID,Follow._ID_in_show_stmt1167); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(whom);

					if (list_whom==null) list_whom=new List<IToken>();
					list_whom.Add(whom);

					DebugLocation(121, 18);
					// MySQL51Parser.g3:121:18: (whom+= USER_HOST )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==USER_HOST))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:121:18: whom+= USER_HOST
						{
						DebugLocation(121, 18);
						whom=(IToken)Match(input,USER_HOST,Follow._USER_HOST_in_show_stmt1171); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_USER_HOST.Add(whom);

						if (list_whom==null) list_whom=new List<IToken>();
						list_whom.Add(whom);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:122:11: whom+= CURRENT_USER
					{
					DebugLocation(122, 15);
					whom=(IToken)Match(input,CURRENT_USER,Follow._CURRENT_USER_in_show_stmt1186); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CURRENT_USER.Add(whom);

					if (list_whom==null) list_whom=new List<IToken>();
					list_whom.Add(whom);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// MySQL51Parser.g3:123:11: whom+= CURRENT_USER LPAREN RPAREN
					{
					DebugLocation(123, 15);
					whom=(IToken)Match(input,CURRENT_USER,Follow._CURRENT_USER_in_show_stmt1200); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CURRENT_USER.Add(whom);

					if (list_whom==null) list_whom=new List<IToken>();
					list_whom.Add(whom);

					DebugLocation(123, 30);
					LPAREN115=(IToken)Match(input,LPAREN,Follow._LPAREN_in_show_stmt1202); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN115);

					DebugLocation(123, 37);
					RPAREN116=(IToken)Match(input,RPAREN,Follow._RPAREN_in_show_stmt1204); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN116);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: show_stmt, GRANTS, whom
				// token labels: 
				// rule labels: retval
				// token list labels: whom
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_whom=new RewriteRuleITokenStream(adaptor,"token whom", list_whom);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 124:19: -> ^( $show_stmt ^( GRANTS $whom) )
				{
					DebugLocation(124, 22);
					// MySQL51Parser.g3:124:22: ^( $show_stmt ^( GRANTS $whom) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(124, 25);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(124, 35);
					// MySQL51Parser.g3:124:35: ^( GRANTS $whom)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(124, 37);
					root_2 = (object)adaptor.BecomeRoot(stream_GRANTS.NextNode(), root_2);

					DebugLocation(124, 45);
					adaptor.AddChild(root_2, stream_whom.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// MySQL51Parser.g3:125:7: INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )?
				{
				DebugLocation(125, 7);
				INDEX_SYM117=(IToken)Match(input,INDEX_SYM,Follow._INDEX_SYM_in_show_stmt1244); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDEX_SYM.Add(INDEX_SYM117);

				DebugLocation(125, 17);
				FROM118=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1246); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM118);

				DebugLocation(125, 22);
				PushFollow(Follow._simple_table_ref_no_alias_in_show_stmt1248);
				simple_table_ref_no_alias119=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(simple_table_ref_no_alias119.Tree);
				DebugLocation(125, 48);
				// MySQL51Parser.g3:125:48: ( ( FROM | IN ) ident )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==FROM||LA31_0==IN))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:125:49: ( FROM | IN ) ident
					{
					DebugLocation(125, 49);
					// MySQL51Parser.g3:125:49: ( FROM | IN )
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==FROM))
					{
						alt30 = 1;
					}
					else if ((LA30_0==IN))
					{
						alt30 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:125:50: FROM
						{
						DebugLocation(125, 50);
						FROM120=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1252); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM120);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:125:55: IN
						{
						DebugLocation(125, 55);
						IN121=(IToken)Match(input,IN,Follow._IN_in_show_stmt1254); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN121);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(125, 59);
					PushFollow(Follow._ident_in_show_stmt1257);
					ident122=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident122.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }



				{
				// AST REWRITE
				// elements: show_stmt, INDEX_SYM, simple_table_ref_no_alias, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 125:67: -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) )
				{
					DebugLocation(125, 70);
					// MySQL51Parser.g3:125:70: ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(125, 73);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(125, 83);
					// MySQL51Parser.g3:125:83: ^( INDEX_SYM simple_table_ref_no_alias ( ident )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(125, 85);
					root_2 = (object)adaptor.BecomeRoot(stream_INDEX_SYM.NextNode(), root_2);

					DebugLocation(125, 95);
					adaptor.AddChild(root_2, stream_simple_table_ref_no_alias.NextTree());
					DebugLocation(125, 121);
					// MySQL51Parser.g3:125:121: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(125, 121);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// MySQL51Parser.g3:127:7: INNODB STATUS
				{
				DebugLocation(127, 7);
				INNODB123=(IToken)Match(input,INNODB,Follow._INNODB_in_show_stmt1286); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INNODB.Add(INNODB123);

				DebugLocation(127, 14);
				STATUS124=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1288); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS124);



				{
				// AST REWRITE
				// elements: show_stmt, INNODB, STATUS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 127:23: -> ^( $show_stmt ^( INNODB STATUS ) )
				{
					DebugLocation(127, 26);
					// MySQL51Parser.g3:127:26: ^( $show_stmt ^( INNODB STATUS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(127, 29);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(127, 39);
					// MySQL51Parser.g3:127:39: ^( INNODB STATUS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(127, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_INNODB.NextNode(), root_2);

					DebugLocation(127, 48);
					adaptor.AddChild(root_2, stream_STATUS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// MySQL51Parser.g3:128:7: OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )?
				{
				DebugLocation(128, 7);
				OPEN125=(IToken)Match(input,OPEN,Follow._OPEN_in_show_stmt1311); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPEN.Add(OPEN125);

				DebugLocation(128, 12);
				TABLES126=(IToken)Match(input,TABLES,Follow._TABLES_in_show_stmt1313); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLES.Add(TABLES126);

				DebugLocation(128, 19);
				// MySQL51Parser.g3:128:19: ( ( FROM | IN ) ident )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==FROM||LA33_0==IN))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:128:20: ( FROM | IN ) ident
					{
					DebugLocation(128, 20);
					// MySQL51Parser.g3:128:20: ( FROM | IN )
					int alt32=2;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==FROM))
					{
						alt32 = 1;
					}
					else if ((LA32_0==IN))
					{
						alt32 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:128:21: FROM
						{
						DebugLocation(128, 21);
						FROM127=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1317); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM127);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:128:26: IN
						{
						DebugLocation(128, 26);
						IN128=(IToken)Match(input,IN,Follow._IN_in_show_stmt1319); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN128);


						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(128, 30);
					PushFollow(Follow._ident_in_show_stmt1322);
					ident129=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident129.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(128, 38);
				// MySQL51Parser.g3:128:38: ( like_or_where )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==LIKE||LA34_0==WHERE))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:128:38: like_or_where
					{
					DebugLocation(128, 38);
					PushFollow(Follow._like_or_where_in_show_stmt1326);
					like_or_where130=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where130.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: show_stmt, OPEN, ident, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:53: -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) )
				{
					DebugLocation(128, 56);
					// MySQL51Parser.g3:128:56: ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(128, 59);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(128, 69);
					// MySQL51Parser.g3:128:69: ^( OPEN ( ident )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(128, 71);
					root_2 = (object)adaptor.BecomeRoot(stream_OPEN.NextNode(), root_2);

					DebugLocation(128, 76);
					// MySQL51Parser.g3:128:76: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(128, 76);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(128, 83);
					// MySQL51Parser.g3:128:83: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(128, 83);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// MySQL51Parser.g3:129:7: PLUGINS
				{
				DebugLocation(129, 7);
				PLUGINS131=(IToken)Match(input,PLUGINS,Follow._PLUGINS_in_show_stmt1352); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUGINS.Add(PLUGINS131);



				{
				// AST REWRITE
				// elements: show_stmt, PLUGINS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 129:19: -> ^( $show_stmt ^( PLUGINS ) )
				{
					DebugLocation(129, 22);
					// MySQL51Parser.g3:129:22: ^( $show_stmt ^( PLUGINS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(129, 25);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(129, 35);
					// MySQL51Parser.g3:129:35: ^( PLUGINS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(129, 37);
					root_2 = (object)adaptor.BecomeRoot(stream_PLUGINS.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// MySQL51Parser.g3:130:7: PROCEDURE CODE ident
				{
				DebugLocation(130, 7);
				PROCEDURE132=(IToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_show_stmt1375); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE132);

				DebugLocation(130, 17);
				CODE133=(IToken)Match(input,CODE,Follow._CODE_in_show_stmt1377); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CODE.Add(CODE133);

				DebugLocation(130, 22);
				PushFollow(Follow._ident_in_show_stmt1379);
				ident134=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident134.Tree);


				{
				// AST REWRITE
				// elements: show_stmt, CODE, PROCEDURE, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 130:33: -> ^( $show_stmt ^( CODE PROCEDURE ident ) )
				{
					DebugLocation(130, 36);
					// MySQL51Parser.g3:130:36: ^( $show_stmt ^( CODE PROCEDURE ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(130, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(130, 49);
					// MySQL51Parser.g3:130:49: ^( CODE PROCEDURE ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(130, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_CODE.NextNode(), root_2);

					DebugLocation(130, 56);
					adaptor.AddChild(root_2, stream_PROCEDURE.NextNode());
					DebugLocation(130, 66);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// MySQL51Parser.g3:131:7: PROCEDURE STATUS ( like_or_where )?
				{
				DebugLocation(131, 7);
				PROCEDURE135=(IToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_show_stmt1407); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE135);

				DebugLocation(131, 17);
				STATUS136=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1409); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS136);

				DebugLocation(131, 24);
				// MySQL51Parser.g3:131:24: ( like_or_where )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==LIKE||LA35_0==WHERE))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:131:24: like_or_where
					{
					DebugLocation(131, 24);
					PushFollow(Follow._like_or_where_in_show_stmt1411);
					like_or_where137=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where137.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: show_stmt, STATUS, PROCEDURE, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 131:39: -> ^( $show_stmt ^( STATUS PROCEDURE ident ) )
				{
					DebugLocation(131, 42);
					// MySQL51Parser.g3:131:42: ^( $show_stmt ^( STATUS PROCEDURE ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(131, 45);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(131, 55);
					// MySQL51Parser.g3:131:55: ^( STATUS PROCEDURE ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(131, 57);
					root_2 = (object)adaptor.BecomeRoot(stream_STATUS.NextNode(), root_2);

					DebugLocation(131, 64);
					adaptor.AddChild(root_2, stream_PROCEDURE.NextNode());
					DebugLocation(131, 74);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// MySQL51Parser.g3:132:7: PRIVILEGES
				{
				DebugLocation(132, 7);
				PRIVILEGES138=(IToken)Match(input,PRIVILEGES,Follow._PRIVILEGES_in_show_stmt1435); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PRIVILEGES.Add(PRIVILEGES138);



				{
				// AST REWRITE
				// elements: show_stmt, PRIVILEGES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 132:23: -> ^( $show_stmt ^( PRIVILEGES ) )
				{
					DebugLocation(132, 26);
					// MySQL51Parser.g3:132:26: ^( $show_stmt ^( PRIVILEGES ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(132, 29);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(132, 39);
					// MySQL51Parser.g3:132:39: ^( PRIVILEGES )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(132, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_PRIVILEGES.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// MySQL51Parser.g3:133:7: ( FULL )? PROCESSLIST
				{
				DebugLocation(133, 7);
				// MySQL51Parser.g3:133:7: ( FULL )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==FULL))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:133:7: FULL
					{
					DebugLocation(133, 7);
					FULL139=(IToken)Match(input,FULL,Follow._FULL_in_show_stmt1459); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FULL.Add(FULL139);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(133, 13);
				PROCESSLIST140=(IToken)Match(input,PROCESSLIST,Follow._PROCESSLIST_in_show_stmt1462); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROCESSLIST.Add(PROCESSLIST140);



				{
				// AST REWRITE
				// elements: show_stmt, PROCESSLIST, FULL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 133:25: -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) )
				{
					DebugLocation(133, 28);
					// MySQL51Parser.g3:133:28: ^( $show_stmt ^( PROCESSLIST ( FULL )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(133, 31);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(133, 41);
					// MySQL51Parser.g3:133:41: ^( PROCESSLIST ( FULL )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(133, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_PROCESSLIST.NextNode(), root_2);

					DebugLocation(133, 55);
					// MySQL51Parser.g3:133:55: ( FULL )?
					if (stream_FULL.HasNext)
					{
						DebugLocation(133, 55);
						adaptor.AddChild(root_2, stream_FULL.NextNode());

					}
					stream_FULL.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// MySQL51Parser.g3:134:7: PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )?
				{
				DebugLocation(134, 7);
				PROFILE141=(IToken)Match(input,PROFILE,Follow._PROFILE_in_show_stmt1484); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROFILE.Add(PROFILE141);

				DebugLocation(134, 15);
				PushFollow(Follow._show_profile_types_in_show_stmt1486);
				show_profile_types142=show_profile_types();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_show_profile_types.Add(show_profile_types142.Tree);
				DebugLocation(134, 34);
				// MySQL51Parser.g3:134:34: ( FOR QUERY INT_NUMBER )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==FOR))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:134:35: FOR QUERY INT_NUMBER
					{
					DebugLocation(134, 35);
					FOR143=(IToken)Match(input,FOR,Follow._FOR_in_show_stmt1489); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FOR.Add(FOR143);

					DebugLocation(134, 39);
					QUERY144=(IToken)Match(input,QUERY,Follow._QUERY_in_show_stmt1491); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_QUERY.Add(QUERY144);

					DebugLocation(134, 45);
					INT_NUMBER145=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_show_stmt1493); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INT_NUMBER.Add(INT_NUMBER145);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(134, 58);
				// MySQL51Parser.g3:134:58: ( limit )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==LIMIT))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:134:58: limit
					{
					DebugLocation(134, 58);
					PushFollow(Follow._limit_in_show_stmt1497);
					limit146=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit146.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }



				{
				// AST REWRITE
				// elements: show_stmt, PROFILE, show_profile_types, INT_NUMBER, limit
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:65: -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) )
				{
					DebugLocation(134, 68);
					// MySQL51Parser.g3:134:68: ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(134, 71);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(134, 81);
					// MySQL51Parser.g3:134:81: ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(134, 83);
					root_2 = (object)adaptor.BecomeRoot(stream_PROFILE.NextNode(), root_2);

					DebugLocation(134, 91);
					adaptor.AddChild(root_2, stream_show_profile_types.NextTree());
					DebugLocation(134, 110);
					// MySQL51Parser.g3:134:110: ( INT_NUMBER )?
					if (stream_INT_NUMBER.HasNext)
					{
						DebugLocation(134, 110);
						adaptor.AddChild(root_2, stream_INT_NUMBER.NextNode());

					}
					stream_INT_NUMBER.Reset();
					DebugLocation(134, 122);
					// MySQL51Parser.g3:134:122: ( limit )?
					if (stream_limit.HasNext)
					{
						DebugLocation(134, 122);
						adaptor.AddChild(root_2, stream_limit.NextTree());

					}
					stream_limit.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// MySQL51Parser.g3:135:7: PROFILES
				{
				DebugLocation(135, 7);
				PROFILES147=(IToken)Match(input,PROFILES,Follow._PROFILES_in_show_stmt1525); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PROFILES.Add(PROFILES147);



				{
				// AST REWRITE
				// elements: show_stmt, PROFILES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:19: -> ^( $show_stmt ^( PROFILES ) )
				{
					DebugLocation(135, 22);
					// MySQL51Parser.g3:135:22: ^( $show_stmt ^( PROFILES ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(135, 25);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(135, 35);
					// MySQL51Parser.g3:135:35: ^( PROFILES )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(135, 37);
					root_2 = (object)adaptor.BecomeRoot(stream_PROFILES.NextNode(), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// MySQL51Parser.g3:136:7: SCHEDULER STATUS
				{
				DebugLocation(136, 7);
				SCHEDULER148=(IToken)Match(input,SCHEDULER,Follow._SCHEDULER_in_show_stmt1547); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SCHEDULER.Add(SCHEDULER148);

				DebugLocation(136, 17);
				STATUS149=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1549); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS149);



				{
				// AST REWRITE
				// elements: show_stmt, STATUS, SCHEDULER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 136:25: -> ^( $show_stmt ^( STATUS SCHEDULER ) )
				{
					DebugLocation(136, 28);
					// MySQL51Parser.g3:136:28: ^( $show_stmt ^( STATUS SCHEDULER ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(136, 31);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(136, 41);
					// MySQL51Parser.g3:136:41: ^( STATUS SCHEDULER )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(136, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_STATUS.NextNode(), root_2);

					DebugLocation(136, 50);
					adaptor.AddChild(root_2, stream_SCHEDULER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// MySQL51Parser.g3:137:7: optScopeModifier STATUS ( like_or_where )?
				{
				DebugLocation(137, 7);
				PushFollow(Follow._optScopeModifier_in_show_stmt1571);
				optScopeModifier150=optScopeModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_optScopeModifier.Add(optScopeModifier150.Tree);
				DebugLocation(137, 24);
				STATUS151=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1573); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS151);

				DebugLocation(137, 31);
				// MySQL51Parser.g3:137:31: ( like_or_where )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==LIKE||LA39_0==WHERE))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:137:31: like_or_where
					{
					DebugLocation(137, 31);
					PushFollow(Follow._like_or_where_in_show_stmt1575);
					like_or_where152=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where152.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }



				{
				// AST REWRITE
				// elements: show_stmt, STATUS, optScopeModifier, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 137:47: -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) )
				{
					DebugLocation(137, 50);
					// MySQL51Parser.g3:137:50: ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(137, 53);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(137, 63);
					// MySQL51Parser.g3:137:63: ^( STATUS ( optScopeModifier )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(137, 65);
					root_2 = (object)adaptor.BecomeRoot(stream_STATUS.NextNode(), root_2);

					DebugLocation(137, 72);
					// MySQL51Parser.g3:137:72: ( optScopeModifier )?
					if (stream_optScopeModifier.HasNext)
					{
						DebugLocation(137, 72);
						adaptor.AddChild(root_2, stream_optScopeModifier.NextTree());

					}
					stream_optScopeModifier.Reset();
					DebugLocation(137, 90);
					// MySQL51Parser.g3:137:90: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(137, 90);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// MySQL51Parser.g3:138:7: TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )?
				{
				DebugLocation(138, 7);
				TABLE153=(IToken)Match(input,TABLE,Follow._TABLE_in_show_stmt1602); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLE.Add(TABLE153);

				DebugLocation(138, 13);
				STATUS154=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1604); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS154);

				DebugLocation(138, 20);
				// MySQL51Parser.g3:138:20: ( ( FROM | IN ) ident )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==FROM||LA41_0==IN))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:138:21: ( FROM | IN ) ident
					{
					DebugLocation(138, 21);
					// MySQL51Parser.g3:138:21: ( FROM | IN )
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==FROM))
					{
						alt40 = 1;
					}
					else if ((LA40_0==IN))
					{
						alt40 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:138:22: FROM
						{
						DebugLocation(138, 22);
						FROM155=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1608); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM155);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:138:27: IN
						{
						DebugLocation(138, 27);
						IN156=(IToken)Match(input,IN,Follow._IN_in_show_stmt1610); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN156);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(138, 31);
					PushFollow(Follow._ident_in_show_stmt1613);
					ident157=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident157.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(138, 39);
				// MySQL51Parser.g3:138:39: ( like_or_where )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==LIKE||LA42_0==WHERE))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:138:39: like_or_where
					{
					DebugLocation(138, 39);
					PushFollow(Follow._like_or_where_in_show_stmt1617);
					like_or_where158=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where158.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }



				{
				// AST REWRITE
				// elements: show_stmt, STATUS, TABLE, ident, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 138:59: -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) )
				{
					DebugLocation(138, 62);
					// MySQL51Parser.g3:138:62: ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(138, 65);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(138, 76);
					// MySQL51Parser.g3:138:76: ^( STATUS TABLE ( ident )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(138, 78);
					root_2 = (object)adaptor.BecomeRoot(stream_STATUS.NextNode(), root_2);

					DebugLocation(138, 85);
					adaptor.AddChild(root_2, stream_TABLE.NextNode());
					DebugLocation(138, 91);
					// MySQL51Parser.g3:138:91: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(138, 91);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(138, 98);
					// MySQL51Parser.g3:138:98: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(138, 98);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// MySQL51Parser.g3:139:7: TABLES ( ( FROM | IN ) ident )? ( like_or_where )?
				{
				DebugLocation(139, 7);
				TABLES159=(IToken)Match(input,TABLES,Follow._TABLES_in_show_stmt1651); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLES.Add(TABLES159);

				DebugLocation(139, 14);
				// MySQL51Parser.g3:139:14: ( ( FROM | IN ) ident )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==FROM||LA44_0==IN))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:139:15: ( FROM | IN ) ident
					{
					DebugLocation(139, 15);
					// MySQL51Parser.g3:139:15: ( FROM | IN )
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==FROM))
					{
						alt43 = 1;
					}
					else if ((LA43_0==IN))
					{
						alt43 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:139:16: FROM
						{
						DebugLocation(139, 16);
						FROM160=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1655); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM160);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:139:21: IN
						{
						DebugLocation(139, 21);
						IN161=(IToken)Match(input,IN,Follow._IN_in_show_stmt1657); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN161);


						}
						break;

					}
					} finally { DebugExitSubRule(43); }

					DebugLocation(139, 25);
					PushFollow(Follow._ident_in_show_stmt1660);
					ident162=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident162.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(139, 33);
				// MySQL51Parser.g3:139:33: ( like_or_where )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==LIKE||LA45_0==WHERE))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:139:33: like_or_where
					{
					DebugLocation(139, 33);
					PushFollow(Follow._like_or_where_in_show_stmt1664);
					like_or_where163=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where163.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }



				{
				// AST REWRITE
				// elements: show_stmt, TABLES, ident, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 139:57: -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) )
				{
					DebugLocation(139, 60);
					// MySQL51Parser.g3:139:60: ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(139, 63);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(139, 73);
					// MySQL51Parser.g3:139:73: ^( TABLES ( ident )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(139, 75);
					root_2 = (object)adaptor.BecomeRoot(stream_TABLES.NextNode(), root_2);

					DebugLocation(139, 82);
					// MySQL51Parser.g3:139:82: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(139, 82);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(139, 89);
					// MySQL51Parser.g3:139:89: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(139, 89);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// MySQL51Parser.g3:140:7: TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )?
				{
				DebugLocation(140, 7);
				TRIGGERS164=(IToken)Match(input,TRIGGERS,Follow._TRIGGERS_in_show_stmt1699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRIGGERS.Add(TRIGGERS164);

				DebugLocation(140, 16);
				// MySQL51Parser.g3:140:16: ( ( FROM | IN ) ident )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==FROM||LA47_0==IN))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:140:17: ( FROM | IN ) ident
					{
					DebugLocation(140, 17);
					// MySQL51Parser.g3:140:17: ( FROM | IN )
					int alt46=2;
					try { DebugEnterSubRule(46);
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==FROM))
					{
						alt46 = 1;
					}
					else if ((LA46_0==IN))
					{
						alt46 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:140:18: FROM
						{
						DebugLocation(140, 18);
						FROM165=(IToken)Match(input,FROM,Follow._FROM_in_show_stmt1703); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM165);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:140:23: IN
						{
						DebugLocation(140, 23);
						IN166=(IToken)Match(input,IN,Follow._IN_in_show_stmt1705); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN166);


						}
						break;

					}
					} finally { DebugExitSubRule(46); }

					DebugLocation(140, 27);
					PushFollow(Follow._ident_in_show_stmt1708);
					ident167=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident167.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(140, 35);
				// MySQL51Parser.g3:140:35: ( like_or_where )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LIKE||LA48_0==WHERE))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:140:35: like_or_where
					{
					DebugLocation(140, 35);
					PushFollow(Follow._like_or_where_in_show_stmt1712);
					like_or_where168=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where168.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }



				{
				// AST REWRITE
				// elements: show_stmt, TRIGGERS, ident, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 140:57: -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) )
				{
					DebugLocation(140, 60);
					// MySQL51Parser.g3:140:60: ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(140, 63);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(140, 73);
					// MySQL51Parser.g3:140:73: ^( TRIGGERS ( ident )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(140, 75);
					root_2 = (object)adaptor.BecomeRoot(stream_TRIGGERS.NextNode(), root_2);

					DebugLocation(140, 84);
					// MySQL51Parser.g3:140:84: ( ident )?
					if (stream_ident.HasNext)
					{
						DebugLocation(140, 84);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();
					DebugLocation(140, 91);
					// MySQL51Parser.g3:140:91: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(140, 91);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// MySQL51Parser.g3:141:7: optScopeModifier VARIABLES ( like_or_where )?
				{
				DebugLocation(141, 7);
				PushFollow(Follow._optScopeModifier_in_show_stmt1745);
				optScopeModifier169=optScopeModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_optScopeModifier.Add(optScopeModifier169.Tree);
				DebugLocation(141, 24);
				VARIABLES170=(IToken)Match(input,VARIABLES,Follow._VARIABLES_in_show_stmt1747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VARIABLES.Add(VARIABLES170);

				DebugLocation(141, 34);
				// MySQL51Parser.g3:141:34: ( like_or_where )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==LIKE||LA49_0==WHERE))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:141:34: like_or_where
					{
					DebugLocation(141, 34);
					PushFollow(Follow._like_or_where_in_show_stmt1749);
					like_or_where171=like_or_where();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_like_or_where.Add(like_or_where171.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: show_stmt, VARIABLES, optScopeModifier, like_or_where
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 141:51: -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) )
				{
					DebugLocation(141, 54);
					// MySQL51Parser.g3:141:54: ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(141, 57);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(141, 67);
					// MySQL51Parser.g3:141:67: ^( VARIABLES ( optScopeModifier )? ( like_or_where )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(141, 69);
					root_2 = (object)adaptor.BecomeRoot(stream_VARIABLES.NextNode(), root_2);

					DebugLocation(141, 79);
					// MySQL51Parser.g3:141:79: ( optScopeModifier )?
					if (stream_optScopeModifier.HasNext)
					{
						DebugLocation(141, 79);
						adaptor.AddChild(root_2, stream_optScopeModifier.NextTree());

					}
					stream_optScopeModifier.Reset();
					DebugLocation(141, 97);
					// MySQL51Parser.g3:141:97: ( like_or_where )?
					if (stream_like_or_where.HasNext)
					{
						DebugLocation(141, 97);
						adaptor.AddChild(root_2, stream_like_or_where.NextTree());

					}
					stream_like_or_where.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// MySQL51Parser.g3:142:7: WARNINGS ( limit )?
				{
				DebugLocation(142, 7);
				WARNINGS172=(IToken)Match(input,WARNINGS,Follow._WARNINGS_in_show_stmt1777); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WARNINGS.Add(WARNINGS172);

				DebugLocation(142, 16);
				// MySQL51Parser.g3:142:16: ( limit )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==LIMIT))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:142:16: limit
					{
					DebugLocation(142, 16);
					PushFollow(Follow._limit_in_show_stmt1779);
					limit173=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit173.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(50); }



				{
				// AST REWRITE
				// elements: show_stmt, WARNINGS, limit
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 142:25: -> ^( $show_stmt ^( WARNINGS ( limit )? ) )
				{
					DebugLocation(142, 28);
					// MySQL51Parser.g3:142:28: ^( $show_stmt ^( WARNINGS ( limit )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(142, 31);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(142, 41);
					// MySQL51Parser.g3:142:41: ^( WARNINGS ( limit )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(142, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_WARNINGS.NextNode(), root_2);

					DebugLocation(142, 52);
					// MySQL51Parser.g3:142:52: ( limit )?
					if (stream_limit.HasNext)
					{
						DebugLocation(142, 52);
						adaptor.AddChild(root_2, stream_limit.NextTree());

					}
					stream_limit.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// MySQL51Parser.g3:143:4: SLAVE HOSTS
				{
				DebugLocation(143, 4);
				SLAVE174=(IToken)Match(input,SLAVE,Follow._SLAVE_in_show_stmt1801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SLAVE.Add(SLAVE174);

				DebugLocation(143, 10);
				HOSTS175=(IToken)Match(input,HOSTS,Follow._HOSTS_in_show_stmt1803); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HOSTS.Add(HOSTS175);



				{
				// AST REWRITE
				// elements: show_stmt, SLAVE, HOSTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 143:16: -> ^( $show_stmt ^( SLAVE HOSTS ) )
				{
					DebugLocation(143, 19);
					// MySQL51Parser.g3:143:19: ^( $show_stmt ^( SLAVE HOSTS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(143, 22);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(143, 32);
					// MySQL51Parser.g3:143:32: ^( SLAVE HOSTS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(143, 34);
					root_2 = (object)adaptor.BecomeRoot(stream_SLAVE.NextNode(), root_2);

					DebugLocation(143, 40);
					adaptor.AddChild(root_2, stream_HOSTS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// MySQL51Parser.g3:144:4: SLAVE STATUS
				{
				DebugLocation(144, 4);
				SLAVE176=(IToken)Match(input,SLAVE,Follow._SLAVE_in_show_stmt1821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SLAVE.Add(SLAVE176);

				DebugLocation(144, 10);
				STATUS177=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS177);



				{
				// AST REWRITE
				// elements: show_stmt, SLAVE, STATUS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 144:17: -> ^( $show_stmt ^( SLAVE STATUS ) )
				{
					DebugLocation(144, 20);
					// MySQL51Parser.g3:144:20: ^( $show_stmt ^( SLAVE STATUS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(144, 23);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(144, 33);
					// MySQL51Parser.g3:144:33: ^( SLAVE STATUS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(144, 35);
					root_2 = (object)adaptor.BecomeRoot(stream_SLAVE.NextNode(), root_2);

					DebugLocation(144, 41);
					adaptor.AddChild(root_2, stream_STATUS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// MySQL51Parser.g3:145:4: MASTER STATUS
				{
				DebugLocation(145, 4);
				MASTER178=(IToken)Match(input,MASTER,Follow._MASTER_in_show_stmt1841); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MASTER.Add(MASTER178);

				DebugLocation(145, 11);
				STATUS179=(IToken)Match(input,STATUS,Follow._STATUS_in_show_stmt1843); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STATUS.Add(STATUS179);



				{
				// AST REWRITE
				// elements: show_stmt, MASTER, STATUS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 145:18: -> ^( $show_stmt ^( MASTER STATUS ) )
				{
					DebugLocation(145, 21);
					// MySQL51Parser.g3:145:21: ^( $show_stmt ^( MASTER STATUS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(145, 24);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(145, 34);
					// MySQL51Parser.g3:145:34: ^( MASTER STATUS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(145, 36);
					root_2 = (object)adaptor.BecomeRoot(stream_MASTER.NextNode(), root_2);

					DebugLocation(145, 43);
					adaptor.AddChild(root_2, stream_STATUS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// MySQL51Parser.g3:146:4: BINARY LOGS
				{
				DebugLocation(146, 4);
				BINARY180=(IToken)Match(input,BINARY,Follow._BINARY_in_show_stmt1861); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BINARY.Add(BINARY180);

				DebugLocation(146, 11);
				LOGS181=(IToken)Match(input,LOGS,Follow._LOGS_in_show_stmt1863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGS.Add(LOGS181);



				{
				// AST REWRITE
				// elements: show_stmt, BINARY, LOGS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 146:16: -> ^( $show_stmt ^( BINARY LOGS ) )
				{
					DebugLocation(146, 19);
					// MySQL51Parser.g3:146:19: ^( $show_stmt ^( BINARY LOGS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(146, 22);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(146, 32);
					// MySQL51Parser.g3:146:32: ^( BINARY LOGS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(146, 34);
					root_2 = (object)adaptor.BecomeRoot(stream_BINARY.NextNode(), root_2);

					DebugLocation(146, 41);
					adaptor.AddChild(root_2, stream_LOGS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// MySQL51Parser.g3:147:4: MASTER LOGS
				{
				DebugLocation(147, 4);
				MASTER182=(IToken)Match(input,MASTER,Follow._MASTER_in_show_stmt1881); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MASTER.Add(MASTER182);

				DebugLocation(147, 11);
				LOGS183=(IToken)Match(input,LOGS,Follow._LOGS_in_show_stmt1883); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOGS.Add(LOGS183);



				{
				// AST REWRITE
				// elements: show_stmt, MASTER, LOGS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 147:16: -> ^( $show_stmt ^( MASTER LOGS ) )
				{
					DebugLocation(147, 19);
					// MySQL51Parser.g3:147:19: ^( $show_stmt ^( MASTER LOGS ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(147, 22);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(147, 32);
					// MySQL51Parser.g3:147:32: ^( MASTER LOGS )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(147, 34);
					root_2 = (object)adaptor.BecomeRoot(stream_MASTER.NextNode(), root_2);

					DebugLocation(147, 41);
					adaptor.AddChild(root_2, stream_LOGS.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("show_stmt", 8);
			LeaveRule("show_stmt", 8);
			LeaveRule_show_stmt();
		}
		DebugLocation(150, 2);
		} finally { DebugExitRule(GrammarFileName, "show_stmt"); }
		return retval;

	}
	// $ANTLR end "show_stmt"

	private sealed partial class create_specification_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_specification_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_specification();
	partial void LeaveRule_create_specification();

	// $ANTLR start "create_specification"
	// MySQL51Parser.g3:152:1: create_specification : ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) | ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) );
	[GrammarRule("create_specification")]
	private MySQL51Parser.create_specification_return create_specification()
	{
		EnterRule_create_specification();
		EnterRule("create_specification", 9);
		TraceIn("create_specification", 9);
		MySQL51Parser.create_specification_return retval = new MySQL51Parser.create_specification_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DEFAULT184 = default(IToken);
		IToken CHARACTER185 = default(IToken);
		IToken SET186 = default(IToken);
		IToken EQUALS187 = default(IToken);
		IToken set188 = default(IToken);
		IToken DEFAULT189 = default(IToken);
		IToken COLLATE190 = default(IToken);
		IToken EQUALS191 = default(IToken);
		IToken set192 = default(IToken);

		object DEFAULT184_tree = default(object);
		object CHARACTER185_tree = default(object);
		object SET186_tree = default(object);
		object EQUALS187_tree = default(object);
		object set188_tree = default(object);
		object DEFAULT189_tree = default(object);
		object COLLATE190_tree = default(object);
		object EQUALS191_tree = default(object);
		object set192_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "create_specification");
		DebugLocation(152, 2);
		try
		{
			// MySQL51Parser.g3:153:3: ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) | ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case DEFAULT:
				{
				int LA56_1 = input.LA(2);

				if ((LA56_1==CHARACTER))
				{
					alt56 = 1;
				}
				else if ((LA56_1==COLLATE))
				{
					alt56 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARACTER:
				{
				alt56 = 1;
				}
				break;
			case COLLATE:
				{
				alt56 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:153:5: ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 5);
				// MySQL51Parser.g3:153:5: ( DEFAULT )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==DEFAULT))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:153:7: DEFAULT
					{
					DebugLocation(153, 7);
					DEFAULT184=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_create_specification1920); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DEFAULT184_tree = (object)adaptor.Create(DEFAULT184);
					adaptor.AddChild(root_0, DEFAULT184_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(153, 18);
				CHARACTER185=(IToken)Match(input,CHARACTER,Follow._CHARACTER_in_create_specification1925); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARACTER185_tree = (object)adaptor.Create(CHARACTER185);
				adaptor.AddChild(root_0, CHARACTER185_tree);
				}
				DebugLocation(153, 28);
				SET186=(IToken)Match(input,SET,Follow._SET_in_create_specification1927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SET186_tree = (object)adaptor.Create(SET186);
				adaptor.AddChild(root_0, SET186_tree);
				}
				DebugLocation(153, 32);
				// MySQL51Parser.g3:153:32: ( EQUALS )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==EQUALS))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:153:32: EQUALS
					{
					DebugLocation(153, 32);
					EQUALS187=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_specification1929); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS187_tree = (object)adaptor.Create(EQUALS187);
					adaptor.AddChild(root_0, EQUALS187_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(153, 40);
				set188=(IToken)input.LT(1);
				if (input.LA(1)==ID||input.LA(1)==STRING)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set188));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:154:5: ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(154, 5);
				// MySQL51Parser.g3:154:5: ( DEFAULT )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==DEFAULT))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:154:7: DEFAULT
					{
					DebugLocation(154, 7);
					DEFAULT189=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_create_specification1948); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DEFAULT189_tree = (object)adaptor.Create(DEFAULT189);
					adaptor.AddChild(root_0, DEFAULT189_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(154, 18);
				COLLATE190=(IToken)Match(input,COLLATE,Follow._COLLATE_in_create_specification1953); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLLATE190_tree = (object)adaptor.Create(COLLATE190);
				adaptor.AddChild(root_0, COLLATE190_tree);
				}
				DebugLocation(154, 26);
				// MySQL51Parser.g3:154:26: ( EQUALS )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==EQUALS))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:154:26: EQUALS
					{
					DebugLocation(154, 26);
					EQUALS191=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_specification1955); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS191_tree = (object)adaptor.Create(EQUALS191);
					adaptor.AddChild(root_0, EQUALS191_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(154, 34);
				set192=(IToken)input.LT(1);
				if (input.LA(1)==ID||input.LA(1)==STRING)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set192));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_specification", 9);
			LeaveRule("create_specification", 9);
			LeaveRule_create_specification();
		}
		DebugLocation(155, 2);
		} finally { DebugExitRule(GrammarFileName, "create_specification"); }
		return retval;

	}
	// $ANTLR end "create_specification"

	private sealed partial class optScopeModifier_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public optScopeModifier_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_optScopeModifier();
	partial void LeaveRule_optScopeModifier();

	// $ANTLR start "optScopeModifier"
	// MySQL51Parser.g3:157:1: optScopeModifier : ( GLOBAL -> GLOBAL | SESSION -> SESSION |l= LOCAL -> SESSION[$l] | -> SESSION );
	[GrammarRule("optScopeModifier")]
	private MySQL51Parser.optScopeModifier_return optScopeModifier()
	{
		EnterRule_optScopeModifier();
		EnterRule("optScopeModifier", 10);
		TraceIn("optScopeModifier", 10);
		MySQL51Parser.optScopeModifier_return retval = new MySQL51Parser.optScopeModifier_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken l = default(IToken);
		IToken GLOBAL193 = default(IToken);
		IToken SESSION194 = default(IToken);

		object l_tree = default(object);
		object GLOBAL193_tree = default(object);
		object SESSION194_tree = default(object);
		RewriteRuleITokenStream stream_GLOBAL=new RewriteRuleITokenStream(adaptor,"token GLOBAL");
		RewriteRuleITokenStream stream_SESSION=new RewriteRuleITokenStream(adaptor,"token SESSION");
		RewriteRuleITokenStream stream_LOCAL=new RewriteRuleITokenStream(adaptor,"token LOCAL");

		try { DebugEnterRule(GrammarFileName, "optScopeModifier");
		DebugLocation(157, 2);
		try
		{
			// MySQL51Parser.g3:158:3: ( GLOBAL -> GLOBAL | SESSION -> SESSION |l= LOCAL -> SESSION[$l] | -> SESSION )
			int alt57=4;
			try { DebugEnterDecision(57, false);
			switch (input.LA(1))
			{
			case GLOBAL:
				{
				alt57 = 1;
				}
				break;
			case SESSION:
				{
				alt57 = 2;
				}
				break;
			case LOCAL:
				{
				alt57 = 3;
				}
				break;
			case STATUS:
			case VARIABLES:
				{
				alt57 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:158:5: GLOBAL
				{
				DebugLocation(158, 5);
				GLOBAL193=(IToken)Match(input,GLOBAL,Follow._GLOBAL_in_optScopeModifier1979); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_GLOBAL.Add(GLOBAL193);



				{
				// AST REWRITE
				// elements: GLOBAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 158:15: -> GLOBAL
				{
					DebugLocation(158, 18);
					adaptor.AddChild(root_0, stream_GLOBAL.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:159:5: SESSION
				{
				DebugLocation(159, 5);
				SESSION194=(IToken)Match(input,SESSION,Follow._SESSION_in_optScopeModifier1992); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SESSION.Add(SESSION194);



				{
				// AST REWRITE
				// elements: SESSION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 159:15: -> SESSION
				{
					DebugLocation(159, 18);
					adaptor.AddChild(root_0, stream_SESSION.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:160:5: l= LOCAL
				{
				DebugLocation(160, 6);
				l=(IToken)Match(input,LOCAL,Follow._LOCAL_in_optScopeModifier2006); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOCAL.Add(l);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 160:15: -> SESSION[$l]
				{
					DebugLocation(160, 18);
					adaptor.AddChild(root_0, (object)adaptor.Create(SESSION, l));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:161:38: 
				{

				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 161:38: -> SESSION
				{
					DebugLocation(161, 41);
					adaptor.AddChild(root_0, (object)adaptor.Create(SESSION, "SESSION"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("optScopeModifier", 10);
			LeaveRule("optScopeModifier", 10);
			LeaveRule_optScopeModifier();
		}
		DebugLocation(162, 2);
		} finally { DebugExitRule(GrammarFileName, "optScopeModifier"); }
		return retval;

	}
	// $ANTLR end "optScopeModifier"

	private sealed partial class show_profile_types_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public show_profile_types_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_show_profile_types();
	partial void LeaveRule_show_profile_types();

	// $ANTLR start "show_profile_types"
	// MySQL51Parser.g3:164:1: show_profile_types : ( ALL | BLOCK IO | CONTEXT SWITCHES | CPU | IPC | MEMORY | PAGE FAULTS | SOURCE | SWAPS );
	[GrammarRule("show_profile_types")]
	private MySQL51Parser.show_profile_types_return show_profile_types()
	{
		EnterRule_show_profile_types();
		EnterRule("show_profile_types", 11);
		TraceIn("show_profile_types", 11);
		MySQL51Parser.show_profile_types_return retval = new MySQL51Parser.show_profile_types_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ALL195 = default(IToken);
		IToken BLOCK196 = default(IToken);
		IToken IO197 = default(IToken);
		IToken CONTEXT198 = default(IToken);
		IToken SWITCHES199 = default(IToken);
		IToken CPU200 = default(IToken);
		IToken IPC201 = default(IToken);
		IToken MEMORY202 = default(IToken);
		IToken PAGE203 = default(IToken);
		IToken FAULTS204 = default(IToken);
		IToken SOURCE205 = default(IToken);
		IToken SWAPS206 = default(IToken);

		object ALL195_tree = default(object);
		object BLOCK196_tree = default(object);
		object IO197_tree = default(object);
		object CONTEXT198_tree = default(object);
		object SWITCHES199_tree = default(object);
		object CPU200_tree = default(object);
		object IPC201_tree = default(object);
		object MEMORY202_tree = default(object);
		object PAGE203_tree = default(object);
		object FAULTS204_tree = default(object);
		object SOURCE205_tree = default(object);
		object SWAPS206_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "show_profile_types");
		DebugLocation(164, 2);
		try
		{
			// MySQL51Parser.g3:165:3: ( ALL | BLOCK IO | CONTEXT SWITCHES | CPU | IPC | MEMORY | PAGE FAULTS | SOURCE | SWAPS )
			int alt58=9;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case ALL:
				{
				alt58 = 1;
				}
				break;
			case BLOCK:
				{
				alt58 = 2;
				}
				break;
			case CONTEXT:
				{
				alt58 = 3;
				}
				break;
			case CPU:
				{
				alt58 = 4;
				}
				break;
			case IPC:
				{
				alt58 = 5;
				}
				break;
			case MEMORY:
				{
				alt58 = 6;
				}
				break;
			case PAGE:
				{
				alt58 = 7;
				}
				break;
			case SOURCE:
				{
				alt58 = 8;
				}
				break;
			case SWAPS:
				{
				alt58 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:165:5: ALL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 5);
				ALL195=(IToken)Match(input,ALL,Follow._ALL_in_show_profile_types2036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ALL195_tree = (object)adaptor.Create(ALL195);
				adaptor.AddChild(root_0, ALL195_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:166:5: BLOCK IO
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(166, 5);
				BLOCK196=(IToken)Match(input,BLOCK,Follow._BLOCK_in_show_profile_types2042); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BLOCK196_tree = (object)adaptor.Create(BLOCK196);
				adaptor.AddChild(root_0, BLOCK196_tree);
				}
				DebugLocation(166, 11);
				IO197=(IToken)Match(input,IO,Follow._IO_in_show_profile_types2044); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IO197_tree = (object)adaptor.Create(IO197);
				adaptor.AddChild(root_0, IO197_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:167:5: CONTEXT SWITCHES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 5);
				CONTEXT198=(IToken)Match(input,CONTEXT,Follow._CONTEXT_in_show_profile_types2050); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CONTEXT198_tree = (object)adaptor.Create(CONTEXT198);
				adaptor.AddChild(root_0, CONTEXT198_tree);
				}
				DebugLocation(167, 13);
				SWITCHES199=(IToken)Match(input,SWITCHES,Follow._SWITCHES_in_show_profile_types2052); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SWITCHES199_tree = (object)adaptor.Create(SWITCHES199);
				adaptor.AddChild(root_0, SWITCHES199_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:168:5: CPU
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(168, 5);
				CPU200=(IToken)Match(input,CPU,Follow._CPU_in_show_profile_types2058); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CPU200_tree = (object)adaptor.Create(CPU200);
				adaptor.AddChild(root_0, CPU200_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:169:5: IPC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 5);
				IPC201=(IToken)Match(input,IPC,Follow._IPC_in_show_profile_types2064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IPC201_tree = (object)adaptor.Create(IPC201);
				adaptor.AddChild(root_0, IPC201_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:170:5: MEMORY
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 5);
				MEMORY202=(IToken)Match(input,MEMORY,Follow._MEMORY_in_show_profile_types2070); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MEMORY202_tree = (object)adaptor.Create(MEMORY202);
				adaptor.AddChild(root_0, MEMORY202_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:171:5: PAGE FAULTS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 5);
				PAGE203=(IToken)Match(input,PAGE,Follow._PAGE_in_show_profile_types2076); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PAGE203_tree = (object)adaptor.Create(PAGE203);
				adaptor.AddChild(root_0, PAGE203_tree);
				}
				DebugLocation(171, 10);
				FAULTS204=(IToken)Match(input,FAULTS,Follow._FAULTS_in_show_profile_types2078); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FAULTS204_tree = (object)adaptor.Create(FAULTS204);
				adaptor.AddChild(root_0, FAULTS204_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:172:5: SOURCE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 5);
				SOURCE205=(IToken)Match(input,SOURCE,Follow._SOURCE_in_show_profile_types2084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SOURCE205_tree = (object)adaptor.Create(SOURCE205);
				adaptor.AddChild(root_0, SOURCE205_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:173:5: SWAPS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(173, 5);
				SWAPS206=(IToken)Match(input,SWAPS,Follow._SWAPS_in_show_profile_types2090); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SWAPS206_tree = (object)adaptor.Create(SWAPS206);
				adaptor.AddChild(root_0, SWAPS206_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("show_profile_types", 11);
			LeaveRule("show_profile_types", 11);
			LeaveRule_show_profile_types();
		}
		DebugLocation(174, 2);
		} finally { DebugExitRule(GrammarFileName, "show_profile_types"); }
		return retval;

	}
	// $ANTLR end "show_profile_types"

	private sealed partial class like_or_where_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public like_or_where_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_like_or_where();
	partial void LeaveRule_like_or_where();

	// $ANTLR start "like_or_where"
	// MySQL51Parser.g3:176:1: like_or_where : ( LIKE string_or_placeholder -> ^( LIKE string_or_placeholder ) | WHERE expr -> ^( WHERE expr ) );
	[GrammarRule("like_or_where")]
	private MySQL51Parser.like_or_where_return like_or_where()
	{
		EnterRule_like_or_where();
		EnterRule("like_or_where", 12);
		TraceIn("like_or_where", 12);
		MySQL51Parser.like_or_where_return retval = new MySQL51Parser.like_or_where_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LIKE207 = default(IToken);
		IToken WHERE209 = default(IToken);
		MySQL51Parser.string_or_placeholder_return string_or_placeholder208 = default(MySQL51Parser.string_or_placeholder_return);
		MySQL51Parser.expr_return expr210 = default(MySQL51Parser.expr_return);

		object LIKE207_tree = default(object);
		object WHERE209_tree = default(object);
		RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_string_or_placeholder=new RewriteRuleSubtreeStream(adaptor,"rule string_or_placeholder");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "like_or_where");
		DebugLocation(176, 2);
		try
		{
			// MySQL51Parser.g3:177:3: ( LIKE string_or_placeholder -> ^( LIKE string_or_placeholder ) | WHERE expr -> ^( WHERE expr ) )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==LIKE))
			{
				alt59 = 1;
			}
			else if ((LA59_0==WHERE))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:178:5: LIKE string_or_placeholder
				{
				DebugLocation(178, 5);
				LIKE207=(IToken)Match(input,LIKE,Follow._LIKE_in_like_or_where2108); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE207);

				DebugLocation(178, 10);
				PushFollow(Follow._string_or_placeholder_in_like_or_where2110);
				string_or_placeholder208=string_or_placeholder();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_string_or_placeholder.Add(string_or_placeholder208.Tree);


				{
				// AST REWRITE
				// elements: LIKE, string_or_placeholder
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 178:34: -> ^( LIKE string_or_placeholder )
				{
					DebugLocation(178, 37);
					// MySQL51Parser.g3:178:37: ^( LIKE string_or_placeholder )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(178, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_LIKE.NextNode(), root_1);

					DebugLocation(178, 44);
					adaptor.AddChild(root_1, stream_string_or_placeholder.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:179:5: WHERE expr
				{
				DebugLocation(179, 5);
				WHERE209=(IToken)Match(input,WHERE,Follow._WHERE_in_like_or_where2126); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHERE.Add(WHERE209);

				DebugLocation(179, 11);
				PushFollow(Follow._expr_in_like_or_where2128);
				expr210=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr210.Tree);


				{
				// AST REWRITE
				// elements: WHERE, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 179:19: -> ^( WHERE expr )
				{
					DebugLocation(179, 22);
					// MySQL51Parser.g3:179:22: ^( WHERE expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(179, 24);
					root_1 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

					DebugLocation(179, 30);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("like_or_where", 12);
			LeaveRule("like_or_where", 12);
			LeaveRule_like_or_where();
		}
		DebugLocation(180, 2);
		} finally { DebugExitRule(GrammarFileName, "like_or_where"); }
		return retval;

	}
	// $ANTLR end "like_or_where"

	private sealed partial class explain_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public explain_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_explain_stmt();
	partial void LeaveRule_explain_stmt();

	// $ANTLR start "explain_stmt"
	// MySQL51Parser.g3:182:1: explain_stmt : EXPLAIN select -> ^( EXPLAIN select ) ;
	[GrammarRule("explain_stmt")]
	private MySQL51Parser.explain_stmt_return explain_stmt()
	{
		EnterRule_explain_stmt();
		EnterRule("explain_stmt", 13);
		TraceIn("explain_stmt", 13);
		MySQL51Parser.explain_stmt_return retval = new MySQL51Parser.explain_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EXPLAIN211 = default(IToken);
		MySQL51Parser.select_return select212 = default(MySQL51Parser.select_return);

		object EXPLAIN211_tree = default(object);
		RewriteRuleITokenStream stream_EXPLAIN=new RewriteRuleITokenStream(adaptor,"token EXPLAIN");
		RewriteRuleSubtreeStream stream_select=new RewriteRuleSubtreeStream(adaptor,"rule select");
		try { DebugEnterRule(GrammarFileName, "explain_stmt");
		DebugLocation(182, 2);
		try
		{
			// MySQL51Parser.g3:183:3: ( EXPLAIN select -> ^( EXPLAIN select ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:183:5: EXPLAIN select
			{
			DebugLocation(183, 5);
			EXPLAIN211=(IToken)Match(input,EXPLAIN,Follow._EXPLAIN_in_explain_stmt2154); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPLAIN.Add(EXPLAIN211);

			DebugLocation(183, 13);
			PushFollow(Follow._select_in_explain_stmt2156);
			select212=select();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select.Add(select212.Tree);


			{
			// AST REWRITE
			// elements: EXPLAIN, select
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:20: -> ^( EXPLAIN select )
			{
				DebugLocation(183, 23);
				// MySQL51Parser.g3:183:23: ^( EXPLAIN select )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 25);
				root_1 = (object)adaptor.BecomeRoot(stream_EXPLAIN.NextNode(), root_1);

				DebugLocation(183, 33);
				adaptor.AddChild(root_1, stream_select.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explain_stmt", 13);
			LeaveRule("explain_stmt", 13);
			LeaveRule_explain_stmt();
		}
		DebugLocation(184, 2);
		} finally { DebugExitRule(GrammarFileName, "explain_stmt"); }
		return retval;

	}
	// $ANTLR end "explain_stmt"

	private sealed partial class select_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public select_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_select();
	partial void LeaveRule_select();

	// $ANTLR start "select"
	// MySQL51Parser.g3:186:1: select : select_paren ( UNION (mod= ALL |mod= DISTINCT )? union_selects+= select )* -> {seenUnion}? ^( UNION ( $mod)? select_paren ( $union_selects)+ ) -> select_paren ;
	[GrammarRule("select")]
	private MySQL51Parser.select_return select()
	{
		EnterRule_select();
		EnterRule("select", 14);
		TraceIn("select", 14);
		MySQL51Parser.select_return retval = new MySQL51Parser.select_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken mod = default(IToken);
		IToken UNION214 = default(IToken);
		List<object> list_union_selects = null;
		MySQL51Parser.select_paren_return select_paren213 = default(MySQL51Parser.select_paren_return);
		MySQL51Parser.select_return union_selects = default(MySQL51Parser.select_return);
		object mod_tree = default(object);
		object UNION214_tree = default(object);
		RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
		RewriteRuleSubtreeStream stream_select_paren=new RewriteRuleSubtreeStream(adaptor,"rule select_paren");
		RewriteRuleSubtreeStream stream_select=new RewriteRuleSubtreeStream(adaptor,"rule select");

		bool seenUnion = false;

		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(186, 1);
		try
		{
			// MySQL51Parser.g3:190:2: ( select_paren ( UNION (mod= ALL |mod= DISTINCT )? union_selects+= select )* -> {seenUnion}? ^( UNION ( $mod)? select_paren ( $union_selects)+ ) -> select_paren )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:190:4: select_paren ( UNION (mod= ALL |mod= DISTINCT )? union_selects+= select )*
			{
			DebugLocation(190, 4);
			PushFollow(Follow._select_paren_in_select2181);
			select_paren213=select_paren();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_paren.Add(select_paren213.Tree);
			DebugLocation(191, 3);
			// MySQL51Parser.g3:191:3: ( UNION (mod= ALL |mod= DISTINCT )? union_selects+= select )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==UNION))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:191:4: UNION (mod= ALL |mod= DISTINCT )? union_selects+= select
					{
					DebugLocation(191, 4);
					UNION214=(IToken)Match(input,UNION,Follow._UNION_in_select2186); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION214);

					DebugLocation(191, 10);
					// MySQL51Parser.g3:191:10: (mod= ALL |mod= DISTINCT )?
					int alt60=3;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==ALL))
					{
						alt60 = 1;
					}
					else if ((LA60_0==DISTINCT))
					{
						alt60 = 2;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:191:11: mod= ALL
						{
						DebugLocation(191, 14);
						mod=(IToken)Match(input,ALL,Follow._ALL_in_select2191); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(mod);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:191:21: mod= DISTINCT
						{
						DebugLocation(191, 24);
						mod=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_select2197); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DISTINCT.Add(mod);


						}
						break;

					}
					} finally { DebugExitSubRule(60); }

					DebugLocation(191, 49);
					PushFollow(Follow._select_in_select2203);
					union_selects=select();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select.Add(union_selects.Tree);
					if (list_union_selects==null) list_union_selects=new List<object>();
					list_union_selects.Add(union_selects.Tree);

					DebugLocation(191, 58);
					if (state.backtracking == 0)
					{
						seenUnion=true;
					}

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: UNION, mod, select_paren, union_selects, select_paren
			// token labels: mod
			// rule labels: retval
			// token list labels: 
			// rule list labels: union_selects
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_mod=new RewriteRuleITokenStream(adaptor,"token mod",mod);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_union_selects=new RewriteRuleSubtreeStream(adaptor,"token union_selects",list_union_selects);
			root_0 = (object)adaptor.Nil();
			// 192:5: -> {seenUnion}? ^( UNION ( $mod)? select_paren ( $union_selects)+ )
			if (seenUnion)
			{
				DebugLocation(192, 21);
				// MySQL51Parser.g3:192:21: ^( UNION ( $mod)? select_paren ( $union_selects)+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(192, 23);
				root_1 = (object)adaptor.BecomeRoot(stream_UNION.NextNode(), root_1);

				DebugLocation(192, 30);
				// MySQL51Parser.g3:192:30: ( $mod)?
				if (stream_mod.HasNext)
				{
					DebugLocation(192, 30);
					adaptor.AddChild(root_1, stream_mod.NextNode());

				}
				stream_mod.Reset();
				DebugLocation(192, 35);
				adaptor.AddChild(root_1, stream_select_paren.NextTree());
				DebugLocation(192, 49);
				if (!(stream_union_selects.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_union_selects.HasNext )
				{
					DebugLocation(192, 49);
					adaptor.AddChild(root_1, stream_union_selects.NextTree());

				}
				stream_union_selects.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 193:4: -> select_paren
			{
				DebugLocation(193, 7);
				adaptor.AddChild(root_0, stream_select_paren.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 14);
			LeaveRule("select", 14);
			LeaveRule_select();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	private sealed partial class select_paren_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public select_paren_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_select_paren();
	partial void LeaveRule_select_paren();

	// $ANTLR start "select_paren"
	// MySQL51Parser.g3:196:1: select_paren options {backtrack=true; memoize=true; } : ( LPAREN select_paren RPAREN -> select_paren | select_inner -> select_inner );
	[GrammarRule("select_paren")]
	private MySQL51Parser.select_paren_return select_paren()
	{
		EnterRule_select_paren();
		EnterRule("select_paren", 15);
		TraceIn("select_paren", 15);
		MySQL51Parser.select_paren_return retval = new MySQL51Parser.select_paren_return(this);
		retval.Start = (IToken)input.LT(1);
		int select_paren_StartIndex = input.Index;
		object root_0 = default(object);

		IToken LPAREN215 = default(IToken);
		IToken RPAREN217 = default(IToken);
		MySQL51Parser.select_paren_return select_paren216 = default(MySQL51Parser.select_paren_return);
		MySQL51Parser.select_inner_return select_inner218 = default(MySQL51Parser.select_inner_return);

		object LPAREN215_tree = default(object);
		object RPAREN217_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_select_paren=new RewriteRuleSubtreeStream(adaptor,"rule select_paren");
		RewriteRuleSubtreeStream stream_select_inner=new RewriteRuleSubtreeStream(adaptor,"rule select_inner");
		try { DebugEnterRule(GrammarFileName, "select_paren");
		DebugLocation(196, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }
			// MySQL51Parser.g3:197:2: ( LPAREN select_paren RPAREN -> select_paren | select_inner -> select_inner )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==LPAREN))
			{
				alt62 = 1;
			}
			else if ((LA62_0==SELECT))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:197:4: LPAREN select_paren RPAREN
				{
				DebugLocation(197, 4);
				LPAREN215=(IToken)Match(input,LPAREN,Follow._LPAREN_in_select_paren2261); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN215);

				DebugLocation(197, 11);
				PushFollow(Follow._select_paren_in_select_paren2263);
				select_paren216=select_paren();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_paren.Add(select_paren216.Tree);
				DebugLocation(197, 24);
				RPAREN217=(IToken)Match(input,RPAREN,Follow._RPAREN_in_select_paren2265); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN217);



				{
				// AST REWRITE
				// elements: select_paren
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 197:31: -> select_paren
				{
					DebugLocation(197, 34);
					adaptor.AddChild(root_0, stream_select_paren.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:198:4: select_inner
				{
				DebugLocation(198, 4);
				PushFollow(Follow._select_inner_in_select_paren2274);
				select_inner218=select_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_inner.Add(select_inner218.Tree);


				{
				// AST REWRITE
				// elements: select_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 198:20: -> select_inner
				{
					DebugLocation(198, 23);
					adaptor.AddChild(root_0, stream_select_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_paren", 15);
			LeaveRule("select_paren", 15);
			LeaveRule_select_paren();
			if (state.backtracking > 0) { Memoize(input, 15, select_paren_StartIndex); }
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "select_paren"); }
		return retval;

	}
	// $ANTLR end "select_paren"

	private sealed partial class select_inner_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public select_inner_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_select_inner();
	partial void LeaveRule_select_inner();

	// $ANTLR start "select_inner"
	// MySQL51Parser.g3:201:1: select_inner : SELECT ( options {k=1; } : select_options )* exprs+= select_expr ( COMMA exprs+= select_expr )* ( ( FROM table_references ) ( WHERE where= where_condition )? ( group_by )? ( HAVING having= where_condition )? ( order_by )? ( limit )? ( PROCEDURE procId= ident procArgs= parenOptExprList )? ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )? (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )? | order_by ( limit )? | limit )? -> ^( SELECT ( ^( OPTIONS ( select_options )* ) )? ^( COLUMNS ( $exprs)+ ) ( ^( FROM table_references ) )? ( ^( WHERE $where) )? ( group_by )? ( ^( HAVING $having) )? ( order_by )? ( limit )? ( FOR )? ( LOCK )? ) ;
	[GrammarRule("select_inner")]
	private MySQL51Parser.select_inner_return select_inner()
	{
		EnterRule_select_inner();
		EnterRule("select_inner", 16);
		TraceIn("select_inner", 16);
		MySQL51Parser.select_inner_return retval = new MySQL51Parser.select_inner_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken file = default(IToken);
		IToken forUpdate = default(IToken);
		IToken clock = default(IToken);
		IToken SELECT219 = default(IToken);
		IToken COMMA221 = default(IToken);
		IToken FROM222 = default(IToken);
		IToken WHERE224 = default(IToken);
		IToken HAVING226 = default(IToken);
		IToken PROCEDURE229 = default(IToken);
		IToken INTO230 = default(IToken);
		IToken OUTFILE231 = default(IToken);
		IToken INTO232 = default(IToken);
		IToken DUMPFILE233 = default(IToken);
		IToken INTO234 = default(IToken);
		IToken COMMA235 = default(IToken);
		IToken UPDATE236 = default(IToken);
		IToken IN237 = default(IToken);
		IToken SHARE238 = default(IToken);
		IToken MODE239 = default(IToken);
		List<object> list_exprs = null;
		List<object> list_vars = null;
		MySQL51Parser.where_condition_return where = default(MySQL51Parser.where_condition_return);
		MySQL51Parser.where_condition_return having = default(MySQL51Parser.where_condition_return);
		MySQL51Parser.ident_return procId = default(MySQL51Parser.ident_return);
		MySQL51Parser.parenOptExprList_return procArgs = default(MySQL51Parser.parenOptExprList_return);
		MySQL51Parser.infile_options_helper_return opts = default(MySQL51Parser.infile_options_helper_return);
		MySQL51Parser.select_options_return select_options220 = default(MySQL51Parser.select_options_return);
		MySQL51Parser.table_references_return table_references223 = default(MySQL51Parser.table_references_return);
		MySQL51Parser.group_by_return group_by225 = default(MySQL51Parser.group_by_return);
		MySQL51Parser.order_by_return order_by227 = default(MySQL51Parser.order_by_return);
		MySQL51Parser.limit_return limit228 = default(MySQL51Parser.limit_return);
		MySQL51Parser.order_by_return order_by240 = default(MySQL51Parser.order_by_return);
		MySQL51Parser.limit_return limit241 = default(MySQL51Parser.limit_return);
		MySQL51Parser.limit_return limit242 = default(MySQL51Parser.limit_return);
		MySQL51Parser.select_expr_return exprs = default(MySQL51Parser.select_expr_return);
		MySQL51Parser.variable_return vars = default(MySQL51Parser.variable_return);
		object file_tree = default(object);
		object forUpdate_tree = default(object);
		object clock_tree = default(object);
		object SELECT219_tree = default(object);
		object COMMA221_tree = default(object);
		object FROM222_tree = default(object);
		object WHERE224_tree = default(object);
		object HAVING226_tree = default(object);
		object PROCEDURE229_tree = default(object);
		object INTO230_tree = default(object);
		object OUTFILE231_tree = default(object);
		object INTO232_tree = default(object);
		object DUMPFILE233_tree = default(object);
		object INTO234_tree = default(object);
		object COMMA235_tree = default(object);
		object UPDATE236_tree = default(object);
		object IN237_tree = default(object);
		object SHARE238_tree = default(object);
		object MODE239_tree = default(object);
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
		RewriteRuleITokenStream stream_OUTFILE=new RewriteRuleITokenStream(adaptor,"token OUTFILE");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_DUMPFILE=new RewriteRuleITokenStream(adaptor,"token DUMPFILE");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_LOCK=new RewriteRuleITokenStream(adaptor,"token LOCK");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_SHARE=new RewriteRuleITokenStream(adaptor,"token SHARE");
		RewriteRuleITokenStream stream_MODE=new RewriteRuleITokenStream(adaptor,"token MODE");
		RewriteRuleSubtreeStream stream_select_options=new RewriteRuleSubtreeStream(adaptor,"rule select_options");
		RewriteRuleSubtreeStream stream_select_expr=new RewriteRuleSubtreeStream(adaptor,"rule select_expr");
		RewriteRuleSubtreeStream stream_table_references=new RewriteRuleSubtreeStream(adaptor,"rule table_references");
		RewriteRuleSubtreeStream stream_where_condition=new RewriteRuleSubtreeStream(adaptor,"rule where_condition");
		RewriteRuleSubtreeStream stream_group_by=new RewriteRuleSubtreeStream(adaptor,"rule group_by");
		RewriteRuleSubtreeStream stream_order_by=new RewriteRuleSubtreeStream(adaptor,"rule order_by");
		RewriteRuleSubtreeStream stream_limit=new RewriteRuleSubtreeStream(adaptor,"rule limit");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_parenOptExprList=new RewriteRuleSubtreeStream(adaptor,"rule parenOptExprList");
		RewriteRuleSubtreeStream stream_infile_options_helper=new RewriteRuleSubtreeStream(adaptor,"rule infile_options_helper");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "select_inner");
		DebugLocation(201, 1);
		try
		{
			// MySQL51Parser.g3:202:2: ( SELECT ( options {k=1; } : select_options )* exprs+= select_expr ( COMMA exprs+= select_expr )* ( ( FROM table_references ) ( WHERE where= where_condition )? ( group_by )? ( HAVING having= where_condition )? ( order_by )? ( limit )? ( PROCEDURE procId= ident procArgs= parenOptExprList )? ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )? (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )? | order_by ( limit )? | limit )? -> ^( SELECT ( ^( OPTIONS ( select_options )* ) )? ^( COLUMNS ( $exprs)+ ) ( ^( FROM table_references ) )? ( ^( WHERE $where) )? ( group_by )? ( ^( HAVING $having) )? ( order_by )? ( limit )? ( FOR )? ( LOCK )? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:202:4: SELECT ( options {k=1; } : select_options )* exprs+= select_expr ( COMMA exprs+= select_expr )* ( ( FROM table_references ) ( WHERE where= where_condition )? ( group_by )? ( HAVING having= where_condition )? ( order_by )? ( limit )? ( PROCEDURE procId= ident procArgs= parenOptExprList )? ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )? (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )? | order_by ( limit )? | limit )?
			{
			DebugLocation(202, 4);
			SELECT219=(IToken)Match(input,SELECT,Follow._SELECT_in_select_inner2292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SELECT.Add(SELECT219);

			DebugLocation(202, 11);
			// MySQL51Parser.g3:202:11: ( options {k=1; } : select_options )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				try
				{
					alt63 = dfa63.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:202:26: select_options
					{
					DebugLocation(202, 26);
					PushFollow(Follow._select_options_in_select_inner2302);
					select_options220=select_options();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_options.Add(select_options220.Tree);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(203, 8);
			PushFollow(Follow._select_expr_in_select_inner2310);
			exprs=select_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_expr.Add(exprs.Tree);
			if (list_exprs==null) list_exprs=new List<object>();
			list_exprs.Add(exprs.Tree);

			DebugLocation(203, 22);
			// MySQL51Parser.g3:203:22: ( COMMA exprs+= select_expr )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==COMMA))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:203:23: COMMA exprs+= select_expr
					{
					DebugLocation(203, 23);
					COMMA221=(IToken)Match(input,COMMA,Follow._COMMA_in_select_inner2313); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA221);

					DebugLocation(203, 34);
					PushFollow(Follow._select_expr_in_select_inner2317);
					exprs=select_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_expr.Add(exprs.Tree);
					if (list_exprs==null) list_exprs=new List<object>();
					list_exprs.Add(exprs.Tree);


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }

			DebugLocation(204, 3);
			// MySQL51Parser.g3:204:3: ( ( FROM table_references ) ( WHERE where= where_condition )? ( group_by )? ( HAVING having= where_condition )? ( order_by )? ( limit )? ( PROCEDURE procId= ident procArgs= parenOptExprList )? ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )? (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )? | order_by ( limit )? | limit )?
			int alt76=4;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case FROM:
				{
				alt76 = 1;
				}
				break;
			case ORDER:
				{
				alt76 = 2;
				}
				break;
			case LIMIT:
				{
				alt76 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:205:13: ( FROM table_references ) ( WHERE where= where_condition )? ( group_by )? ( HAVING having= where_condition )? ( order_by )? ( limit )? ( PROCEDURE procId= ident procArgs= parenOptExprList )? ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )? (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )?
				{
				DebugLocation(205, 13);
				// MySQL51Parser.g3:205:13: ( FROM table_references )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:205:14: FROM table_references
				{
				DebugLocation(205, 14);
				FROM222=(IToken)Match(input,FROM,Follow._FROM_in_select_inner2338); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM222);

				DebugLocation(205, 19);
				PushFollow(Follow._table_references_in_select_inner2340);
				table_references223=table_references();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_references.Add(table_references223.Tree);

				}

				DebugLocation(206, 13);
				// MySQL51Parser.g3:206:13: ( WHERE where= where_condition )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==WHERE))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:206:14: WHERE where= where_condition
					{
					DebugLocation(206, 14);
					WHERE224=(IToken)Match(input,WHERE,Follow._WHERE_in_select_inner2356); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WHERE.Add(WHERE224);

					DebugLocation(206, 25);
					PushFollow(Follow._where_condition_in_select_inner2360);
					where=where_condition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_condition.Add(where.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(207, 13);
				// MySQL51Parser.g3:207:13: ( group_by )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==GROUP))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:207:13: group_by
					{
					DebugLocation(207, 13);
					PushFollow(Follow._group_by_in_select_inner2376);
					group_by225=group_by();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_group_by.Add(group_by225.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(66); }

				DebugLocation(208, 13);
				// MySQL51Parser.g3:208:13: ( HAVING having= where_condition )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==HAVING))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:208:14: HAVING having= where_condition
					{
					DebugLocation(208, 14);
					HAVING226=(IToken)Match(input,HAVING,Follow._HAVING_in_select_inner2392); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_HAVING.Add(HAVING226);

					DebugLocation(208, 27);
					PushFollow(Follow._where_condition_in_select_inner2396);
					having=where_condition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_condition.Add(having.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(209, 13);
				// MySQL51Parser.g3:209:13: ( order_by )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==ORDER))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:209:13: order_by
					{
					DebugLocation(209, 13);
					PushFollow(Follow._order_by_in_select_inner2412);
					order_by227=order_by();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_order_by.Add(order_by227.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(210, 13);
				// MySQL51Parser.g3:210:13: ( limit )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==LIMIT))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:210:13: limit
					{
					DebugLocation(210, 13);
					PushFollow(Follow._limit_in_select_inner2427);
					limit228=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit228.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(212, 13);
				// MySQL51Parser.g3:212:13: ( PROCEDURE procId= ident procArgs= parenOptExprList )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==PROCEDURE))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:212:14: PROCEDURE procId= ident procArgs= parenOptExprList
					{
					DebugLocation(212, 14);
					PROCEDURE229=(IToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_select_inner2456); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE229);

					DebugLocation(212, 30);
					PushFollow(Follow._ident_in_select_inner2460);
					procId=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(procId.Tree);
					DebugLocation(212, 45);
					PushFollow(Follow._parenOptExprList_in_select_inner2464);
					procArgs=parenOptExprList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_parenOptExprList.Add(procArgs.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(214, 13);
				// MySQL51Parser.g3:214:13: ( ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* ) )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==INTO))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:214:14: ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* )
					{
					DebugLocation(214, 14);
					// MySQL51Parser.g3:214:14: ( INTO OUTFILE file= STRING opts= infile_options_helper | INTO DUMPFILE file= STRING | INTO vars+= variable ( COMMA vars+= variable )* )
					int alt72=3;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==INTO))
					{
						switch (input.LA(2))
						{
						case OUTFILE:
							{
							alt72 = 1;
							}
							break;
						case DUMPFILE:
							{
							alt72 = 2;
							}
							break;
						case GLOBAL_VARIABLE:
						case SESSION_VARIABLE:
							{
							alt72 = 3;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 72, 1, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:214:16: INTO OUTFILE file= STRING opts= infile_options_helper
						{
						DebugLocation(214, 16);
						INTO230=(IToken)Match(input,INTO,Follow._INTO_in_select_inner2497); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INTO.Add(INTO230);

						DebugLocation(214, 21);
						OUTFILE231=(IToken)Match(input,OUTFILE,Follow._OUTFILE_in_select_inner2499); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_OUTFILE.Add(OUTFILE231);

						DebugLocation(214, 33);
						file=(IToken)Match(input,STRING,Follow._STRING_in_select_inner2503); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(file);

						DebugLocation(214, 45);
						PushFollow(Follow._infile_options_helper_in_select_inner2507);
						opts=infile_options_helper();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_infile_options_helper.Add(opts.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:215:19: INTO DUMPFILE file= STRING
						{
						DebugLocation(215, 19);
						INTO232=(IToken)Match(input,INTO,Follow._INTO_in_select_inner2527); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INTO.Add(INTO232);

						DebugLocation(215, 24);
						DUMPFILE233=(IToken)Match(input,DUMPFILE,Follow._DUMPFILE_in_select_inner2529); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DUMPFILE.Add(DUMPFILE233);

						DebugLocation(215, 37);
						file=(IToken)Match(input,STRING,Follow._STRING_in_select_inner2533); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(file);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// MySQL51Parser.g3:216:19: INTO vars+= variable ( COMMA vars+= variable )*
						{
						DebugLocation(216, 19);
						INTO234=(IToken)Match(input,INTO,Follow._INTO_in_select_inner2553); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INTO.Add(INTO234);

						DebugLocation(216, 28);
						PushFollow(Follow._variable_in_select_inner2557);
						vars=variable();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_variable.Add(vars.Tree);
						if (list_vars==null) list_vars=new List<object>();
						list_vars.Add(vars.Tree);

						DebugLocation(216, 39);
						// MySQL51Parser.g3:216:39: ( COMMA vars+= variable )*
						try { DebugEnterSubRule(71);
						while (true)
						{
							int alt71=2;
							try { DebugEnterDecision(71, false);
							int LA71_0 = input.LA(1);

							if ((LA71_0==COMMA))
							{
								alt71 = 1;
							}


							} finally { DebugExitDecision(71); }
							switch ( alt71 )
							{
							case 1:
								DebugEnterAlt(1);
								// MySQL51Parser.g3:216:40: COMMA vars+= variable
								{
								DebugLocation(216, 40);
								COMMA235=(IToken)Match(input,COMMA,Follow._COMMA_in_select_inner2560); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_COMMA.Add(COMMA235);

								DebugLocation(216, 50);
								PushFollow(Follow._variable_in_select_inner2564);
								vars=variable();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_variable.Add(vars.Tree);
								if (list_vars==null) list_vars=new List<object>();
								list_vars.Add(vars.Tree);


								}
								break;

							default:
								goto loop71;
							}
						}

						loop71:
							;

						} finally { DebugExitSubRule(71); }


						}
						break;

					}
					} finally { DebugExitSubRule(72); }


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(219, 13);
				// MySQL51Parser.g3:219:13: (forUpdate= FOR UPDATE |clock= LOCK IN SHARE MODE )?
				int alt74=3;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==FOR))
				{
					alt74 = 1;
				}
				else if ((LA74_0==LOCK))
				{
					alt74 = 2;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:219:14: forUpdate= FOR UPDATE
					{
					DebugLocation(219, 23);
					forUpdate=(IToken)Match(input,FOR,Follow._FOR_in_select_inner2617); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FOR.Add(forUpdate);

					DebugLocation(219, 28);
					UPDATE236=(IToken)Match(input,UPDATE,Follow._UPDATE_in_select_inner2619); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UPDATE.Add(UPDATE236);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:219:37: clock= LOCK IN SHARE MODE
					{
					DebugLocation(219, 42);
					clock=(IToken)Match(input,LOCK,Follow._LOCK_in_select_inner2625); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LOCK.Add(clock);

					DebugLocation(219, 48);
					IN237=(IToken)Match(input,IN,Follow._IN_in_select_inner2627); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IN.Add(IN237);

					DebugLocation(219, 51);
					SHARE238=(IToken)Match(input,SHARE,Follow._SHARE_in_select_inner2629); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SHARE.Add(SHARE238);

					DebugLocation(219, 57);
					MODE239=(IToken)Match(input,MODE,Follow._MODE_in_select_inner2631); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_MODE.Add(MODE239);


					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:220:13: order_by ( limit )?
				{
				DebugLocation(220, 13);
				PushFollow(Follow._order_by_in_select_inner2647);
				order_by240=order_by();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_order_by.Add(order_by240.Tree);
				DebugLocation(221, 13);
				// MySQL51Parser.g3:221:13: ( limit )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==LIMIT))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:221:13: limit
					{
					DebugLocation(221, 13);
					PushFollow(Follow._limit_in_select_inner2661);
					limit241=limit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_limit.Add(limit241.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(75); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:222:13: limit
				{
				DebugLocation(222, 13);
				PushFollow(Follow._limit_in_select_inner2676);
				limit242=limit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_limit.Add(limit242.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }



			{
			// AST REWRITE
			// elements: SELECT, select_options, exprs, FROM, table_references, WHERE, where, group_by, HAVING, having, order_by, limit, FOR, LOCK
			// token labels: 
			// rule labels: where, having, retval
			// token list labels: 
			// rule list labels: exprs
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_where=new RewriteRuleSubtreeStream(adaptor,"rule where",where!=null?where.Tree:null);
			RewriteRuleSubtreeStream stream_having=new RewriteRuleSubtreeStream(adaptor,"rule having",having!=null?having.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_exprs=new RewriteRuleSubtreeStream(adaptor,"token exprs",list_exprs);
			root_0 = (object)adaptor.Nil();
			// 224:3: -> ^( SELECT ( ^( OPTIONS ( select_options )* ) )? ^( COLUMNS ( $exprs)+ ) ( ^( FROM table_references ) )? ( ^( WHERE $where) )? ( group_by )? ( ^( HAVING $having) )? ( order_by )? ( limit )? ( FOR )? ( LOCK )? )
			{
				DebugLocation(224, 6);
				// MySQL51Parser.g3:224:6: ^( SELECT ( ^( OPTIONS ( select_options )* ) )? ^( COLUMNS ( $exprs)+ ) ( ^( FROM table_references ) )? ( ^( WHERE $where) )? ( group_by )? ( ^( HAVING $having) )? ( order_by )? ( limit )? ( FOR )? ( LOCK )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(224, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

				DebugLocation(225, 5);
				// MySQL51Parser.g3:225:5: ( ^( OPTIONS ( select_options )* ) )?
				if (stream_select_options.HasNext)
				{
					DebugLocation(225, 5);
					// MySQL51Parser.g3:225:5: ^( OPTIONS ( select_options )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(225, 7);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPTIONS, "OPTIONS"), root_2);

					DebugLocation(225, 15);
					// MySQL51Parser.g3:225:15: ( select_options )*
					while ( stream_select_options.HasNext )
					{
						DebugLocation(225, 15);
						adaptor.AddChild(root_2, stream_select_options.NextTree());

					}
					stream_select_options.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_select_options.Reset();
				DebugLocation(226, 5);
				// MySQL51Parser.g3:226:5: ^( COLUMNS ( $exprs)+ )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(226, 7);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLUMNS, "COLUMNS"), root_2);

				DebugLocation(226, 16);
				if (!(stream_exprs.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_exprs.HasNext )
				{
					DebugLocation(226, 16);
					adaptor.AddChild(root_2, stream_exprs.NextTree());

				}
				stream_exprs.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(227, 5);
				// MySQL51Parser.g3:227:5: ( ^( FROM table_references ) )?
				if (stream_FROM.HasNext||stream_table_references.HasNext)
				{
					DebugLocation(227, 5);
					// MySQL51Parser.g3:227:5: ^( FROM table_references )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(227, 7);
					root_2 = (object)adaptor.BecomeRoot(stream_FROM.NextNode(), root_2);

					DebugLocation(227, 12);
					adaptor.AddChild(root_2, stream_table_references.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_FROM.Reset();
				stream_table_references.Reset();
				DebugLocation(228, 5);
				// MySQL51Parser.g3:228:5: ( ^( WHERE $where) )?
				if (stream_WHERE.HasNext||stream_where.HasNext)
				{
					DebugLocation(228, 5);
					// MySQL51Parser.g3:228:5: ^( WHERE $where)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(228, 7);
					root_2 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_2);

					DebugLocation(228, 14);
					adaptor.AddChild(root_2, stream_where.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_WHERE.Reset();
				stream_where.Reset();
				DebugLocation(229, 5);
				// MySQL51Parser.g3:229:5: ( group_by )?
				if (stream_group_by.HasNext)
				{
					DebugLocation(229, 5);
					adaptor.AddChild(root_1, stream_group_by.NextTree());

				}
				stream_group_by.Reset();
				DebugLocation(230, 5);
				// MySQL51Parser.g3:230:5: ( ^( HAVING $having) )?
				if (stream_HAVING.HasNext||stream_having.HasNext)
				{
					DebugLocation(230, 5);
					// MySQL51Parser.g3:230:5: ^( HAVING $having)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(230, 7);
					root_2 = (object)adaptor.BecomeRoot(stream_HAVING.NextNode(), root_2);

					DebugLocation(230, 15);
					adaptor.AddChild(root_2, stream_having.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_HAVING.Reset();
				stream_having.Reset();
				DebugLocation(231, 5);
				// MySQL51Parser.g3:231:5: ( order_by )?
				if (stream_order_by.HasNext)
				{
					DebugLocation(231, 5);
					adaptor.AddChild(root_1, stream_order_by.NextTree());

				}
				stream_order_by.Reset();
				DebugLocation(232, 5);
				// MySQL51Parser.g3:232:5: ( limit )?
				if (stream_limit.HasNext)
				{
					DebugLocation(232, 5);
					adaptor.AddChild(root_1, stream_limit.NextTree());

				}
				stream_limit.Reset();
				DebugLocation(233, 5);
				// MySQL51Parser.g3:233:5: ( FOR )?
				if (stream_FOR.HasNext)
				{
					DebugLocation(233, 5);
					adaptor.AddChild(root_1, stream_FOR.NextNode());

				}
				stream_FOR.Reset();
				DebugLocation(234, 5);
				// MySQL51Parser.g3:234:5: ( LOCK )?
				if (stream_LOCK.HasNext)
				{
					DebugLocation(234, 5);
					adaptor.AddChild(root_1, stream_LOCK.NextNode());

				}
				stream_LOCK.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_inner", 16);
			LeaveRule("select_inner", 16);
			LeaveRule_select_inner();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "select_inner"); }
		return retval;

	}
	// $ANTLR end "select_inner"

	private sealed partial class infile_options_helper_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public infile_options_helper_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_infile_options_helper();
	partial void LeaveRule_infile_options_helper();

	// $ANTLR start "infile_options_helper"
	// MySQL51Parser.g3:238:1: infile_options_helper : ( ( COLUMNS | FIELDS ) ( TERMINATED BY fieldTerm= STRING )? ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )? ( ESCAPED BY fieldEsc= STRING )? )? ( LINES ( STARTING BY linesStart= STRING )? ( TERMINATED BY linesTerm= STRING )? )? ;
	[GrammarRule("infile_options_helper")]
	private MySQL51Parser.infile_options_helper_return infile_options_helper()
	{
		EnterRule_infile_options_helper();
		EnterRule("infile_options_helper", 17);
		TraceIn("infile_options_helper", 17);
		MySQL51Parser.infile_options_helper_return retval = new MySQL51Parser.infile_options_helper_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken fieldTerm = default(IToken);
		IToken optEnclosed = default(IToken);
		IToken fieldEncl = default(IToken);
		IToken fieldEsc = default(IToken);
		IToken linesStart = default(IToken);
		IToken linesTerm = default(IToken);
		IToken set243 = default(IToken);
		IToken TERMINATED244 = default(IToken);
		IToken BY245 = default(IToken);
		IToken ENCLOSED246 = default(IToken);
		IToken BY247 = default(IToken);
		IToken ESCAPED248 = default(IToken);
		IToken BY249 = default(IToken);
		IToken LINES250 = default(IToken);
		IToken STARTING251 = default(IToken);
		IToken BY252 = default(IToken);
		IToken TERMINATED253 = default(IToken);
		IToken BY254 = default(IToken);

		object fieldTerm_tree = default(object);
		object optEnclosed_tree = default(object);
		object fieldEncl_tree = default(object);
		object fieldEsc_tree = default(object);
		object linesStart_tree = default(object);
		object linesTerm_tree = default(object);
		object set243_tree = default(object);
		object TERMINATED244_tree = default(object);
		object BY245_tree = default(object);
		object ENCLOSED246_tree = default(object);
		object BY247_tree = default(object);
		object ESCAPED248_tree = default(object);
		object BY249_tree = default(object);
		object LINES250_tree = default(object);
		object STARTING251_tree = default(object);
		object BY252_tree = default(object);
		object TERMINATED253_tree = default(object);
		object BY254_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "infile_options_helper");
		DebugLocation(238, 1);
		try
		{
			// MySQL51Parser.g3:239:2: ( ( ( COLUMNS | FIELDS ) ( TERMINATED BY fieldTerm= STRING )? ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )? ( ESCAPED BY fieldEsc= STRING )? )? ( LINES ( STARTING BY linesStart= STRING )? ( TERMINATED BY linesTerm= STRING )? )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:239:4: ( ( COLUMNS | FIELDS ) ( TERMINATED BY fieldTerm= STRING )? ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )? ( ESCAPED BY fieldEsc= STRING )? )? ( LINES ( STARTING BY linesStart= STRING )? ( TERMINATED BY linesTerm= STRING )? )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(239, 4);
			// MySQL51Parser.g3:239:4: ( ( COLUMNS | FIELDS ) ( TERMINATED BY fieldTerm= STRING )? ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )? ( ESCAPED BY fieldEsc= STRING )? )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==COLUMNS||LA81_0==FIELDS))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:239:6: ( COLUMNS | FIELDS ) ( TERMINATED BY fieldTerm= STRING )? ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )? ( ESCAPED BY fieldEsc= STRING )?
				{
				DebugLocation(239, 6);
				set243=(IToken)input.LT(1);
				if (input.LA(1)==COLUMNS||input.LA(1)==FIELDS)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set243));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(240, 4);
				// MySQL51Parser.g3:240:4: ( TERMINATED BY fieldTerm= STRING )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==TERMINATED))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:240:5: TERMINATED BY fieldTerm= STRING
					{
					DebugLocation(240, 5);
					TERMINATED244=(IToken)Match(input,TERMINATED,Follow._TERMINATED_in_infile_options_helper2811); if (state.failed) return retval;
					if (state.backtracking == 0) {
					TERMINATED244_tree = (object)adaptor.Create(TERMINATED244);
					adaptor.AddChild(root_0, TERMINATED244_tree);
					}
					DebugLocation(240, 16);
					BY245=(IToken)Match(input,BY,Follow._BY_in_infile_options_helper2813); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BY245_tree = (object)adaptor.Create(BY245);
					adaptor.AddChild(root_0, BY245_tree);
					}
					DebugLocation(240, 28);
					fieldTerm=(IToken)Match(input,STRING,Follow._STRING_in_infile_options_helper2817); if (state.failed) return retval;
					if (state.backtracking == 0) {
					fieldTerm_tree = (object)adaptor.Create(fieldTerm);
					adaptor.AddChild(root_0, fieldTerm_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(241, 4);
				// MySQL51Parser.g3:241:4: ( (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==ENCLOSED||LA79_0==OPTIONALLY))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:241:5: (optEnclosed= OPTIONALLY )? ENCLOSED BY fieldEncl= STRING
					{
					DebugLocation(241, 16);
					// MySQL51Parser.g3:241:16: (optEnclosed= OPTIONALLY )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==OPTIONALLY))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:241:16: optEnclosed= OPTIONALLY
						{
						DebugLocation(241, 16);
						optEnclosed=(IToken)Match(input,OPTIONALLY,Follow._OPTIONALLY_in_infile_options_helper2827); if (state.failed) return retval;
						if (state.backtracking == 0) {
						optEnclosed_tree = (object)adaptor.Create(optEnclosed);
						adaptor.AddChild(root_0, optEnclosed_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(241, 29);
					ENCLOSED246=(IToken)Match(input,ENCLOSED,Follow._ENCLOSED_in_infile_options_helper2830); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ENCLOSED246_tree = (object)adaptor.Create(ENCLOSED246);
					adaptor.AddChild(root_0, ENCLOSED246_tree);
					}
					DebugLocation(241, 38);
					BY247=(IToken)Match(input,BY,Follow._BY_in_infile_options_helper2832); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BY247_tree = (object)adaptor.Create(BY247);
					adaptor.AddChild(root_0, BY247_tree);
					}
					DebugLocation(241, 50);
					fieldEncl=(IToken)Match(input,STRING,Follow._STRING_in_infile_options_helper2836); if (state.failed) return retval;
					if (state.backtracking == 0) {
					fieldEncl_tree = (object)adaptor.Create(fieldEncl);
					adaptor.AddChild(root_0, fieldEncl_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(242, 4);
				// MySQL51Parser.g3:242:4: ( ESCAPED BY fieldEsc= STRING )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==ESCAPED))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:242:5: ESCAPED BY fieldEsc= STRING
					{
					DebugLocation(242, 5);
					ESCAPED248=(IToken)Match(input,ESCAPED,Follow._ESCAPED_in_infile_options_helper2848); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ESCAPED248_tree = (object)adaptor.Create(ESCAPED248);
					adaptor.AddChild(root_0, ESCAPED248_tree);
					}
					DebugLocation(242, 13);
					BY249=(IToken)Match(input,BY,Follow._BY_in_infile_options_helper2850); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BY249_tree = (object)adaptor.Create(BY249);
					adaptor.AddChild(root_0, BY249_tree);
					}
					DebugLocation(242, 24);
					fieldEsc=(IToken)Match(input,STRING,Follow._STRING_in_infile_options_helper2854); if (state.failed) return retval;
					if (state.backtracking == 0) {
					fieldEsc_tree = (object)adaptor.Create(fieldEsc);
					adaptor.AddChild(root_0, fieldEsc_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(244, 3);
			// MySQL51Parser.g3:244:3: ( LINES ( STARTING BY linesStart= STRING )? ( TERMINATED BY linesTerm= STRING )? )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==LINES))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:244:5: LINES ( STARTING BY linesStart= STRING )? ( TERMINATED BY linesTerm= STRING )?
				{
				DebugLocation(244, 5);
				LINES250=(IToken)Match(input,LINES,Follow._LINES_in_infile_options_helper2877); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LINES250_tree = (object)adaptor.Create(LINES250);
				adaptor.AddChild(root_0, LINES250_tree);
				}
				DebugLocation(245, 4);
				// MySQL51Parser.g3:245:4: ( STARTING BY linesStart= STRING )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==STARTING))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:245:5: STARTING BY linesStart= STRING
					{
					DebugLocation(245, 5);
					STARTING251=(IToken)Match(input,STARTING,Follow._STARTING_in_infile_options_helper2883); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STARTING251_tree = (object)adaptor.Create(STARTING251);
					adaptor.AddChild(root_0, STARTING251_tree);
					}
					DebugLocation(245, 14);
					BY252=(IToken)Match(input,BY,Follow._BY_in_infile_options_helper2885); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BY252_tree = (object)adaptor.Create(BY252);
					adaptor.AddChild(root_0, BY252_tree);
					}
					DebugLocation(245, 27);
					linesStart=(IToken)Match(input,STRING,Follow._STRING_in_infile_options_helper2889); if (state.failed) return retval;
					if (state.backtracking == 0) {
					linesStart_tree = (object)adaptor.Create(linesStart);
					adaptor.AddChild(root_0, linesStart_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(246, 4);
				// MySQL51Parser.g3:246:4: ( TERMINATED BY linesTerm= STRING )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==TERMINATED))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:246:5: TERMINATED BY linesTerm= STRING
					{
					DebugLocation(246, 5);
					TERMINATED253=(IToken)Match(input,TERMINATED,Follow._TERMINATED_in_infile_options_helper2897); if (state.failed) return retval;
					if (state.backtracking == 0) {
					TERMINATED253_tree = (object)adaptor.Create(TERMINATED253);
					adaptor.AddChild(root_0, TERMINATED253_tree);
					}
					DebugLocation(246, 16);
					BY254=(IToken)Match(input,BY,Follow._BY_in_infile_options_helper2899); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BY254_tree = (object)adaptor.Create(BY254);
					adaptor.AddChild(root_0, BY254_tree);
					}
					DebugLocation(246, 28);
					linesTerm=(IToken)Match(input,STRING,Follow._STRING_in_infile_options_helper2903); if (state.failed) return retval;
					if (state.backtracking == 0) {
					linesTerm_tree = (object)adaptor.Create(linesTerm);
					adaptor.AddChild(root_0, linesTerm_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infile_options_helper", 17);
			LeaveRule("infile_options_helper", 17);
			LeaveRule_infile_options_helper();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "infile_options_helper"); }
		return retval;

	}
	// $ANTLR end "infile_options_helper"

	private sealed partial class variable_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variable_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// MySQL51Parser.g3:250:1: variable : ( SESSION_VARIABLE | GLOBAL_VARIABLE );
	[GrammarRule("variable")]
	private MySQL51Parser.variable_return variable()
	{
		EnterRule_variable();
		EnterRule("variable", 18);
		TraceIn("variable", 18);
		MySQL51Parser.variable_return retval = new MySQL51Parser.variable_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set255 = default(IToken);

		object set255_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(250, 1);
		try
		{
			// MySQL51Parser.g3:251:2: ( SESSION_VARIABLE | GLOBAL_VARIABLE )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(251, 2);
			set255=(IToken)input.LT(1);
			if (input.LA(1)==GLOBAL_VARIABLE||input.LA(1)==SESSION_VARIABLE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set255));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 18);
			LeaveRule("variable", 18);
			LeaveRule_variable();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	private sealed partial class limit_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public limit_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_limit();
	partial void LeaveRule_limit();

	// $ANTLR start "limit"
	// MySQL51Parser.g3:255:1: limit : LIMIT ( ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder ) | (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder ) ) -> ^( LIMIT $lim ( $offset)? ( $offsetForm)? ) ;
	[GrammarRule("limit")]
	private MySQL51Parser.limit_return limit()
	{
		EnterRule_limit();
		EnterRule("limit", 19);
		TraceIn("limit", 19);
		MySQL51Parser.limit_return retval = new MySQL51Parser.limit_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken offsetForm = default(IToken);
		IToken LIMIT256 = default(IToken);
		IToken COMMA257 = default(IToken);
		MySQL51Parser.number_or_placeholder_return offset = default(MySQL51Parser.number_or_placeholder_return);
		MySQL51Parser.number_or_placeholder_return lim = default(MySQL51Parser.number_or_placeholder_return);

		object offsetForm_tree = default(object);
		object LIMIT256_tree = default(object);
		object COMMA257_tree = default(object);
		RewriteRuleITokenStream stream_LIMIT=new RewriteRuleITokenStream(adaptor,"token LIMIT");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_OFFSET=new RewriteRuleITokenStream(adaptor,"token OFFSET");
		RewriteRuleSubtreeStream stream_number_or_placeholder=new RewriteRuleSubtreeStream(adaptor,"rule number_or_placeholder");
		try { DebugEnterRule(GrammarFileName, "limit");
		DebugLocation(255, 1);
		try
		{
			// MySQL51Parser.g3:256:2: ( LIMIT ( ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder ) | (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder ) ) -> ^( LIMIT $lim ( $offset)? ( $offsetForm)? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:256:4: LIMIT ( ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder ) | (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder ) )
			{
			DebugLocation(256, 4);
			LIMIT256=(IToken)Match(input,LIMIT,Follow._LIMIT_in_limit2938); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIMIT.Add(LIMIT256);

			DebugLocation(257, 4);
			// MySQL51Parser.g3:257:4: ( ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder ) | (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder ) )
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==INT_NUMBER||LA86_0==VALUE_PLACEHOLDER))
			{
				int LA86_1 = input.LA(2);

				if ((LA86_1==EOF||LA86_1==COMMA||LA86_1==FOR||LA86_1==INTO||LA86_1==LOCK||LA86_1==ON||LA86_1==PROCEDURE||LA86_1==RPAREN||LA86_1==SEMI||LA86_1==UNION))
				{
					alt86 = 1;
				}
				else if ((LA86_1==OFFSET))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:257:6: ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder )
				{
				DebugLocation(257, 6);
				// MySQL51Parser.g3:257:6: ( (offset= number_or_placeholder COMMA )? lim= number_or_placeholder )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:257:7: (offset= number_or_placeholder COMMA )? lim= number_or_placeholder
				{
				DebugLocation(257, 7);
				// MySQL51Parser.g3:257:7: (offset= number_or_placeholder COMMA )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==INT_NUMBER||LA85_0==VALUE_PLACEHOLDER))
				{
					int LA85_1 = input.LA(2);

					if ((LA85_1==COMMA))
					{
						alt85 = 1;
					}
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:257:8: offset= number_or_placeholder COMMA
					{
					DebugLocation(257, 14);
					PushFollow(Follow._number_or_placeholder_in_limit2949);
					offset=number_or_placeholder();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_number_or_placeholder.Add(offset.Tree);
					DebugLocation(257, 37);
					COMMA257=(IToken)Match(input,COMMA,Follow._COMMA_in_limit2951); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA257);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(257, 48);
				PushFollow(Follow._number_or_placeholder_in_limit2957);
				lim=number_or_placeholder();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number_or_placeholder.Add(lim.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:258:7: (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder )
				{
				DebugLocation(258, 7);
				// MySQL51Parser.g3:258:7: (lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:258:8: lim= number_or_placeholder offsetForm= OFFSET offset= number_or_placeholder
				{
				DebugLocation(258, 11);
				PushFollow(Follow._number_or_placeholder_in_limit2970);
				lim=number_or_placeholder();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number_or_placeholder.Add(lim.Tree);
				DebugLocation(258, 44);
				offsetForm=(IToken)Match(input,OFFSET,Follow._OFFSET_in_limit2974); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OFFSET.Add(offsetForm);

				DebugLocation(258, 58);
				PushFollow(Follow._number_or_placeholder_in_limit2978);
				offset=number_or_placeholder();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number_or_placeholder.Add(offset.Tree);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(86); }



			{
			// AST REWRITE
			// elements: LIMIT, lim, offset, offsetForm
			// token labels: offsetForm
			// rule labels: lim, offset, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_offsetForm=new RewriteRuleITokenStream(adaptor,"token offsetForm",offsetForm);
			RewriteRuleSubtreeStream stream_lim=new RewriteRuleSubtreeStream(adaptor,"rule lim",lim!=null?lim.Tree:null);
			RewriteRuleSubtreeStream stream_offset=new RewriteRuleSubtreeStream(adaptor,"rule offset",offset!=null?offset.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 260:3: -> ^( LIMIT $lim ( $offset)? ( $offsetForm)? )
			{
				DebugLocation(260, 6);
				// MySQL51Parser.g3:260:6: ^( LIMIT $lim ( $offset)? ( $offsetForm)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(260, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_LIMIT.NextNode(), root_1);

				DebugLocation(260, 15);
				adaptor.AddChild(root_1, stream_lim.NextTree());
				DebugLocation(260, 20);
				// MySQL51Parser.g3:260:20: ( $offset)?
				if (stream_offset.HasNext)
				{
					DebugLocation(260, 20);
					adaptor.AddChild(root_1, stream_offset.NextTree());

				}
				stream_offset.Reset();
				DebugLocation(260, 29);
				// MySQL51Parser.g3:260:29: ( $offsetForm)?
				if (stream_offsetForm.HasNext)
				{
					DebugLocation(260, 29);
					adaptor.AddChild(root_1, stream_offsetForm.NextNode());

				}
				stream_offsetForm.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("limit", 19);
			LeaveRule("limit", 19);
			LeaveRule_limit();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "limit"); }
		return retval;

	}
	// $ANTLR end "limit"

	private sealed partial class string_or_placeholder_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public string_or_placeholder_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_string_or_placeholder();
	partial void LeaveRule_string_or_placeholder();

	// $ANTLR start "string_or_placeholder"
	// MySQL51Parser.g3:263:1: string_or_placeholder : ( STRING | VALUE_PLACEHOLDER );
	[GrammarRule("string_or_placeholder")]
	private MySQL51Parser.string_or_placeholder_return string_or_placeholder()
	{
		EnterRule_string_or_placeholder();
		EnterRule("string_or_placeholder", 20);
		TraceIn("string_or_placeholder", 20);
		MySQL51Parser.string_or_placeholder_return retval = new MySQL51Parser.string_or_placeholder_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set258 = default(IToken);

		object set258_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "string_or_placeholder");
		DebugLocation(263, 1);
		try
		{
			// MySQL51Parser.g3:264:2: ( STRING | VALUE_PLACEHOLDER )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(264, 2);
			set258=(IToken)input.LT(1);
			if (input.LA(1)==STRING||input.LA(1)==VALUE_PLACEHOLDER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set258));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_or_placeholder", 20);
			LeaveRule("string_or_placeholder", 20);
			LeaveRule_string_or_placeholder();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "string_or_placeholder"); }
		return retval;

	}
	// $ANTLR end "string_or_placeholder"

	private sealed partial class number_or_placeholder_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public number_or_placeholder_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_number_or_placeholder();
	partial void LeaveRule_number_or_placeholder();

	// $ANTLR start "number_or_placeholder"
	// MySQL51Parser.g3:268:1: number_or_placeholder : ( INT_NUMBER | VALUE_PLACEHOLDER );
	[GrammarRule("number_or_placeholder")]
	private MySQL51Parser.number_or_placeholder_return number_or_placeholder()
	{
		EnterRule_number_or_placeholder();
		EnterRule("number_or_placeholder", 21);
		TraceIn("number_or_placeholder", 21);
		MySQL51Parser.number_or_placeholder_return retval = new MySQL51Parser.number_or_placeholder_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set259 = default(IToken);

		object set259_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number_or_placeholder");
		DebugLocation(268, 1);
		try
		{
			// MySQL51Parser.g3:269:2: ( INT_NUMBER | VALUE_PLACEHOLDER )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 2);
			set259=(IToken)input.LT(1);
			if (input.LA(1)==INT_NUMBER||input.LA(1)==VALUE_PLACEHOLDER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set259));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number_or_placeholder", 21);
			LeaveRule("number_or_placeholder", 21);
			LeaveRule_number_or_placeholder();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "number_or_placeholder"); }
		return retval;

	}
	// $ANTLR end "number_or_placeholder"

	private sealed partial class text_string_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public text_string_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_text_string();
	partial void LeaveRule_text_string();

	// $ANTLR start "text_string"
	// MySQL51Parser.g3:273:1: text_string : ( STRING | BINARY_VALUE | HEXA_VALUE );
	[GrammarRule("text_string")]
	private MySQL51Parser.text_string_return text_string()
	{
		EnterRule_text_string();
		EnterRule("text_string", 22);
		TraceIn("text_string", 22);
		MySQL51Parser.text_string_return retval = new MySQL51Parser.text_string_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set260 = default(IToken);

		object set260_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "text_string");
		DebugLocation(273, 1);
		try
		{
			// MySQL51Parser.g3:274:2: ( STRING | BINARY_VALUE | HEXA_VALUE )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(274, 2);
			set260=(IToken)input.LT(1);
			if (input.LA(1)==BINARY_VALUE||input.LA(1)==HEXA_VALUE||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set260));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("text_string", 22);
			LeaveRule("text_string", 22);
			LeaveRule_text_string();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "text_string"); }
		return retval;

	}
	// $ANTLR end "text_string"

	private sealed partial class group_by_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public group_by_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_group_by();
	partial void LeaveRule_group_by();

	// $ANTLR start "group_by"
	// MySQL51Parser.g3:279:1: group_by : GROUP BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )* (rollup= WITH ROLLUP )? -> ^( GROUP ( $elements)+ ( $rollup)? ) ;
	[GrammarRule("group_by")]
	private MySQL51Parser.group_by_return group_by()
	{
		EnterRule_group_by();
		EnterRule("group_by", 23);
		TraceIn("group_by", 23);
		MySQL51Parser.group_by_return retval = new MySQL51Parser.group_by_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken rollup = default(IToken);
		IToken GROUP261 = default(IToken);
		IToken BY262 = default(IToken);
		IToken COMMA263 = default(IToken);
		IToken ROLLUP264 = default(IToken);
		List<object> list_elements = null;
		MySQL51Parser.order_group_by_elements_return elements = default(MySQL51Parser.order_group_by_elements_return);
		object rollup_tree = default(object);
		object GROUP261_tree = default(object);
		object BY262_tree = default(object);
		object COMMA263_tree = default(object);
		object ROLLUP264_tree = default(object);
		RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
		RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleITokenStream stream_ROLLUP=new RewriteRuleITokenStream(adaptor,"token ROLLUP");
		RewriteRuleSubtreeStream stream_order_group_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule order_group_by_elements");
		try { DebugEnterRule(GrammarFileName, "group_by");
		DebugLocation(279, 1);
		try
		{
			// MySQL51Parser.g3:280:2: ( GROUP BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )* (rollup= WITH ROLLUP )? -> ^( GROUP ( $elements)+ ( $rollup)? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:280:4: GROUP BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )* (rollup= WITH ROLLUP )?
			{
			DebugLocation(280, 4);
			GROUP261=(IToken)Match(input,GROUP,Follow._GROUP_in_group_by3067); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP261);

			DebugLocation(280, 10);
			BY262=(IToken)Match(input,BY,Follow._BY_in_group_by3069); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY262);

			DebugLocation(281, 12);
			PushFollow(Follow._order_group_by_elements_in_group_by3077);
			elements=order_group_by_elements();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_order_group_by_elements.Add(elements.Tree);
			if (list_elements==null) list_elements=new List<object>();
			list_elements.Add(elements.Tree);

			DebugLocation(281, 38);
			// MySQL51Parser.g3:281:38: ( COMMA elements+= order_group_by_elements )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==COMMA))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:281:39: COMMA elements+= order_group_by_elements
					{
					DebugLocation(281, 39);
					COMMA263=(IToken)Match(input,COMMA,Follow._COMMA_in_group_by3080); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA263);

					DebugLocation(281, 53);
					PushFollow(Follow._order_group_by_elements_in_group_by3084);
					elements=order_group_by_elements();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_order_group_by_elements.Add(elements.Tree);
					if (list_elements==null) list_elements=new List<object>();
					list_elements.Add(elements.Tree);


					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(282, 3);
			// MySQL51Parser.g3:282:3: (rollup= WITH ROLLUP )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==WITH))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:282:4: rollup= WITH ROLLUP
				{
				DebugLocation(282, 10);
				rollup=(IToken)Match(input,WITH,Follow._WITH_in_group_by3094); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WITH.Add(rollup);

				DebugLocation(282, 16);
				ROLLUP264=(IToken)Match(input,ROLLUP,Follow._ROLLUP_in_group_by3096); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ROLLUP.Add(ROLLUP264);


				}
				break;

			}
			} finally { DebugExitSubRule(88); }



			{
			// AST REWRITE
			// elements: GROUP, elements, rollup
			// token labels: rollup
			// rule labels: retval
			// token list labels: 
			// rule list labels: elements
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_rollup=new RewriteRuleITokenStream(adaptor,"token rollup",rollup);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_elements=new RewriteRuleSubtreeStream(adaptor,"token elements",list_elements);
			root_0 = (object)adaptor.Nil();
			// 283:3: -> ^( GROUP ( $elements)+ ( $rollup)? )
			{
				DebugLocation(283, 6);
				// MySQL51Parser.g3:283:6: ^( GROUP ( $elements)+ ( $rollup)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(283, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_GROUP.NextNode(), root_1);

				DebugLocation(283, 15);
				if (!(stream_elements.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_elements.HasNext )
				{
					DebugLocation(283, 15);
					adaptor.AddChild(root_1, stream_elements.NextTree());

				}
				stream_elements.Reset();
				DebugLocation(283, 26);
				// MySQL51Parser.g3:283:26: ( $rollup)?
				if (stream_rollup.HasNext)
				{
					DebugLocation(283, 26);
					adaptor.AddChild(root_1, stream_rollup.NextNode());

				}
				stream_rollup.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group_by", 23);
			LeaveRule("group_by", 23);
			LeaveRule_group_by();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "group_by"); }
		return retval;

	}
	// $ANTLR end "group_by"

	private sealed partial class order_by_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public order_by_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_order_by();
	partial void LeaveRule_order_by();

	// $ANTLR start "order_by"
	// MySQL51Parser.g3:286:1: order_by : ORDER BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )* -> ^( ORDER ( $elements)+ ) ;
	[GrammarRule("order_by")]
	private MySQL51Parser.order_by_return order_by()
	{
		EnterRule_order_by();
		EnterRule("order_by", 24);
		TraceIn("order_by", 24);
		MySQL51Parser.order_by_return retval = new MySQL51Parser.order_by_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDER265 = default(IToken);
		IToken BY266 = default(IToken);
		IToken COMMA267 = default(IToken);
		List<object> list_elements = null;
		MySQL51Parser.order_group_by_elements_return elements = default(MySQL51Parser.order_group_by_elements_return);
		object ORDER265_tree = default(object);
		object BY266_tree = default(object);
		object COMMA267_tree = default(object);
		RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
		RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_order_group_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule order_group_by_elements");
		try { DebugEnterRule(GrammarFileName, "order_by");
		DebugLocation(286, 1);
		try
		{
			// MySQL51Parser.g3:287:2: ( ORDER BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )* -> ^( ORDER ( $elements)+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:287:4: ORDER BY elements+= order_group_by_elements ( COMMA elements+= order_group_by_elements )*
			{
			DebugLocation(287, 4);
			ORDER265=(IToken)Match(input,ORDER,Follow._ORDER_in_order_by3125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER265);

			DebugLocation(287, 10);
			BY266=(IToken)Match(input,BY,Follow._BY_in_order_by3127); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY266);

			DebugLocation(288, 12);
			PushFollow(Follow._order_group_by_elements_in_order_by3134);
			elements=order_group_by_elements();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_order_group_by_elements.Add(elements.Tree);
			if (list_elements==null) list_elements=new List<object>();
			list_elements.Add(elements.Tree);

			DebugLocation(288, 38);
			// MySQL51Parser.g3:288:38: ( COMMA elements+= order_group_by_elements )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==COMMA))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:288:39: COMMA elements+= order_group_by_elements
					{
					DebugLocation(288, 39);
					COMMA267=(IToken)Match(input,COMMA,Follow._COMMA_in_order_by3137); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA267);

					DebugLocation(288, 53);
					PushFollow(Follow._order_group_by_elements_in_order_by3141);
					elements=order_group_by_elements();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_order_group_by_elements.Add(elements.Tree);
					if (list_elements==null) list_elements=new List<object>();
					list_elements.Add(elements.Tree);


					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }



			{
			// AST REWRITE
			// elements: ORDER, elements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: elements
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_elements=new RewriteRuleSubtreeStream(adaptor,"token elements",list_elements);
			root_0 = (object)adaptor.Nil();
			// 289:3: -> ^( ORDER ( $elements)+ )
			{
				DebugLocation(289, 6);
				// MySQL51Parser.g3:289:6: ^( ORDER ( $elements)+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(289, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_ORDER.NextNode(), root_1);

				DebugLocation(289, 15);
				if (!(stream_elements.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_elements.HasNext )
				{
					DebugLocation(289, 15);
					adaptor.AddChild(root_1, stream_elements.NextTree());

				}
				stream_elements.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("order_by", 24);
			LeaveRule("order_by", 24);
			LeaveRule_order_by();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "order_by"); }
		return retval;

	}
	// $ANTLR end "order_by"

	private sealed partial class order_group_by_elements_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public order_group_by_elements_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_order_group_by_elements();
	partial void LeaveRule_order_group_by_elements();

	// $ANTLR start "order_group_by_elements"
	// MySQL51Parser.g3:292:1: order_group_by_elements : expr (asc= ASC -> ^( DIRECTION[$asc] expr ) |desc= DESC -> ^( DIRECTION[$desc] expr ) | -> ^( DIRECTION[\"ASC\"] expr ) ) ;
	[GrammarRule("order_group_by_elements")]
	private MySQL51Parser.order_group_by_elements_return order_group_by_elements()
	{
		EnterRule_order_group_by_elements();
		EnterRule("order_group_by_elements", 25);
		TraceIn("order_group_by_elements", 25);
		MySQL51Parser.order_group_by_elements_return retval = new MySQL51Parser.order_group_by_elements_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken asc = default(IToken);
		IToken desc = default(IToken);
		MySQL51Parser.expr_return expr268 = default(MySQL51Parser.expr_return);

		object asc_tree = default(object);
		object desc_tree = default(object);
		RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
		RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "order_group_by_elements");
		DebugLocation(292, 1);
		try
		{
			// MySQL51Parser.g3:293:2: ( expr (asc= ASC -> ^( DIRECTION[$asc] expr ) |desc= DESC -> ^( DIRECTION[$desc] expr ) | -> ^( DIRECTION[\"ASC\"] expr ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:293:4: expr (asc= ASC -> ^( DIRECTION[$asc] expr ) |desc= DESC -> ^( DIRECTION[$desc] expr ) | -> ^( DIRECTION[\"ASC\"] expr ) )
			{
			DebugLocation(293, 4);
			PushFollow(Follow._expr_in_order_group_by_elements3168);
			expr268=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr268.Tree);
			DebugLocation(294, 3);
			// MySQL51Parser.g3:294:3: (asc= ASC -> ^( DIRECTION[$asc] expr ) |desc= DESC -> ^( DIRECTION[$desc] expr ) | -> ^( DIRECTION[\"ASC\"] expr ) )
			int alt90=3;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt90 = 1;
				}
				break;
			case DESC:
				{
				alt90 = 2;
				}
				break;
			case EOF:
			case COMMA:
			case FOR:
			case HAVING:
			case INTO:
			case LIMIT:
			case LOCK:
			case ON:
			case ORDER:
			case PROCEDURE:
			case RPAREN:
			case SEMI:
			case SEPARATOR:
			case UNION:
			case WITH:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:294:5: asc= ASC
				{
				DebugLocation(294, 8);
				asc=(IToken)Match(input,ASC,Follow._ASC_in_order_group_by_elements3177); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(asc);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 294:18: -> ^( DIRECTION[$asc] expr )
				{
					DebugLocation(294, 21);
					// MySQL51Parser.g3:294:21: ^( DIRECTION[$asc] expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(294, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DIRECTION, asc), root_1);

					DebugLocation(294, 39);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:295:5: desc= DESC
				{
				DebugLocation(295, 9);
				desc=(IToken)Match(input,DESC,Follow._DESC_in_order_group_by_elements3199); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(desc);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 295:19: -> ^( DIRECTION[$desc] expr )
				{
					DebugLocation(295, 22);
					// MySQL51Parser.g3:295:22: ^( DIRECTION[$desc] expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(295, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DIRECTION, desc), root_1);

					DebugLocation(295, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:296:26: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 296:26: -> ^( DIRECTION[\"ASC\"] expr )
				{
					DebugLocation(296, 29);
					// MySQL51Parser.g3:296:29: ^( DIRECTION[\"ASC\"] expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(296, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DIRECTION, "ASC"), root_1);

					DebugLocation(296, 48);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("order_group_by_elements", 25);
			LeaveRule("order_group_by_elements", 25);
			LeaveRule_order_group_by_elements();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "order_group_by_elements"); }
		return retval;

	}
	// $ANTLR end "order_group_by_elements"

	private sealed partial class select_options_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public select_options_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_select_options();
	partial void LeaveRule_select_options();

	// $ANTLR start "select_options"
	// MySQL51Parser.g3:300:1: select_options : ( ALL | DISTINCT | DISTINCTROW | HIGH_PRIORITY | STRAIGHT_JOIN | SQL_SMALL_RESULT | SQL_BIG_RESULT | SQL_BUFFER_RESULT | SQL_CACHE | SQL_NO_CACHE | SQL_CALC_FOUND_ROWS );
	[GrammarRule("select_options")]
	private MySQL51Parser.select_options_return select_options()
	{
		EnterRule_select_options();
		EnterRule("select_options", 26);
		TraceIn("select_options", 26);
		MySQL51Parser.select_options_return retval = new MySQL51Parser.select_options_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set269 = default(IToken);

		object set269_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "select_options");
		DebugLocation(300, 1);
		try
		{
			// MySQL51Parser.g3:301:2: ( ALL | DISTINCT | DISTINCTROW | HIGH_PRIORITY | STRAIGHT_JOIN | SQL_SMALL_RESULT | SQL_BIG_RESULT | SQL_BUFFER_RESULT | SQL_CACHE | SQL_NO_CACHE | SQL_CALC_FOUND_ROWS )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(301, 2);
			set269=(IToken)input.LT(1);
			if (input.LA(1)==ALL||(input.LA(1)>=DISTINCT && input.LA(1)<=DISTINCTROW)||input.LA(1)==HIGH_PRIORITY||(input.LA(1)>=SQL_BIG_RESULT && input.LA(1)<=SQL_SMALL_RESULT)||input.LA(1)==STRAIGHT_JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set269));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_options", 26);
			LeaveRule("select_options", 26);
			LeaveRule_select_options();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "select_options"); }
		return retval;

	}
	// $ANTLR end "select_options"

	private sealed partial class select_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public select_expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_select_expr();
	partial void LeaveRule_select_expr();

	// $ANTLR start "select_expr"
	// MySQL51Parser.g3:314:1: select_expr : (star= MULT -> ^( SELECT_EXPR $star) | expr ( ( AS )? ident )? -> ^( SELECT_EXPR expr ( ^( ALIAS ident ) )? ) );
	[GrammarRule("select_expr")]
	private MySQL51Parser.select_expr_return select_expr()
	{
		EnterRule_select_expr();
		EnterRule("select_expr", 27);
		TraceIn("select_expr", 27);
		MySQL51Parser.select_expr_return retval = new MySQL51Parser.select_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken star = default(IToken);
		IToken AS271 = default(IToken);
		MySQL51Parser.expr_return expr270 = default(MySQL51Parser.expr_return);
		MySQL51Parser.ident_return ident272 = default(MySQL51Parser.ident_return);

		object star_tree = default(object);
		object AS271_tree = default(object);
		RewriteRuleITokenStream stream_MULT=new RewriteRuleITokenStream(adaptor,"token MULT");
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "select_expr");
		DebugLocation(314, 1);
		try
		{
			// MySQL51Parser.g3:315:2: (star= MULT -> ^( SELECT_EXPR $star) | expr ( ( AS )? ident )? -> ^( SELECT_EXPR expr ( ^( ALIAS ident ) )? ) )
			int alt93=2;
			try { DebugEnterDecision(93, false);
			int LA93_0 = input.LA(1);

			if ((LA93_0==MULT))
			{
				alt93 = 1;
			}
			else if ((LA93_0==ACTION||(LA93_0>=ADDDATE && LA93_0<=ALGORITHM)||LA93_0==ANY||LA93_0==ASCII||(LA93_0>=AT && LA93_0<=BACKUP)||LA93_0==BEGIN||(LA93_0>=BINARY && LA93_0<=BIT)||LA93_0==BITWISE_INVERSION||(LA93_0>=BIT_AND && LA93_0<=BIT_XOR)||(LA93_0>=BLOCK && LA93_0<=BOOLEAN)||LA93_0==BTREE||(LA93_0>=BYTE && LA93_0<=CACHE)||(LA93_0>=CASCADED && LA93_0<=CHAIN)||(LA93_0>=CHANGED && LA93_0<=CHAR)||LA93_0==CHARSET||(LA93_0>=CHECKSUM && LA93_0<=COLLATION)||LA93_0==COLUMNS||LA93_0==COMMENT||(LA93_0>=COMMIT && LA93_0<=CONCURRENT)||(LA93_0>=CONNECTION && LA93_0<=CONSISTENT)||(LA93_0>=CONTAINS && LA93_0<=CONTEXT)||LA93_0==CONTRIBUTORS||(LA93_0>=COUNT && LA93_0<=CPU)||(LA93_0>=CUBE && LA93_0<=CURRENT_USER)||LA93_0==CURTIME||(LA93_0>=DATA && LA93_0<=DATABASE)||(LA93_0>=DATAFILE && LA93_0<=DATE_ADD)||LA93_0==DATE_SUB||LA93_0==DAY||LA93_0==DEALLOCATE||LA93_0==DEFINER||LA93_0==DELAY_KEY_WRITE||LA93_0==DES_KEY_FILE||(LA93_0>=DIRECTORY && LA93_0<=DISK)||LA93_0==DO||(LA93_0>=DUMPFILE && LA93_0<=DYNAMIC)||LA93_0==ENABLE||(LA93_0>=END && LA93_0<=ENUM)||(LA93_0>=ERRORS && LA93_0<=ESCAPE)||(LA93_0>=EVENT && LA93_0<=EVERY)||(LA93_0>=EXECUTE && LA93_0<=EXISTS)||LA93_0==EXPANSION||(LA93_0>=EXTENDED && LA93_0<=FAULTS)||(LA93_0>=FIELDS && LA93_0<=FIXED)||LA93_0==FLUSH||(LA93_0>=FOUND && LA93_0<=FRAC_SECOND)||LA93_0==FULL||(LA93_0>=FUNCTION && LA93_0<=GLOBAL_VARIABLE)||LA93_0==GRANTS||(LA93_0>=GROUP && LA93_0<=HASH)||(LA93_0>=HELP && LA93_0<=HEXA_VALUE)||(LA93_0>=HOST && LA93_0<=HOUR)||(LA93_0>=ID && LA93_0<=IFNULL)||LA93_0==IMPORT||LA93_0==INDEXES||LA93_0==INITIAL_SIZE||LA93_0==INNOBASE||(LA93_0>=INSERT && LA93_0<=INSTALL)||LA93_0==INTERVAL||(LA93_0>=INT_NUMBER && LA93_0<=IPC)||(LA93_0>=ISOLATION && LA93_0<=ISSUER)||LA93_0==KEY_BLOCK_SIZE||(LA93_0>=LABEL && LA93_0<=LCURLY)||(LA93_0>=LEAVES && LA93_0<=LEFT)||LA93_0==LESS||LA93_0==LEVEL||(LA93_0>=LINESTRING && LA93_0<=LIST)||LA93_0==LOCAL||(LA93_0>=LOCKS && LA93_0<=LOGFILE)||LA93_0==LOGS||(LA93_0>=LPAREN && LA93_0<=MASTER_SSL_KEY)||(LA93_0>=MASTER_USER && LA93_0<=MEDIUM)||(LA93_0>=MEMORY && LA93_0<=MID)||(LA93_0>=MIGRATE && LA93_0<=MINUTE)||(LA93_0>=MIN_ROWS && LA93_0<=MODE)||LA93_0==MODIFY||LA93_0==MONTH||(LA93_0>=MULTILINESTRING && LA93_0<=MUTEX)||(LA93_0>=NAME && LA93_0<=NATIONAL)||(LA93_0>=NCHAR && LA93_0<=NOT)||(LA93_0>=NOT_OP && LA93_0<=NO_WAIT)||(LA93_0>=NULL && LA93_0<=NULLIF)||LA93_0==NUMBER||(LA93_0>=NVARCHAR && LA93_0<=OLD_PASSWORD)||LA93_0==ONE||(LA93_0>=ONE_SHOT && LA93_0<=OPEN)||LA93_0==OPTIONS||(LA93_0>=OWNER && LA93_0<=POSITION)||(LA93_0>=PREPARE && LA93_0<=PREV)||LA93_0==PRIVILEGES||(LA93_0>=PROCESS && LA93_0<=PROFILES)||(LA93_0>=QUARTER && LA93_0<=QUICK)||(LA93_0>=REBUILD && LA93_0<=REDUNDANT)||(LA93_0>=RELAY_LOG_FILE && LA93_0<=RELAY_THREAD)||(LA93_0>=RELOAD && LA93_0<=REMOVE)||(LA93_0>=REORGANIZE && LA93_0<=REPLICATION)||(LA93_0>=RESET && LA93_0<=RESTORE)||LA93_0==RESUME||LA93_0==RETURNS||LA93_0==RIGHT||(LA93_0>=ROLLBACK && LA93_0<=ROW_FORMAT)||(LA93_0>=RTREE && LA93_0<=SCHEDULE)||LA93_0==SECOND||LA93_0==SECURITY||(LA93_0>=SERIAL && LA93_0<=SESSION_VARIABLE)||LA93_0==SHARE||(LA93_0>=SHUTDOWN && LA93_0<=SLAVE)||(LA93_0>=SNAPSHOT && LA93_0<=SOCKET)||(LA93_0>=SONAME && LA93_0<=SOURCE)||(LA93_0>=SQL_BUFFER_RESULT && LA93_0<=SQL_CACHE)||LA93_0==SQL_NO_CACHE||LA93_0==SQL_THREAD||LA93_0==START||(LA93_0>=STARTS && LA93_0<=STORAGE)||(LA93_0>=STRING && LA93_0<=SYSTEM_USER)||(LA93_0>=TABLES && LA93_0<=TEMPTABLE)||(LA93_0>=TEXT && LA93_0<=THAN)||(LA93_0>=TIME && LA93_0<=TIMESTAMP_DIFF)||(LA93_0>=TRANSACTION && LA93_0<=TRANSACTIONAL)||(LA93_0>=TRIGGERS && LA93_0<=UNDEFINED)||(LA93_0>=UNDOFILE && LA93_0<=UNINSTALL)||LA93_0==UNKNOWN||LA93_0==UNTIL||LA93_0==UPGRADE||LA93_0==USER||LA93_0==USE_FRM||(LA93_0>=UTC_DATE && LA93_0<=VALUE)||LA93_0==VALUE_PLACEHOLDER||(LA93_0>=VARIABLES && LA93_0<=VARIANCE)||(LA93_0>=VAR_POP && LA93_0<=WEEK)||(LA93_0>=WORK && LA93_0<=WRAPPER)||(LA93_0>=X509 && LA93_0<=XA)||LA93_0==YEAR||LA93_0==CONCAT))
			{
				alt93 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:315:4: star= MULT
				{
				DebugLocation(315, 8);
				star=(IToken)Match(input,MULT,Follow._MULT_in_select_expr3308); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MULT.Add(star);



				{
				// AST REWRITE
				// elements: star
				// token labels: star
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_star=new RewriteRuleITokenStream(adaptor,"token star",star);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:17: -> ^( SELECT_EXPR $star)
				{
					DebugLocation(315, 20);
					// MySQL51Parser.g3:315:20: ^( SELECT_EXPR $star)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(315, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECT_EXPR, "SELECT_EXPR"), root_1);

					DebugLocation(315, 35);
					adaptor.AddChild(root_1, stream_star.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:316:4: expr ( ( AS )? ident )?
				{
				DebugLocation(316, 4);
				PushFollow(Follow._expr_in_select_expr3325);
				expr270=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr270.Tree);
				DebugLocation(316, 9);
				// MySQL51Parser.g3:316:9: ( ( AS )? ident )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==ACTION||(LA92_0>=ADDDATE && LA92_0<=ALGORITHM)||LA92_0==ANY||LA92_0==AS||LA92_0==ASCII||(LA92_0>=AT && LA92_0<=BACKUP)||LA92_0==BEGIN||(LA92_0>=BINLOG && LA92_0<=BIT)||(LA92_0>=BLOCK && LA92_0<=BOOLEAN)||LA92_0==BTREE||(LA92_0>=BYTE && LA92_0<=CACHE)||LA92_0==CASCADED||LA92_0==CHAIN||LA92_0==CHANGED||LA92_0==CHARSET||(LA92_0>=CHECKSUM && LA92_0<=CODE)||LA92_0==COLLATION||LA92_0==COLUMNS||LA92_0==COMMENT||(LA92_0>=COMMIT && LA92_0<=CONCURRENT)||(LA92_0>=CONNECTION && LA92_0<=CONSISTENT)||(LA92_0>=CONTAINS && LA92_0<=CONTEXT)||LA92_0==CONTRIBUTORS||LA92_0==CPU||LA92_0==CUBE||LA92_0==DATA||(LA92_0>=DATAFILE && LA92_0<=DATETIME)||LA92_0==DAY||LA92_0==DEALLOCATE||LA92_0==DEFINER||LA92_0==DELAY_KEY_WRITE||LA92_0==DES_KEY_FILE||(LA92_0>=DIRECTORY && LA92_0<=DISK)||LA92_0==DO||(LA92_0>=DUMPFILE && LA92_0<=DYNAMIC)||LA92_0==ENABLE||(LA92_0>=END && LA92_0<=ENUM)||(LA92_0>=ERRORS && LA92_0<=ESCAPE)||(LA92_0>=EVENT && LA92_0<=EVERY)||LA92_0==EXECUTE||LA92_0==EXPANSION||(LA92_0>=EXTENDED && LA92_0<=EXTENT_SIZE)||(LA92_0>=FAST && LA92_0<=FAULTS)||(LA92_0>=FIELDS && LA92_0<=FIXED)||LA92_0==FLUSH||(LA92_0>=FOUND && LA92_0<=FRAC_SECOND)||LA92_0==FULL||(LA92_0>=FUNCTION && LA92_0<=GLOBAL)||LA92_0==GRANTS||LA92_0==GROUP||(LA92_0>=HANDLER && LA92_0<=HASH)||LA92_0==HELP||(LA92_0>=HOST && LA92_0<=HOUR)||(LA92_0>=ID && LA92_0<=IDENTIFIED)||LA92_0==IMPORT||LA92_0==INDEXES||LA92_0==INITIAL_SIZE||LA92_0==INNOBASE||(LA92_0>=INSERT_METHOD && LA92_0<=INSTALL)||(LA92_0>=INVOKER && LA92_0<=IPC)||(LA92_0>=ISOLATION && LA92_0<=ISSUER)||LA92_0==KEY_BLOCK_SIZE||(LA92_0>=LABEL && LA92_0<=LAST)||LA92_0==LEAVES||LA92_0==LESS||LA92_0==LEVEL||(LA92_0>=LINESTRING && LA92_0<=LIST)||LA92_0==LOCAL||(LA92_0>=LOCKS && LA92_0<=LOGFILE)||LA92_0==LOGS||(LA92_0>=MASTER && LA92_0<=MASTER_SSL_KEY)||LA92_0==MASTER_USER||(LA92_0>=MAX_CONNECTIONS_PER_HOUR && LA92_0<=MEDIUM)||(LA92_0>=MEMORY && LA92_0<=MICROSECOND)||LA92_0==MIGRATE||LA92_0==MINUTE||LA92_0==MIN_ROWS||LA92_0==MODE||LA92_0==MODIFY||LA92_0==MONTH||(LA92_0>=MULTILINESTRING && LA92_0<=MUTEX)||(LA92_0>=NAME && LA92_0<=NATIONAL)||(LA92_0>=NCHAR && LA92_0<=NONE)||LA92_0==NO_WAIT||(LA92_0>=NVARCHAR && LA92_0<=OLD_PASSWORD)||LA92_0==ONE||(LA92_0>=ONE_SHOT && LA92_0<=OPEN)||LA92_0==OPTIONS||(LA92_0>=OWNER && LA92_0<=PLUGINS)||(LA92_0>=POINT && LA92_0<=PORT)||(LA92_0>=PREPARE && LA92_0<=PREV)||LA92_0==PRIVILEGES||(LA92_0>=PROCESS && LA92_0<=PROFILES)||(LA92_0>=QUARTER && LA92_0<=QUICK)||(LA92_0>=REBUILD && LA92_0<=REDUNDANT)||(LA92_0>=RELAY_LOG_FILE && LA92_0<=RELAY_THREAD)||(LA92_0>=RELOAD && LA92_0<=REMOVE)||(LA92_0>=REORGANIZE && LA92_0<=REPAIR)||LA92_0==REPEATABLE||LA92_0==REPLICATION||(LA92_0>=RESET && LA92_0<=RESTORE)||LA92_0==RESUME||LA92_0==RETURNS||(LA92_0>=ROLLBACK && LA92_0<=ROW_FORMAT)||(LA92_0>=RTREE && LA92_0<=SCHEDULE)||LA92_0==SECOND||LA92_0==SECURITY||(LA92_0>=SERIAL && LA92_0<=SESSION)||LA92_0==SHARE||(LA92_0>=SHUTDOWN && LA92_0<=SLAVE)||(LA92_0>=SNAPSHOT && LA92_0<=SOCKET)||(LA92_0>=SONAME && LA92_0<=SOURCE)||(LA92_0>=SQL_BUFFER_RESULT && LA92_0<=SQL_CACHE)||LA92_0==SQL_NO_CACHE||LA92_0==SQL_THREAD||LA92_0==START||(LA92_0>=STARTS && LA92_0<=STATUS)||(LA92_0>=STOP && LA92_0<=STORAGE)||(LA92_0>=STRING_KEYWORD && LA92_0<=SUBPARTITIONS)||(LA92_0>=SUPER && LA92_0<=SWITCHES)||(LA92_0>=TABLES && LA92_0<=TEMPTABLE)||(LA92_0>=TEXT && LA92_0<=THAN)||(LA92_0>=TIME && LA92_0<=TIMESTAMP_DIFF)||(LA92_0>=TRANSACTION && LA92_0<=TRANSACTIONAL)||LA92_0==TRIGGERS||(LA92_0>=TRUNCATE && LA92_0<=UNDEFINED)||(LA92_0>=UNDOFILE && LA92_0<=UNINSTALL)||LA92_0==UNKNOWN||LA92_0==UNTIL||LA92_0==UPGRADE||LA92_0==USER||LA92_0==USE_FRM||LA92_0==VALUE||LA92_0==VARIABLES||(LA92_0>=VIEW && LA92_0<=WEEK)||(LA92_0>=WORK && LA92_0<=WRAPPER)||(LA92_0>=X509 && LA92_0<=XA)||LA92_0==YEAR))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:316:10: ( AS )? ident
					{
					DebugLocation(316, 10);
					// MySQL51Parser.g3:316:10: ( AS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==AS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:316:10: AS
						{
						DebugLocation(316, 10);
						AS271=(IToken)Match(input,AS,Follow._AS_in_select_expr3328); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_AS.Add(AS271);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(316, 14);
					PushFollow(Follow._ident_in_select_expr3331);
					ident272=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident272.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(92); }



				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:23: -> ^( SELECT_EXPR expr ( ^( ALIAS ident ) )? )
				{
					DebugLocation(316, 26);
					// MySQL51Parser.g3:316:26: ^( SELECT_EXPR expr ( ^( ALIAS ident ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(316, 28);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECT_EXPR, "SELECT_EXPR"), root_1);

					DebugLocation(316, 40);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(316, 45);
					// MySQL51Parser.g3:316:45: ( ^( ALIAS ident ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(316, 45);
						// MySQL51Parser.g3:316:45: ^( ALIAS ident )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(316, 47);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ALIAS, "ALIAS"), root_2);

						DebugLocation(316, 53);
						adaptor.AddChild(root_2, stream_ident.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_expr", 27);
			LeaveRule("select_expr", 27);
			LeaveRule_select_expr();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "select_expr"); }
		return retval;

	}
	// $ANTLR end "select_expr"

	protected sealed partial class table_references_scope
	{
		public int count;

		public table_references_scope(MySQL51Parser grammar) { OnCreated(grammar); }
		partial void OnCreated(MySQL51Parser grammar);
	}
	partial void table_references_scopeInit( table_references_scope scope );
	partial void table_references_scopeAfter( table_references_scope scope );
	protected readonly Stack<table_references_scope> table_references_stack = new Stack<table_references_scope>();

	private sealed partial class table_references_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public int table_count;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public table_references_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_table_references();
	partial void LeaveRule_table_references();

	// $ANTLR start "table_references"
	// MySQL51Parser.g3:327:1: table_references returns [int table_count] : (t1= table_ref -> $t1) ( COMMA t2= table_ref -> ^( COMMA_JOIN[$COMMA] $table_references $t2) )* ;
	[GrammarRule("table_references")]
	private MySQL51Parser.table_references_return table_references()
	{
		EnterRule_table_references();
		EnterRule("table_references", 28);
		TraceIn("table_references", 28);
		table_references_stack.Push(new table_references_scope(this));table_references_scopeInit(table_references_stack.Peek());
		MySQL51Parser.table_references_return retval = new MySQL51Parser.table_references_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA273 = default(IToken);
		MySQL51Parser.table_ref_return t1 = default(MySQL51Parser.table_ref_return);
		MySQL51Parser.table_ref_return t2 = default(MySQL51Parser.table_ref_return);

		object COMMA273_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule table_ref");

		table_references_stack.Peek().count =  0;

		try { DebugEnterRule(GrammarFileName, "table_references");
		DebugLocation(327, 1);
		try
		{
			// MySQL51Parser.g3:337:2: ( (t1= table_ref -> $t1) ( COMMA t2= table_ref -> ^( COMMA_JOIN[$COMMA] $table_references $t2) )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:337:4: (t1= table_ref -> $t1) ( COMMA t2= table_ref -> ^( COMMA_JOIN[$COMMA] $table_references $t2) )*
			{
			DebugLocation(337, 4);
			// MySQL51Parser.g3:337:4: (t1= table_ref -> $t1)
			DebugEnterAlt(1);
			// MySQL51Parser.g3:337:6: t1= table_ref
			{
			DebugLocation(337, 8);
			PushFollow(Follow._table_ref_in_table_references3383);
			t1=table_ref();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_table_ref.Add(t1.Tree);


			{
			// AST REWRITE
			// elements: t1
			// token labels: 
			// rule labels: t1, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"rule t1",t1!=null?t1.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 337:22: -> $t1
			{
				DebugLocation(337, 26);
				adaptor.AddChild(root_0, stream_t1.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(338, 3);
			// MySQL51Parser.g3:338:3: ( COMMA t2= table_ref -> ^( COMMA_JOIN[$COMMA] $table_references $t2) )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==COMMA))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:338:5: COMMA t2= table_ref
					{
					DebugLocation(338, 5);
					COMMA273=(IToken)Match(input,COMMA,Follow._COMMA_in_table_references3398); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA273);

					DebugLocation(338, 13);
					PushFollow(Follow._table_ref_in_table_references3402);
					t2=table_ref();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_ref.Add(t2.Tree);


					{
					// AST REWRITE
					// elements: table_references, t2
					// token labels: 
					// rule labels: t2, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 338:25: -> ^( COMMA_JOIN[$COMMA] $table_references $t2)
					{
						DebugLocation(338, 28);
						// MySQL51Parser.g3:338:28: ^( COMMA_JOIN[$COMMA] $table_references $t2)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(338, 30);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COMMA_JOIN, COMMA273), root_1);

						DebugLocation(338, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(338, 68);
						adaptor.AddChild(root_1, stream_t2.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
			if (state.backtracking == 0)
			{

				retval.table_count = table_references_stack.Peek().count;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_references", 28);
			LeaveRule("table_references", 28);
			LeaveRule_table_references();
			table_references_scopeAfter(table_references_stack.Peek());table_references_stack.Pop();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "table_references"); }
		return retval;

	}
	// $ANTLR end "table_references"

	private sealed partial class table_ref_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public table_ref_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_table_ref();
	partial void LeaveRule_table_ref();

	// $ANTLR start "table_ref"
	// MySQL51Parser.g3:343:1: table_ref : (t1= table_factor -> $t1) ( ( LEFT | RIGHT )=> (ltype= LEFT |ltype= RIGHT ) (outer= OUTER )? JOIN t3= table_ref lrjoinCond= join_condition_both -> ^( $ltype $t3 $lrjoinCond ( $outer)? ) | (type= INNER |type= CROSS )? JOIN t2= table_factor (cond1= join_condition_both )? -> ^( JOIN $t2 ( $cond1)? ( $type)? ) | (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) ) | ( NATURAL )=> NATURAL ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )? JOIN t2= table_factor -> ^( NATURAL ( $type)? $t2 ( $outer)? ) )* ;
	[GrammarRule("table_ref")]
	private MySQL51Parser.table_ref_return table_ref()
	{
		EnterRule_table_ref();
		EnterRule("table_ref", 29);
		TraceIn("table_ref", 29);
		MySQL51Parser.table_ref_return retval = new MySQL51Parser.table_ref_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ltype = default(IToken);
		IToken outer = default(IToken);
		IToken type = default(IToken);
		IToken JOIN274 = default(IToken);
		IToken JOIN275 = default(IToken);
		IToken NATURAL276 = default(IToken);
		IToken JOIN277 = default(IToken);
		MySQL51Parser.table_factor_return t1 = default(MySQL51Parser.table_factor_return);
		MySQL51Parser.table_ref_return t3 = default(MySQL51Parser.table_ref_return);
		MySQL51Parser.join_condition_both_return lrjoinCond = default(MySQL51Parser.join_condition_both_return);
		MySQL51Parser.table_factor_return t2 = default(MySQL51Parser.table_factor_return);
		MySQL51Parser.join_condition_both_return cond1 = default(MySQL51Parser.join_condition_both_return);
		MySQL51Parser.join_condition_on_return cond2 = default(MySQL51Parser.join_condition_on_return);

		object ltype_tree = default(object);
		object outer_tree = default(object);
		object type_tree = default(object);
		object JOIN274_tree = default(object);
		object JOIN275_tree = default(object);
		object NATURAL276_tree = default(object);
		object JOIN277_tree = default(object);
		RewriteRuleITokenStream stream_LEFT=new RewriteRuleITokenStream(adaptor,"token LEFT");
		RewriteRuleITokenStream stream_RIGHT=new RewriteRuleITokenStream(adaptor,"token RIGHT");
		RewriteRuleITokenStream stream_OUTER=new RewriteRuleITokenStream(adaptor,"token OUTER");
		RewriteRuleITokenStream stream_JOIN=new RewriteRuleITokenStream(adaptor,"token JOIN");
		RewriteRuleITokenStream stream_INNER=new RewriteRuleITokenStream(adaptor,"token INNER");
		RewriteRuleITokenStream stream_CROSS=new RewriteRuleITokenStream(adaptor,"token CROSS");
		RewriteRuleITokenStream stream_STRAIGHT_JOIN=new RewriteRuleITokenStream(adaptor,"token STRAIGHT_JOIN");
		RewriteRuleITokenStream stream_NATURAL=new RewriteRuleITokenStream(adaptor,"token NATURAL");
		RewriteRuleSubtreeStream stream_table_factor=new RewriteRuleSubtreeStream(adaptor,"rule table_factor");
		RewriteRuleSubtreeStream stream_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule table_ref");
		RewriteRuleSubtreeStream stream_join_condition_both=new RewriteRuleSubtreeStream(adaptor,"rule join_condition_both");
		RewriteRuleSubtreeStream stream_join_condition_on=new RewriteRuleSubtreeStream(adaptor,"rule join_condition_on");
		try { DebugEnterRule(GrammarFileName, "table_ref");
		DebugLocation(343, 1);
		try
		{
			// MySQL51Parser.g3:344:2: ( (t1= table_factor -> $t1) ( ( LEFT | RIGHT )=> (ltype= LEFT |ltype= RIGHT ) (outer= OUTER )? JOIN t3= table_ref lrjoinCond= join_condition_both -> ^( $ltype $t3 $lrjoinCond ( $outer)? ) | (type= INNER |type= CROSS )? JOIN t2= table_factor (cond1= join_condition_both )? -> ^( JOIN $t2 ( $cond1)? ( $type)? ) | (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) ) | ( NATURAL )=> NATURAL ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )? JOIN t2= table_factor -> ^( NATURAL ( $type)? $t2 ( $outer)? ) )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:344:4: (t1= table_factor -> $t1) ( ( LEFT | RIGHT )=> (ltype= LEFT |ltype= RIGHT ) (outer= OUTER )? JOIN t3= table_ref lrjoinCond= join_condition_both -> ^( $ltype $t3 $lrjoinCond ( $outer)? ) | (type= INNER |type= CROSS )? JOIN t2= table_factor (cond1= join_condition_both )? -> ^( JOIN $t2 ( $cond1)? ( $type)? ) | (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) ) | ( NATURAL )=> NATURAL ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )? JOIN t2= table_factor -> ^( NATURAL ( $type)? $t2 ( $outer)? ) )*
			{
			DebugLocation(344, 4);
			// MySQL51Parser.g3:344:4: (t1= table_factor -> $t1)
			DebugEnterAlt(1);
			// MySQL51Parser.g3:344:5: t1= table_factor
			{
			DebugLocation(344, 7);
			PushFollow(Follow._table_factor_in_table_ref3437);
			t1=table_factor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_table_factor.Add(t1.Tree);


			{
			// AST REWRITE
			// elements: t1
			// token labels: 
			// rule labels: t1, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"rule t1",t1!=null?t1.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 344:21: -> $t1
			{
				DebugLocation(344, 25);
				adaptor.AddChild(root_0, stream_t1.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(345, 3);
			// MySQL51Parser.g3:345:3: ( ( LEFT | RIGHT )=> (ltype= LEFT |ltype= RIGHT ) (outer= OUTER )? JOIN t3= table_ref lrjoinCond= join_condition_both -> ^( $ltype $t3 $lrjoinCond ( $outer)? ) | (type= INNER |type= CROSS )? JOIN t2= table_factor (cond1= join_condition_both )? -> ^( JOIN $t2 ( $cond1)? ( $type)? ) | (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) ) | ( NATURAL )=> NATURAL ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )? JOIN t2= table_factor -> ^( NATURAL ( $type)? $t2 ( $outer)? ) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=5;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==LEFT) && (EvaluatePredicate(synpred2_MySQL51Parser_fragment)))
				{
					alt103 = 1;
				}
				else if ((LA103_0==RIGHT) && (EvaluatePredicate(synpred2_MySQL51Parser_fragment)))
				{
					alt103 = 1;
				}
				else if ((LA103_0==CROSS||LA103_0==INNER||LA103_0==JOIN))
				{
					alt103 = 2;
				}
				else if ((LA103_0==STRAIGHT_JOIN))
				{
					alt103 = 3;
				}
				else if ((LA103_0==NATURAL) && (EvaluatePredicate(synpred4_MySQL51Parser_fragment)))
				{
					alt103 = 4;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:346:4: ( LEFT | RIGHT )=> (ltype= LEFT |ltype= RIGHT ) (outer= OUTER )? JOIN t3= table_ref lrjoinCond= join_condition_both
					{
					DebugLocation(346, 18);
					// MySQL51Parser.g3:346:18: (ltype= LEFT |ltype= RIGHT )
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, false);
					int LA95_0 = input.LA(1);

					if ((LA95_0==LEFT))
					{
						alt95 = 1;
					}
					else if ((LA95_0==RIGHT))
					{
						alt95 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:346:19: ltype= LEFT
						{
						DebugLocation(346, 24);
						ltype=(IToken)Match(input,LEFT,Follow._LEFT_in_table_ref3462); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LEFT.Add(ltype);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:346:30: ltype= RIGHT
						{
						DebugLocation(346, 35);
						ltype=(IToken)Match(input,RIGHT,Follow._RIGHT_in_table_ref3466); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_RIGHT.Add(ltype);


						}
						break;

					}
					} finally { DebugExitSubRule(95); }

					DebugLocation(346, 48);
					// MySQL51Parser.g3:346:48: (outer= OUTER )?
					int alt96=2;
					try { DebugEnterSubRule(96);
					try { DebugEnterDecision(96, false);
					int LA96_0 = input.LA(1);

					if ((LA96_0==OUTER))
					{
						alt96 = 1;
					}
					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:346:48: outer= OUTER
						{
						DebugLocation(346, 48);
						outer=(IToken)Match(input,OUTER,Follow._OUTER_in_table_ref3471); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_OUTER.Add(outer);


						}
						break;

					}
					} finally { DebugExitSubRule(96); }

					DebugLocation(346, 56);
					JOIN274=(IToken)Match(input,JOIN,Follow._JOIN_in_table_ref3474); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_JOIN.Add(JOIN274);

					DebugLocation(346, 63);
					PushFollow(Follow._table_ref_in_table_ref3478);
					t3=table_ref();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_ref.Add(t3.Tree);
					DebugLocation(346, 84);
					PushFollow(Follow._join_condition_both_in_table_ref3482);
					lrjoinCond=join_condition_both();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_join_condition_both.Add(lrjoinCond.Tree);


					{
					// AST REWRITE
					// elements: ltype, t3, lrjoinCond, outer
					// token labels: ltype, outer
					// rule labels: t3, lrjoinCond, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_ltype=new RewriteRuleITokenStream(adaptor,"token ltype",ltype);
					RewriteRuleITokenStream stream_outer=new RewriteRuleITokenStream(adaptor,"token outer",outer);
					RewriteRuleSubtreeStream stream_t3=new RewriteRuleSubtreeStream(adaptor,"rule t3",t3!=null?t3.Tree:null);
					RewriteRuleSubtreeStream stream_lrjoinCond=new RewriteRuleSubtreeStream(adaptor,"rule lrjoinCond",lrjoinCond!=null?lrjoinCond.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 347:5: -> ^( $ltype $t3 $lrjoinCond ( $outer)? )
					{
						DebugLocation(347, 8);
						// MySQL51Parser.g3:347:8: ^( $ltype $t3 $lrjoinCond ( $outer)? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(347, 11);
						root_1 = (object)adaptor.BecomeRoot(stream_ltype.NextNode(), root_1);

						DebugLocation(347, 17);
						adaptor.AddChild(root_1, retval.Tree);
						DebugLocation(347, 26);
						adaptor.AddChild(root_1, stream_t3.NextTree());
						DebugLocation(347, 30);
						adaptor.AddChild(root_1, stream_lrjoinCond.NextTree());
						DebugLocation(347, 42);
						// MySQL51Parser.g3:347:42: ( $outer)?
						if (stream_outer.HasNext)
						{
							DebugLocation(347, 42);
							adaptor.AddChild(root_1, stream_outer.NextNode());

						}
						stream_outer.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:348:5: (type= INNER |type= CROSS )? JOIN t2= table_factor (cond1= join_condition_both )?
					{
					DebugLocation(348, 5);
					// MySQL51Parser.g3:348:5: (type= INNER |type= CROSS )?
					int alt97=3;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==INNER))
					{
						alt97 = 1;
					}
					else if ((LA97_0==CROSS))
					{
						alt97 = 2;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:348:6: type= INNER
						{
						DebugLocation(348, 10);
						type=(IToken)Match(input,INNER,Follow._INNER_in_table_ref3515); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INNER.Add(type);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:348:17: type= CROSS
						{
						DebugLocation(348, 21);
						type=(IToken)Match(input,CROSS,Follow._CROSS_in_table_ref3519); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CROSS.Add(type);


						}
						break;

					}
					} finally { DebugExitSubRule(97); }

					DebugLocation(348, 30);
					JOIN275=(IToken)Match(input,JOIN,Follow._JOIN_in_table_ref3523); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_JOIN.Add(JOIN275);

					DebugLocation(348, 37);
					PushFollow(Follow._table_factor_in_table_ref3527);
					t2=table_factor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_factor.Add(t2.Tree);
					DebugLocation(348, 56);
					// MySQL51Parser.g3:348:56: (cond1= join_condition_both )?
					int alt98=2;
					try { DebugEnterSubRule(98);
					try { DebugEnterDecision(98, false);
					try
					{
						alt98 = dfa98.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(98); }
					switch (alt98)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:348:56: cond1= join_condition_both
						{
						DebugLocation(348, 56);
						PushFollow(Follow._join_condition_both_in_table_ref3531);
						cond1=join_condition_both();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_join_condition_both.Add(cond1.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(98); }



					{
					// AST REWRITE
					// elements: JOIN, t2, cond1, type
					// token labels: type
					// rule labels: t2, cond1, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
					RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
					RewriteRuleSubtreeStream stream_cond1=new RewriteRuleSubtreeStream(adaptor,"rule cond1",cond1!=null?cond1.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 349:5: -> ^( JOIN $t2 ( $cond1)? ( $type)? )
					{
						DebugLocation(349, 8);
						// MySQL51Parser.g3:349:8: ^( JOIN $t2 ( $cond1)? ( $type)? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(349, 10);
						root_1 = (object)adaptor.BecomeRoot(stream_JOIN.NextNode(), root_1);

						DebugLocation(349, 15);
						adaptor.AddChild(root_1, retval.Tree);
						DebugLocation(349, 24);
						adaptor.AddChild(root_1, stream_t2.NextTree());
						DebugLocation(349, 28);
						// MySQL51Parser.g3:349:28: ( $cond1)?
						if (stream_cond1.HasNext)
						{
							DebugLocation(349, 28);
							adaptor.AddChild(root_1, stream_cond1.NextTree());

						}
						stream_cond1.Reset();
						DebugLocation(349, 36);
						// MySQL51Parser.g3:349:36: ( $type)?
						if (stream_type.HasNext)
						{
							DebugLocation(349, 36);
							adaptor.AddChild(root_1, stream_type.NextNode());

						}
						stream_type.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:350:5: (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) )
					{
					DebugLocation(350, 5);
					// MySQL51Parser.g3:350:5: (type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) ) )
					DebugEnterAlt(1);
					// MySQL51Parser.g3:350:7: type= STRAIGHT_JOIN t2= table_factor ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) )
					{
					DebugLocation(350, 11);
					type=(IToken)Match(input,STRAIGHT_JOIN,Follow._STRAIGHT_JOIN_in_table_ref3566); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRAIGHT_JOIN.Add(type);

					DebugLocation(350, 28);
					PushFollow(Follow._table_factor_in_table_ref3570);
					t2=table_factor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_factor.Add(t2.Tree);
					DebugLocation(351, 5);
					// MySQL51Parser.g3:351:5: ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) )
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					try
					{
						alt99 = dfa99.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:351:7: ( join_condition_on )=>cond2= join_condition_on
						{
						DebugLocation(351, 34);
						PushFollow(Follow._join_condition_on_in_table_ref3586);
						cond2=join_condition_on();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_join_condition_on.Add(cond2.Tree);


						{
						// AST REWRITE
						// elements: type, t2, cond2
						// token labels: type
						// rule labels: t2, cond2, retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
						RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
						RewriteRuleSubtreeStream stream_cond2=new RewriteRuleSubtreeStream(adaptor,"rule cond2",cond2!=null?cond2.Tree:null);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 351:53: -> ^( $type $t2 $cond2)
						{
							DebugLocation(351, 56);
							// MySQL51Parser.g3:351:56: ^( $type $t2 $cond2)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(351, 59);
							root_1 = (object)adaptor.BecomeRoot(stream_type.NextNode(), root_1);

							DebugLocation(351, 64);
							adaptor.AddChild(root_1, retval.Tree);
							DebugLocation(351, 73);
							adaptor.AddChild(root_1, stream_t2.NextTree());
							DebugLocation(351, 77);
							adaptor.AddChild(root_1, stream_cond2.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:352:13: 
						{

						{
						// AST REWRITE
						// elements: type, t2
						// token labels: type
						// rule labels: t2, retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
						RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 352:13: -> ^( $type $t2)
						{
							DebugLocation(352, 16);
							// MySQL51Parser.g3:352:16: ^( $type $t2)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(352, 19);
							root_1 = (object)adaptor.BecomeRoot(stream_type.NextNode(), root_1);

							DebugLocation(352, 24);
							adaptor.AddChild(root_1, retval.Tree);
							DebugLocation(352, 33);
							adaptor.AddChild(root_1, stream_t2.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(99); }


					}


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// MySQL51Parser.g3:355:5: ( NATURAL )=> NATURAL ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )? JOIN t2= table_factor
					{
					DebugLocation(355, 17);
					NATURAL276=(IToken)Match(input,NATURAL,Follow._NATURAL_in_table_ref3647); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NATURAL.Add(NATURAL276);

					DebugLocation(355, 25);
					// MySQL51Parser.g3:355:25: ( (type= LEFT |type= RIGHT ) (outer= OUTER )? )?
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==LEFT||LA102_0==RIGHT))
					{
						alt102 = 1;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:355:26: (type= LEFT |type= RIGHT ) (outer= OUTER )?
						{
						DebugLocation(355, 26);
						// MySQL51Parser.g3:355:26: (type= LEFT |type= RIGHT )
						int alt100=2;
						try { DebugEnterSubRule(100);
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==LEFT))
						{
							alt100 = 1;
						}
						else if ((LA100_0==RIGHT))
						{
							alt100 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(100); }
						switch (alt100)
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:355:27: type= LEFT
							{
							DebugLocation(355, 31);
							type=(IToken)Match(input,LEFT,Follow._LEFT_in_table_ref3653); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_LEFT.Add(type);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// MySQL51Parser.g3:355:37: type= RIGHT
							{
							DebugLocation(355, 41);
							type=(IToken)Match(input,RIGHT,Follow._RIGHT_in_table_ref3657); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_RIGHT.Add(type);


							}
							break;

						}
						} finally { DebugExitSubRule(100); }

						DebugLocation(355, 54);
						// MySQL51Parser.g3:355:54: (outer= OUTER )?
						int alt101=2;
						try { DebugEnterSubRule(101);
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==OUTER))
						{
							alt101 = 1;
						}
						} finally { DebugExitDecision(101); }
						switch (alt101)
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:355:54: outer= OUTER
							{
							DebugLocation(355, 54);
							outer=(IToken)Match(input,OUTER,Follow._OUTER_in_table_ref3662); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_OUTER.Add(outer);


							}
							break;

						}
						} finally { DebugExitSubRule(101); }


						}
						break;

					}
					} finally { DebugExitSubRule(102); }

					DebugLocation(355, 64);
					JOIN277=(IToken)Match(input,JOIN,Follow._JOIN_in_table_ref3667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_JOIN.Add(JOIN277);

					DebugLocation(355, 71);
					PushFollow(Follow._table_factor_in_table_ref3671);
					t2=table_factor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_factor.Add(t2.Tree);


					{
					// AST REWRITE
					// elements: NATURAL, type, t2, outer
					// token labels: type, outer
					// rule labels: t2, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
					RewriteRuleITokenStream stream_outer=new RewriteRuleITokenStream(adaptor,"token outer",outer);
					RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 355:85: -> ^( NATURAL ( $type)? $t2 ( $outer)? )
					{
						DebugLocation(355, 88);
						// MySQL51Parser.g3:355:88: ^( NATURAL ( $type)? $t2 ( $outer)? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(355, 90);
						root_1 = (object)adaptor.BecomeRoot(stream_NATURAL.NextNode(), root_1);

						DebugLocation(355, 99);
						// MySQL51Parser.g3:355:99: ( $type)?
						if (stream_type.HasNext)
						{
							DebugLocation(355, 99);
							adaptor.AddChild(root_1, stream_type.NextNode());

						}
						stream_type.Reset();
						DebugLocation(355, 105);
						adaptor.AddChild(root_1, retval.Tree);
						DebugLocation(355, 114);
						adaptor.AddChild(root_1, stream_t2.NextTree());
						DebugLocation(355, 118);
						// MySQL51Parser.g3:355:118: ( $outer)?
						if (stream_outer.HasNext)
						{
							DebugLocation(355, 118);
							adaptor.AddChild(root_1, stream_outer.NextNode());

						}
						stream_outer.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_ref", 29);
			LeaveRule("table_ref", 29);
			LeaveRule_table_ref();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "table_ref"); }
		return retval;

	}
	// $ANTLR end "table_ref"

	private sealed partial class table_factor_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public table_factor_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_table_factor();
	partial void LeaveRule_table_factor();

	// $ANTLR start "table_factor"
	// MySQL51Parser.g3:359:1: table_factor : ( simple_table_ref_alias ( index_hint_list )? -> ^( TABLE simple_table_ref_alias ( index_hint_list )? ) | LPAREN select_inner RPAREN ( AS )? ident -> ^( SUBSELECT select_inner ^( ALIAS ident ) ) | LPAREN table_ref ( COMMA table_ref )* RPAREN -> ^( TABLE ( table_ref )+ ) | LCURLY ident table_ref RCURLY -> ^( TABLE table_ref ) | DUAL -> ^( DUAL ) );
	[GrammarRule("table_factor")]
	private MySQL51Parser.table_factor_return table_factor()
	{
		EnterRule_table_factor();
		EnterRule("table_factor", 30);
		TraceIn("table_factor", 30);
		MySQL51Parser.table_factor_return retval = new MySQL51Parser.table_factor_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN280 = default(IToken);
		IToken RPAREN282 = default(IToken);
		IToken AS283 = default(IToken);
		IToken LPAREN285 = default(IToken);
		IToken COMMA287 = default(IToken);
		IToken RPAREN289 = default(IToken);
		IToken LCURLY290 = default(IToken);
		IToken RCURLY293 = default(IToken);
		IToken DUAL294 = default(IToken);
		MySQL51Parser.simple_table_ref_alias_return simple_table_ref_alias278 = default(MySQL51Parser.simple_table_ref_alias_return);
		MySQL51Parser.index_hint_list_return index_hint_list279 = default(MySQL51Parser.index_hint_list_return);
		MySQL51Parser.select_inner_return select_inner281 = default(MySQL51Parser.select_inner_return);
		MySQL51Parser.ident_return ident284 = default(MySQL51Parser.ident_return);
		MySQL51Parser.table_ref_return table_ref286 = default(MySQL51Parser.table_ref_return);
		MySQL51Parser.table_ref_return table_ref288 = default(MySQL51Parser.table_ref_return);
		MySQL51Parser.ident_return ident291 = default(MySQL51Parser.ident_return);
		MySQL51Parser.table_ref_return table_ref292 = default(MySQL51Parser.table_ref_return);

		object LPAREN280_tree = default(object);
		object RPAREN282_tree = default(object);
		object AS283_tree = default(object);
		object LPAREN285_tree = default(object);
		object COMMA287_tree = default(object);
		object RPAREN289_tree = default(object);
		object LCURLY290_tree = default(object);
		object RCURLY293_tree = default(object);
		object DUAL294_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleITokenStream stream_DUAL=new RewriteRuleITokenStream(adaptor,"token DUAL");
		RewriteRuleSubtreeStream stream_simple_table_ref_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_alias");
		RewriteRuleSubtreeStream stream_index_hint_list=new RewriteRuleSubtreeStream(adaptor,"rule index_hint_list");
		RewriteRuleSubtreeStream stream_select_inner=new RewriteRuleSubtreeStream(adaptor,"rule select_inner");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule table_ref");
		try { DebugEnterRule(GrammarFileName, "table_factor");
		DebugLocation(359, 1);
		try
		{
			// MySQL51Parser.g3:360:2: ( simple_table_ref_alias ( index_hint_list )? -> ^( TABLE simple_table_ref_alias ( index_hint_list )? ) | LPAREN select_inner RPAREN ( AS )? ident -> ^( SUBSELECT select_inner ^( ALIAS ident ) ) | LPAREN table_ref ( COMMA table_ref )* RPAREN -> ^( TABLE ( table_ref )+ ) | LCURLY ident table_ref RCURLY -> ^( TABLE table_ref ) | DUAL -> ^( DUAL ) )
			int alt107=5;
			try { DebugEnterDecision(107, false);
			int LA107_0 = input.LA(1);

			if ((LA107_0==ACTION||(LA107_0>=ADDDATE && LA107_0<=ALGORITHM)||LA107_0==ANY||LA107_0==ASCII||(LA107_0>=AT && LA107_0<=BACKUP)||LA107_0==BEGIN||(LA107_0>=BINLOG && LA107_0<=BIT)||(LA107_0>=BLOCK && LA107_0<=BOOLEAN)||LA107_0==BTREE||(LA107_0>=BYTE && LA107_0<=CACHE)||LA107_0==CASCADED||LA107_0==CHAIN||LA107_0==CHANGED||LA107_0==CHARSET||(LA107_0>=CHECKSUM && LA107_0<=CODE)||LA107_0==COLLATION||LA107_0==COLUMNS||LA107_0==COMMENT||(LA107_0>=COMMIT && LA107_0<=CONCURRENT)||(LA107_0>=CONNECTION && LA107_0<=CONSISTENT)||(LA107_0>=CONTAINS && LA107_0<=CONTEXT)||LA107_0==CONTRIBUTORS||LA107_0==CPU||LA107_0==CUBE||LA107_0==DATA||(LA107_0>=DATAFILE && LA107_0<=DATETIME)||LA107_0==DAY||LA107_0==DEALLOCATE||LA107_0==DEFINER||LA107_0==DELAY_KEY_WRITE||LA107_0==DES_KEY_FILE||(LA107_0>=DIRECTORY && LA107_0<=DISK)||LA107_0==DO||(LA107_0>=DUMPFILE && LA107_0<=DYNAMIC)||LA107_0==ENABLE||(LA107_0>=END && LA107_0<=ENUM)||(LA107_0>=ERRORS && LA107_0<=ESCAPE)||(LA107_0>=EVENT && LA107_0<=EVERY)||LA107_0==EXECUTE||LA107_0==EXPANSION||(LA107_0>=EXTENDED && LA107_0<=EXTENT_SIZE)||(LA107_0>=FAST && LA107_0<=FAULTS)||(LA107_0>=FIELDS && LA107_0<=FIXED)||LA107_0==FLUSH||(LA107_0>=FOUND && LA107_0<=FRAC_SECOND)||LA107_0==FULL||(LA107_0>=FUNCTION && LA107_0<=GLOBAL)||LA107_0==GRANTS||LA107_0==GROUP||(LA107_0>=HANDLER && LA107_0<=HASH)||LA107_0==HELP||(LA107_0>=HOST && LA107_0<=HOUR)||(LA107_0>=ID && LA107_0<=IDENTIFIED)||LA107_0==IMPORT||LA107_0==INDEXES||LA107_0==INITIAL_SIZE||LA107_0==INNOBASE||(LA107_0>=INSERT_METHOD && LA107_0<=INSTALL)||(LA107_0>=INVOKER && LA107_0<=IPC)||(LA107_0>=ISOLATION && LA107_0<=ISSUER)||LA107_0==KEY_BLOCK_SIZE||(LA107_0>=LABEL && LA107_0<=LAST)||LA107_0==LEAVES||LA107_0==LESS||LA107_0==LEVEL||(LA107_0>=LINESTRING && LA107_0<=LIST)||LA107_0==LOCAL||(LA107_0>=LOCKS && LA107_0<=LOGFILE)||LA107_0==LOGS||(LA107_0>=MASTER && LA107_0<=MASTER_SSL_KEY)||LA107_0==MASTER_USER||(LA107_0>=MAX_CONNECTIONS_PER_HOUR && LA107_0<=MEDIUM)||(LA107_0>=MEMORY && LA107_0<=MICROSECOND)||LA107_0==MIGRATE||LA107_0==MINUTE||LA107_0==MIN_ROWS||LA107_0==MODE||LA107_0==MODIFY||LA107_0==MONTH||(LA107_0>=MULTILINESTRING && LA107_0<=MUTEX)||(LA107_0>=NAME && LA107_0<=NATIONAL)||(LA107_0>=NCHAR && LA107_0<=NONE)||LA107_0==NO_WAIT||(LA107_0>=NVARCHAR && LA107_0<=OLD_PASSWORD)||LA107_0==ONE||(LA107_0>=ONE_SHOT && LA107_0<=OPEN)||LA107_0==OPTIONS||(LA107_0>=OWNER && LA107_0<=PLUGINS)||(LA107_0>=POINT && LA107_0<=PORT)||(LA107_0>=PREPARE && LA107_0<=PREV)||LA107_0==PRIVILEGES||(LA107_0>=PROCESS && LA107_0<=PROFILES)||(LA107_0>=QUARTER && LA107_0<=QUICK)||(LA107_0>=REBUILD && LA107_0<=REDUNDANT)||(LA107_0>=RELAY_LOG_FILE && LA107_0<=RELAY_THREAD)||(LA107_0>=RELOAD && LA107_0<=REMOVE)||(LA107_0>=REORGANIZE && LA107_0<=REPAIR)||LA107_0==REPEATABLE||LA107_0==REPLICATION||(LA107_0>=RESET && LA107_0<=RESTORE)||LA107_0==RESUME||LA107_0==RETURNS||(LA107_0>=ROLLBACK && LA107_0<=ROW_FORMAT)||(LA107_0>=RTREE && LA107_0<=SCHEDULE)||LA107_0==SECOND||LA107_0==SECURITY||(LA107_0>=SERIAL && LA107_0<=SESSION)||LA107_0==SHARE||(LA107_0>=SHUTDOWN && LA107_0<=SLAVE)||(LA107_0>=SNAPSHOT && LA107_0<=SOCKET)||(LA107_0>=SONAME && LA107_0<=SOURCE)||(LA107_0>=SQL_BUFFER_RESULT && LA107_0<=SQL_CACHE)||LA107_0==SQL_NO_CACHE||LA107_0==SQL_THREAD||LA107_0==START||(LA107_0>=STARTS && LA107_0<=STATUS)||(LA107_0>=STOP && LA107_0<=STORAGE)||(LA107_0>=STRING_KEYWORD && LA107_0<=SUBPARTITIONS)||(LA107_0>=SUPER && LA107_0<=SWITCHES)||(LA107_0>=TABLES && LA107_0<=TEMPTABLE)||(LA107_0>=TEXT && LA107_0<=THAN)||(LA107_0>=TIME && LA107_0<=TIMESTAMP_DIFF)||(LA107_0>=TRANSACTION && LA107_0<=TRANSACTIONAL)||LA107_0==TRIGGERS||(LA107_0>=TRUNCATE && LA107_0<=UNDEFINED)||(LA107_0>=UNDOFILE && LA107_0<=UNINSTALL)||LA107_0==UNKNOWN||LA107_0==UNTIL||LA107_0==UPGRADE||LA107_0==USER||LA107_0==USE_FRM||LA107_0==VALUE||LA107_0==VARIABLES||(LA107_0>=VIEW && LA107_0<=WEEK)||(LA107_0>=WORK && LA107_0<=WRAPPER)||(LA107_0>=X509 && LA107_0<=XA)||LA107_0==YEAR))
			{
				alt107 = 1;
			}
			else if ((LA107_0==LPAREN))
			{
				int LA107_2 = input.LA(2);

				if ((LA107_2==SELECT))
				{
					alt107 = 2;
				}
				else if ((LA107_2==ACTION||(LA107_2>=ADDDATE && LA107_2<=ALGORITHM)||LA107_2==ANY||LA107_2==ASCII||(LA107_2>=AT && LA107_2<=BACKUP)||LA107_2==BEGIN||(LA107_2>=BINLOG && LA107_2<=BIT)||(LA107_2>=BLOCK && LA107_2<=BOOLEAN)||LA107_2==BTREE||(LA107_2>=BYTE && LA107_2<=CACHE)||LA107_2==CASCADED||LA107_2==CHAIN||LA107_2==CHANGED||LA107_2==CHARSET||(LA107_2>=CHECKSUM && LA107_2<=CODE)||LA107_2==COLLATION||LA107_2==COLUMNS||LA107_2==COMMENT||(LA107_2>=COMMIT && LA107_2<=CONCURRENT)||(LA107_2>=CONNECTION && LA107_2<=CONSISTENT)||(LA107_2>=CONTAINS && LA107_2<=CONTEXT)||LA107_2==CONTRIBUTORS||LA107_2==CPU||LA107_2==CUBE||LA107_2==DATA||(LA107_2>=DATAFILE && LA107_2<=DATETIME)||LA107_2==DAY||LA107_2==DEALLOCATE||LA107_2==DEFINER||LA107_2==DELAY_KEY_WRITE||LA107_2==DES_KEY_FILE||(LA107_2>=DIRECTORY && LA107_2<=DISK)||LA107_2==DO||(LA107_2>=DUAL && LA107_2<=DYNAMIC)||LA107_2==ENABLE||(LA107_2>=END && LA107_2<=ENUM)||(LA107_2>=ERRORS && LA107_2<=ESCAPE)||(LA107_2>=EVENT && LA107_2<=EVERY)||LA107_2==EXECUTE||LA107_2==EXPANSION||(LA107_2>=EXTENDED && LA107_2<=EXTENT_SIZE)||(LA107_2>=FAST && LA107_2<=FAULTS)||(LA107_2>=FIELDS && LA107_2<=FIXED)||LA107_2==FLUSH||(LA107_2>=FOUND && LA107_2<=FRAC_SECOND)||LA107_2==FULL||(LA107_2>=FUNCTION && LA107_2<=GLOBAL)||LA107_2==GRANTS||LA107_2==GROUP||(LA107_2>=HANDLER && LA107_2<=HASH)||LA107_2==HELP||(LA107_2>=HOST && LA107_2<=HOUR)||(LA107_2>=ID && LA107_2<=IDENTIFIED)||LA107_2==IMPORT||LA107_2==INDEXES||LA107_2==INITIAL_SIZE||LA107_2==INNOBASE||(LA107_2>=INSERT_METHOD && LA107_2<=INSTALL)||(LA107_2>=INVOKER && LA107_2<=IPC)||(LA107_2>=ISOLATION && LA107_2<=ISSUER)||LA107_2==KEY_BLOCK_SIZE||(LA107_2>=LABEL && LA107_2<=LCURLY)||LA107_2==LEAVES||LA107_2==LESS||LA107_2==LEVEL||(LA107_2>=LINESTRING && LA107_2<=LIST)||LA107_2==LOCAL||(LA107_2>=LOCKS && LA107_2<=LOGFILE)||LA107_2==LOGS||(LA107_2>=LPAREN && LA107_2<=MASTER_SSL_KEY)||LA107_2==MASTER_USER||(LA107_2>=MAX_CONNECTIONS_PER_HOUR && LA107_2<=MEDIUM)||(LA107_2>=MEMORY && LA107_2<=MICROSECOND)||LA107_2==MIGRATE||LA107_2==MINUTE||LA107_2==MIN_ROWS||LA107_2==MODE||LA107_2==MODIFY||LA107_2==MONTH||(LA107_2>=MULTILINESTRING && LA107_2<=MUTEX)||(LA107_2>=NAME && LA107_2<=NATIONAL)||(LA107_2>=NCHAR && LA107_2<=NONE)||LA107_2==NO_WAIT||(LA107_2>=NVARCHAR && LA107_2<=OLD_PASSWORD)||LA107_2==ONE||(LA107_2>=ONE_SHOT && LA107_2<=OPEN)||LA107_2==OPTIONS||(LA107_2>=OWNER && LA107_2<=PLUGINS)||(LA107_2>=POINT && LA107_2<=PORT)||(LA107_2>=PREPARE && LA107_2<=PREV)||LA107_2==PRIVILEGES||(LA107_2>=PROCESS && LA107_2<=PROFILES)||(LA107_2>=QUARTER && LA107_2<=QUICK)||(LA107_2>=REBUILD && LA107_2<=REDUNDANT)||(LA107_2>=RELAY_LOG_FILE && LA107_2<=RELAY_THREAD)||(LA107_2>=RELOAD && LA107_2<=REMOVE)||(LA107_2>=REORGANIZE && LA107_2<=REPAIR)||LA107_2==REPEATABLE||LA107_2==REPLICATION||(LA107_2>=RESET && LA107_2<=RESTORE)||LA107_2==RESUME||LA107_2==RETURNS||(LA107_2>=ROLLBACK && LA107_2<=ROW_FORMAT)||(LA107_2>=RTREE && LA107_2<=SCHEDULE)||LA107_2==SECOND||LA107_2==SECURITY||(LA107_2>=SERIAL && LA107_2<=SESSION)||LA107_2==SHARE||(LA107_2>=SHUTDOWN && LA107_2<=SLAVE)||(LA107_2>=SNAPSHOT && LA107_2<=SOCKET)||(LA107_2>=SONAME && LA107_2<=SOURCE)||(LA107_2>=SQL_BUFFER_RESULT && LA107_2<=SQL_CACHE)||LA107_2==SQL_NO_CACHE||LA107_2==SQL_THREAD||LA107_2==START||(LA107_2>=STARTS && LA107_2<=STATUS)||(LA107_2>=STOP && LA107_2<=STORAGE)||(LA107_2>=STRING_KEYWORD && LA107_2<=SUBPARTITIONS)||(LA107_2>=SUPER && LA107_2<=SWITCHES)||(LA107_2>=TABLES && LA107_2<=TEMPTABLE)||(LA107_2>=TEXT && LA107_2<=THAN)||(LA107_2>=TIME && LA107_2<=TIMESTAMP_DIFF)||(LA107_2>=TRANSACTION && LA107_2<=TRANSACTIONAL)||LA107_2==TRIGGERS||(LA107_2>=TRUNCATE && LA107_2<=UNDEFINED)||(LA107_2>=UNDOFILE && LA107_2<=UNINSTALL)||LA107_2==UNKNOWN||LA107_2==UNTIL||LA107_2==UPGRADE||LA107_2==USER||LA107_2==USE_FRM||LA107_2==VALUE||LA107_2==VARIABLES||(LA107_2>=VIEW && LA107_2<=WEEK)||(LA107_2>=WORK && LA107_2<=WRAPPER)||(LA107_2>=X509 && LA107_2<=XA)||LA107_2==YEAR))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA107_0==LCURLY))
			{
				alt107 = 4;
			}
			else if ((LA107_0==DUAL))
			{
				alt107 = 5;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:360:4: simple_table_ref_alias ( index_hint_list )?
				{
				DebugLocation(360, 4);
				PushFollow(Follow._simple_table_ref_alias_in_table_factor3707);
				simple_table_ref_alias278=simple_table_ref_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_alias.Add(simple_table_ref_alias278.Tree);
				DebugLocation(360, 27);
				// MySQL51Parser.g3:360:27: ( index_hint_list )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==FORCE||LA104_0==IGNORE||LA104_0==USE))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:360:27: index_hint_list
					{
					DebugLocation(360, 27);
					PushFollow(Follow._index_hint_list_in_table_factor3709);
					index_hint_list279=index_hint_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_index_hint_list.Add(index_hint_list279.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(360, 44);
				if (state.backtracking == 0)
				{
					table_references_stack.Peek().count++;
				}


				{
				// AST REWRITE
				// elements: simple_table_ref_alias, index_hint_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:74: -> ^( TABLE simple_table_ref_alias ( index_hint_list )? )
				{
					DebugLocation(360, 77);
					// MySQL51Parser.g3:360:77: ^( TABLE simple_table_ref_alias ( index_hint_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(360, 79);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_1);

					DebugLocation(360, 85);
					adaptor.AddChild(root_1, stream_simple_table_ref_alias.NextTree());
					DebugLocation(360, 108);
					// MySQL51Parser.g3:360:108: ( index_hint_list )?
					if (stream_index_hint_list.HasNext)
					{
						DebugLocation(360, 108);
						adaptor.AddChild(root_1, stream_index_hint_list.NextTree());

					}
					stream_index_hint_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:361:4: LPAREN select_inner RPAREN ( AS )? ident
				{
				DebugLocation(361, 4);
				LPAREN280=(IToken)Match(input,LPAREN,Follow._LPAREN_in_table_factor3728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN280);

				DebugLocation(361, 11);
				PushFollow(Follow._select_inner_in_table_factor3730);
				select_inner281=select_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_inner.Add(select_inner281.Tree);
				DebugLocation(361, 24);
				RPAREN282=(IToken)Match(input,RPAREN,Follow._RPAREN_in_table_factor3732); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN282);

				DebugLocation(361, 31);
				// MySQL51Parser.g3:361:31: ( AS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==AS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:361:31: AS
					{
					DebugLocation(361, 31);
					AS283=(IToken)Match(input,AS,Follow._AS_in_table_factor3734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS283);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(361, 35);
				PushFollow(Follow._ident_in_table_factor3737);
				ident284=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident284.Tree);
				DebugLocation(361, 42);
				if (state.backtracking == 0)
				{
					table_references_stack.Peek().count++;
				}


				{
				// AST REWRITE
				// elements: select_inner, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 361:72: -> ^( SUBSELECT select_inner ^( ALIAS ident ) )
				{
					DebugLocation(361, 75);
					// MySQL51Parser.g3:361:75: ^( SUBSELECT select_inner ^( ALIAS ident ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(361, 77);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SUBSELECT, "SUBSELECT"), root_1);

					DebugLocation(361, 87);
					adaptor.AddChild(root_1, stream_select_inner.NextTree());
					DebugLocation(361, 100);
					// MySQL51Parser.g3:361:100: ^( ALIAS ident )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(361, 102);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ALIAS, "ALIAS"), root_2);

					DebugLocation(361, 108);
					adaptor.AddChild(root_2, stream_ident.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:362:9: LPAREN table_ref ( COMMA table_ref )* RPAREN
				{
				DebugLocation(362, 9);
				LPAREN285=(IToken)Match(input,LPAREN,Follow._LPAREN_in_table_factor3764); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN285);

				DebugLocation(362, 16);
				PushFollow(Follow._table_ref_in_table_factor3766);
				table_ref286=table_ref();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_ref.Add(table_ref286.Tree);
				DebugLocation(362, 26);
				if (state.backtracking == 0)
				{
					table_references_stack.Peek().count++;
				}
				DebugLocation(362, 56);
				// MySQL51Parser.g3:362:56: ( COMMA table_ref )*
				try { DebugEnterSubRule(106);
				while (true)
				{
					int alt106=2;
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==COMMA))
					{
						alt106 = 1;
					}


					} finally { DebugExitDecision(106); }
					switch ( alt106 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:362:57: COMMA table_ref
						{
						DebugLocation(362, 57);
						COMMA287=(IToken)Match(input,COMMA,Follow._COMMA_in_table_factor3771); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA287);

						DebugLocation(362, 63);
						PushFollow(Follow._table_ref_in_table_factor3773);
						table_ref288=table_ref();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_table_ref.Add(table_ref288.Tree);
						DebugLocation(362, 73);
						if (state.backtracking == 0)
						{
							table_references_stack.Peek().count++;
						}

						}
						break;

					default:
						goto loop106;
					}
				}

				loop106:
					;

				} finally { DebugExitSubRule(106); }

				DebugLocation(362, 106);
				RPAREN289=(IToken)Match(input,RPAREN,Follow._RPAREN_in_table_factor3780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN289);



				{
				// AST REWRITE
				// elements: table_ref
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:115: -> ^( TABLE ( table_ref )+ )
				{
					DebugLocation(362, 118);
					// MySQL51Parser.g3:362:118: ^( TABLE ( table_ref )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(362, 120);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_1);

					DebugLocation(362, 126);
					if (!(stream_table_ref.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_table_ref.HasNext )
					{
						DebugLocation(362, 126);
						adaptor.AddChild(root_1, stream_table_ref.NextTree());

					}
					stream_table_ref.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:369:4: LCURLY ident table_ref RCURLY
				{
				DebugLocation(369, 4);
				LCURLY290=(IToken)Match(input,LCURLY,Follow._LCURLY_in_table_factor3802); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LCURLY.Add(LCURLY290);

				DebugLocation(369, 11);
				PushFollow(Follow._ident_in_table_factor3804);
				ident291=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident291.Tree);
				DebugLocation(369, 17);
				PushFollow(Follow._table_ref_in_table_factor3806);
				table_ref292=table_ref();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_ref.Add(table_ref292.Tree);
				DebugLocation(369, 27);
				RCURLY293=(IToken)Match(input,RCURLY,Follow._RCURLY_in_table_factor3808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RCURLY.Add(RCURLY293);



				{
				// AST REWRITE
				// elements: table_ref
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:36: -> ^( TABLE table_ref )
				{
					DebugLocation(369, 39);
					// MySQL51Parser.g3:369:39: ^( TABLE table_ref )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(369, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_1);

					DebugLocation(369, 47);
					adaptor.AddChild(root_1, stream_table_ref.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:370:4: DUAL
				{
				DebugLocation(370, 4);
				DUAL294=(IToken)Match(input,DUAL,Follow._DUAL_in_table_factor3823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DUAL.Add(DUAL294);



				{
				// AST REWRITE
				// elements: DUAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 370:16: -> ^( DUAL )
				{
					DebugLocation(370, 19);
					// MySQL51Parser.g3:370:19: ^( DUAL )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(370, 21);
					root_1 = (object)adaptor.BecomeRoot(stream_DUAL.NextNode(), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_factor", 30);
			LeaveRule("table_factor", 30);
			LeaveRule_table_factor();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "table_factor"); }
		return retval;

	}
	// $ANTLR end "table_factor"

	private sealed partial class join_condition_on_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public join_condition_on_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_join_condition_on();
	partial void LeaveRule_join_condition_on();

	// $ANTLR start "join_condition_on"
	// MySQL51Parser.g3:373:1: join_condition_on : ON where_condition -> ^( ON where_condition ) ;
	[GrammarRule("join_condition_on")]
	private MySQL51Parser.join_condition_on_return join_condition_on()
	{
		EnterRule_join_condition_on();
		EnterRule("join_condition_on", 31);
		TraceIn("join_condition_on", 31);
		MySQL51Parser.join_condition_on_return retval = new MySQL51Parser.join_condition_on_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ON295 = default(IToken);
		MySQL51Parser.where_condition_return where_condition296 = default(MySQL51Parser.where_condition_return);

		object ON295_tree = default(object);
		RewriteRuleITokenStream stream_ON=new RewriteRuleITokenStream(adaptor,"token ON");
		RewriteRuleSubtreeStream stream_where_condition=new RewriteRuleSubtreeStream(adaptor,"rule where_condition");
		try { DebugEnterRule(GrammarFileName, "join_condition_on");
		DebugLocation(373, 1);
		try
		{
			// MySQL51Parser.g3:374:2: ( ON where_condition -> ^( ON where_condition ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:374:4: ON where_condition
			{
			DebugLocation(374, 4);
			ON295=(IToken)Match(input,ON,Follow._ON_in_join_condition_on3847); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ON.Add(ON295);

			DebugLocation(374, 7);
			PushFollow(Follow._where_condition_in_join_condition_on3849);
			where_condition296=where_condition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_condition.Add(where_condition296.Tree);


			{
			// AST REWRITE
			// elements: ON, where_condition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 374:24: -> ^( ON where_condition )
			{
				DebugLocation(374, 27);
				// MySQL51Parser.g3:374:27: ^( ON where_condition )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(374, 29);
				root_1 = (object)adaptor.BecomeRoot(stream_ON.NextNode(), root_1);

				DebugLocation(374, 32);
				adaptor.AddChild(root_1, stream_where_condition.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("join_condition_on", 31);
			LeaveRule("join_condition_on", 31);
			LeaveRule_join_condition_on();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "join_condition_on"); }
		return retval;

	}
	// $ANTLR end "join_condition_on"

	private sealed partial class join_condition_both_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public join_condition_both_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_join_condition_both();
	partial void LeaveRule_join_condition_both();

	// $ANTLR start "join_condition_both"
	// MySQL51Parser.g3:377:1: join_condition_both : ( join_condition_on | USING LPAREN fields+= ident ( COMMA fields+= ident )* RPAREN -> ^( USING ( $fields)+ ) );
	[GrammarRule("join_condition_both")]
	private MySQL51Parser.join_condition_both_return join_condition_both()
	{
		EnterRule_join_condition_both();
		EnterRule("join_condition_both", 32);
		TraceIn("join_condition_both", 32);
		MySQL51Parser.join_condition_both_return retval = new MySQL51Parser.join_condition_both_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken USING298 = default(IToken);
		IToken LPAREN299 = default(IToken);
		IToken COMMA300 = default(IToken);
		IToken RPAREN301 = default(IToken);
		List<object> list_fields = null;
		MySQL51Parser.join_condition_on_return join_condition_on297 = default(MySQL51Parser.join_condition_on_return);
		MySQL51Parser.ident_return fields = default(MySQL51Parser.ident_return);
		object USING298_tree = default(object);
		object LPAREN299_tree = default(object);
		object COMMA300_tree = default(object);
		object RPAREN301_tree = default(object);
		RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "join_condition_both");
		DebugLocation(377, 1);
		try
		{
			// MySQL51Parser.g3:378:2: ( join_condition_on | USING LPAREN fields+= ident ( COMMA fields+= ident )* RPAREN -> ^( USING ( $fields)+ ) )
			int alt109=2;
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==ON))
			{
				alt109 = 1;
			}
			else if ((LA109_0==USING))
			{
				alt109 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:378:4: join_condition_on
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._join_condition_on_in_join_condition_both3869);
				join_condition_on297=join_condition_on();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, join_condition_on297.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:379:4: USING LPAREN fields+= ident ( COMMA fields+= ident )* RPAREN
				{
				DebugLocation(379, 4);
				USING298=(IToken)Match(input,USING,Follow._USING_in_join_condition_both3874); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_USING.Add(USING298);

				DebugLocation(379, 10);
				LPAREN299=(IToken)Match(input,LPAREN,Follow._LPAREN_in_join_condition_both3876); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN299);

				DebugLocation(379, 23);
				PushFollow(Follow._ident_in_join_condition_both3880);
				fields=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(fields.Tree);
				if (list_fields==null) list_fields=new List<object>();
				list_fields.Add(fields.Tree);

				DebugLocation(379, 31);
				// MySQL51Parser.g3:379:31: ( COMMA fields+= ident )*
				try { DebugEnterSubRule(108);
				while (true)
				{
					int alt108=2;
					try { DebugEnterDecision(108, false);
					int LA108_0 = input.LA(1);

					if ((LA108_0==COMMA))
					{
						alt108 = 1;
					}


					} finally { DebugExitDecision(108); }
					switch ( alt108 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:379:32: COMMA fields+= ident
						{
						DebugLocation(379, 32);
						COMMA300=(IToken)Match(input,COMMA,Follow._COMMA_in_join_condition_both3883); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA300);

						DebugLocation(379, 44);
						PushFollow(Follow._ident_in_join_condition_both3887);
						fields=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(fields.Tree);
						if (list_fields==null) list_fields=new List<object>();
						list_fields.Add(fields.Tree);


						}
						break;

					default:
						goto loop108;
					}
				}

				loop108:
					;

				} finally { DebugExitSubRule(108); }

				DebugLocation(379, 54);
				RPAREN301=(IToken)Match(input,RPAREN,Follow._RPAREN_in_join_condition_both3891); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN301);



				{
				// AST REWRITE
				// elements: USING, fields
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: fields
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_fields=new RewriteRuleSubtreeStream(adaptor,"token fields",list_fields);
				root_0 = (object)adaptor.Nil();
				// 379:62: -> ^( USING ( $fields)+ )
				{
					DebugLocation(379, 65);
					// MySQL51Parser.g3:379:65: ^( USING ( $fields)+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(379, 67);
					root_1 = (object)adaptor.BecomeRoot(stream_USING.NextNode(), root_1);

					DebugLocation(379, 74);
					if (!(stream_fields.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_fields.HasNext )
					{
						DebugLocation(379, 74);
						adaptor.AddChild(root_1, stream_fields.NextTree());

					}
					stream_fields.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("join_condition_both", 32);
			LeaveRule("join_condition_both", 32);
			LeaveRule_join_condition_both();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "join_condition_both"); }
		return retval;

	}
	// $ANTLR end "join_condition_both"

	private sealed partial class simple_obj_ref_no_alias_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simple_obj_ref_no_alias_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_simple_obj_ref_no_alias();
	partial void LeaveRule_simple_obj_ref_no_alias();

	// $ANTLR start "simple_obj_ref_no_alias"
	// MySQL51Parser.g3:382:1: simple_obj_ref_no_alias : first= ident ( DOT second= ident )? -> $first ( $second)? ;
	[GrammarRule("simple_obj_ref_no_alias")]
	private MySQL51Parser.simple_obj_ref_no_alias_return simple_obj_ref_no_alias()
	{
		EnterRule_simple_obj_ref_no_alias();
		EnterRule("simple_obj_ref_no_alias", 33);
		TraceIn("simple_obj_ref_no_alias", 33);
		MySQL51Parser.simple_obj_ref_no_alias_return retval = new MySQL51Parser.simple_obj_ref_no_alias_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOT302 = default(IToken);
		MySQL51Parser.ident_return first = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return second = default(MySQL51Parser.ident_return);

		object DOT302_tree = default(object);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "simple_obj_ref_no_alias");
		DebugLocation(382, 1);
		try
		{
			// MySQL51Parser.g3:383:2: (first= ident ( DOT second= ident )? -> $first ( $second)? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:383:4: first= ident ( DOT second= ident )?
			{
			DebugLocation(383, 9);
			PushFollow(Follow._ident_in_simple_obj_ref_no_alias3915);
			first=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(first.Tree);
			DebugLocation(383, 16);
			// MySQL51Parser.g3:383:16: ( DOT second= ident )?
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==DOT))
			{
				alt110 = 1;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:383:17: DOT second= ident
				{
				DebugLocation(383, 17);
				DOT302=(IToken)Match(input,DOT,Follow._DOT_in_simple_obj_ref_no_alias3918); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT302);

				DebugLocation(383, 27);
				PushFollow(Follow._ident_in_simple_obj_ref_no_alias3922);
				second=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(second.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(110); }



			{
			// AST REWRITE
			// elements: first, second
			// token labels: 
			// rule labels: first, second, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.Tree:null);
			RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 383:37: -> $first ( $second)?
			{
				DebugLocation(383, 41);
				adaptor.AddChild(root_0, stream_first.NextTree());
				DebugLocation(383, 48);
				// MySQL51Parser.g3:383:48: ( $second)?
				if (stream_second.HasNext)
				{
					DebugLocation(383, 48);
					adaptor.AddChild(root_0, stream_second.NextTree());

				}
				stream_second.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_obj_ref_no_alias", 33);
			LeaveRule("simple_obj_ref_no_alias", 33);
			LeaveRule_simple_obj_ref_no_alias();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "simple_obj_ref_no_alias"); }
		return retval;

	}
	// $ANTLR end "simple_obj_ref_no_alias"

	private sealed partial class simple_table_ref_no_alias_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simple_table_ref_no_alias_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_simple_table_ref_no_alias();
	partial void LeaveRule_simple_table_ref_no_alias();

	// $ANTLR start "simple_table_ref_no_alias"
	// MySQL51Parser.g3:387:1: simple_table_ref_no_alias : first= ident ( DOT second= ident )? -> $first ( $second)? ;
	[GrammarRule("simple_table_ref_no_alias")]
	private MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias()
	{
		EnterRule_simple_table_ref_no_alias();
		EnterRule("simple_table_ref_no_alias", 34);
		TraceIn("simple_table_ref_no_alias", 34);
		MySQL51Parser.simple_table_ref_no_alias_return retval = new MySQL51Parser.simple_table_ref_no_alias_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOT303 = default(IToken);
		MySQL51Parser.ident_return first = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return second = default(MySQL51Parser.ident_return);

		object DOT303_tree = default(object);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "simple_table_ref_no_alias");
		DebugLocation(387, 1);
		try
		{
			// MySQL51Parser.g3:388:2: (first= ident ( DOT second= ident )? -> $first ( $second)? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:388:4: first= ident ( DOT second= ident )?
			{
			DebugLocation(388, 9);
			PushFollow(Follow._ident_in_simple_table_ref_no_alias3951);
			first=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(first.Tree);
			DebugLocation(388, 16);
			// MySQL51Parser.g3:388:16: ( DOT second= ident )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==DOT))
			{
				int LA111_1 = input.LA(2);

				if ((LA111_1==ACTION||(LA111_1>=ADDDATE && LA111_1<=ALGORITHM)||LA111_1==ANY||LA111_1==ASCII||(LA111_1>=AT && LA111_1<=BACKUP)||LA111_1==BEGIN||(LA111_1>=BINLOG && LA111_1<=BIT)||(LA111_1>=BLOCK && LA111_1<=BOOLEAN)||LA111_1==BTREE||(LA111_1>=BYTE && LA111_1<=CACHE)||LA111_1==CASCADED||LA111_1==CHAIN||LA111_1==CHANGED||LA111_1==CHARSET||(LA111_1>=CHECKSUM && LA111_1<=CODE)||LA111_1==COLLATION||LA111_1==COLUMNS||LA111_1==COMMENT||(LA111_1>=COMMIT && LA111_1<=CONCURRENT)||(LA111_1>=CONNECTION && LA111_1<=CONSISTENT)||(LA111_1>=CONTAINS && LA111_1<=CONTEXT)||LA111_1==CONTRIBUTORS||LA111_1==CPU||LA111_1==CUBE||LA111_1==DATA||(LA111_1>=DATAFILE && LA111_1<=DATETIME)||LA111_1==DAY||LA111_1==DEALLOCATE||LA111_1==DEFINER||LA111_1==DELAY_KEY_WRITE||LA111_1==DES_KEY_FILE||(LA111_1>=DIRECTORY && LA111_1<=DISK)||LA111_1==DO||(LA111_1>=DUMPFILE && LA111_1<=DYNAMIC)||LA111_1==ENABLE||(LA111_1>=END && LA111_1<=ENUM)||(LA111_1>=ERRORS && LA111_1<=ESCAPE)||(LA111_1>=EVENT && LA111_1<=EVERY)||LA111_1==EXECUTE||LA111_1==EXPANSION||(LA111_1>=EXTENDED && LA111_1<=EXTENT_SIZE)||(LA111_1>=FAST && LA111_1<=FAULTS)||(LA111_1>=FIELDS && LA111_1<=FIXED)||LA111_1==FLUSH||(LA111_1>=FOUND && LA111_1<=FRAC_SECOND)||LA111_1==FULL||(LA111_1>=FUNCTION && LA111_1<=GLOBAL)||LA111_1==GRANTS||LA111_1==GROUP||(LA111_1>=HANDLER && LA111_1<=HASH)||LA111_1==HELP||(LA111_1>=HOST && LA111_1<=HOUR)||(LA111_1>=ID && LA111_1<=IDENTIFIED)||LA111_1==IMPORT||LA111_1==INDEXES||LA111_1==INITIAL_SIZE||LA111_1==INNOBASE||(LA111_1>=INSERT_METHOD && LA111_1<=INSTALL)||(LA111_1>=INVOKER && LA111_1<=IPC)||(LA111_1>=ISOLATION && LA111_1<=ISSUER)||LA111_1==KEY_BLOCK_SIZE||(LA111_1>=LABEL && LA111_1<=LAST)||LA111_1==LEAVES||LA111_1==LESS||LA111_1==LEVEL||(LA111_1>=LINESTRING && LA111_1<=LIST)||LA111_1==LOCAL||(LA111_1>=LOCKS && LA111_1<=LOGFILE)||LA111_1==LOGS||(LA111_1>=MASTER && LA111_1<=MASTER_SSL_KEY)||LA111_1==MASTER_USER||(LA111_1>=MAX_CONNECTIONS_PER_HOUR && LA111_1<=MEDIUM)||(LA111_1>=MEMORY && LA111_1<=MICROSECOND)||LA111_1==MIGRATE||LA111_1==MINUTE||LA111_1==MIN_ROWS||LA111_1==MODE||LA111_1==MODIFY||LA111_1==MONTH||(LA111_1>=MULTILINESTRING && LA111_1<=MUTEX)||(LA111_1>=NAME && LA111_1<=NATIONAL)||(LA111_1>=NCHAR && LA111_1<=NONE)||LA111_1==NO_WAIT||(LA111_1>=NVARCHAR && LA111_1<=OLD_PASSWORD)||LA111_1==ONE||(LA111_1>=ONE_SHOT && LA111_1<=OPEN)||LA111_1==OPTIONS||(LA111_1>=OWNER && LA111_1<=PLUGINS)||(LA111_1>=POINT && LA111_1<=PORT)||(LA111_1>=PREPARE && LA111_1<=PREV)||LA111_1==PRIVILEGES||(LA111_1>=PROCESS && LA111_1<=PROFILES)||(LA111_1>=QUARTER && LA111_1<=QUICK)||(LA111_1>=REBUILD && LA111_1<=REDUNDANT)||(LA111_1>=RELAY_LOG_FILE && LA111_1<=RELAY_THREAD)||(LA111_1>=RELOAD && LA111_1<=REMOVE)||(LA111_1>=REORGANIZE && LA111_1<=REPAIR)||LA111_1==REPEATABLE||LA111_1==REPLICATION||(LA111_1>=RESET && LA111_1<=RESTORE)||LA111_1==RESUME||LA111_1==RETURNS||(LA111_1>=ROLLBACK && LA111_1<=ROW_FORMAT)||(LA111_1>=RTREE && LA111_1<=SCHEDULE)||LA111_1==SECOND||LA111_1==SECURITY||(LA111_1>=SERIAL && LA111_1<=SESSION)||LA111_1==SHARE||(LA111_1>=SHUTDOWN && LA111_1<=SLAVE)||(LA111_1>=SNAPSHOT && LA111_1<=SOCKET)||(LA111_1>=SONAME && LA111_1<=SOURCE)||(LA111_1>=SQL_BUFFER_RESULT && LA111_1<=SQL_CACHE)||LA111_1==SQL_NO_CACHE||LA111_1==SQL_THREAD||LA111_1==START||(LA111_1>=STARTS && LA111_1<=STATUS)||(LA111_1>=STOP && LA111_1<=STORAGE)||(LA111_1>=STRING_KEYWORD && LA111_1<=SUBPARTITIONS)||(LA111_1>=SUPER && LA111_1<=SWITCHES)||(LA111_1>=TABLES && LA111_1<=TEMPTABLE)||(LA111_1>=TEXT && LA111_1<=THAN)||(LA111_1>=TIME && LA111_1<=TIMESTAMP_DIFF)||(LA111_1>=TRANSACTION && LA111_1<=TRANSACTIONAL)||LA111_1==TRIGGERS||(LA111_1>=TRUNCATE && LA111_1<=UNDEFINED)||(LA111_1>=UNDOFILE && LA111_1<=UNINSTALL)||LA111_1==UNKNOWN||LA111_1==UNTIL||LA111_1==UPGRADE||LA111_1==USER||LA111_1==USE_FRM||LA111_1==VALUE||LA111_1==VARIABLES||(LA111_1>=VIEW && LA111_1<=WEEK)||(LA111_1>=WORK && LA111_1<=WRAPPER)||(LA111_1>=X509 && LA111_1<=XA)||LA111_1==YEAR))
				{
					alt111 = 1;
				}
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:388:17: DOT second= ident
				{
				DebugLocation(388, 17);
				DOT303=(IToken)Match(input,DOT,Follow._DOT_in_simple_table_ref_no_alias3954); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT303);

				DebugLocation(388, 27);
				PushFollow(Follow._ident_in_simple_table_ref_no_alias3958);
				second=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(second.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }



			{
			// AST REWRITE
			// elements: first, second
			// token labels: 
			// rule labels: first, second, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.Tree:null);
			RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 388:37: -> $first ( $second)?
			{
				DebugLocation(388, 41);
				adaptor.AddChild(root_0, stream_first.NextTree());
				DebugLocation(388, 48);
				// MySQL51Parser.g3:388:48: ( $second)?
				if (stream_second.HasNext)
				{
					DebugLocation(388, 48);
					adaptor.AddChild(root_0, stream_second.NextTree());

				}
				stream_second.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_table_ref_no_alias", 34);
			LeaveRule("simple_table_ref_no_alias", 34);
			LeaveRule_simple_table_ref_no_alias();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "simple_table_ref_no_alias"); }
		return retval;

	}
	// $ANTLR end "simple_table_ref_no_alias"

	private sealed partial class simple_table_ref_alias_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simple_table_ref_alias_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_simple_table_ref_alias();
	partial void LeaveRule_simple_table_ref_alias();

	// $ANTLR start "simple_table_ref_alias"
	// MySQL51Parser.g3:391:1: simple_table_ref_alias : first= ident ( DOT second= ident )? ( table_alias )? -> $first ( $second)? ( table_alias )? ;
	[GrammarRule("simple_table_ref_alias")]
	private MySQL51Parser.simple_table_ref_alias_return simple_table_ref_alias()
	{
		EnterRule_simple_table_ref_alias();
		EnterRule("simple_table_ref_alias", 35);
		TraceIn("simple_table_ref_alias", 35);
		MySQL51Parser.simple_table_ref_alias_return retval = new MySQL51Parser.simple_table_ref_alias_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOT304 = default(IToken);
		MySQL51Parser.ident_return first = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return second = default(MySQL51Parser.ident_return);
		MySQL51Parser.table_alias_return table_alias305 = default(MySQL51Parser.table_alias_return);

		object DOT304_tree = default(object);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "simple_table_ref_alias");
		DebugLocation(391, 1);
		try
		{
			// MySQL51Parser.g3:392:2: (first= ident ( DOT second= ident )? ( table_alias )? -> $first ( $second)? ( table_alias )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:392:4: first= ident ( DOT second= ident )? ( table_alias )?
			{
			DebugLocation(392, 9);
			PushFollow(Follow._ident_in_simple_table_ref_alias3983);
			first=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(first.Tree);
			DebugLocation(392, 16);
			// MySQL51Parser.g3:392:16: ( DOT second= ident )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_0 = input.LA(1);

			if ((LA112_0==DOT))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:392:17: DOT second= ident
				{
				DebugLocation(392, 17);
				DOT304=(IToken)Match(input,DOT,Follow._DOT_in_simple_table_ref_alias3986); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT304);

				DebugLocation(392, 27);
				PushFollow(Follow._ident_in_simple_table_ref_alias3990);
				second=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(second.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(112); }

			DebugLocation(392, 36);
			// MySQL51Parser.g3:392:36: ( table_alias )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_0 = input.LA(1);

			if ((LA113_0==ACTION||(LA113_0>=ADDDATE && LA113_0<=ALGORITHM)||LA113_0==ANY||LA113_0==AS||LA113_0==ASCII||(LA113_0>=AT && LA113_0<=BACKUP)||LA113_0==BEGIN||(LA113_0>=BINLOG && LA113_0<=BIT)||(LA113_0>=BLOCK && LA113_0<=BOOLEAN)||LA113_0==BTREE||(LA113_0>=BYTE && LA113_0<=CACHE)||LA113_0==CASCADED||LA113_0==CHAIN||LA113_0==CHANGED||LA113_0==CHARSET||(LA113_0>=CHECKSUM && LA113_0<=CODE)||LA113_0==COLLATION||LA113_0==COLUMNS||LA113_0==COMMENT||(LA113_0>=COMMIT && LA113_0<=CONCURRENT)||(LA113_0>=CONNECTION && LA113_0<=CONSISTENT)||(LA113_0>=CONTAINS && LA113_0<=CONTEXT)||LA113_0==CONTRIBUTORS||LA113_0==CPU||LA113_0==CUBE||LA113_0==DATA||(LA113_0>=DATAFILE && LA113_0<=DATETIME)||LA113_0==DAY||LA113_0==DEALLOCATE||LA113_0==DEFINER||LA113_0==DELAY_KEY_WRITE||LA113_0==DES_KEY_FILE||(LA113_0>=DIRECTORY && LA113_0<=DISK)||LA113_0==DO||(LA113_0>=DUMPFILE && LA113_0<=DYNAMIC)||LA113_0==ENABLE||(LA113_0>=END && LA113_0<=ENUM)||(LA113_0>=ERRORS && LA113_0<=ESCAPE)||(LA113_0>=EVENT && LA113_0<=EVERY)||LA113_0==EXECUTE||LA113_0==EXPANSION||(LA113_0>=EXTENDED && LA113_0<=EXTENT_SIZE)||(LA113_0>=FAST && LA113_0<=FAULTS)||(LA113_0>=FIELDS && LA113_0<=FIXED)||LA113_0==FLUSH||(LA113_0>=FOUND && LA113_0<=FRAC_SECOND)||LA113_0==FULL||(LA113_0>=FUNCTION && LA113_0<=GLOBAL)||LA113_0==GRANTS||(LA113_0>=HANDLER && LA113_0<=HASH)||LA113_0==HELP||(LA113_0>=HOST && LA113_0<=HOUR)||(LA113_0>=ID && LA113_0<=IDENTIFIED)||LA113_0==IMPORT||LA113_0==INDEXES||LA113_0==INITIAL_SIZE||LA113_0==INNOBASE||(LA113_0>=INSERT_METHOD && LA113_0<=INSTALL)||(LA113_0>=INVOKER && LA113_0<=IPC)||(LA113_0>=ISOLATION && LA113_0<=ISSUER)||LA113_0==KEY_BLOCK_SIZE||(LA113_0>=LABEL && LA113_0<=LAST)||LA113_0==LEAVES||LA113_0==LESS||LA113_0==LEVEL||(LA113_0>=LINESTRING && LA113_0<=LIST)||LA113_0==LOCAL||(LA113_0>=LOCKS && LA113_0<=LOGFILE)||LA113_0==LOGS||(LA113_0>=MASTER && LA113_0<=MASTER_SSL_KEY)||LA113_0==MASTER_USER||(LA113_0>=MAX_CONNECTIONS_PER_HOUR && LA113_0<=MEDIUM)||(LA113_0>=MEMORY && LA113_0<=MICROSECOND)||LA113_0==MIGRATE||LA113_0==MINUTE||LA113_0==MIN_ROWS||LA113_0==MODE||LA113_0==MODIFY||LA113_0==MONTH||(LA113_0>=MULTILINESTRING && LA113_0<=MUTEX)||(LA113_0>=NAME && LA113_0<=NATIONAL)||(LA113_0>=NCHAR && LA113_0<=NONE)||LA113_0==NO_WAIT||(LA113_0>=NVARCHAR && LA113_0<=OLD_PASSWORD)||LA113_0==ONE||(LA113_0>=ONE_SHOT && LA113_0<=OPEN)||LA113_0==OPTIONS||(LA113_0>=OWNER && LA113_0<=PLUGINS)||(LA113_0>=POINT && LA113_0<=PORT)||(LA113_0>=PREPARE && LA113_0<=PREV)||LA113_0==PRIVILEGES||(LA113_0>=PROCESS && LA113_0<=PROFILES)||(LA113_0>=QUARTER && LA113_0<=QUICK)||(LA113_0>=REBUILD && LA113_0<=REDUNDANT)||(LA113_0>=RELAY_LOG_FILE && LA113_0<=RELAY_THREAD)||(LA113_0>=RELOAD && LA113_0<=REMOVE)||(LA113_0>=REORGANIZE && LA113_0<=REPAIR)||LA113_0==REPEATABLE||LA113_0==REPLICATION||(LA113_0>=RESET && LA113_0<=RESTORE)||LA113_0==RESUME||LA113_0==RETURNS||(LA113_0>=ROLLBACK && LA113_0<=ROW_FORMAT)||(LA113_0>=RTREE && LA113_0<=SCHEDULE)||LA113_0==SECOND||LA113_0==SECURITY||(LA113_0>=SERIAL && LA113_0<=SESSION)||LA113_0==SHARE||(LA113_0>=SHUTDOWN && LA113_0<=SLAVE)||(LA113_0>=SNAPSHOT && LA113_0<=SOCKET)||(LA113_0>=SONAME && LA113_0<=SOURCE)||(LA113_0>=SQL_BUFFER_RESULT && LA113_0<=SQL_CACHE)||LA113_0==SQL_NO_CACHE||LA113_0==SQL_THREAD||LA113_0==START||(LA113_0>=STARTS && LA113_0<=STATUS)||(LA113_0>=STOP && LA113_0<=STORAGE)||(LA113_0>=STRING_KEYWORD && LA113_0<=SUBPARTITIONS)||(LA113_0>=SUPER && LA113_0<=SWITCHES)||(LA113_0>=TABLES && LA113_0<=TEMPTABLE)||(LA113_0>=TEXT && LA113_0<=THAN)||(LA113_0>=TIME && LA113_0<=TIMESTAMP_DIFF)||(LA113_0>=TRANSACTION && LA113_0<=TRANSACTIONAL)||LA113_0==TRIGGERS||(LA113_0>=TRUNCATE && LA113_0<=UNDEFINED)||(LA113_0>=UNDOFILE && LA113_0<=UNINSTALL)||LA113_0==UNKNOWN||LA113_0==UNTIL||LA113_0==UPGRADE||LA113_0==USER||LA113_0==USE_FRM||LA113_0==VALUE||LA113_0==VARIABLES||(LA113_0>=VIEW && LA113_0<=WEEK)||(LA113_0>=WORK && LA113_0<=WRAPPER)||(LA113_0>=X509 && LA113_0<=XA)||LA113_0==YEAR))
			{
				alt113 = 1;
			}
			else if ((LA113_0==GROUP))
			{
				int LA113_2 = input.LA(2);

				if ((LA113_2==EOF||LA113_2==COMMA||LA113_2==CROSS||(LA113_2>=FOR && LA113_2<=FORCE)||LA113_2==GROUP||LA113_2==HAVING||LA113_2==IGNORE||LA113_2==INNER||LA113_2==INTO||LA113_2==JOIN||LA113_2==LEFT||LA113_2==LIMIT||LA113_2==LOCK||LA113_2==LOW_PRIORITY||LA113_2==NATURAL||LA113_2==ON||LA113_2==ORDER||LA113_2==PROCEDURE||(LA113_2>=RCURLY && LA113_2<=READ)||LA113_2==RIGHT||LA113_2==RPAREN||LA113_2==SEMI||LA113_2==SET||LA113_2==STRAIGHT_JOIN||LA113_2==UNION||LA113_2==USE||LA113_2==USING||LA113_2==WHERE||LA113_2==WRITE))
				{
					alt113 = 1;
				}
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:392:36: table_alias
				{
				DebugLocation(392, 36);
				PushFollow(Follow._table_alias_in_simple_table_ref_alias3994);
				table_alias305=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias305.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(113); }



			{
			// AST REWRITE
			// elements: first, second, table_alias
			// token labels: 
			// rule labels: first, second, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_first=new RewriteRuleSubtreeStream(adaptor,"rule first",first!=null?first.Tree:null);
			RewriteRuleSubtreeStream stream_second=new RewriteRuleSubtreeStream(adaptor,"rule second",second!=null?second.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 392:50: -> $first ( $second)? ( table_alias )?
			{
				DebugLocation(392, 54);
				adaptor.AddChild(root_0, stream_first.NextTree());
				DebugLocation(392, 61);
				// MySQL51Parser.g3:392:61: ( $second)?
				if (stream_second.HasNext)
				{
					DebugLocation(392, 61);
					adaptor.AddChild(root_0, stream_second.NextTree());

				}
				stream_second.Reset();
				DebugLocation(392, 69);
				// MySQL51Parser.g3:392:69: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(392, 69);
					adaptor.AddChild(root_0, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_table_ref_alias", 35);
			LeaveRule("simple_table_ref_alias", 35);
			LeaveRule_simple_table_ref_alias();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "simple_table_ref_alias"); }
		return retval;

	}
	// $ANTLR end "simple_table_ref_alias"

	private sealed partial class table_alias_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public table_alias_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_table_alias();
	partial void LeaveRule_table_alias();

	// $ANTLR start "table_alias"
	// MySQL51Parser.g3:395:1: table_alias : ( AS )? alias= ident -> ^( ALIAS $alias) ;
	[GrammarRule("table_alias")]
	private MySQL51Parser.table_alias_return table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 36);
		TraceIn("table_alias", 36);
		MySQL51Parser.table_alias_return retval = new MySQL51Parser.table_alias_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AS306 = default(IToken);
		MySQL51Parser.ident_return alias = default(MySQL51Parser.ident_return);

		object AS306_tree = default(object);
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(395, 1);
		try
		{
			// MySQL51Parser.g3:396:2: ( ( AS )? alias= ident -> ^( ALIAS $alias) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:396:4: ( AS )? alias= ident
			{
			DebugLocation(396, 4);
			// MySQL51Parser.g3:396:4: ( AS )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==AS))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:396:4: AS
				{
				DebugLocation(396, 4);
				AS306=(IToken)Match(input,AS,Follow._AS_in_table_alias4019); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS306);


				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(396, 13);
			PushFollow(Follow._ident_in_table_alias4024);
			alias=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(alias.Tree);


			{
			// AST REWRITE
			// elements: alias
			// token labels: 
			// rule labels: alias, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias",alias!=null?alias.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 396:20: -> ^( ALIAS $alias)
			{
				DebugLocation(396, 23);
				// MySQL51Parser.g3:396:23: ^( ALIAS $alias)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(396, 25);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ALIAS, "ALIAS"), root_1);

				DebugLocation(396, 32);
				adaptor.AddChild(root_1, stream_alias.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 36);
			LeaveRule("table_alias", 36);
			LeaveRule_table_alias();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"

	private sealed partial class field_name_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public field_name_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_field_name();
	partial void LeaveRule_field_name();

	// $ANTLR start "field_name"
	// MySQL51Parser.g3:399:1: field_name : ident ({...}? => ( DOT ({...}? ( ident |star= MULT ) {...}?) )* ) -> ^( FIELD ( ident )+ ( $star)? ) ;
	[GrammarRule("field_name")]
	private MySQL51Parser.field_name_return field_name()
	{
		EnterRule_field_name();
		EnterRule("field_name", 37);
		TraceIn("field_name", 37);
		MySQL51Parser.field_name_return retval = new MySQL51Parser.field_name_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken star = default(IToken);
		IToken DOT308 = default(IToken);
		MySQL51Parser.ident_return ident307 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident309 = default(MySQL51Parser.ident_return);

		object star_tree = default(object);
		object DOT308_tree = default(object);
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_MULT=new RewriteRuleITokenStream(adaptor,"token MULT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		int i = 0;
		bool seenStar = false;

		try { DebugEnterRule(GrammarFileName, "field_name");
		DebugLocation(399, 1);
		try
		{
			// MySQL51Parser.g3:404:2: ( ident ({...}? => ( DOT ({...}? ( ident |star= MULT ) {...}?) )* ) -> ^( FIELD ( ident )+ ( $star)? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:404:4: ident ({...}? => ( DOT ({...}? ( ident |star= MULT ) {...}?) )* )
			{
			DebugLocation(404, 4);
			PushFollow(Follow._ident_in_field_name4049);
			ident307=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident307.Tree);
			DebugLocation(405, 3);
			// MySQL51Parser.g3:405:3: ({...}? => ( DOT ({...}? ( ident |star= MULT ) {...}?) )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:405:4: {...}? => ( DOT ({...}? ( ident |star= MULT ) {...}?) )*
			{
			DebugLocation(405, 4);
			if (!((seenStar == false)))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "field_name", "seenStar == false");
			}
			DebugLocation(406, 5);
			// MySQL51Parser.g3:406:5: ( DOT ({...}? ( ident |star= MULT ) {...}?) )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==DOT))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:406:6: DOT ({...}? ( ident |star= MULT ) {...}?)
					{
					DebugLocation(406, 6);
					DOT308=(IToken)Match(input,DOT,Follow._DOT_in_field_name4063); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT308);

					DebugLocation(407, 7);
					// MySQL51Parser.g3:407:7: ({...}? ( ident |star= MULT ) {...}?)
					DebugEnterAlt(1);
					// MySQL51Parser.g3:407:8: {...}? ( ident |star= MULT ) {...}?
					{
					DebugLocation(407, 8);
					if (!((seenStar == false)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "field_name", "seenStar == false");
					}
					DebugLocation(407, 29);
					// MySQL51Parser.g3:407:29: ( ident |star= MULT )
					int alt115=2;
					try { DebugEnterSubRule(115);
					try { DebugEnterDecision(115, false);
					int LA115_0 = input.LA(1);

					if ((LA115_0==ACTION||(LA115_0>=ADDDATE && LA115_0<=ALGORITHM)||LA115_0==ANY||LA115_0==ASCII||(LA115_0>=AT && LA115_0<=BACKUP)||LA115_0==BEGIN||(LA115_0>=BINLOG && LA115_0<=BIT)||(LA115_0>=BLOCK && LA115_0<=BOOLEAN)||LA115_0==BTREE||(LA115_0>=BYTE && LA115_0<=CACHE)||LA115_0==CASCADED||LA115_0==CHAIN||LA115_0==CHANGED||LA115_0==CHARSET||(LA115_0>=CHECKSUM && LA115_0<=CODE)||LA115_0==COLLATION||LA115_0==COLUMNS||LA115_0==COMMENT||(LA115_0>=COMMIT && LA115_0<=CONCURRENT)||(LA115_0>=CONNECTION && LA115_0<=CONSISTENT)||(LA115_0>=CONTAINS && LA115_0<=CONTEXT)||LA115_0==CONTRIBUTORS||LA115_0==CPU||LA115_0==CUBE||LA115_0==DATA||(LA115_0>=DATAFILE && LA115_0<=DATETIME)||LA115_0==DAY||LA115_0==DEALLOCATE||LA115_0==DEFINER||LA115_0==DELAY_KEY_WRITE||LA115_0==DES_KEY_FILE||(LA115_0>=DIRECTORY && LA115_0<=DISK)||LA115_0==DO||(LA115_0>=DUMPFILE && LA115_0<=DYNAMIC)||LA115_0==ENABLE||(LA115_0>=END && LA115_0<=ENUM)||(LA115_0>=ERRORS && LA115_0<=ESCAPE)||(LA115_0>=EVENT && LA115_0<=EVERY)||LA115_0==EXECUTE||LA115_0==EXPANSION||(LA115_0>=EXTENDED && LA115_0<=EXTENT_SIZE)||(LA115_0>=FAST && LA115_0<=FAULTS)||(LA115_0>=FIELDS && LA115_0<=FIXED)||LA115_0==FLUSH||(LA115_0>=FOUND && LA115_0<=FRAC_SECOND)||LA115_0==FULL||(LA115_0>=FUNCTION && LA115_0<=GLOBAL)||LA115_0==GRANTS||LA115_0==GROUP||(LA115_0>=HANDLER && LA115_0<=HASH)||LA115_0==HELP||(LA115_0>=HOST && LA115_0<=HOUR)||(LA115_0>=ID && LA115_0<=IDENTIFIED)||LA115_0==IMPORT||LA115_0==INDEXES||LA115_0==INITIAL_SIZE||LA115_0==INNOBASE||(LA115_0>=INSERT_METHOD && LA115_0<=INSTALL)||(LA115_0>=INVOKER && LA115_0<=IPC)||(LA115_0>=ISOLATION && LA115_0<=ISSUER)||LA115_0==KEY_BLOCK_SIZE||(LA115_0>=LABEL && LA115_0<=LAST)||LA115_0==LEAVES||LA115_0==LESS||LA115_0==LEVEL||(LA115_0>=LINESTRING && LA115_0<=LIST)||LA115_0==LOCAL||(LA115_0>=LOCKS && LA115_0<=LOGFILE)||LA115_0==LOGS||(LA115_0>=MASTER && LA115_0<=MASTER_SSL_KEY)||LA115_0==MASTER_USER||(LA115_0>=MAX_CONNECTIONS_PER_HOUR && LA115_0<=MEDIUM)||(LA115_0>=MEMORY && LA115_0<=MICROSECOND)||LA115_0==MIGRATE||LA115_0==MINUTE||LA115_0==MIN_ROWS||LA115_0==MODE||LA115_0==MODIFY||LA115_0==MONTH||(LA115_0>=MULTILINESTRING && LA115_0<=MUTEX)||(LA115_0>=NAME && LA115_0<=NATIONAL)||(LA115_0>=NCHAR && LA115_0<=NONE)||LA115_0==NO_WAIT||(LA115_0>=NVARCHAR && LA115_0<=OLD_PASSWORD)||LA115_0==ONE||(LA115_0>=ONE_SHOT && LA115_0<=OPEN)||LA115_0==OPTIONS||(LA115_0>=OWNER && LA115_0<=PLUGINS)||(LA115_0>=POINT && LA115_0<=PORT)||(LA115_0>=PREPARE && LA115_0<=PREV)||LA115_0==PRIVILEGES||(LA115_0>=PROCESS && LA115_0<=PROFILES)||(LA115_0>=QUARTER && LA115_0<=QUICK)||(LA115_0>=REBUILD && LA115_0<=REDUNDANT)||(LA115_0>=RELAY_LOG_FILE && LA115_0<=RELAY_THREAD)||(LA115_0>=RELOAD && LA115_0<=REMOVE)||(LA115_0>=REORGANIZE && LA115_0<=REPAIR)||LA115_0==REPEATABLE||LA115_0==REPLICATION||(LA115_0>=RESET && LA115_0<=RESTORE)||LA115_0==RESUME||LA115_0==RETURNS||(LA115_0>=ROLLBACK && LA115_0<=ROW_FORMAT)||(LA115_0>=RTREE && LA115_0<=SCHEDULE)||LA115_0==SECOND||LA115_0==SECURITY||(LA115_0>=SERIAL && LA115_0<=SESSION)||LA115_0==SHARE||(LA115_0>=SHUTDOWN && LA115_0<=SLAVE)||(LA115_0>=SNAPSHOT && LA115_0<=SOCKET)||(LA115_0>=SONAME && LA115_0<=SOURCE)||(LA115_0>=SQL_BUFFER_RESULT && LA115_0<=SQL_CACHE)||LA115_0==SQL_NO_CACHE||LA115_0==SQL_THREAD||LA115_0==START||(LA115_0>=STARTS && LA115_0<=STATUS)||(LA115_0>=STOP && LA115_0<=STORAGE)||(LA115_0>=STRING_KEYWORD && LA115_0<=SUBPARTITIONS)||(LA115_0>=SUPER && LA115_0<=SWITCHES)||(LA115_0>=TABLES && LA115_0<=TEMPTABLE)||(LA115_0>=TEXT && LA115_0<=THAN)||(LA115_0>=TIME && LA115_0<=TIMESTAMP_DIFF)||(LA115_0>=TRANSACTION && LA115_0<=TRANSACTIONAL)||LA115_0==TRIGGERS||(LA115_0>=TRUNCATE && LA115_0<=UNDEFINED)||(LA115_0>=UNDOFILE && LA115_0<=UNINSTALL)||LA115_0==UNKNOWN||LA115_0==UNTIL||LA115_0==UPGRADE||LA115_0==USER||LA115_0==USE_FRM||LA115_0==VALUE||LA115_0==VARIABLES||(LA115_0>=VIEW && LA115_0<=WEEK)||(LA115_0>=WORK && LA115_0<=WRAPPER)||(LA115_0>=X509 && LA115_0<=XA)||LA115_0==YEAR))
					{
						alt115 = 1;
					}
					else if ((LA115_0==MULT))
					{
						alt115 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(115); }
					switch (alt115)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:407:30: ident
						{
						DebugLocation(407, 30);
						PushFollow(Follow._ident_in_field_name4076);
						ident309=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident309.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:407:38: star= MULT
						{
						DebugLocation(407, 42);
						star=(IToken)Match(input,MULT,Follow._MULT_in_field_name4082); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_MULT.Add(star);

						DebugLocation(407, 48);
						if (state.backtracking == 0)
						{
							seenStar = true;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(115); }

					DebugLocation(407, 68);
					if (!((++i <= 2)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "field_name", "++i <= 2");
					}

					}


					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}



			{
			// AST REWRITE
			// elements: ident, star
			// token labels: star
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_star=new RewriteRuleITokenStream(adaptor,"token star",star);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 410:3: -> ^( FIELD ( ident )+ ( $star)? )
			{
				DebugLocation(410, 6);
				// MySQL51Parser.g3:410:6: ^( FIELD ( ident )+ ( $star)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(410, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FIELD, "FIELD"), root_1);

				DebugLocation(410, 14);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(410, 14);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();
				DebugLocation(410, 22);
				// MySQL51Parser.g3:410:22: ( $star)?
				if (stream_star.HasNext)
				{
					DebugLocation(410, 22);
					adaptor.AddChild(root_1, stream_star.NextNode());

				}
				stream_star.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_name", 37);
			LeaveRule("field_name", 37);
			LeaveRule_field_name();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "field_name"); }
		return retval;

	}
	// $ANTLR end "field_name"

	private sealed partial class ident_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ident_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// MySQL51Parser.g3:418:1: ident : ( (tok= ASCII |tok= BACKUP |tok= BEGIN |tok= BYTE |tok= CACHE |tok= CHARSET |tok= CHECKSUM |tok= CLOSE |tok= COMMENT |tok= COMMIT |tok= CONTAINS |tok= DEALLOCATE |tok= DO |tok= END |tok= EXECUTE |tok= FLUSH |tok= GROUP |tok= HANDLER |tok= HELP |tok= HOST |tok= INSTALL |tok= LABEL |tok= LANGUAGE |tok= NO |tok= OPEN |tok= OPTIONS |tok= OWNER |tok= PARSER |tok= PARTITION |tok= PORT |tok= PREPARE |tok= REMOVE |tok= REPAIR |tok= RESET |tok= RESTORE |tok= ROLLBACK |tok= SAVEPOINT |tok= SECURITY |tok= SERVER |tok= SIGNED |tok= SOCKET |tok= SLAVE |tok= SONAME |tok= START |tok= STOP |tok= TRUNCATE |tok= UNICODE |tok= UNINSTALL |tok= WRAPPER |tok= XA |tok= UPGRADE ) -> ID[$tok] | ident_sp_label ->);
	[GrammarRule("ident")]
	private MySQL51Parser.ident_return ident()
	{
		EnterRule_ident();
		EnterRule("ident", 38);
		TraceIn("ident", 38);
		MySQL51Parser.ident_return retval = new MySQL51Parser.ident_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken tok = default(IToken);
		MySQL51Parser.ident_sp_label_return ident_sp_label310 = default(MySQL51Parser.ident_sp_label_return);

		object tok_tree = default(object);
		RewriteRuleITokenStream stream_ASCII=new RewriteRuleITokenStream(adaptor,"token ASCII");
		RewriteRuleITokenStream stream_BACKUP=new RewriteRuleITokenStream(adaptor,"token BACKUP");
		RewriteRuleITokenStream stream_BEGIN=new RewriteRuleITokenStream(adaptor,"token BEGIN");
		RewriteRuleITokenStream stream_BYTE=new RewriteRuleITokenStream(adaptor,"token BYTE");
		RewriteRuleITokenStream stream_CACHE=new RewriteRuleITokenStream(adaptor,"token CACHE");
		RewriteRuleITokenStream stream_CHARSET=new RewriteRuleITokenStream(adaptor,"token CHARSET");
		RewriteRuleITokenStream stream_CHECKSUM=new RewriteRuleITokenStream(adaptor,"token CHECKSUM");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleITokenStream stream_COMMENT=new RewriteRuleITokenStream(adaptor,"token COMMENT");
		RewriteRuleITokenStream stream_COMMIT=new RewriteRuleITokenStream(adaptor,"token COMMIT");
		RewriteRuleITokenStream stream_CONTAINS=new RewriteRuleITokenStream(adaptor,"token CONTAINS");
		RewriteRuleITokenStream stream_DEALLOCATE=new RewriteRuleITokenStream(adaptor,"token DEALLOCATE");
		RewriteRuleITokenStream stream_DO=new RewriteRuleITokenStream(adaptor,"token DO");
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_EXECUTE=new RewriteRuleITokenStream(adaptor,"token EXECUTE");
		RewriteRuleITokenStream stream_FLUSH=new RewriteRuleITokenStream(adaptor,"token FLUSH");
		RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
		RewriteRuleITokenStream stream_HANDLER=new RewriteRuleITokenStream(adaptor,"token HANDLER");
		RewriteRuleITokenStream stream_HELP=new RewriteRuleITokenStream(adaptor,"token HELP");
		RewriteRuleITokenStream stream_HOST=new RewriteRuleITokenStream(adaptor,"token HOST");
		RewriteRuleITokenStream stream_INSTALL=new RewriteRuleITokenStream(adaptor,"token INSTALL");
		RewriteRuleITokenStream stream_LABEL=new RewriteRuleITokenStream(adaptor,"token LABEL");
		RewriteRuleITokenStream stream_LANGUAGE=new RewriteRuleITokenStream(adaptor,"token LANGUAGE");
		RewriteRuleITokenStream stream_NO=new RewriteRuleITokenStream(adaptor,"token NO");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_OPTIONS=new RewriteRuleITokenStream(adaptor,"token OPTIONS");
		RewriteRuleITokenStream stream_OWNER=new RewriteRuleITokenStream(adaptor,"token OWNER");
		RewriteRuleITokenStream stream_PARSER=new RewriteRuleITokenStream(adaptor,"token PARSER");
		RewriteRuleITokenStream stream_PARTITION=new RewriteRuleITokenStream(adaptor,"token PARTITION");
		RewriteRuleITokenStream stream_PORT=new RewriteRuleITokenStream(adaptor,"token PORT");
		RewriteRuleITokenStream stream_PREPARE=new RewriteRuleITokenStream(adaptor,"token PREPARE");
		RewriteRuleITokenStream stream_REMOVE=new RewriteRuleITokenStream(adaptor,"token REMOVE");
		RewriteRuleITokenStream stream_REPAIR=new RewriteRuleITokenStream(adaptor,"token REPAIR");
		RewriteRuleITokenStream stream_RESET=new RewriteRuleITokenStream(adaptor,"token RESET");
		RewriteRuleITokenStream stream_RESTORE=new RewriteRuleITokenStream(adaptor,"token RESTORE");
		RewriteRuleITokenStream stream_ROLLBACK=new RewriteRuleITokenStream(adaptor,"token ROLLBACK");
		RewriteRuleITokenStream stream_SAVEPOINT=new RewriteRuleITokenStream(adaptor,"token SAVEPOINT");
		RewriteRuleITokenStream stream_SECURITY=new RewriteRuleITokenStream(adaptor,"token SECURITY");
		RewriteRuleITokenStream stream_SERVER=new RewriteRuleITokenStream(adaptor,"token SERVER");
		RewriteRuleITokenStream stream_SIGNED=new RewriteRuleITokenStream(adaptor,"token SIGNED");
		RewriteRuleITokenStream stream_SOCKET=new RewriteRuleITokenStream(adaptor,"token SOCKET");
		RewriteRuleITokenStream stream_SLAVE=new RewriteRuleITokenStream(adaptor,"token SLAVE");
		RewriteRuleITokenStream stream_SONAME=new RewriteRuleITokenStream(adaptor,"token SONAME");
		RewriteRuleITokenStream stream_START=new RewriteRuleITokenStream(adaptor,"token START");
		RewriteRuleITokenStream stream_STOP=new RewriteRuleITokenStream(adaptor,"token STOP");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		RewriteRuleITokenStream stream_UNICODE=new RewriteRuleITokenStream(adaptor,"token UNICODE");
		RewriteRuleITokenStream stream_UNINSTALL=new RewriteRuleITokenStream(adaptor,"token UNINSTALL");
		RewriteRuleITokenStream stream_WRAPPER=new RewriteRuleITokenStream(adaptor,"token WRAPPER");
		RewriteRuleITokenStream stream_XA=new RewriteRuleITokenStream(adaptor,"token XA");
		RewriteRuleITokenStream stream_UPGRADE=new RewriteRuleITokenStream(adaptor,"token UPGRADE");
		RewriteRuleSubtreeStream stream_ident_sp_label=new RewriteRuleSubtreeStream(adaptor,"rule ident_sp_label");
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(418, 1);
		try
		{
			// MySQL51Parser.g3:419:2: ( (tok= ASCII |tok= BACKUP |tok= BEGIN |tok= BYTE |tok= CACHE |tok= CHARSET |tok= CHECKSUM |tok= CLOSE |tok= COMMENT |tok= COMMIT |tok= CONTAINS |tok= DEALLOCATE |tok= DO |tok= END |tok= EXECUTE |tok= FLUSH |tok= GROUP |tok= HANDLER |tok= HELP |tok= HOST |tok= INSTALL |tok= LABEL |tok= LANGUAGE |tok= NO |tok= OPEN |tok= OPTIONS |tok= OWNER |tok= PARSER |tok= PARTITION |tok= PORT |tok= PREPARE |tok= REMOVE |tok= REPAIR |tok= RESET |tok= RESTORE |tok= ROLLBACK |tok= SAVEPOINT |tok= SECURITY |tok= SERVER |tok= SIGNED |tok= SOCKET |tok= SLAVE |tok= SONAME |tok= START |tok= STOP |tok= TRUNCATE |tok= UNICODE |tok= UNINSTALL |tok= WRAPPER |tok= XA |tok= UPGRADE ) -> ID[$tok] | ident_sp_label ->)
			int alt118=2;
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==ASCII||LA118_0==BACKUP||LA118_0==BEGIN||(LA118_0>=BYTE && LA118_0<=CACHE)||LA118_0==CHARSET||LA118_0==CHECKSUM||LA118_0==CLOSE||LA118_0==COMMENT||LA118_0==COMMIT||LA118_0==CONTAINS||LA118_0==DEALLOCATE||LA118_0==DO||LA118_0==END||LA118_0==EXECUTE||LA118_0==FLUSH||LA118_0==GROUP||LA118_0==HANDLER||LA118_0==HELP||LA118_0==HOST||LA118_0==INSTALL||(LA118_0>=LABEL && LA118_0<=LANGUAGE)||LA118_0==NO||LA118_0==OPEN||LA118_0==OPTIONS||LA118_0==OWNER||LA118_0==PARSER||LA118_0==PARTITION||LA118_0==PORT||LA118_0==PREPARE||LA118_0==REMOVE||LA118_0==REPAIR||LA118_0==RESET||LA118_0==RESTORE||LA118_0==ROLLBACK||LA118_0==SAVEPOINT||LA118_0==SECURITY||LA118_0==SERVER||LA118_0==SIGNED||LA118_0==SLAVE||LA118_0==SOCKET||LA118_0==SONAME||LA118_0==START||LA118_0==STOP||LA118_0==TRUNCATE||(LA118_0>=UNICODE && LA118_0<=UNINSTALL)||LA118_0==UPGRADE||LA118_0==WRAPPER||LA118_0==XA))
			{
				alt118 = 1;
			}
			else if ((LA118_0==ACTION||(LA118_0>=ADDDATE && LA118_0<=ALGORITHM)||LA118_0==ANY||(LA118_0>=AT && LA118_0<=AVG_ROW_LENGTH)||(LA118_0>=BINLOG && LA118_0<=BIT)||(LA118_0>=BLOCK && LA118_0<=BOOLEAN)||LA118_0==BTREE||LA118_0==CASCADED||LA118_0==CHAIN||LA118_0==CHANGED||(LA118_0>=CIPHER && LA118_0<=CLIENT)||(LA118_0>=COALESCE && LA118_0<=CODE)||LA118_0==COLLATION||LA118_0==COLUMNS||(LA118_0>=COMMITTED && LA118_0<=CONCURRENT)||(LA118_0>=CONNECTION && LA118_0<=CONSISTENT)||LA118_0==CONTEXT||LA118_0==CONTRIBUTORS||LA118_0==CPU||LA118_0==CUBE||LA118_0==DATA||(LA118_0>=DATAFILE && LA118_0<=DATETIME)||LA118_0==DAY||LA118_0==DEFINER||LA118_0==DELAY_KEY_WRITE||LA118_0==DES_KEY_FILE||(LA118_0>=DIRECTORY && LA118_0<=DISK)||(LA118_0>=DUMPFILE && LA118_0<=DYNAMIC)||LA118_0==ENABLE||(LA118_0>=ENDS && LA118_0<=ENUM)||(LA118_0>=ERRORS && LA118_0<=ESCAPE)||(LA118_0>=EVENT && LA118_0<=EVERY)||LA118_0==EXPANSION||(LA118_0>=EXTENDED && LA118_0<=EXTENT_SIZE)||(LA118_0>=FAST && LA118_0<=FAULTS)||(LA118_0>=FIELDS && LA118_0<=FIXED)||(LA118_0>=FOUND && LA118_0<=FRAC_SECOND)||LA118_0==FULL||(LA118_0>=FUNCTION && LA118_0<=GLOBAL)||LA118_0==GRANTS||LA118_0==HASH||(LA118_0>=HOSTS && LA118_0<=HOUR)||(LA118_0>=ID && LA118_0<=IDENTIFIED)||LA118_0==IMPORT||LA118_0==INDEXES||LA118_0==INITIAL_SIZE||LA118_0==INNOBASE||LA118_0==INSERT_METHOD||(LA118_0>=INVOKER && LA118_0<=IPC)||(LA118_0>=ISOLATION && LA118_0<=ISSUER)||LA118_0==KEY_BLOCK_SIZE||LA118_0==LAST||LA118_0==LEAVES||LA118_0==LESS||LA118_0==LEVEL||(LA118_0>=LINESTRING && LA118_0<=LIST)||LA118_0==LOCAL||(LA118_0>=LOCKS && LA118_0<=LOGFILE)||LA118_0==LOGS||(LA118_0>=MASTER && LA118_0<=MASTER_SSL_KEY)||LA118_0==MASTER_USER||(LA118_0>=MAX_CONNECTIONS_PER_HOUR && LA118_0<=MEDIUM)||(LA118_0>=MEMORY && LA118_0<=MICROSECOND)||LA118_0==MIGRATE||LA118_0==MINUTE||LA118_0==MIN_ROWS||LA118_0==MODE||LA118_0==MODIFY||LA118_0==MONTH||(LA118_0>=MULTILINESTRING && LA118_0<=MUTEX)||(LA118_0>=NAME && LA118_0<=NATIONAL)||(LA118_0>=NCHAR && LA118_0<=NEXT)||(LA118_0>=NODEGROUP && LA118_0<=NONE)||LA118_0==NO_WAIT||(LA118_0>=NVARCHAR && LA118_0<=OLD_PASSWORD)||LA118_0==ONE||LA118_0==ONE_SHOT||(LA118_0>=PACK_KEYS && LA118_0<=PAGE)||LA118_0==PARTIAL||(LA118_0>=PARTITIONING && LA118_0<=PLUGINS)||(LA118_0>=POINT && LA118_0<=POLYGON)||(LA118_0>=PRESERVE && LA118_0<=PREV)||LA118_0==PRIVILEGES||(LA118_0>=PROCESS && LA118_0<=PROFILES)||(LA118_0>=QUARTER && LA118_0<=QUICK)||(LA118_0>=REBUILD && LA118_0<=REDUNDANT)||(LA118_0>=RELAY_LOG_FILE && LA118_0<=RELAY_THREAD)||LA118_0==RELOAD||LA118_0==REORGANIZE||LA118_0==REPEATABLE||LA118_0==REPLICATION||LA118_0==RESOURCES||LA118_0==RESUME||LA118_0==RETURNS||(LA118_0>=ROLLUP && LA118_0<=ROW_FORMAT)||LA118_0==RTREE||LA118_0==SCHEDULE||LA118_0==SECOND||(LA118_0>=SERIAL && LA118_0<=SERIALIZABLE)||LA118_0==SESSION||LA118_0==SHARE||LA118_0==SHUTDOWN||LA118_0==SIMPLE||LA118_0==SNAPSHOT||(LA118_0>=SOUNDS && LA118_0<=SOURCE)||(LA118_0>=SQL_BUFFER_RESULT && LA118_0<=SQL_CACHE)||LA118_0==SQL_NO_CACHE||LA118_0==SQL_THREAD||(LA118_0>=STARTS && LA118_0<=STATUS)||LA118_0==STORAGE||(LA118_0>=STRING_KEYWORD && LA118_0<=SUBPARTITIONS)||(LA118_0>=SUPER && LA118_0<=SWITCHES)||(LA118_0>=TABLES && LA118_0<=TEMPTABLE)||(LA118_0>=TEXT && LA118_0<=THAN)||(LA118_0>=TIME && LA118_0<=TIMESTAMP_DIFF)||(LA118_0>=TRANSACTION && LA118_0<=TRANSACTIONAL)||LA118_0==TRIGGERS||(LA118_0>=TYPE && LA118_0<=UNDEFINED)||(LA118_0>=UNDOFILE && LA118_0<=UNDO_BUFFER_SIZE)||LA118_0==UNKNOWN||LA118_0==UNTIL||LA118_0==USER||LA118_0==USE_FRM||LA118_0==VALUE||LA118_0==VARIABLES||(LA118_0>=VIEW && LA118_0<=WEEK)||LA118_0==WORK||LA118_0==X509||LA118_0==YEAR))
			{
				alt118 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:420:2: (tok= ASCII |tok= BACKUP |tok= BEGIN |tok= BYTE |tok= CACHE |tok= CHARSET |tok= CHECKSUM |tok= CLOSE |tok= COMMENT |tok= COMMIT |tok= CONTAINS |tok= DEALLOCATE |tok= DO |tok= END |tok= EXECUTE |tok= FLUSH |tok= GROUP |tok= HANDLER |tok= HELP |tok= HOST |tok= INSTALL |tok= LABEL |tok= LANGUAGE |tok= NO |tok= OPEN |tok= OPTIONS |tok= OWNER |tok= PARSER |tok= PARTITION |tok= PORT |tok= PREPARE |tok= REMOVE |tok= REPAIR |tok= RESET |tok= RESTORE |tok= ROLLBACK |tok= SAVEPOINT |tok= SECURITY |tok= SERVER |tok= SIGNED |tok= SOCKET |tok= SLAVE |tok= SONAME |tok= START |tok= STOP |tok= TRUNCATE |tok= UNICODE |tok= UNINSTALL |tok= WRAPPER |tok= XA |tok= UPGRADE )
				{
				DebugLocation(420, 2);
				// MySQL51Parser.g3:420:2: (tok= ASCII |tok= BACKUP |tok= BEGIN |tok= BYTE |tok= CACHE |tok= CHARSET |tok= CHECKSUM |tok= CLOSE |tok= COMMENT |tok= COMMIT |tok= CONTAINS |tok= DEALLOCATE |tok= DO |tok= END |tok= EXECUTE |tok= FLUSH |tok= GROUP |tok= HANDLER |tok= HELP |tok= HOST |tok= INSTALL |tok= LABEL |tok= LANGUAGE |tok= NO |tok= OPEN |tok= OPTIONS |tok= OWNER |tok= PARSER |tok= PARTITION |tok= PORT |tok= PREPARE |tok= REMOVE |tok= REPAIR |tok= RESET |tok= RESTORE |tok= ROLLBACK |tok= SAVEPOINT |tok= SECURITY |tok= SERVER |tok= SIGNED |tok= SOCKET |tok= SLAVE |tok= SONAME |tok= START |tok= STOP |tok= TRUNCATE |tok= UNICODE |tok= UNINSTALL |tok= WRAPPER |tok= XA |tok= UPGRADE )
				int alt117=51;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				switch (input.LA(1))
				{
				case ASCII:
					{
					alt117 = 1;
					}
					break;
				case BACKUP:
					{
					alt117 = 2;
					}
					break;
				case BEGIN:
					{
					alt117 = 3;
					}
					break;
				case BYTE:
					{
					alt117 = 4;
					}
					break;
				case CACHE:
					{
					alt117 = 5;
					}
					break;
				case CHARSET:
					{
					alt117 = 6;
					}
					break;
				case CHECKSUM:
					{
					alt117 = 7;
					}
					break;
				case CLOSE:
					{
					alt117 = 8;
					}
					break;
				case COMMENT:
					{
					alt117 = 9;
					}
					break;
				case COMMIT:
					{
					alt117 = 10;
					}
					break;
				case CONTAINS:
					{
					alt117 = 11;
					}
					break;
				case DEALLOCATE:
					{
					alt117 = 12;
					}
					break;
				case DO:
					{
					alt117 = 13;
					}
					break;
				case END:
					{
					alt117 = 14;
					}
					break;
				case EXECUTE:
					{
					alt117 = 15;
					}
					break;
				case FLUSH:
					{
					alt117 = 16;
					}
					break;
				case GROUP:
					{
					alt117 = 17;
					}
					break;
				case HANDLER:
					{
					alt117 = 18;
					}
					break;
				case HELP:
					{
					alt117 = 19;
					}
					break;
				case HOST:
					{
					alt117 = 20;
					}
					break;
				case INSTALL:
					{
					alt117 = 21;
					}
					break;
				case LABEL:
					{
					alt117 = 22;
					}
					break;
				case LANGUAGE:
					{
					alt117 = 23;
					}
					break;
				case NO:
					{
					alt117 = 24;
					}
					break;
				case OPEN:
					{
					alt117 = 25;
					}
					break;
				case OPTIONS:
					{
					alt117 = 26;
					}
					break;
				case OWNER:
					{
					alt117 = 27;
					}
					break;
				case PARSER:
					{
					alt117 = 28;
					}
					break;
				case PARTITION:
					{
					alt117 = 29;
					}
					break;
				case PORT:
					{
					alt117 = 30;
					}
					break;
				case PREPARE:
					{
					alt117 = 31;
					}
					break;
				case REMOVE:
					{
					alt117 = 32;
					}
					break;
				case REPAIR:
					{
					alt117 = 33;
					}
					break;
				case RESET:
					{
					alt117 = 34;
					}
					break;
				case RESTORE:
					{
					alt117 = 35;
					}
					break;
				case ROLLBACK:
					{
					alt117 = 36;
					}
					break;
				case SAVEPOINT:
					{
					alt117 = 37;
					}
					break;
				case SECURITY:
					{
					alt117 = 38;
					}
					break;
				case SERVER:
					{
					alt117 = 39;
					}
					break;
				case SIGNED:
					{
					alt117 = 40;
					}
					break;
				case SOCKET:
					{
					alt117 = 41;
					}
					break;
				case SLAVE:
					{
					alt117 = 42;
					}
					break;
				case SONAME:
					{
					alt117 = 43;
					}
					break;
				case START:
					{
					alt117 = 44;
					}
					break;
				case STOP:
					{
					alt117 = 45;
					}
					break;
				case TRUNCATE:
					{
					alt117 = 46;
					}
					break;
				case UNICODE:
					{
					alt117 = 47;
					}
					break;
				case UNINSTALL:
					{
					alt117 = 48;
					}
					break;
				case WRAPPER:
					{
					alt117 = 49;
					}
					break;
				case XA:
					{
					alt117 = 50;
					}
					break;
				case UPGRADE:
					{
					alt117 = 51;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:420:4: tok= ASCII
					{
					DebugLocation(420, 7);
					tok=(IToken)Match(input,ASCII,Follow._ASCII_in_ident4135); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ASCII.Add(tok);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:421:4: tok= BACKUP
					{
					DebugLocation(421, 7);
					tok=(IToken)Match(input,BACKUP,Follow._BACKUP_in_ident4142); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BACKUP.Add(tok);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:422:4: tok= BEGIN
					{
					DebugLocation(422, 7);
					tok=(IToken)Match(input,BEGIN,Follow._BEGIN_in_ident4149); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BEGIN.Add(tok);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// MySQL51Parser.g3:423:4: tok= BYTE
					{
					DebugLocation(423, 7);
					tok=(IToken)Match(input,BYTE,Follow._BYTE_in_ident4156); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BYTE.Add(tok);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// MySQL51Parser.g3:424:4: tok= CACHE
					{
					DebugLocation(424, 7);
					tok=(IToken)Match(input,CACHE,Follow._CACHE_in_ident4163); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CACHE.Add(tok);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// MySQL51Parser.g3:425:4: tok= CHARSET
					{
					DebugLocation(425, 7);
					tok=(IToken)Match(input,CHARSET,Follow._CHARSET_in_ident4170); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CHARSET.Add(tok);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// MySQL51Parser.g3:426:4: tok= CHECKSUM
					{
					DebugLocation(426, 7);
					tok=(IToken)Match(input,CHECKSUM,Follow._CHECKSUM_in_ident4177); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CHECKSUM.Add(tok);


					}
					break;
				case 8:
					DebugEnterAlt(8);
					// MySQL51Parser.g3:427:4: tok= CLOSE
					{
					DebugLocation(427, 7);
					tok=(IToken)Match(input,CLOSE,Follow._CLOSE_in_ident4184); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLOSE.Add(tok);


					}
					break;
				case 9:
					DebugEnterAlt(9);
					// MySQL51Parser.g3:428:4: tok= COMMENT
					{
					DebugLocation(428, 7);
					tok=(IToken)Match(input,COMMENT,Follow._COMMENT_in_ident4191); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMENT.Add(tok);


					}
					break;
				case 10:
					DebugEnterAlt(10);
					// MySQL51Parser.g3:429:4: tok= COMMIT
					{
					DebugLocation(429, 7);
					tok=(IToken)Match(input,COMMIT,Follow._COMMIT_in_ident4198); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMIT.Add(tok);


					}
					break;
				case 11:
					DebugEnterAlt(11);
					// MySQL51Parser.g3:430:4: tok= CONTAINS
					{
					DebugLocation(430, 7);
					tok=(IToken)Match(input,CONTAINS,Follow._CONTAINS_in_ident4205); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CONTAINS.Add(tok);


					}
					break;
				case 12:
					DebugEnterAlt(12);
					// MySQL51Parser.g3:431:4: tok= DEALLOCATE
					{
					DebugLocation(431, 7);
					tok=(IToken)Match(input,DEALLOCATE,Follow._DEALLOCATE_in_ident4212); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEALLOCATE.Add(tok);


					}
					break;
				case 13:
					DebugEnterAlt(13);
					// MySQL51Parser.g3:432:4: tok= DO
					{
					DebugLocation(432, 7);
					tok=(IToken)Match(input,DO,Follow._DO_in_ident4219); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DO.Add(tok);


					}
					break;
				case 14:
					DebugEnterAlt(14);
					// MySQL51Parser.g3:433:4: tok= END
					{
					DebugLocation(433, 7);
					tok=(IToken)Match(input,END,Follow._END_in_ident4226); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_END.Add(tok);


					}
					break;
				case 15:
					DebugEnterAlt(15);
					// MySQL51Parser.g3:434:4: tok= EXECUTE
					{
					DebugLocation(434, 7);
					tok=(IToken)Match(input,EXECUTE,Follow._EXECUTE_in_ident4233); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_EXECUTE.Add(tok);


					}
					break;
				case 16:
					DebugEnterAlt(16);
					// MySQL51Parser.g3:435:4: tok= FLUSH
					{
					DebugLocation(435, 7);
					tok=(IToken)Match(input,FLUSH,Follow._FLUSH_in_ident4240); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FLUSH.Add(tok);


					}
					break;
				case 17:
					DebugEnterAlt(17);
					// MySQL51Parser.g3:436:4: tok= GROUP
					{
					DebugLocation(436, 7);
					tok=(IToken)Match(input,GROUP,Follow._GROUP_in_ident4247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_GROUP.Add(tok);


					}
					break;
				case 18:
					DebugEnterAlt(18);
					// MySQL51Parser.g3:437:4: tok= HANDLER
					{
					DebugLocation(437, 7);
					tok=(IToken)Match(input,HANDLER,Follow._HANDLER_in_ident4254); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_HANDLER.Add(tok);


					}
					break;
				case 19:
					DebugEnterAlt(19);
					// MySQL51Parser.g3:438:4: tok= HELP
					{
					DebugLocation(438, 7);
					tok=(IToken)Match(input,HELP,Follow._HELP_in_ident4261); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_HELP.Add(tok);


					}
					break;
				case 20:
					DebugEnterAlt(20);
					// MySQL51Parser.g3:439:4: tok= HOST
					{
					DebugLocation(439, 7);
					tok=(IToken)Match(input,HOST,Follow._HOST_in_ident4268); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_HOST.Add(tok);


					}
					break;
				case 21:
					DebugEnterAlt(21);
					// MySQL51Parser.g3:440:4: tok= INSTALL
					{
					DebugLocation(440, 7);
					tok=(IToken)Match(input,INSTALL,Follow._INSTALL_in_ident4275); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INSTALL.Add(tok);


					}
					break;
				case 22:
					DebugEnterAlt(22);
					// MySQL51Parser.g3:441:4: tok= LABEL
					{
					DebugLocation(441, 7);
					tok=(IToken)Match(input,LABEL,Follow._LABEL_in_ident4282); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LABEL.Add(tok);


					}
					break;
				case 23:
					DebugEnterAlt(23);
					// MySQL51Parser.g3:442:4: tok= LANGUAGE
					{
					DebugLocation(442, 7);
					tok=(IToken)Match(input,LANGUAGE,Follow._LANGUAGE_in_ident4289); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LANGUAGE.Add(tok);


					}
					break;
				case 24:
					DebugEnterAlt(24);
					// MySQL51Parser.g3:443:4: tok= NO
					{
					DebugLocation(443, 7);
					tok=(IToken)Match(input,NO,Follow._NO_in_ident4296); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NO.Add(tok);


					}
					break;
				case 25:
					DebugEnterAlt(25);
					// MySQL51Parser.g3:444:4: tok= OPEN
					{
					DebugLocation(444, 7);
					tok=(IToken)Match(input,OPEN,Follow._OPEN_in_ident4303); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OPEN.Add(tok);


					}
					break;
				case 26:
					DebugEnterAlt(26);
					// MySQL51Parser.g3:445:4: tok= OPTIONS
					{
					DebugLocation(445, 7);
					tok=(IToken)Match(input,OPTIONS,Follow._OPTIONS_in_ident4310); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OPTIONS.Add(tok);


					}
					break;
				case 27:
					DebugEnterAlt(27);
					// MySQL51Parser.g3:446:4: tok= OWNER
					{
					DebugLocation(446, 7);
					tok=(IToken)Match(input,OWNER,Follow._OWNER_in_ident4317); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OWNER.Add(tok);


					}
					break;
				case 28:
					DebugEnterAlt(28);
					// MySQL51Parser.g3:447:4: tok= PARSER
					{
					DebugLocation(447, 7);
					tok=(IToken)Match(input,PARSER,Follow._PARSER_in_ident4324); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PARSER.Add(tok);


					}
					break;
				case 29:
					DebugEnterAlt(29);
					// MySQL51Parser.g3:448:4: tok= PARTITION
					{
					DebugLocation(448, 7);
					tok=(IToken)Match(input,PARTITION,Follow._PARTITION_in_ident4331); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PARTITION.Add(tok);


					}
					break;
				case 30:
					DebugEnterAlt(30);
					// MySQL51Parser.g3:449:4: tok= PORT
					{
					DebugLocation(449, 7);
					tok=(IToken)Match(input,PORT,Follow._PORT_in_ident4338); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PORT.Add(tok);


					}
					break;
				case 31:
					DebugEnterAlt(31);
					// MySQL51Parser.g3:450:4: tok= PREPARE
					{
					DebugLocation(450, 7);
					tok=(IToken)Match(input,PREPARE,Follow._PREPARE_in_ident4345); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PREPARE.Add(tok);


					}
					break;
				case 32:
					DebugEnterAlt(32);
					// MySQL51Parser.g3:451:4: tok= REMOVE
					{
					DebugLocation(451, 7);
					tok=(IToken)Match(input,REMOVE,Follow._REMOVE_in_ident4352); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_REMOVE.Add(tok);


					}
					break;
				case 33:
					DebugEnterAlt(33);
					// MySQL51Parser.g3:452:4: tok= REPAIR
					{
					DebugLocation(452, 7);
					tok=(IToken)Match(input,REPAIR,Follow._REPAIR_in_ident4359); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_REPAIR.Add(tok);


					}
					break;
				case 34:
					DebugEnterAlt(34);
					// MySQL51Parser.g3:453:4: tok= RESET
					{
					DebugLocation(453, 7);
					tok=(IToken)Match(input,RESET,Follow._RESET_in_ident4366); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RESET.Add(tok);


					}
					break;
				case 35:
					DebugEnterAlt(35);
					// MySQL51Parser.g3:454:4: tok= RESTORE
					{
					DebugLocation(454, 7);
					tok=(IToken)Match(input,RESTORE,Follow._RESTORE_in_ident4373); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RESTORE.Add(tok);


					}
					break;
				case 36:
					DebugEnterAlt(36);
					// MySQL51Parser.g3:455:4: tok= ROLLBACK
					{
					DebugLocation(455, 7);
					tok=(IToken)Match(input,ROLLBACK,Follow._ROLLBACK_in_ident4380); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ROLLBACK.Add(tok);


					}
					break;
				case 37:
					DebugEnterAlt(37);
					// MySQL51Parser.g3:456:4: tok= SAVEPOINT
					{
					DebugLocation(456, 7);
					tok=(IToken)Match(input,SAVEPOINT,Follow._SAVEPOINT_in_ident4387); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SAVEPOINT.Add(tok);


					}
					break;
				case 38:
					DebugEnterAlt(38);
					// MySQL51Parser.g3:457:4: tok= SECURITY
					{
					DebugLocation(457, 7);
					tok=(IToken)Match(input,SECURITY,Follow._SECURITY_in_ident4394); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SECURITY.Add(tok);


					}
					break;
				case 39:
					DebugEnterAlt(39);
					// MySQL51Parser.g3:458:4: tok= SERVER
					{
					DebugLocation(458, 7);
					tok=(IToken)Match(input,SERVER,Follow._SERVER_in_ident4401); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SERVER.Add(tok);


					}
					break;
				case 40:
					DebugEnterAlt(40);
					// MySQL51Parser.g3:459:4: tok= SIGNED
					{
					DebugLocation(459, 7);
					tok=(IToken)Match(input,SIGNED,Follow._SIGNED_in_ident4408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIGNED.Add(tok);


					}
					break;
				case 41:
					DebugEnterAlt(41);
					// MySQL51Parser.g3:460:4: tok= SOCKET
					{
					DebugLocation(460, 7);
					tok=(IToken)Match(input,SOCKET,Follow._SOCKET_in_ident4415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SOCKET.Add(tok);


					}
					break;
				case 42:
					DebugEnterAlt(42);
					// MySQL51Parser.g3:461:4: tok= SLAVE
					{
					DebugLocation(461, 7);
					tok=(IToken)Match(input,SLAVE,Follow._SLAVE_in_ident4422); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SLAVE.Add(tok);


					}
					break;
				case 43:
					DebugEnterAlt(43);
					// MySQL51Parser.g3:462:4: tok= SONAME
					{
					DebugLocation(462, 7);
					tok=(IToken)Match(input,SONAME,Follow._SONAME_in_ident4429); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SONAME.Add(tok);


					}
					break;
				case 44:
					DebugEnterAlt(44);
					// MySQL51Parser.g3:463:4: tok= START
					{
					DebugLocation(463, 7);
					tok=(IToken)Match(input,START,Follow._START_in_ident4436); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_START.Add(tok);


					}
					break;
				case 45:
					DebugEnterAlt(45);
					// MySQL51Parser.g3:464:4: tok= STOP
					{
					DebugLocation(464, 7);
					tok=(IToken)Match(input,STOP,Follow._STOP_in_ident4443); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STOP.Add(tok);


					}
					break;
				case 46:
					DebugEnterAlt(46);
					// MySQL51Parser.g3:465:4: tok= TRUNCATE
					{
					DebugLocation(465, 7);
					tok=(IToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_ident4450); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_TRUNCATE.Add(tok);


					}
					break;
				case 47:
					DebugEnterAlt(47);
					// MySQL51Parser.g3:466:4: tok= UNICODE
					{
					DebugLocation(466, 7);
					tok=(IToken)Match(input,UNICODE,Follow._UNICODE_in_ident4457); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNICODE.Add(tok);


					}
					break;
				case 48:
					DebugEnterAlt(48);
					// MySQL51Parser.g3:467:4: tok= UNINSTALL
					{
					DebugLocation(467, 7);
					tok=(IToken)Match(input,UNINSTALL,Follow._UNINSTALL_in_ident4464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNINSTALL.Add(tok);


					}
					break;
				case 49:
					DebugEnterAlt(49);
					// MySQL51Parser.g3:468:4: tok= WRAPPER
					{
					DebugLocation(468, 7);
					tok=(IToken)Match(input,WRAPPER,Follow._WRAPPER_in_ident4471); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WRAPPER.Add(tok);


					}
					break;
				case 50:
					DebugEnterAlt(50);
					// MySQL51Parser.g3:469:4: tok= XA
					{
					DebugLocation(469, 7);
					tok=(IToken)Match(input,XA,Follow._XA_in_ident4478); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_XA.Add(tok);


					}
					break;
				case 51:
					DebugEnterAlt(51);
					// MySQL51Parser.g3:470:4: tok= UPGRADE
					{
					DebugLocation(470, 7);
					tok=(IToken)Match(input,UPGRADE,Follow._UPGRADE_in_ident4485); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UPGRADE.Add(tok);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 471:4: -> ID[$tok]
				{
					DebugLocation(471, 7);
					adaptor.AddChild(root_0, (object)adaptor.Create(ID, tok));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:472:4: ident_sp_label
				{
				DebugLocation(472, 4);
				PushFollow(Follow._ident_sp_label_in_ident4498);
				ident_sp_label310=ident_sp_label();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_sp_label.Add(ident_sp_label310.Tree);


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 472:19: ->
				{
					DebugLocation(472, 22);
					adaptor.AddChild(root_0, (ident_sp_label310!=null?((object)ident_sp_label310.Tree):default(object)));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 38);
			LeaveRule("ident", 38);
			LeaveRule_ident();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	private sealed partial class ident_sp_label_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ident_sp_label_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_ident_sp_label();
	partial void LeaveRule_ident_sp_label();

	// $ANTLR start "ident_sp_label"
	// MySQL51Parser.g3:475:1: ident_sp_label : (tok= ID |tok= ACTION |tok= ADDDATE |tok= AFTER |tok= AGAINST |tok= AGGREGATE |tok= ALGORITHM |tok= ANY |tok= AT |tok= AUTHORS |tok= AUTO_INCREMENT |tok= AUTOEXTEND_SIZE |tok= AVG_ROW_LENGTH |tok= AVG |tok= BINLOG |tok= BIT |tok= BLOCK |tok= BOOL |tok= BOOLEAN |tok= BTREE |tok= CASCADED |tok= CHAIN |tok= CHANGED |tok= CIPHER |tok= CLIENT |tok= COALESCE |tok= CODE |tok= COLLATION |tok= COLUMNS |tok= FIELDS |tok= COMMITTED |tok= COMPACT |tok= COMPLETION |tok= COMPRESSED |tok= CONCURRENT |tok= CONNECTION |tok= CONSISTENT |tok= CONTEXT |tok= CONTRIBUTORS |tok= CPU |tok= CUBE |tok= DATA |tok= DATAFILE |tok= DATETIME |tok= DATE |tok= DAY |tok= DEFINER |tok= DELAY_KEY_WRITE |tok= DES_KEY_FILE |tok= DIRECTORY |tok= DISABLE |tok= DISCARD |tok= DISK |tok= DUMPFILE |tok= DUPLICATE |tok= DYNAMIC |tok= ENDS |tok= ENUM |tok= ENGINE |tok= ENGINES |tok= ERRORS |tok= ESCAPE |tok= EVENT |tok= EVENTS |tok= EVERY |tok= EXPANSION |tok= EXTENDED |tok= EXTENT_SIZE |tok= FAULTS |tok= FAST |tok= FOUND |tok= ENABLE |tok= FULL |tok= FILE |tok= FIRST |tok= FIXED |tok= FRAC_SECOND |tok= GEOMETRY |tok= GEOMETRYCOLLECTION |tok= GET_FORMAT |tok= GRANTS |tok= GLOBAL |tok= HASH |tok= HOSTS |tok= HOUR |tok= IDENTIFIED |tok= INVOKER |tok= IMPORT |tok= INDEXES |tok= INITIAL_SIZE |tok= IO |tok= IPC |tok= ISOLATION |tok= ISSUER |tok= INNOBASE |tok= INSERT_METHOD |tok= KEY_BLOCK_SIZE |tok= LAST |tok= LEAVES |tok= LESS |tok= LEVEL |tok= LINESTRING |tok= LIST |tok= LOCAL |tok= LOCKS |tok= LOGFILE |tok= LOGS |tok= MAX_ROWS |tok= MASTER |tok= MASTER_HOST |tok= MASTER_PORT |tok= MASTER_LOG_FILE |tok= MASTER_LOG_POS |tok= MASTER_USER |tok= MASTER_PASSWORD |tok= MASTER_SERVER_ID |tok= MASTER_CONNECT_RETRY |tok= MASTER_SSL |tok= MASTER_SSL_CA |tok= MASTER_SSL_CAPATH |tok= MASTER_SSL_CERT |tok= MASTER_SSL_CIPHER |tok= MASTER_SSL_KEY |tok= MAX_CONNECTIONS_PER_HOUR |tok= MAX_QUERIES_PER_HOUR |tok= MAX_SIZE |tok= MAX_UPDATES_PER_HOUR |tok= MAX_USER_CONNECTIONS |tok= MAX_VALUE |tok= MEDIUM |tok= MEMORY |tok= MERGE |tok= MICROSECOND |tok= MIGRATE |tok= MINUTE |tok= MIN_ROWS |tok= MODIFY |tok= MODE |tok= MONTH |tok= MULTILINESTRING |tok= MULTIPOINT |tok= MULTIPOLYGON |tok= MUTEX |tok= NAME |tok= NAMES |tok= NATIONAL |tok= NCHAR |tok= NDBCLUSTER |tok= NEXT |tok= NEW |tok= NO_WAIT |tok= NODEGROUP |tok= NONE |tok= NVARCHAR |tok= OFFSET |tok= OLD_PASSWORD |tok= ONE_SHOT |tok= ONE |tok= PACK_KEYS |tok= PAGE |tok= PARTIAL |tok= PARTITIONING |tok= PARTITIONS |tok= PASSWORD |tok= PHASE |tok= PLUGIN |tok= PLUGINS |tok= POINT |tok= POLYGON |tok= PRESERVE |tok= PREV |tok= PRIVILEGES |tok= PROCESS |tok= PROCESSLIST |tok= PROFILE |tok= PROFILES |tok= QUARTER |tok= QUERY |tok= QUICK |tok= REBUILD |tok= RECOVER |tok= REDO_BUFFER_SIZE |tok= REDOFILE |tok= REDUNDANT |tok= RELAY_LOG_FILE |tok= RELAY_LOG_POS |tok= RELAY_THREAD |tok= RELOAD |tok= REORGANIZE |tok= REPEATABLE |tok= REPLICATION |tok= RESOURCES |tok= RESUME |tok= RETURNS |tok= ROLLUP |tok= ROUTINE |tok= ROWS |tok= ROW_FORMAT |tok= ROW |tok= RTREE |tok= SCHEDULE |tok= SECOND |tok= SERIAL |tok= SERIALIZABLE |tok= SESSION |tok= SIMPLE |tok= SHARE |tok= SHUTDOWN |tok= SNAPSHOT |tok= SOUNDS |tok= SOURCE |tok= SQL_CACHE |tok= SQL_BUFFER_RESULT |tok= SQL_NO_CACHE |tok= SQL_THREAD |tok= STARTS |tok= STATUS |tok= STORAGE |tok= STRING_KEYWORD |tok= SUBDATE |tok= SUBJECT |tok= SUBPARTITION |tok= SUBPARTITIONS |tok= SUPER |tok= SUSPEND |tok= SWAPS |tok= SWITCHES |tok= TABLES |tok= TABLESPACE |tok= TEMPORARY |tok= TEMPTABLE |tok= TEXT |tok= THAN |tok= TRANSACTION |tok= TRANSACTIONAL |tok= TRIGGERS |tok= TIMESTAMP |tok= TIMESTAMP_ADD |tok= TIMESTAMP_DIFF |tok= TIME |tok= TYPES |tok= TYPE |tok= UDF_RETURNS |tok= FUNCTION |tok= UNCOMMITTED |tok= UNDEFINED |tok= UNDO_BUFFER_SIZE |tok= UNDOFILE |tok= UNKNOWN |tok= UNTIL |tok= USER |tok= USE_FRM |tok= VARIABLES |tok= VIEW |tok= VALUE |tok= WARNINGS |tok= WAIT |tok= WEEK |tok= WORK |tok= X509 |tok= YEAR ) ;
	[GrammarRule("ident_sp_label")]
	private MySQL51Parser.ident_sp_label_return ident_sp_label()
	{
		EnterRule_ident_sp_label();
		EnterRule("ident_sp_label", 39);
		TraceIn("ident_sp_label", 39);
		MySQL51Parser.ident_sp_label_return retval = new MySQL51Parser.ident_sp_label_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken tok = default(IToken);

		object tok_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "ident_sp_label");
		DebugLocation(475, 1);
		try
		{
			// MySQL51Parser.g3:476:2: ( (tok= ID |tok= ACTION |tok= ADDDATE |tok= AFTER |tok= AGAINST |tok= AGGREGATE |tok= ALGORITHM |tok= ANY |tok= AT |tok= AUTHORS |tok= AUTO_INCREMENT |tok= AUTOEXTEND_SIZE |tok= AVG_ROW_LENGTH |tok= AVG |tok= BINLOG |tok= BIT |tok= BLOCK |tok= BOOL |tok= BOOLEAN |tok= BTREE |tok= CASCADED |tok= CHAIN |tok= CHANGED |tok= CIPHER |tok= CLIENT |tok= COALESCE |tok= CODE |tok= COLLATION |tok= COLUMNS |tok= FIELDS |tok= COMMITTED |tok= COMPACT |tok= COMPLETION |tok= COMPRESSED |tok= CONCURRENT |tok= CONNECTION |tok= CONSISTENT |tok= CONTEXT |tok= CONTRIBUTORS |tok= CPU |tok= CUBE |tok= DATA |tok= DATAFILE |tok= DATETIME |tok= DATE |tok= DAY |tok= DEFINER |tok= DELAY_KEY_WRITE |tok= DES_KEY_FILE |tok= DIRECTORY |tok= DISABLE |tok= DISCARD |tok= DISK |tok= DUMPFILE |tok= DUPLICATE |tok= DYNAMIC |tok= ENDS |tok= ENUM |tok= ENGINE |tok= ENGINES |tok= ERRORS |tok= ESCAPE |tok= EVENT |tok= EVENTS |tok= EVERY |tok= EXPANSION |tok= EXTENDED |tok= EXTENT_SIZE |tok= FAULTS |tok= FAST |tok= FOUND |tok= ENABLE |tok= FULL |tok= FILE |tok= FIRST |tok= FIXED |tok= FRAC_SECOND |tok= GEOMETRY |tok= GEOMETRYCOLLECTION |tok= GET_FORMAT |tok= GRANTS |tok= GLOBAL |tok= HASH |tok= HOSTS |tok= HOUR |tok= IDENTIFIED |tok= INVOKER |tok= IMPORT |tok= INDEXES |tok= INITIAL_SIZE |tok= IO |tok= IPC |tok= ISOLATION |tok= ISSUER |tok= INNOBASE |tok= INSERT_METHOD |tok= KEY_BLOCK_SIZE |tok= LAST |tok= LEAVES |tok= LESS |tok= LEVEL |tok= LINESTRING |tok= LIST |tok= LOCAL |tok= LOCKS |tok= LOGFILE |tok= LOGS |tok= MAX_ROWS |tok= MASTER |tok= MASTER_HOST |tok= MASTER_PORT |tok= MASTER_LOG_FILE |tok= MASTER_LOG_POS |tok= MASTER_USER |tok= MASTER_PASSWORD |tok= MASTER_SERVER_ID |tok= MASTER_CONNECT_RETRY |tok= MASTER_SSL |tok= MASTER_SSL_CA |tok= MASTER_SSL_CAPATH |tok= MASTER_SSL_CERT |tok= MASTER_SSL_CIPHER |tok= MASTER_SSL_KEY |tok= MAX_CONNECTIONS_PER_HOUR |tok= MAX_QUERIES_PER_HOUR |tok= MAX_SIZE |tok= MAX_UPDATES_PER_HOUR |tok= MAX_USER_CONNECTIONS |tok= MAX_VALUE |tok= MEDIUM |tok= MEMORY |tok= MERGE |tok= MICROSECOND |tok= MIGRATE |tok= MINUTE |tok= MIN_ROWS |tok= MODIFY |tok= MODE |tok= MONTH |tok= MULTILINESTRING |tok= MULTIPOINT |tok= MULTIPOLYGON |tok= MUTEX |tok= NAME |tok= NAMES |tok= NATIONAL |tok= NCHAR |tok= NDBCLUSTER |tok= NEXT |tok= NEW |tok= NO_WAIT |tok= NODEGROUP |tok= NONE |tok= NVARCHAR |tok= OFFSET |tok= OLD_PASSWORD |tok= ONE_SHOT |tok= ONE |tok= PACK_KEYS |tok= PAGE |tok= PARTIAL |tok= PARTITIONING |tok= PARTITIONS |tok= PASSWORD |tok= PHASE |tok= PLUGIN |tok= PLUGINS |tok= POINT |tok= POLYGON |tok= PRESERVE |tok= PREV |tok= PRIVILEGES |tok= PROCESS |tok= PROCESSLIST |tok= PROFILE |tok= PROFILES |tok= QUARTER |tok= QUERY |tok= QUICK |tok= REBUILD |tok= RECOVER |tok= REDO_BUFFER_SIZE |tok= REDOFILE |tok= REDUNDANT |tok= RELAY_LOG_FILE |tok= RELAY_LOG_POS |tok= RELAY_THREAD |tok= RELOAD |tok= REORGANIZE |tok= REPEATABLE |tok= REPLICATION |tok= RESOURCES |tok= RESUME |tok= RETURNS |tok= ROLLUP |tok= ROUTINE |tok= ROWS |tok= ROW_FORMAT |tok= ROW |tok= RTREE |tok= SCHEDULE |tok= SECOND |tok= SERIAL |tok= SERIALIZABLE |tok= SESSION |tok= SIMPLE |tok= SHARE |tok= SHUTDOWN |tok= SNAPSHOT |tok= SOUNDS |tok= SOURCE |tok= SQL_CACHE |tok= SQL_BUFFER_RESULT |tok= SQL_NO_CACHE |tok= SQL_THREAD |tok= STARTS |tok= STATUS |tok= STORAGE |tok= STRING_KEYWORD |tok= SUBDATE |tok= SUBJECT |tok= SUBPARTITION |tok= SUBPARTITIONS |tok= SUPER |tok= SUSPEND |tok= SWAPS |tok= SWITCHES |tok= TABLES |tok= TABLESPACE |tok= TEMPORARY |tok= TEMPTABLE |tok= TEXT |tok= THAN |tok= TRANSACTION |tok= TRANSACTIONAL |tok= TRIGGERS |tok= TIMESTAMP |tok= TIMESTAMP_ADD |tok= TIMESTAMP_DIFF |tok= TIME |tok= TYPES |tok= TYPE |tok= UDF_RETURNS |tok= FUNCTION |tok= UNCOMMITTED |tok= UNDEFINED |tok= UNDO_BUFFER_SIZE |tok= UNDOFILE |tok= UNKNOWN |tok= UNTIL |tok= USER |tok= USE_FRM |tok= VARIABLES |tok= VIEW |tok= VALUE |tok= WARNINGS |tok= WAIT |tok= WEEK |tok= WORK |tok= X509 |tok= YEAR ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:477:2: (tok= ID |tok= ACTION |tok= ADDDATE |tok= AFTER |tok= AGAINST |tok= AGGREGATE |tok= ALGORITHM |tok= ANY |tok= AT |tok= AUTHORS |tok= AUTO_INCREMENT |tok= AUTOEXTEND_SIZE |tok= AVG_ROW_LENGTH |tok= AVG |tok= BINLOG |tok= BIT |tok= BLOCK |tok= BOOL |tok= BOOLEAN |tok= BTREE |tok= CASCADED |tok= CHAIN |tok= CHANGED |tok= CIPHER |tok= CLIENT |tok= COALESCE |tok= CODE |tok= COLLATION |tok= COLUMNS |tok= FIELDS |tok= COMMITTED |tok= COMPACT |tok= COMPLETION |tok= COMPRESSED |tok= CONCURRENT |tok= CONNECTION |tok= CONSISTENT |tok= CONTEXT |tok= CONTRIBUTORS |tok= CPU |tok= CUBE |tok= DATA |tok= DATAFILE |tok= DATETIME |tok= DATE |tok= DAY |tok= DEFINER |tok= DELAY_KEY_WRITE |tok= DES_KEY_FILE |tok= DIRECTORY |tok= DISABLE |tok= DISCARD |tok= DISK |tok= DUMPFILE |tok= DUPLICATE |tok= DYNAMIC |tok= ENDS |tok= ENUM |tok= ENGINE |tok= ENGINES |tok= ERRORS |tok= ESCAPE |tok= EVENT |tok= EVENTS |tok= EVERY |tok= EXPANSION |tok= EXTENDED |tok= EXTENT_SIZE |tok= FAULTS |tok= FAST |tok= FOUND |tok= ENABLE |tok= FULL |tok= FILE |tok= FIRST |tok= FIXED |tok= FRAC_SECOND |tok= GEOMETRY |tok= GEOMETRYCOLLECTION |tok= GET_FORMAT |tok= GRANTS |tok= GLOBAL |tok= HASH |tok= HOSTS |tok= HOUR |tok= IDENTIFIED |tok= INVOKER |tok= IMPORT |tok= INDEXES |tok= INITIAL_SIZE |tok= IO |tok= IPC |tok= ISOLATION |tok= ISSUER |tok= INNOBASE |tok= INSERT_METHOD |tok= KEY_BLOCK_SIZE |tok= LAST |tok= LEAVES |tok= LESS |tok= LEVEL |tok= LINESTRING |tok= LIST |tok= LOCAL |tok= LOCKS |tok= LOGFILE |tok= LOGS |tok= MAX_ROWS |tok= MASTER |tok= MASTER_HOST |tok= MASTER_PORT |tok= MASTER_LOG_FILE |tok= MASTER_LOG_POS |tok= MASTER_USER |tok= MASTER_PASSWORD |tok= MASTER_SERVER_ID |tok= MASTER_CONNECT_RETRY |tok= MASTER_SSL |tok= MASTER_SSL_CA |tok= MASTER_SSL_CAPATH |tok= MASTER_SSL_CERT |tok= MASTER_SSL_CIPHER |tok= MASTER_SSL_KEY |tok= MAX_CONNECTIONS_PER_HOUR |tok= MAX_QUERIES_PER_HOUR |tok= MAX_SIZE |tok= MAX_UPDATES_PER_HOUR |tok= MAX_USER_CONNECTIONS |tok= MAX_VALUE |tok= MEDIUM |tok= MEMORY |tok= MERGE |tok= MICROSECOND |tok= MIGRATE |tok= MINUTE |tok= MIN_ROWS |tok= MODIFY |tok= MODE |tok= MONTH |tok= MULTILINESTRING |tok= MULTIPOINT |tok= MULTIPOLYGON |tok= MUTEX |tok= NAME |tok= NAMES |tok= NATIONAL |tok= NCHAR |tok= NDBCLUSTER |tok= NEXT |tok= NEW |tok= NO_WAIT |tok= NODEGROUP |tok= NONE |tok= NVARCHAR |tok= OFFSET |tok= OLD_PASSWORD |tok= ONE_SHOT |tok= ONE |tok= PACK_KEYS |tok= PAGE |tok= PARTIAL |tok= PARTITIONING |tok= PARTITIONS |tok= PASSWORD |tok= PHASE |tok= PLUGIN |tok= PLUGINS |tok= POINT |tok= POLYGON |tok= PRESERVE |tok= PREV |tok= PRIVILEGES |tok= PROCESS |tok= PROCESSLIST |tok= PROFILE |tok= PROFILES |tok= QUARTER |tok= QUERY |tok= QUICK |tok= REBUILD |tok= RECOVER |tok= REDO_BUFFER_SIZE |tok= REDOFILE |tok= REDUNDANT |tok= RELAY_LOG_FILE |tok= RELAY_LOG_POS |tok= RELAY_THREAD |tok= RELOAD |tok= REORGANIZE |tok= REPEATABLE |tok= REPLICATION |tok= RESOURCES |tok= RESUME |tok= RETURNS |tok= ROLLUP |tok= ROUTINE |tok= ROWS |tok= ROW_FORMAT |tok= ROW |tok= RTREE |tok= SCHEDULE |tok= SECOND |tok= SERIAL |tok= SERIALIZABLE |tok= SESSION |tok= SIMPLE |tok= SHARE |tok= SHUTDOWN |tok= SNAPSHOT |tok= SOUNDS |tok= SOURCE |tok= SQL_CACHE |tok= SQL_BUFFER_RESULT |tok= SQL_NO_CACHE |tok= SQL_THREAD |tok= STARTS |tok= STATUS |tok= STORAGE |tok= STRING_KEYWORD |tok= SUBDATE |tok= SUBJECT |tok= SUBPARTITION |tok= SUBPARTITIONS |tok= SUPER |tok= SUSPEND |tok= SWAPS |tok= SWITCHES |tok= TABLES |tok= TABLESPACE |tok= TEMPORARY |tok= TEMPTABLE |tok= TEXT |tok= THAN |tok= TRANSACTION |tok= TRANSACTIONAL |tok= TRIGGERS |tok= TIMESTAMP |tok= TIMESTAMP_ADD |tok= TIMESTAMP_DIFF |tok= TIME |tok= TYPES |tok= TYPE |tok= UDF_RETURNS |tok= FUNCTION |tok= UNCOMMITTED |tok= UNDEFINED |tok= UNDO_BUFFER_SIZE |tok= UNDOFILE |tok= UNKNOWN |tok= UNTIL |tok= USER |tok= USE_FRM |tok= VARIABLES |tok= VIEW |tok= VALUE |tok= WARNINGS |tok= WAIT |tok= WEEK |tok= WORK |tok= X509 |tok= YEAR )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(477, 2);
			// MySQL51Parser.g3:477:2: (tok= ID |tok= ACTION |tok= ADDDATE |tok= AFTER |tok= AGAINST |tok= AGGREGATE |tok= ALGORITHM |tok= ANY |tok= AT |tok= AUTHORS |tok= AUTO_INCREMENT |tok= AUTOEXTEND_SIZE |tok= AVG_ROW_LENGTH |tok= AVG |tok= BINLOG |tok= BIT |tok= BLOCK |tok= BOOL |tok= BOOLEAN |tok= BTREE |tok= CASCADED |tok= CHAIN |tok= CHANGED |tok= CIPHER |tok= CLIENT |tok= COALESCE |tok= CODE |tok= COLLATION |tok= COLUMNS |tok= FIELDS |tok= COMMITTED |tok= COMPACT |tok= COMPLETION |tok= COMPRESSED |tok= CONCURRENT |tok= CONNECTION |tok= CONSISTENT |tok= CONTEXT |tok= CONTRIBUTORS |tok= CPU |tok= CUBE |tok= DATA |tok= DATAFILE |tok= DATETIME |tok= DATE |tok= DAY |tok= DEFINER |tok= DELAY_KEY_WRITE |tok= DES_KEY_FILE |tok= DIRECTORY |tok= DISABLE |tok= DISCARD |tok= DISK |tok= DUMPFILE |tok= DUPLICATE |tok= DYNAMIC |tok= ENDS |tok= ENUM |tok= ENGINE |tok= ENGINES |tok= ERRORS |tok= ESCAPE |tok= EVENT |tok= EVENTS |tok= EVERY |tok= EXPANSION |tok= EXTENDED |tok= EXTENT_SIZE |tok= FAULTS |tok= FAST |tok= FOUND |tok= ENABLE |tok= FULL |tok= FILE |tok= FIRST |tok= FIXED |tok= FRAC_SECOND |tok= GEOMETRY |tok= GEOMETRYCOLLECTION |tok= GET_FORMAT |tok= GRANTS |tok= GLOBAL |tok= HASH |tok= HOSTS |tok= HOUR |tok= IDENTIFIED |tok= INVOKER |tok= IMPORT |tok= INDEXES |tok= INITIAL_SIZE |tok= IO |tok= IPC |tok= ISOLATION |tok= ISSUER |tok= INNOBASE |tok= INSERT_METHOD |tok= KEY_BLOCK_SIZE |tok= LAST |tok= LEAVES |tok= LESS |tok= LEVEL |tok= LINESTRING |tok= LIST |tok= LOCAL |tok= LOCKS |tok= LOGFILE |tok= LOGS |tok= MAX_ROWS |tok= MASTER |tok= MASTER_HOST |tok= MASTER_PORT |tok= MASTER_LOG_FILE |tok= MASTER_LOG_POS |tok= MASTER_USER |tok= MASTER_PASSWORD |tok= MASTER_SERVER_ID |tok= MASTER_CONNECT_RETRY |tok= MASTER_SSL |tok= MASTER_SSL_CA |tok= MASTER_SSL_CAPATH |tok= MASTER_SSL_CERT |tok= MASTER_SSL_CIPHER |tok= MASTER_SSL_KEY |tok= MAX_CONNECTIONS_PER_HOUR |tok= MAX_QUERIES_PER_HOUR |tok= MAX_SIZE |tok= MAX_UPDATES_PER_HOUR |tok= MAX_USER_CONNECTIONS |tok= MAX_VALUE |tok= MEDIUM |tok= MEMORY |tok= MERGE |tok= MICROSECOND |tok= MIGRATE |tok= MINUTE |tok= MIN_ROWS |tok= MODIFY |tok= MODE |tok= MONTH |tok= MULTILINESTRING |tok= MULTIPOINT |tok= MULTIPOLYGON |tok= MUTEX |tok= NAME |tok= NAMES |tok= NATIONAL |tok= NCHAR |tok= NDBCLUSTER |tok= NEXT |tok= NEW |tok= NO_WAIT |tok= NODEGROUP |tok= NONE |tok= NVARCHAR |tok= OFFSET |tok= OLD_PASSWORD |tok= ONE_SHOT |tok= ONE |tok= PACK_KEYS |tok= PAGE |tok= PARTIAL |tok= PARTITIONING |tok= PARTITIONS |tok= PASSWORD |tok= PHASE |tok= PLUGIN |tok= PLUGINS |tok= POINT |tok= POLYGON |tok= PRESERVE |tok= PREV |tok= PRIVILEGES |tok= PROCESS |tok= PROCESSLIST |tok= PROFILE |tok= PROFILES |tok= QUARTER |tok= QUERY |tok= QUICK |tok= REBUILD |tok= RECOVER |tok= REDO_BUFFER_SIZE |tok= REDOFILE |tok= REDUNDANT |tok= RELAY_LOG_FILE |tok= RELAY_LOG_POS |tok= RELAY_THREAD |tok= RELOAD |tok= REORGANIZE |tok= REPEATABLE |tok= REPLICATION |tok= RESOURCES |tok= RESUME |tok= RETURNS |tok= ROLLUP |tok= ROUTINE |tok= ROWS |tok= ROW_FORMAT |tok= ROW |tok= RTREE |tok= SCHEDULE |tok= SECOND |tok= SERIAL |tok= SERIALIZABLE |tok= SESSION |tok= SIMPLE |tok= SHARE |tok= SHUTDOWN |tok= SNAPSHOT |tok= SOUNDS |tok= SOURCE |tok= SQL_CACHE |tok= SQL_BUFFER_RESULT |tok= SQL_NO_CACHE |tok= SQL_THREAD |tok= STARTS |tok= STATUS |tok= STORAGE |tok= STRING_KEYWORD |tok= SUBDATE |tok= SUBJECT |tok= SUBPARTITION |tok= SUBPARTITIONS |tok= SUPER |tok= SUSPEND |tok= SWAPS |tok= SWITCHES |tok= TABLES |tok= TABLESPACE |tok= TEMPORARY |tok= TEMPTABLE |tok= TEXT |tok= THAN |tok= TRANSACTION |tok= TRANSACTIONAL |tok= TRIGGERS |tok= TIMESTAMP |tok= TIMESTAMP_ADD |tok= TIMESTAMP_DIFF |tok= TIME |tok= TYPES |tok= TYPE |tok= UDF_RETURNS |tok= FUNCTION |tok= UNCOMMITTED |tok= UNDEFINED |tok= UNDO_BUFFER_SIZE |tok= UNDOFILE |tok= UNKNOWN |tok= UNTIL |tok= USER |tok= USE_FRM |tok= VARIABLES |tok= VIEW |tok= VALUE |tok= WARNINGS |tok= WAIT |tok= WEEK |tok= WORK |tok= X509 |tok= YEAR )
			int alt119=261;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt119 = 1;
				}
				break;
			case ACTION:
				{
				alt119 = 2;
				}
				break;
			case ADDDATE:
				{
				alt119 = 3;
				}
				break;
			case AFTER:
				{
				alt119 = 4;
				}
				break;
			case AGAINST:
				{
				alt119 = 5;
				}
				break;
			case AGGREGATE:
				{
				alt119 = 6;
				}
				break;
			case ALGORITHM:
				{
				alt119 = 7;
				}
				break;
			case ANY:
				{
				alt119 = 8;
				}
				break;
			case AT:
				{
				alt119 = 9;
				}
				break;
			case AUTHORS:
				{
				alt119 = 10;
				}
				break;
			case AUTO_INCREMENT:
				{
				alt119 = 11;
				}
				break;
			case AUTOEXTEND_SIZE:
				{
				alt119 = 12;
				}
				break;
			case AVG_ROW_LENGTH:
				{
				alt119 = 13;
				}
				break;
			case AVG:
				{
				alt119 = 14;
				}
				break;
			case BINLOG:
				{
				alt119 = 15;
				}
				break;
			case BIT:
				{
				alt119 = 16;
				}
				break;
			case BLOCK:
				{
				alt119 = 17;
				}
				break;
			case BOOL:
				{
				alt119 = 18;
				}
				break;
			case BOOLEAN:
				{
				alt119 = 19;
				}
				break;
			case BTREE:
				{
				alt119 = 20;
				}
				break;
			case CASCADED:
				{
				alt119 = 21;
				}
				break;
			case CHAIN:
				{
				alt119 = 22;
				}
				break;
			case CHANGED:
				{
				alt119 = 23;
				}
				break;
			case CIPHER:
				{
				alt119 = 24;
				}
				break;
			case CLIENT:
				{
				alt119 = 25;
				}
				break;
			case COALESCE:
				{
				alt119 = 26;
				}
				break;
			case CODE:
				{
				alt119 = 27;
				}
				break;
			case COLLATION:
				{
				alt119 = 28;
				}
				break;
			case COLUMNS:
				{
				alt119 = 29;
				}
				break;
			case FIELDS:
				{
				alt119 = 30;
				}
				break;
			case COMMITTED:
				{
				alt119 = 31;
				}
				break;
			case COMPACT:
				{
				alt119 = 32;
				}
				break;
			case COMPLETION:
				{
				alt119 = 33;
				}
				break;
			case COMPRESSED:
				{
				alt119 = 34;
				}
				break;
			case CONCURRENT:
				{
				alt119 = 35;
				}
				break;
			case CONNECTION:
				{
				alt119 = 36;
				}
				break;
			case CONSISTENT:
				{
				alt119 = 37;
				}
				break;
			case CONTEXT:
				{
				alt119 = 38;
				}
				break;
			case CONTRIBUTORS:
				{
				alt119 = 39;
				}
				break;
			case CPU:
				{
				alt119 = 40;
				}
				break;
			case CUBE:
				{
				alt119 = 41;
				}
				break;
			case DATA:
				{
				alt119 = 42;
				}
				break;
			case DATAFILE:
				{
				alt119 = 43;
				}
				break;
			case DATETIME:
				{
				alt119 = 44;
				}
				break;
			case DATE:
				{
				alt119 = 45;
				}
				break;
			case DAY:
				{
				alt119 = 46;
				}
				break;
			case DEFINER:
				{
				alt119 = 47;
				}
				break;
			case DELAY_KEY_WRITE:
				{
				alt119 = 48;
				}
				break;
			case DES_KEY_FILE:
				{
				alt119 = 49;
				}
				break;
			case DIRECTORY:
				{
				alt119 = 50;
				}
				break;
			case DISABLE:
				{
				alt119 = 51;
				}
				break;
			case DISCARD:
				{
				alt119 = 52;
				}
				break;
			case DISK:
				{
				alt119 = 53;
				}
				break;
			case DUMPFILE:
				{
				alt119 = 54;
				}
				break;
			case DUPLICATE:
				{
				alt119 = 55;
				}
				break;
			case DYNAMIC:
				{
				alt119 = 56;
				}
				break;
			case ENDS:
				{
				alt119 = 57;
				}
				break;
			case ENUM:
				{
				alt119 = 58;
				}
				break;
			case ENGINE:
				{
				alt119 = 59;
				}
				break;
			case ENGINES:
				{
				alt119 = 60;
				}
				break;
			case ERRORS:
				{
				alt119 = 61;
				}
				break;
			case ESCAPE:
				{
				alt119 = 62;
				}
				break;
			case EVENT:
				{
				alt119 = 63;
				}
				break;
			case EVENTS:
				{
				alt119 = 64;
				}
				break;
			case EVERY:
				{
				alt119 = 65;
				}
				break;
			case EXPANSION:
				{
				alt119 = 66;
				}
				break;
			case EXTENDED:
				{
				alt119 = 67;
				}
				break;
			case EXTENT_SIZE:
				{
				alt119 = 68;
				}
				break;
			case FAULTS:
				{
				alt119 = 69;
				}
				break;
			case FAST:
				{
				alt119 = 70;
				}
				break;
			case FOUND:
				{
				alt119 = 71;
				}
				break;
			case ENABLE:
				{
				alt119 = 72;
				}
				break;
			case FULL:
				{
				alt119 = 73;
				}
				break;
			case FILE:
				{
				alt119 = 74;
				}
				break;
			case FIRST:
				{
				alt119 = 75;
				}
				break;
			case FIXED:
				{
				alt119 = 76;
				}
				break;
			case FRAC_SECOND:
				{
				alt119 = 77;
				}
				break;
			case GEOMETRY:
				{
				alt119 = 78;
				}
				break;
			case GEOMETRYCOLLECTION:
				{
				alt119 = 79;
				}
				break;
			case GET_FORMAT:
				{
				alt119 = 80;
				}
				break;
			case GRANTS:
				{
				alt119 = 81;
				}
				break;
			case GLOBAL:
				{
				alt119 = 82;
				}
				break;
			case HASH:
				{
				alt119 = 83;
				}
				break;
			case HOSTS:
				{
				alt119 = 84;
				}
				break;
			case HOUR:
				{
				alt119 = 85;
				}
				break;
			case IDENTIFIED:
				{
				alt119 = 86;
				}
				break;
			case INVOKER:
				{
				alt119 = 87;
				}
				break;
			case IMPORT:
				{
				alt119 = 88;
				}
				break;
			case INDEXES:
				{
				alt119 = 89;
				}
				break;
			case INITIAL_SIZE:
				{
				alt119 = 90;
				}
				break;
			case IO:
				{
				alt119 = 91;
				}
				break;
			case IPC:
				{
				alt119 = 92;
				}
				break;
			case ISOLATION:
				{
				alt119 = 93;
				}
				break;
			case ISSUER:
				{
				alt119 = 94;
				}
				break;
			case INNOBASE:
				{
				alt119 = 95;
				}
				break;
			case INSERT_METHOD:
				{
				alt119 = 96;
				}
				break;
			case KEY_BLOCK_SIZE:
				{
				alt119 = 97;
				}
				break;
			case LAST:
				{
				alt119 = 98;
				}
				break;
			case LEAVES:
				{
				alt119 = 99;
				}
				break;
			case LESS:
				{
				alt119 = 100;
				}
				break;
			case LEVEL:
				{
				alt119 = 101;
				}
				break;
			case LINESTRING:
				{
				alt119 = 102;
				}
				break;
			case LIST:
				{
				alt119 = 103;
				}
				break;
			case LOCAL:
				{
				alt119 = 104;
				}
				break;
			case LOCKS:
				{
				alt119 = 105;
				}
				break;
			case LOGFILE:
				{
				alt119 = 106;
				}
				break;
			case LOGS:
				{
				alt119 = 107;
				}
				break;
			case MAX_ROWS:
				{
				alt119 = 108;
				}
				break;
			case MASTER:
				{
				alt119 = 109;
				}
				break;
			case MASTER_HOST:
				{
				alt119 = 110;
				}
				break;
			case MASTER_PORT:
				{
				alt119 = 111;
				}
				break;
			case MASTER_LOG_FILE:
				{
				alt119 = 112;
				}
				break;
			case MASTER_LOG_POS:
				{
				alt119 = 113;
				}
				break;
			case MASTER_USER:
				{
				alt119 = 114;
				}
				break;
			case MASTER_PASSWORD:
				{
				alt119 = 115;
				}
				break;
			case MASTER_SERVER_ID:
				{
				alt119 = 116;
				}
				break;
			case MASTER_CONNECT_RETRY:
				{
				alt119 = 117;
				}
				break;
			case MASTER_SSL:
				{
				alt119 = 118;
				}
				break;
			case MASTER_SSL_CA:
				{
				alt119 = 119;
				}
				break;
			case MASTER_SSL_CAPATH:
				{
				alt119 = 120;
				}
				break;
			case MASTER_SSL_CERT:
				{
				alt119 = 121;
				}
				break;
			case MASTER_SSL_CIPHER:
				{
				alt119 = 122;
				}
				break;
			case MASTER_SSL_KEY:
				{
				alt119 = 123;
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				{
				alt119 = 124;
				}
				break;
			case MAX_QUERIES_PER_HOUR:
				{
				alt119 = 125;
				}
				break;
			case MAX_SIZE:
				{
				alt119 = 126;
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				{
				alt119 = 127;
				}
				break;
			case MAX_USER_CONNECTIONS:
				{
				alt119 = 128;
				}
				break;
			case MAX_VALUE:
				{
				alt119 = 129;
				}
				break;
			case MEDIUM:
				{
				alt119 = 130;
				}
				break;
			case MEMORY:
				{
				alt119 = 131;
				}
				break;
			case MERGE:
				{
				alt119 = 132;
				}
				break;
			case MICROSECOND:
				{
				alt119 = 133;
				}
				break;
			case MIGRATE:
				{
				alt119 = 134;
				}
				break;
			case MINUTE:
				{
				alt119 = 135;
				}
				break;
			case MIN_ROWS:
				{
				alt119 = 136;
				}
				break;
			case MODIFY:
				{
				alt119 = 137;
				}
				break;
			case MODE:
				{
				alt119 = 138;
				}
				break;
			case MONTH:
				{
				alt119 = 139;
				}
				break;
			case MULTILINESTRING:
				{
				alt119 = 140;
				}
				break;
			case MULTIPOINT:
				{
				alt119 = 141;
				}
				break;
			case MULTIPOLYGON:
				{
				alt119 = 142;
				}
				break;
			case MUTEX:
				{
				alt119 = 143;
				}
				break;
			case NAME:
				{
				alt119 = 144;
				}
				break;
			case NAMES:
				{
				alt119 = 145;
				}
				break;
			case NATIONAL:
				{
				alt119 = 146;
				}
				break;
			case NCHAR:
				{
				alt119 = 147;
				}
				break;
			case NDBCLUSTER:
				{
				alt119 = 148;
				}
				break;
			case NEXT:
				{
				alt119 = 149;
				}
				break;
			case NEW:
				{
				alt119 = 150;
				}
				break;
			case NO_WAIT:
				{
				alt119 = 151;
				}
				break;
			case NODEGROUP:
				{
				alt119 = 152;
				}
				break;
			case NONE:
				{
				alt119 = 153;
				}
				break;
			case NVARCHAR:
				{
				alt119 = 154;
				}
				break;
			case OFFSET:
				{
				alt119 = 155;
				}
				break;
			case OLD_PASSWORD:
				{
				alt119 = 156;
				}
				break;
			case ONE_SHOT:
				{
				alt119 = 157;
				}
				break;
			case ONE:
				{
				alt119 = 158;
				}
				break;
			case PACK_KEYS:
				{
				alt119 = 159;
				}
				break;
			case PAGE:
				{
				alt119 = 160;
				}
				break;
			case PARTIAL:
				{
				alt119 = 161;
				}
				break;
			case PARTITIONING:
				{
				alt119 = 162;
				}
				break;
			case PARTITIONS:
				{
				alt119 = 163;
				}
				break;
			case PASSWORD:
				{
				alt119 = 164;
				}
				break;
			case PHASE:
				{
				alt119 = 165;
				}
				break;
			case PLUGIN:
				{
				alt119 = 166;
				}
				break;
			case PLUGINS:
				{
				alt119 = 167;
				}
				break;
			case POINT:
				{
				alt119 = 168;
				}
				break;
			case POLYGON:
				{
				alt119 = 169;
				}
				break;
			case PRESERVE:
				{
				alt119 = 170;
				}
				break;
			case PREV:
				{
				alt119 = 171;
				}
				break;
			case PRIVILEGES:
				{
				alt119 = 172;
				}
				break;
			case PROCESS:
				{
				alt119 = 173;
				}
				break;
			case PROCESSLIST:
				{
				alt119 = 174;
				}
				break;
			case PROFILE:
				{
				alt119 = 175;
				}
				break;
			case PROFILES:
				{
				alt119 = 176;
				}
				break;
			case QUARTER:
				{
				alt119 = 177;
				}
				break;
			case QUERY:
				{
				alt119 = 178;
				}
				break;
			case QUICK:
				{
				alt119 = 179;
				}
				break;
			case REBUILD:
				{
				alt119 = 180;
				}
				break;
			case RECOVER:
				{
				alt119 = 181;
				}
				break;
			case REDO_BUFFER_SIZE:
				{
				alt119 = 182;
				}
				break;
			case REDOFILE:
				{
				alt119 = 183;
				}
				break;
			case REDUNDANT:
				{
				alt119 = 184;
				}
				break;
			case RELAY_LOG_FILE:
				{
				alt119 = 185;
				}
				break;
			case RELAY_LOG_POS:
				{
				alt119 = 186;
				}
				break;
			case RELAY_THREAD:
				{
				alt119 = 187;
				}
				break;
			case RELOAD:
				{
				alt119 = 188;
				}
				break;
			case REORGANIZE:
				{
				alt119 = 189;
				}
				break;
			case REPEATABLE:
				{
				alt119 = 190;
				}
				break;
			case REPLICATION:
				{
				alt119 = 191;
				}
				break;
			case RESOURCES:
				{
				alt119 = 192;
				}
				break;
			case RESUME:
				{
				alt119 = 193;
				}
				break;
			case RETURNS:
				{
				alt119 = 194;
				}
				break;
			case ROLLUP:
				{
				alt119 = 195;
				}
				break;
			case ROUTINE:
				{
				alt119 = 196;
				}
				break;
			case ROWS:
				{
				alt119 = 197;
				}
				break;
			case ROW_FORMAT:
				{
				alt119 = 198;
				}
				break;
			case ROW:
				{
				alt119 = 199;
				}
				break;
			case RTREE:
				{
				alt119 = 200;
				}
				break;
			case SCHEDULE:
				{
				alt119 = 201;
				}
				break;
			case SECOND:
				{
				alt119 = 202;
				}
				break;
			case SERIAL:
				{
				alt119 = 203;
				}
				break;
			case SERIALIZABLE:
				{
				alt119 = 204;
				}
				break;
			case SESSION:
				{
				alt119 = 205;
				}
				break;
			case SIMPLE:
				{
				alt119 = 206;
				}
				break;
			case SHARE:
				{
				alt119 = 207;
				}
				break;
			case SHUTDOWN:
				{
				alt119 = 208;
				}
				break;
			case SNAPSHOT:
				{
				alt119 = 209;
				}
				break;
			case SOUNDS:
				{
				alt119 = 210;
				}
				break;
			case SOURCE:
				{
				alt119 = 211;
				}
				break;
			case SQL_CACHE:
				{
				alt119 = 212;
				}
				break;
			case SQL_BUFFER_RESULT:
				{
				alt119 = 213;
				}
				break;
			case SQL_NO_CACHE:
				{
				alt119 = 214;
				}
				break;
			case SQL_THREAD:
				{
				alt119 = 215;
				}
				break;
			case STARTS:
				{
				alt119 = 216;
				}
				break;
			case STATUS:
				{
				alt119 = 217;
				}
				break;
			case STORAGE:
				{
				alt119 = 218;
				}
				break;
			case STRING_KEYWORD:
				{
				alt119 = 219;
				}
				break;
			case SUBDATE:
				{
				alt119 = 220;
				}
				break;
			case SUBJECT:
				{
				alt119 = 221;
				}
				break;
			case SUBPARTITION:
				{
				alt119 = 222;
				}
				break;
			case SUBPARTITIONS:
				{
				alt119 = 223;
				}
				break;
			case SUPER:
				{
				alt119 = 224;
				}
				break;
			case SUSPEND:
				{
				alt119 = 225;
				}
				break;
			case SWAPS:
				{
				alt119 = 226;
				}
				break;
			case SWITCHES:
				{
				alt119 = 227;
				}
				break;
			case TABLES:
				{
				alt119 = 228;
				}
				break;
			case TABLESPACE:
				{
				alt119 = 229;
				}
				break;
			case TEMPORARY:
				{
				alt119 = 230;
				}
				break;
			case TEMPTABLE:
				{
				alt119 = 231;
				}
				break;
			case TEXT:
				{
				alt119 = 232;
				}
				break;
			case THAN:
				{
				alt119 = 233;
				}
				break;
			case TRANSACTION:
				{
				alt119 = 234;
				}
				break;
			case TRANSACTIONAL:
				{
				alt119 = 235;
				}
				break;
			case TRIGGERS:
				{
				alt119 = 236;
				}
				break;
			case TIMESTAMP:
				{
				alt119 = 237;
				}
				break;
			case TIMESTAMP_ADD:
				{
				alt119 = 238;
				}
				break;
			case TIMESTAMP_DIFF:
				{
				alt119 = 239;
				}
				break;
			case TIME:
				{
				alt119 = 240;
				}
				break;
			case TYPES:
				{
				alt119 = 241;
				}
				break;
			case TYPE:
				{
				alt119 = 242;
				}
				break;
			case UDF_RETURNS:
				{
				alt119 = 243;
				}
				break;
			case FUNCTION:
				{
				alt119 = 244;
				}
				break;
			case UNCOMMITTED:
				{
				alt119 = 245;
				}
				break;
			case UNDEFINED:
				{
				alt119 = 246;
				}
				break;
			case UNDO_BUFFER_SIZE:
				{
				alt119 = 247;
				}
				break;
			case UNDOFILE:
				{
				alt119 = 248;
				}
				break;
			case UNKNOWN:
				{
				alt119 = 249;
				}
				break;
			case UNTIL:
				{
				alt119 = 250;
				}
				break;
			case USER:
				{
				alt119 = 251;
				}
				break;
			case USE_FRM:
				{
				alt119 = 252;
				}
				break;
			case VARIABLES:
				{
				alt119 = 253;
				}
				break;
			case VIEW:
				{
				alt119 = 254;
				}
				break;
			case VALUE:
				{
				alt119 = 255;
				}
				break;
			case WARNINGS:
				{
				alt119 = 256;
				}
				break;
			case WAIT:
				{
				alt119 = 257;
				}
				break;
			case WEEK:
				{
				alt119 = 258;
				}
				break;
			case WORK:
				{
				alt119 = 259;
				}
				break;
			case X509:
				{
				alt119 = 260;
				}
				break;
			case YEAR:
				{
				alt119 = 261;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:477:4: tok= ID
				{
				DebugLocation(477, 7);
				tok=(IToken)Match(input,ID,Follow._ID_in_ident_sp_label4520); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:478:4: tok= ACTION
				{
				DebugLocation(478, 7);
				tok=(IToken)Match(input,ACTION,Follow._ACTION_in_ident_sp_label4528); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:479:4: tok= ADDDATE
				{
				DebugLocation(479, 7);
				tok=(IToken)Match(input,ADDDATE,Follow._ADDDATE_in_ident_sp_label4536); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:480:4: tok= AFTER
				{
				DebugLocation(480, 7);
				tok=(IToken)Match(input,AFTER,Follow._AFTER_in_ident_sp_label4544); if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:481:4: tok= AGAINST
				{
				DebugLocation(481, 7);
				tok=(IToken)Match(input,AGAINST,Follow._AGAINST_in_ident_sp_label4552); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:482:4: tok= AGGREGATE
				{
				DebugLocation(482, 7);
				tok=(IToken)Match(input,AGGREGATE,Follow._AGGREGATE_in_ident_sp_label4560); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:483:4: tok= ALGORITHM
				{
				DebugLocation(483, 7);
				tok=(IToken)Match(input,ALGORITHM,Follow._ALGORITHM_in_ident_sp_label4568); if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:484:4: tok= ANY
				{
				DebugLocation(484, 7);
				tok=(IToken)Match(input,ANY,Follow._ANY_in_ident_sp_label4576); if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:485:4: tok= AT
				{
				DebugLocation(485, 7);
				tok=(IToken)Match(input,AT,Follow._AT_in_ident_sp_label4584); if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:486:4: tok= AUTHORS
				{
				DebugLocation(486, 7);
				tok=(IToken)Match(input,AUTHORS,Follow._AUTHORS_in_ident_sp_label4592); if (state.failed) return retval;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:487:4: tok= AUTO_INCREMENT
				{
				DebugLocation(487, 7);
				tok=(IToken)Match(input,AUTO_INCREMENT,Follow._AUTO_INCREMENT_in_ident_sp_label4600); if (state.failed) return retval;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:488:4: tok= AUTOEXTEND_SIZE
				{
				DebugLocation(488, 7);
				tok=(IToken)Match(input,AUTOEXTEND_SIZE,Follow._AUTOEXTEND_SIZE_in_ident_sp_label4608); if (state.failed) return retval;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:489:4: tok= AVG_ROW_LENGTH
				{
				DebugLocation(489, 7);
				tok=(IToken)Match(input,AVG_ROW_LENGTH,Follow._AVG_ROW_LENGTH_in_ident_sp_label4616); if (state.failed) return retval;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:490:4: tok= AVG
				{
				DebugLocation(490, 7);
				tok=(IToken)Match(input,AVG,Follow._AVG_in_ident_sp_label4624); if (state.failed) return retval;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:491:4: tok= BINLOG
				{
				DebugLocation(491, 7);
				tok=(IToken)Match(input,BINLOG,Follow._BINLOG_in_ident_sp_label4632); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:492:4: tok= BIT
				{
				DebugLocation(492, 7);
				tok=(IToken)Match(input,BIT,Follow._BIT_in_ident_sp_label4640); if (state.failed) return retval;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:493:4: tok= BLOCK
				{
				DebugLocation(493, 7);
				tok=(IToken)Match(input,BLOCK,Follow._BLOCK_in_ident_sp_label4648); if (state.failed) return retval;

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:494:4: tok= BOOL
				{
				DebugLocation(494, 7);
				tok=(IToken)Match(input,BOOL,Follow._BOOL_in_ident_sp_label4656); if (state.failed) return retval;

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// MySQL51Parser.g3:495:4: tok= BOOLEAN
				{
				DebugLocation(495, 7);
				tok=(IToken)Match(input,BOOLEAN,Follow._BOOLEAN_in_ident_sp_label4664); if (state.failed) return retval;

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// MySQL51Parser.g3:496:4: tok= BTREE
				{
				DebugLocation(496, 7);
				tok=(IToken)Match(input,BTREE,Follow._BTREE_in_ident_sp_label4672); if (state.failed) return retval;

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// MySQL51Parser.g3:497:4: tok= CASCADED
				{
				DebugLocation(497, 7);
				tok=(IToken)Match(input,CASCADED,Follow._CASCADED_in_ident_sp_label4680); if (state.failed) return retval;

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// MySQL51Parser.g3:498:4: tok= CHAIN
				{
				DebugLocation(498, 7);
				tok=(IToken)Match(input,CHAIN,Follow._CHAIN_in_ident_sp_label4688); if (state.failed) return retval;

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// MySQL51Parser.g3:499:4: tok= CHANGED
				{
				DebugLocation(499, 7);
				tok=(IToken)Match(input,CHANGED,Follow._CHANGED_in_ident_sp_label4696); if (state.failed) return retval;

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// MySQL51Parser.g3:500:4: tok= CIPHER
				{
				DebugLocation(500, 7);
				tok=(IToken)Match(input,CIPHER,Follow._CIPHER_in_ident_sp_label4704); if (state.failed) return retval;

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// MySQL51Parser.g3:501:4: tok= CLIENT
				{
				DebugLocation(501, 7);
				tok=(IToken)Match(input,CLIENT,Follow._CLIENT_in_ident_sp_label4712); if (state.failed) return retval;

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// MySQL51Parser.g3:502:4: tok= COALESCE
				{
				DebugLocation(502, 7);
				tok=(IToken)Match(input,COALESCE,Follow._COALESCE_in_ident_sp_label4720); if (state.failed) return retval;

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// MySQL51Parser.g3:503:4: tok= CODE
				{
				DebugLocation(503, 7);
				tok=(IToken)Match(input,CODE,Follow._CODE_in_ident_sp_label4728); if (state.failed) return retval;

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// MySQL51Parser.g3:504:4: tok= COLLATION
				{
				DebugLocation(504, 7);
				tok=(IToken)Match(input,COLLATION,Follow._COLLATION_in_ident_sp_label4736); if (state.failed) return retval;

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// MySQL51Parser.g3:505:4: tok= COLUMNS
				{
				DebugLocation(505, 7);
				tok=(IToken)Match(input,COLUMNS,Follow._COLUMNS_in_ident_sp_label4744); if (state.failed) return retval;

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// MySQL51Parser.g3:506:4: tok= FIELDS
				{
				DebugLocation(506, 7);
				tok=(IToken)Match(input,FIELDS,Follow._FIELDS_in_ident_sp_label4752); if (state.failed) return retval;

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// MySQL51Parser.g3:507:4: tok= COMMITTED
				{
				DebugLocation(507, 7);
				tok=(IToken)Match(input,COMMITTED,Follow._COMMITTED_in_ident_sp_label4760); if (state.failed) return retval;

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// MySQL51Parser.g3:508:4: tok= COMPACT
				{
				DebugLocation(508, 7);
				tok=(IToken)Match(input,COMPACT,Follow._COMPACT_in_ident_sp_label4768); if (state.failed) return retval;

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// MySQL51Parser.g3:509:4: tok= COMPLETION
				{
				DebugLocation(509, 7);
				tok=(IToken)Match(input,COMPLETION,Follow._COMPLETION_in_ident_sp_label4776); if (state.failed) return retval;

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// MySQL51Parser.g3:510:4: tok= COMPRESSED
				{
				DebugLocation(510, 7);
				tok=(IToken)Match(input,COMPRESSED,Follow._COMPRESSED_in_ident_sp_label4784); if (state.failed) return retval;

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// MySQL51Parser.g3:511:4: tok= CONCURRENT
				{
				DebugLocation(511, 7);
				tok=(IToken)Match(input,CONCURRENT,Follow._CONCURRENT_in_ident_sp_label4792); if (state.failed) return retval;

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// MySQL51Parser.g3:512:4: tok= CONNECTION
				{
				DebugLocation(512, 7);
				tok=(IToken)Match(input,CONNECTION,Follow._CONNECTION_in_ident_sp_label4800); if (state.failed) return retval;

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// MySQL51Parser.g3:513:4: tok= CONSISTENT
				{
				DebugLocation(513, 7);
				tok=(IToken)Match(input,CONSISTENT,Follow._CONSISTENT_in_ident_sp_label4808); if (state.failed) return retval;

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// MySQL51Parser.g3:514:4: tok= CONTEXT
				{
				DebugLocation(514, 7);
				tok=(IToken)Match(input,CONTEXT,Follow._CONTEXT_in_ident_sp_label4816); if (state.failed) return retval;

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// MySQL51Parser.g3:515:4: tok= CONTRIBUTORS
				{
				DebugLocation(515, 7);
				tok=(IToken)Match(input,CONTRIBUTORS,Follow._CONTRIBUTORS_in_ident_sp_label4824); if (state.failed) return retval;

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// MySQL51Parser.g3:516:4: tok= CPU
				{
				DebugLocation(516, 7);
				tok=(IToken)Match(input,CPU,Follow._CPU_in_ident_sp_label4832); if (state.failed) return retval;

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// MySQL51Parser.g3:517:4: tok= CUBE
				{
				DebugLocation(517, 7);
				tok=(IToken)Match(input,CUBE,Follow._CUBE_in_ident_sp_label4840); if (state.failed) return retval;

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// MySQL51Parser.g3:518:4: tok= DATA
				{
				DebugLocation(518, 7);
				tok=(IToken)Match(input,DATA,Follow._DATA_in_ident_sp_label4848); if (state.failed) return retval;

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// MySQL51Parser.g3:519:4: tok= DATAFILE
				{
				DebugLocation(519, 7);
				tok=(IToken)Match(input,DATAFILE,Follow._DATAFILE_in_ident_sp_label4856); if (state.failed) return retval;

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// MySQL51Parser.g3:520:4: tok= DATETIME
				{
				DebugLocation(520, 7);
				tok=(IToken)Match(input,DATETIME,Follow._DATETIME_in_ident_sp_label4864); if (state.failed) return retval;

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// MySQL51Parser.g3:521:4: tok= DATE
				{
				DebugLocation(521, 7);
				tok=(IToken)Match(input,DATE,Follow._DATE_in_ident_sp_label4872); if (state.failed) return retval;

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// MySQL51Parser.g3:522:4: tok= DAY
				{
				DebugLocation(522, 7);
				tok=(IToken)Match(input,DAY,Follow._DAY_in_ident_sp_label4880); if (state.failed) return retval;

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// MySQL51Parser.g3:523:4: tok= DEFINER
				{
				DebugLocation(523, 7);
				tok=(IToken)Match(input,DEFINER,Follow._DEFINER_in_ident_sp_label4888); if (state.failed) return retval;

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// MySQL51Parser.g3:524:4: tok= DELAY_KEY_WRITE
				{
				DebugLocation(524, 7);
				tok=(IToken)Match(input,DELAY_KEY_WRITE,Follow._DELAY_KEY_WRITE_in_ident_sp_label4896); if (state.failed) return retval;

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// MySQL51Parser.g3:525:4: tok= DES_KEY_FILE
				{
				DebugLocation(525, 7);
				tok=(IToken)Match(input,DES_KEY_FILE,Follow._DES_KEY_FILE_in_ident_sp_label4904); if (state.failed) return retval;

				}
				break;
			case 50:
				DebugEnterAlt(50);
				// MySQL51Parser.g3:526:4: tok= DIRECTORY
				{
				DebugLocation(526, 7);
				tok=(IToken)Match(input,DIRECTORY,Follow._DIRECTORY_in_ident_sp_label4912); if (state.failed) return retval;

				}
				break;
			case 51:
				DebugEnterAlt(51);
				// MySQL51Parser.g3:527:4: tok= DISABLE
				{
				DebugLocation(527, 7);
				tok=(IToken)Match(input,DISABLE,Follow._DISABLE_in_ident_sp_label4920); if (state.failed) return retval;

				}
				break;
			case 52:
				DebugEnterAlt(52);
				// MySQL51Parser.g3:528:4: tok= DISCARD
				{
				DebugLocation(528, 7);
				tok=(IToken)Match(input,DISCARD,Follow._DISCARD_in_ident_sp_label4928); if (state.failed) return retval;

				}
				break;
			case 53:
				DebugEnterAlt(53);
				// MySQL51Parser.g3:529:4: tok= DISK
				{
				DebugLocation(529, 7);
				tok=(IToken)Match(input,DISK,Follow._DISK_in_ident_sp_label4936); if (state.failed) return retval;

				}
				break;
			case 54:
				DebugEnterAlt(54);
				// MySQL51Parser.g3:530:4: tok= DUMPFILE
				{
				DebugLocation(530, 7);
				tok=(IToken)Match(input,DUMPFILE,Follow._DUMPFILE_in_ident_sp_label4944); if (state.failed) return retval;

				}
				break;
			case 55:
				DebugEnterAlt(55);
				// MySQL51Parser.g3:531:4: tok= DUPLICATE
				{
				DebugLocation(531, 7);
				tok=(IToken)Match(input,DUPLICATE,Follow._DUPLICATE_in_ident_sp_label4952); if (state.failed) return retval;

				}
				break;
			case 56:
				DebugEnterAlt(56);
				// MySQL51Parser.g3:532:4: tok= DYNAMIC
				{
				DebugLocation(532, 7);
				tok=(IToken)Match(input,DYNAMIC,Follow._DYNAMIC_in_ident_sp_label4960); if (state.failed) return retval;

				}
				break;
			case 57:
				DebugEnterAlt(57);
				// MySQL51Parser.g3:533:4: tok= ENDS
				{
				DebugLocation(533, 7);
				tok=(IToken)Match(input,ENDS,Follow._ENDS_in_ident_sp_label4968); if (state.failed) return retval;

				}
				break;
			case 58:
				DebugEnterAlt(58);
				// MySQL51Parser.g3:534:4: tok= ENUM
				{
				DebugLocation(534, 7);
				tok=(IToken)Match(input,ENUM,Follow._ENUM_in_ident_sp_label4976); if (state.failed) return retval;

				}
				break;
			case 59:
				DebugEnterAlt(59);
				// MySQL51Parser.g3:535:4: tok= ENGINE
				{
				DebugLocation(535, 7);
				tok=(IToken)Match(input,ENGINE,Follow._ENGINE_in_ident_sp_label4984); if (state.failed) return retval;

				}
				break;
			case 60:
				DebugEnterAlt(60);
				// MySQL51Parser.g3:536:4: tok= ENGINES
				{
				DebugLocation(536, 7);
				tok=(IToken)Match(input,ENGINES,Follow._ENGINES_in_ident_sp_label4992); if (state.failed) return retval;

				}
				break;
			case 61:
				DebugEnterAlt(61);
				// MySQL51Parser.g3:537:4: tok= ERRORS
				{
				DebugLocation(537, 7);
				tok=(IToken)Match(input,ERRORS,Follow._ERRORS_in_ident_sp_label5000); if (state.failed) return retval;

				}
				break;
			case 62:
				DebugEnterAlt(62);
				// MySQL51Parser.g3:538:4: tok= ESCAPE
				{
				DebugLocation(538, 7);
				tok=(IToken)Match(input,ESCAPE,Follow._ESCAPE_in_ident_sp_label5008); if (state.failed) return retval;

				}
				break;
			case 63:
				DebugEnterAlt(63);
				// MySQL51Parser.g3:539:4: tok= EVENT
				{
				DebugLocation(539, 7);
				tok=(IToken)Match(input,EVENT,Follow._EVENT_in_ident_sp_label5016); if (state.failed) return retval;

				}
				break;
			case 64:
				DebugEnterAlt(64);
				// MySQL51Parser.g3:540:4: tok= EVENTS
				{
				DebugLocation(540, 7);
				tok=(IToken)Match(input,EVENTS,Follow._EVENTS_in_ident_sp_label5024); if (state.failed) return retval;

				}
				break;
			case 65:
				DebugEnterAlt(65);
				// MySQL51Parser.g3:541:4: tok= EVERY
				{
				DebugLocation(541, 7);
				tok=(IToken)Match(input,EVERY,Follow._EVERY_in_ident_sp_label5032); if (state.failed) return retval;

				}
				break;
			case 66:
				DebugEnterAlt(66);
				// MySQL51Parser.g3:542:4: tok= EXPANSION
				{
				DebugLocation(542, 7);
				tok=(IToken)Match(input,EXPANSION,Follow._EXPANSION_in_ident_sp_label5040); if (state.failed) return retval;

				}
				break;
			case 67:
				DebugEnterAlt(67);
				// MySQL51Parser.g3:543:4: tok= EXTENDED
				{
				DebugLocation(543, 7);
				tok=(IToken)Match(input,EXTENDED,Follow._EXTENDED_in_ident_sp_label5048); if (state.failed) return retval;

				}
				break;
			case 68:
				DebugEnterAlt(68);
				// MySQL51Parser.g3:544:4: tok= EXTENT_SIZE
				{
				DebugLocation(544, 7);
				tok=(IToken)Match(input,EXTENT_SIZE,Follow._EXTENT_SIZE_in_ident_sp_label5056); if (state.failed) return retval;

				}
				break;
			case 69:
				DebugEnterAlt(69);
				// MySQL51Parser.g3:545:4: tok= FAULTS
				{
				DebugLocation(545, 7);
				tok=(IToken)Match(input,FAULTS,Follow._FAULTS_in_ident_sp_label5064); if (state.failed) return retval;

				}
				break;
			case 70:
				DebugEnterAlt(70);
				// MySQL51Parser.g3:546:4: tok= FAST
				{
				DebugLocation(546, 7);
				tok=(IToken)Match(input,FAST,Follow._FAST_in_ident_sp_label5072); if (state.failed) return retval;

				}
				break;
			case 71:
				DebugEnterAlt(71);
				// MySQL51Parser.g3:547:4: tok= FOUND
				{
				DebugLocation(547, 7);
				tok=(IToken)Match(input,FOUND,Follow._FOUND_in_ident_sp_label5080); if (state.failed) return retval;

				}
				break;
			case 72:
				DebugEnterAlt(72);
				// MySQL51Parser.g3:548:4: tok= ENABLE
				{
				DebugLocation(548, 7);
				tok=(IToken)Match(input,ENABLE,Follow._ENABLE_in_ident_sp_label5088); if (state.failed) return retval;

				}
				break;
			case 73:
				DebugEnterAlt(73);
				// MySQL51Parser.g3:549:4: tok= FULL
				{
				DebugLocation(549, 7);
				tok=(IToken)Match(input,FULL,Follow._FULL_in_ident_sp_label5096); if (state.failed) return retval;

				}
				break;
			case 74:
				DebugEnterAlt(74);
				// MySQL51Parser.g3:550:4: tok= FILE
				{
				DebugLocation(550, 7);
				tok=(IToken)Match(input,FILE,Follow._FILE_in_ident_sp_label5104); if (state.failed) return retval;

				}
				break;
			case 75:
				DebugEnterAlt(75);
				// MySQL51Parser.g3:551:4: tok= FIRST
				{
				DebugLocation(551, 7);
				tok=(IToken)Match(input,FIRST,Follow._FIRST_in_ident_sp_label5112); if (state.failed) return retval;

				}
				break;
			case 76:
				DebugEnterAlt(76);
				// MySQL51Parser.g3:552:4: tok= FIXED
				{
				DebugLocation(552, 7);
				tok=(IToken)Match(input,FIXED,Follow._FIXED_in_ident_sp_label5120); if (state.failed) return retval;

				}
				break;
			case 77:
				DebugEnterAlt(77);
				// MySQL51Parser.g3:553:4: tok= FRAC_SECOND
				{
				DebugLocation(553, 7);
				tok=(IToken)Match(input,FRAC_SECOND,Follow._FRAC_SECOND_in_ident_sp_label5128); if (state.failed) return retval;

				}
				break;
			case 78:
				DebugEnterAlt(78);
				// MySQL51Parser.g3:554:4: tok= GEOMETRY
				{
				DebugLocation(554, 7);
				tok=(IToken)Match(input,GEOMETRY,Follow._GEOMETRY_in_ident_sp_label5136); if (state.failed) return retval;

				}
				break;
			case 79:
				DebugEnterAlt(79);
				// MySQL51Parser.g3:555:4: tok= GEOMETRYCOLLECTION
				{
				DebugLocation(555, 7);
				tok=(IToken)Match(input,GEOMETRYCOLLECTION,Follow._GEOMETRYCOLLECTION_in_ident_sp_label5144); if (state.failed) return retval;

				}
				break;
			case 80:
				DebugEnterAlt(80);
				// MySQL51Parser.g3:556:4: tok= GET_FORMAT
				{
				DebugLocation(556, 7);
				tok=(IToken)Match(input,GET_FORMAT,Follow._GET_FORMAT_in_ident_sp_label5152); if (state.failed) return retval;

				}
				break;
			case 81:
				DebugEnterAlt(81);
				// MySQL51Parser.g3:557:4: tok= GRANTS
				{
				DebugLocation(557, 7);
				tok=(IToken)Match(input,GRANTS,Follow._GRANTS_in_ident_sp_label5160); if (state.failed) return retval;

				}
				break;
			case 82:
				DebugEnterAlt(82);
				// MySQL51Parser.g3:558:4: tok= GLOBAL
				{
				DebugLocation(558, 7);
				tok=(IToken)Match(input,GLOBAL,Follow._GLOBAL_in_ident_sp_label5168); if (state.failed) return retval;

				}
				break;
			case 83:
				DebugEnterAlt(83);
				// MySQL51Parser.g3:559:4: tok= HASH
				{
				DebugLocation(559, 7);
				tok=(IToken)Match(input,HASH,Follow._HASH_in_ident_sp_label5176); if (state.failed) return retval;

				}
				break;
			case 84:
				DebugEnterAlt(84);
				// MySQL51Parser.g3:560:4: tok= HOSTS
				{
				DebugLocation(560, 7);
				tok=(IToken)Match(input,HOSTS,Follow._HOSTS_in_ident_sp_label5184); if (state.failed) return retval;

				}
				break;
			case 85:
				DebugEnterAlt(85);
				// MySQL51Parser.g3:561:4: tok= HOUR
				{
				DebugLocation(561, 7);
				tok=(IToken)Match(input,HOUR,Follow._HOUR_in_ident_sp_label5192); if (state.failed) return retval;

				}
				break;
			case 86:
				DebugEnterAlt(86);
				// MySQL51Parser.g3:562:4: tok= IDENTIFIED
				{
				DebugLocation(562, 7);
				tok=(IToken)Match(input,IDENTIFIED,Follow._IDENTIFIED_in_ident_sp_label5200); if (state.failed) return retval;

				}
				break;
			case 87:
				DebugEnterAlt(87);
				// MySQL51Parser.g3:563:4: tok= INVOKER
				{
				DebugLocation(563, 7);
				tok=(IToken)Match(input,INVOKER,Follow._INVOKER_in_ident_sp_label5208); if (state.failed) return retval;

				}
				break;
			case 88:
				DebugEnterAlt(88);
				// MySQL51Parser.g3:564:4: tok= IMPORT
				{
				DebugLocation(564, 7);
				tok=(IToken)Match(input,IMPORT,Follow._IMPORT_in_ident_sp_label5216); if (state.failed) return retval;

				}
				break;
			case 89:
				DebugEnterAlt(89);
				// MySQL51Parser.g3:565:4: tok= INDEXES
				{
				DebugLocation(565, 7);
				tok=(IToken)Match(input,INDEXES,Follow._INDEXES_in_ident_sp_label5224); if (state.failed) return retval;

				}
				break;
			case 90:
				DebugEnterAlt(90);
				// MySQL51Parser.g3:566:4: tok= INITIAL_SIZE
				{
				DebugLocation(566, 7);
				tok=(IToken)Match(input,INITIAL_SIZE,Follow._INITIAL_SIZE_in_ident_sp_label5232); if (state.failed) return retval;

				}
				break;
			case 91:
				DebugEnterAlt(91);
				// MySQL51Parser.g3:567:4: tok= IO
				{
				DebugLocation(567, 7);
				tok=(IToken)Match(input,IO,Follow._IO_in_ident_sp_label5240); if (state.failed) return retval;

				}
				break;
			case 92:
				DebugEnterAlt(92);
				// MySQL51Parser.g3:568:4: tok= IPC
				{
				DebugLocation(568, 7);
				tok=(IToken)Match(input,IPC,Follow._IPC_in_ident_sp_label5248); if (state.failed) return retval;

				}
				break;
			case 93:
				DebugEnterAlt(93);
				// MySQL51Parser.g3:569:4: tok= ISOLATION
				{
				DebugLocation(569, 7);
				tok=(IToken)Match(input,ISOLATION,Follow._ISOLATION_in_ident_sp_label5256); if (state.failed) return retval;

				}
				break;
			case 94:
				DebugEnterAlt(94);
				// MySQL51Parser.g3:570:4: tok= ISSUER
				{
				DebugLocation(570, 7);
				tok=(IToken)Match(input,ISSUER,Follow._ISSUER_in_ident_sp_label5264); if (state.failed) return retval;

				}
				break;
			case 95:
				DebugEnterAlt(95);
				// MySQL51Parser.g3:571:4: tok= INNOBASE
				{
				DebugLocation(571, 7);
				tok=(IToken)Match(input,INNOBASE,Follow._INNOBASE_in_ident_sp_label5272); if (state.failed) return retval;

				}
				break;
			case 96:
				DebugEnterAlt(96);
				// MySQL51Parser.g3:572:4: tok= INSERT_METHOD
				{
				DebugLocation(572, 7);
				tok=(IToken)Match(input,INSERT_METHOD,Follow._INSERT_METHOD_in_ident_sp_label5280); if (state.failed) return retval;

				}
				break;
			case 97:
				DebugEnterAlt(97);
				// MySQL51Parser.g3:573:4: tok= KEY_BLOCK_SIZE
				{
				DebugLocation(573, 7);
				tok=(IToken)Match(input,KEY_BLOCK_SIZE,Follow._KEY_BLOCK_SIZE_in_ident_sp_label5288); if (state.failed) return retval;

				}
				break;
			case 98:
				DebugEnterAlt(98);
				// MySQL51Parser.g3:574:4: tok= LAST
				{
				DebugLocation(574, 7);
				tok=(IToken)Match(input,LAST,Follow._LAST_in_ident_sp_label5296); if (state.failed) return retval;

				}
				break;
			case 99:
				DebugEnterAlt(99);
				// MySQL51Parser.g3:575:4: tok= LEAVES
				{
				DebugLocation(575, 7);
				tok=(IToken)Match(input,LEAVES,Follow._LEAVES_in_ident_sp_label5304); if (state.failed) return retval;

				}
				break;
			case 100:
				DebugEnterAlt(100);
				// MySQL51Parser.g3:576:4: tok= LESS
				{
				DebugLocation(576, 7);
				tok=(IToken)Match(input,LESS,Follow._LESS_in_ident_sp_label5312); if (state.failed) return retval;

				}
				break;
			case 101:
				DebugEnterAlt(101);
				// MySQL51Parser.g3:577:4: tok= LEVEL
				{
				DebugLocation(577, 7);
				tok=(IToken)Match(input,LEVEL,Follow._LEVEL_in_ident_sp_label5320); if (state.failed) return retval;

				}
				break;
			case 102:
				DebugEnterAlt(102);
				// MySQL51Parser.g3:578:4: tok= LINESTRING
				{
				DebugLocation(578, 7);
				tok=(IToken)Match(input,LINESTRING,Follow._LINESTRING_in_ident_sp_label5328); if (state.failed) return retval;

				}
				break;
			case 103:
				DebugEnterAlt(103);
				// MySQL51Parser.g3:579:4: tok= LIST
				{
				DebugLocation(579, 7);
				tok=(IToken)Match(input,LIST,Follow._LIST_in_ident_sp_label5336); if (state.failed) return retval;

				}
				break;
			case 104:
				DebugEnterAlt(104);
				// MySQL51Parser.g3:580:4: tok= LOCAL
				{
				DebugLocation(580, 7);
				tok=(IToken)Match(input,LOCAL,Follow._LOCAL_in_ident_sp_label5344); if (state.failed) return retval;

				}
				break;
			case 105:
				DebugEnterAlt(105);
				// MySQL51Parser.g3:581:4: tok= LOCKS
				{
				DebugLocation(581, 7);
				tok=(IToken)Match(input,LOCKS,Follow._LOCKS_in_ident_sp_label5352); if (state.failed) return retval;

				}
				break;
			case 106:
				DebugEnterAlt(106);
				// MySQL51Parser.g3:582:4: tok= LOGFILE
				{
				DebugLocation(582, 7);
				tok=(IToken)Match(input,LOGFILE,Follow._LOGFILE_in_ident_sp_label5360); if (state.failed) return retval;

				}
				break;
			case 107:
				DebugEnterAlt(107);
				// MySQL51Parser.g3:583:4: tok= LOGS
				{
				DebugLocation(583, 7);
				tok=(IToken)Match(input,LOGS,Follow._LOGS_in_ident_sp_label5368); if (state.failed) return retval;

				}
				break;
			case 108:
				DebugEnterAlt(108);
				// MySQL51Parser.g3:584:4: tok= MAX_ROWS
				{
				DebugLocation(584, 7);
				tok=(IToken)Match(input,MAX_ROWS,Follow._MAX_ROWS_in_ident_sp_label5376); if (state.failed) return retval;

				}
				break;
			case 109:
				DebugEnterAlt(109);
				// MySQL51Parser.g3:585:4: tok= MASTER
				{
				DebugLocation(585, 7);
				tok=(IToken)Match(input,MASTER,Follow._MASTER_in_ident_sp_label5384); if (state.failed) return retval;

				}
				break;
			case 110:
				DebugEnterAlt(110);
				// MySQL51Parser.g3:586:4: tok= MASTER_HOST
				{
				DebugLocation(586, 7);
				tok=(IToken)Match(input,MASTER_HOST,Follow._MASTER_HOST_in_ident_sp_label5392); if (state.failed) return retval;

				}
				break;
			case 111:
				DebugEnterAlt(111);
				// MySQL51Parser.g3:587:4: tok= MASTER_PORT
				{
				DebugLocation(587, 7);
				tok=(IToken)Match(input,MASTER_PORT,Follow._MASTER_PORT_in_ident_sp_label5400); if (state.failed) return retval;

				}
				break;
			case 112:
				DebugEnterAlt(112);
				// MySQL51Parser.g3:588:4: tok= MASTER_LOG_FILE
				{
				DebugLocation(588, 7);
				tok=(IToken)Match(input,MASTER_LOG_FILE,Follow._MASTER_LOG_FILE_in_ident_sp_label5408); if (state.failed) return retval;

				}
				break;
			case 113:
				DebugEnterAlt(113);
				// MySQL51Parser.g3:589:4: tok= MASTER_LOG_POS
				{
				DebugLocation(589, 7);
				tok=(IToken)Match(input,MASTER_LOG_POS,Follow._MASTER_LOG_POS_in_ident_sp_label5416); if (state.failed) return retval;

				}
				break;
			case 114:
				DebugEnterAlt(114);
				// MySQL51Parser.g3:590:4: tok= MASTER_USER
				{
				DebugLocation(590, 7);
				tok=(IToken)Match(input,MASTER_USER,Follow._MASTER_USER_in_ident_sp_label5424); if (state.failed) return retval;

				}
				break;
			case 115:
				DebugEnterAlt(115);
				// MySQL51Parser.g3:591:4: tok= MASTER_PASSWORD
				{
				DebugLocation(591, 7);
				tok=(IToken)Match(input,MASTER_PASSWORD,Follow._MASTER_PASSWORD_in_ident_sp_label5432); if (state.failed) return retval;

				}
				break;
			case 116:
				DebugEnterAlt(116);
				// MySQL51Parser.g3:592:4: tok= MASTER_SERVER_ID
				{
				DebugLocation(592, 7);
				tok=(IToken)Match(input,MASTER_SERVER_ID,Follow._MASTER_SERVER_ID_in_ident_sp_label5440); if (state.failed) return retval;

				}
				break;
			case 117:
				DebugEnterAlt(117);
				// MySQL51Parser.g3:593:4: tok= MASTER_CONNECT_RETRY
				{
				DebugLocation(593, 7);
				tok=(IToken)Match(input,MASTER_CONNECT_RETRY,Follow._MASTER_CONNECT_RETRY_in_ident_sp_label5448); if (state.failed) return retval;

				}
				break;
			case 118:
				DebugEnterAlt(118);
				// MySQL51Parser.g3:594:4: tok= MASTER_SSL
				{
				DebugLocation(594, 7);
				tok=(IToken)Match(input,MASTER_SSL,Follow._MASTER_SSL_in_ident_sp_label5456); if (state.failed) return retval;

				}
				break;
			case 119:
				DebugEnterAlt(119);
				// MySQL51Parser.g3:595:4: tok= MASTER_SSL_CA
				{
				DebugLocation(595, 7);
				tok=(IToken)Match(input,MASTER_SSL_CA,Follow._MASTER_SSL_CA_in_ident_sp_label5464); if (state.failed) return retval;

				}
				break;
			case 120:
				DebugEnterAlt(120);
				// MySQL51Parser.g3:596:4: tok= MASTER_SSL_CAPATH
				{
				DebugLocation(596, 7);
				tok=(IToken)Match(input,MASTER_SSL_CAPATH,Follow._MASTER_SSL_CAPATH_in_ident_sp_label5472); if (state.failed) return retval;

				}
				break;
			case 121:
				DebugEnterAlt(121);
				// MySQL51Parser.g3:597:4: tok= MASTER_SSL_CERT
				{
				DebugLocation(597, 7);
				tok=(IToken)Match(input,MASTER_SSL_CERT,Follow._MASTER_SSL_CERT_in_ident_sp_label5480); if (state.failed) return retval;

				}
				break;
			case 122:
				DebugEnterAlt(122);
				// MySQL51Parser.g3:598:4: tok= MASTER_SSL_CIPHER
				{
				DebugLocation(598, 7);
				tok=(IToken)Match(input,MASTER_SSL_CIPHER,Follow._MASTER_SSL_CIPHER_in_ident_sp_label5488); if (state.failed) return retval;

				}
				break;
			case 123:
				DebugEnterAlt(123);
				// MySQL51Parser.g3:599:4: tok= MASTER_SSL_KEY
				{
				DebugLocation(599, 7);
				tok=(IToken)Match(input,MASTER_SSL_KEY,Follow._MASTER_SSL_KEY_in_ident_sp_label5496); if (state.failed) return retval;

				}
				break;
			case 124:
				DebugEnterAlt(124);
				// MySQL51Parser.g3:600:4: tok= MAX_CONNECTIONS_PER_HOUR
				{
				DebugLocation(600, 7);
				tok=(IToken)Match(input,MAX_CONNECTIONS_PER_HOUR,Follow._MAX_CONNECTIONS_PER_HOUR_in_ident_sp_label5504); if (state.failed) return retval;

				}
				break;
			case 125:
				DebugEnterAlt(125);
				// MySQL51Parser.g3:601:4: tok= MAX_QUERIES_PER_HOUR
				{
				DebugLocation(601, 7);
				tok=(IToken)Match(input,MAX_QUERIES_PER_HOUR,Follow._MAX_QUERIES_PER_HOUR_in_ident_sp_label5512); if (state.failed) return retval;

				}
				break;
			case 126:
				DebugEnterAlt(126);
				// MySQL51Parser.g3:602:4: tok= MAX_SIZE
				{
				DebugLocation(602, 7);
				tok=(IToken)Match(input,MAX_SIZE,Follow._MAX_SIZE_in_ident_sp_label5520); if (state.failed) return retval;

				}
				break;
			case 127:
				DebugEnterAlt(127);
				// MySQL51Parser.g3:603:4: tok= MAX_UPDATES_PER_HOUR
				{
				DebugLocation(603, 7);
				tok=(IToken)Match(input,MAX_UPDATES_PER_HOUR,Follow._MAX_UPDATES_PER_HOUR_in_ident_sp_label5528); if (state.failed) return retval;

				}
				break;
			case 128:
				DebugEnterAlt(128);
				// MySQL51Parser.g3:604:4: tok= MAX_USER_CONNECTIONS
				{
				DebugLocation(604, 7);
				tok=(IToken)Match(input,MAX_USER_CONNECTIONS,Follow._MAX_USER_CONNECTIONS_in_ident_sp_label5536); if (state.failed) return retval;

				}
				break;
			case 129:
				DebugEnterAlt(129);
				// MySQL51Parser.g3:605:4: tok= MAX_VALUE
				{
				DebugLocation(605, 7);
				tok=(IToken)Match(input,MAX_VALUE,Follow._MAX_VALUE_in_ident_sp_label5544); if (state.failed) return retval;

				}
				break;
			case 130:
				DebugEnterAlt(130);
				// MySQL51Parser.g3:606:4: tok= MEDIUM
				{
				DebugLocation(606, 7);
				tok=(IToken)Match(input,MEDIUM,Follow._MEDIUM_in_ident_sp_label5552); if (state.failed) return retval;

				}
				break;
			case 131:
				DebugEnterAlt(131);
				// MySQL51Parser.g3:607:4: tok= MEMORY
				{
				DebugLocation(607, 7);
				tok=(IToken)Match(input,MEMORY,Follow._MEMORY_in_ident_sp_label5560); if (state.failed) return retval;

				}
				break;
			case 132:
				DebugEnterAlt(132);
				// MySQL51Parser.g3:608:4: tok= MERGE
				{
				DebugLocation(608, 7);
				tok=(IToken)Match(input,MERGE,Follow._MERGE_in_ident_sp_label5568); if (state.failed) return retval;

				}
				break;
			case 133:
				DebugEnterAlt(133);
				// MySQL51Parser.g3:609:4: tok= MICROSECOND
				{
				DebugLocation(609, 7);
				tok=(IToken)Match(input,MICROSECOND,Follow._MICROSECOND_in_ident_sp_label5576); if (state.failed) return retval;

				}
				break;
			case 134:
				DebugEnterAlt(134);
				// MySQL51Parser.g3:610:4: tok= MIGRATE
				{
				DebugLocation(610, 7);
				tok=(IToken)Match(input,MIGRATE,Follow._MIGRATE_in_ident_sp_label5584); if (state.failed) return retval;

				}
				break;
			case 135:
				DebugEnterAlt(135);
				// MySQL51Parser.g3:611:4: tok= MINUTE
				{
				DebugLocation(611, 7);
				tok=(IToken)Match(input,MINUTE,Follow._MINUTE_in_ident_sp_label5592); if (state.failed) return retval;

				}
				break;
			case 136:
				DebugEnterAlt(136);
				// MySQL51Parser.g3:612:4: tok= MIN_ROWS
				{
				DebugLocation(612, 7);
				tok=(IToken)Match(input,MIN_ROWS,Follow._MIN_ROWS_in_ident_sp_label5600); if (state.failed) return retval;

				}
				break;
			case 137:
				DebugEnterAlt(137);
				// MySQL51Parser.g3:613:4: tok= MODIFY
				{
				DebugLocation(613, 7);
				tok=(IToken)Match(input,MODIFY,Follow._MODIFY_in_ident_sp_label5608); if (state.failed) return retval;

				}
				break;
			case 138:
				DebugEnterAlt(138);
				// MySQL51Parser.g3:614:4: tok= MODE
				{
				DebugLocation(614, 7);
				tok=(IToken)Match(input,MODE,Follow._MODE_in_ident_sp_label5616); if (state.failed) return retval;

				}
				break;
			case 139:
				DebugEnterAlt(139);
				// MySQL51Parser.g3:615:4: tok= MONTH
				{
				DebugLocation(615, 7);
				tok=(IToken)Match(input,MONTH,Follow._MONTH_in_ident_sp_label5624); if (state.failed) return retval;

				}
				break;
			case 140:
				DebugEnterAlt(140);
				// MySQL51Parser.g3:616:4: tok= MULTILINESTRING
				{
				DebugLocation(616, 7);
				tok=(IToken)Match(input,MULTILINESTRING,Follow._MULTILINESTRING_in_ident_sp_label5632); if (state.failed) return retval;

				}
				break;
			case 141:
				DebugEnterAlt(141);
				// MySQL51Parser.g3:617:4: tok= MULTIPOINT
				{
				DebugLocation(617, 7);
				tok=(IToken)Match(input,MULTIPOINT,Follow._MULTIPOINT_in_ident_sp_label5640); if (state.failed) return retval;

				}
				break;
			case 142:
				DebugEnterAlt(142);
				// MySQL51Parser.g3:618:4: tok= MULTIPOLYGON
				{
				DebugLocation(618, 7);
				tok=(IToken)Match(input,MULTIPOLYGON,Follow._MULTIPOLYGON_in_ident_sp_label5648); if (state.failed) return retval;

				}
				break;
			case 143:
				DebugEnterAlt(143);
				// MySQL51Parser.g3:619:4: tok= MUTEX
				{
				DebugLocation(619, 7);
				tok=(IToken)Match(input,MUTEX,Follow._MUTEX_in_ident_sp_label5656); if (state.failed) return retval;

				}
				break;
			case 144:
				DebugEnterAlt(144);
				// MySQL51Parser.g3:620:4: tok= NAME
				{
				DebugLocation(620, 7);
				tok=(IToken)Match(input,NAME,Follow._NAME_in_ident_sp_label5664); if (state.failed) return retval;

				}
				break;
			case 145:
				DebugEnterAlt(145);
				// MySQL51Parser.g3:621:4: tok= NAMES
				{
				DebugLocation(621, 7);
				tok=(IToken)Match(input,NAMES,Follow._NAMES_in_ident_sp_label5672); if (state.failed) return retval;

				}
				break;
			case 146:
				DebugEnterAlt(146);
				// MySQL51Parser.g3:622:4: tok= NATIONAL
				{
				DebugLocation(622, 7);
				tok=(IToken)Match(input,NATIONAL,Follow._NATIONAL_in_ident_sp_label5680); if (state.failed) return retval;

				}
				break;
			case 147:
				DebugEnterAlt(147);
				// MySQL51Parser.g3:623:4: tok= NCHAR
				{
				DebugLocation(623, 7);
				tok=(IToken)Match(input,NCHAR,Follow._NCHAR_in_ident_sp_label5688); if (state.failed) return retval;

				}
				break;
			case 148:
				DebugEnterAlt(148);
				// MySQL51Parser.g3:624:4: tok= NDBCLUSTER
				{
				DebugLocation(624, 7);
				tok=(IToken)Match(input,NDBCLUSTER,Follow._NDBCLUSTER_in_ident_sp_label5696); if (state.failed) return retval;

				}
				break;
			case 149:
				DebugEnterAlt(149);
				// MySQL51Parser.g3:625:4: tok= NEXT
				{
				DebugLocation(625, 7);
				tok=(IToken)Match(input,NEXT,Follow._NEXT_in_ident_sp_label5704); if (state.failed) return retval;

				}
				break;
			case 150:
				DebugEnterAlt(150);
				// MySQL51Parser.g3:626:4: tok= NEW
				{
				DebugLocation(626, 7);
				tok=(IToken)Match(input,NEW,Follow._NEW_in_ident_sp_label5712); if (state.failed) return retval;

				}
				break;
			case 151:
				DebugEnterAlt(151);
				// MySQL51Parser.g3:627:4: tok= NO_WAIT
				{
				DebugLocation(627, 7);
				tok=(IToken)Match(input,NO_WAIT,Follow._NO_WAIT_in_ident_sp_label5720); if (state.failed) return retval;

				}
				break;
			case 152:
				DebugEnterAlt(152);
				// MySQL51Parser.g3:628:4: tok= NODEGROUP
				{
				DebugLocation(628, 7);
				tok=(IToken)Match(input,NODEGROUP,Follow._NODEGROUP_in_ident_sp_label5728); if (state.failed) return retval;

				}
				break;
			case 153:
				DebugEnterAlt(153);
				// MySQL51Parser.g3:629:4: tok= NONE
				{
				DebugLocation(629, 7);
				tok=(IToken)Match(input,NONE,Follow._NONE_in_ident_sp_label5736); if (state.failed) return retval;

				}
				break;
			case 154:
				DebugEnterAlt(154);
				// MySQL51Parser.g3:630:4: tok= NVARCHAR
				{
				DebugLocation(630, 7);
				tok=(IToken)Match(input,NVARCHAR,Follow._NVARCHAR_in_ident_sp_label5744); if (state.failed) return retval;

				}
				break;
			case 155:
				DebugEnterAlt(155);
				// MySQL51Parser.g3:631:4: tok= OFFSET
				{
				DebugLocation(631, 7);
				tok=(IToken)Match(input,OFFSET,Follow._OFFSET_in_ident_sp_label5752); if (state.failed) return retval;

				}
				break;
			case 156:
				DebugEnterAlt(156);
				// MySQL51Parser.g3:632:4: tok= OLD_PASSWORD
				{
				DebugLocation(632, 7);
				tok=(IToken)Match(input,OLD_PASSWORD,Follow._OLD_PASSWORD_in_ident_sp_label5760); if (state.failed) return retval;

				}
				break;
			case 157:
				DebugEnterAlt(157);
				// MySQL51Parser.g3:633:4: tok= ONE_SHOT
				{
				DebugLocation(633, 7);
				tok=(IToken)Match(input,ONE_SHOT,Follow._ONE_SHOT_in_ident_sp_label5768); if (state.failed) return retval;

				}
				break;
			case 158:
				DebugEnterAlt(158);
				// MySQL51Parser.g3:634:4: tok= ONE
				{
				DebugLocation(634, 7);
				tok=(IToken)Match(input,ONE,Follow._ONE_in_ident_sp_label5776); if (state.failed) return retval;

				}
				break;
			case 159:
				DebugEnterAlt(159);
				// MySQL51Parser.g3:635:4: tok= PACK_KEYS
				{
				DebugLocation(635, 7);
				tok=(IToken)Match(input,PACK_KEYS,Follow._PACK_KEYS_in_ident_sp_label5784); if (state.failed) return retval;

				}
				break;
			case 160:
				DebugEnterAlt(160);
				// MySQL51Parser.g3:636:4: tok= PAGE
				{
				DebugLocation(636, 7);
				tok=(IToken)Match(input,PAGE,Follow._PAGE_in_ident_sp_label5792); if (state.failed) return retval;

				}
				break;
			case 161:
				DebugEnterAlt(161);
				// MySQL51Parser.g3:637:4: tok= PARTIAL
				{
				DebugLocation(637, 7);
				tok=(IToken)Match(input,PARTIAL,Follow._PARTIAL_in_ident_sp_label5800); if (state.failed) return retval;

				}
				break;
			case 162:
				DebugEnterAlt(162);
				// MySQL51Parser.g3:638:4: tok= PARTITIONING
				{
				DebugLocation(638, 7);
				tok=(IToken)Match(input,PARTITIONING,Follow._PARTITIONING_in_ident_sp_label5808); if (state.failed) return retval;

				}
				break;
			case 163:
				DebugEnterAlt(163);
				// MySQL51Parser.g3:639:4: tok= PARTITIONS
				{
				DebugLocation(639, 7);
				tok=(IToken)Match(input,PARTITIONS,Follow._PARTITIONS_in_ident_sp_label5816); if (state.failed) return retval;

				}
				break;
			case 164:
				DebugEnterAlt(164);
				// MySQL51Parser.g3:640:4: tok= PASSWORD
				{
				DebugLocation(640, 7);
				tok=(IToken)Match(input,PASSWORD,Follow._PASSWORD_in_ident_sp_label5824); if (state.failed) return retval;

				}
				break;
			case 165:
				DebugEnterAlt(165);
				// MySQL51Parser.g3:641:4: tok= PHASE
				{
				DebugLocation(641, 7);
				tok=(IToken)Match(input,PHASE,Follow._PHASE_in_ident_sp_label5832); if (state.failed) return retval;

				}
				break;
			case 166:
				DebugEnterAlt(166);
				// MySQL51Parser.g3:642:4: tok= PLUGIN
				{
				DebugLocation(642, 7);
				tok=(IToken)Match(input,PLUGIN,Follow._PLUGIN_in_ident_sp_label5840); if (state.failed) return retval;

				}
				break;
			case 167:
				DebugEnterAlt(167);
				// MySQL51Parser.g3:643:4: tok= PLUGINS
				{
				DebugLocation(643, 7);
				tok=(IToken)Match(input,PLUGINS,Follow._PLUGINS_in_ident_sp_label5848); if (state.failed) return retval;

				}
				break;
			case 168:
				DebugEnterAlt(168);
				// MySQL51Parser.g3:644:4: tok= POINT
				{
				DebugLocation(644, 7);
				tok=(IToken)Match(input,POINT,Follow._POINT_in_ident_sp_label5856); if (state.failed) return retval;

				}
				break;
			case 169:
				DebugEnterAlt(169);
				// MySQL51Parser.g3:645:4: tok= POLYGON
				{
				DebugLocation(645, 7);
				tok=(IToken)Match(input,POLYGON,Follow._POLYGON_in_ident_sp_label5864); if (state.failed) return retval;

				}
				break;
			case 170:
				DebugEnterAlt(170);
				// MySQL51Parser.g3:646:4: tok= PRESERVE
				{
				DebugLocation(646, 7);
				tok=(IToken)Match(input,PRESERVE,Follow._PRESERVE_in_ident_sp_label5872); if (state.failed) return retval;

				}
				break;
			case 171:
				DebugEnterAlt(171);
				// MySQL51Parser.g3:647:4: tok= PREV
				{
				DebugLocation(647, 7);
				tok=(IToken)Match(input,PREV,Follow._PREV_in_ident_sp_label5880); if (state.failed) return retval;

				}
				break;
			case 172:
				DebugEnterAlt(172);
				// MySQL51Parser.g3:648:4: tok= PRIVILEGES
				{
				DebugLocation(648, 7);
				tok=(IToken)Match(input,PRIVILEGES,Follow._PRIVILEGES_in_ident_sp_label5888); if (state.failed) return retval;

				}
				break;
			case 173:
				DebugEnterAlt(173);
				// MySQL51Parser.g3:649:4: tok= PROCESS
				{
				DebugLocation(649, 7);
				tok=(IToken)Match(input,PROCESS,Follow._PROCESS_in_ident_sp_label5896); if (state.failed) return retval;

				}
				break;
			case 174:
				DebugEnterAlt(174);
				// MySQL51Parser.g3:650:4: tok= PROCESSLIST
				{
				DebugLocation(650, 7);
				tok=(IToken)Match(input,PROCESSLIST,Follow._PROCESSLIST_in_ident_sp_label5904); if (state.failed) return retval;

				}
				break;
			case 175:
				DebugEnterAlt(175);
				// MySQL51Parser.g3:651:4: tok= PROFILE
				{
				DebugLocation(651, 7);
				tok=(IToken)Match(input,PROFILE,Follow._PROFILE_in_ident_sp_label5912); if (state.failed) return retval;

				}
				break;
			case 176:
				DebugEnterAlt(176);
				// MySQL51Parser.g3:652:4: tok= PROFILES
				{
				DebugLocation(652, 7);
				tok=(IToken)Match(input,PROFILES,Follow._PROFILES_in_ident_sp_label5920); if (state.failed) return retval;

				}
				break;
			case 177:
				DebugEnterAlt(177);
				// MySQL51Parser.g3:653:4: tok= QUARTER
				{
				DebugLocation(653, 7);
				tok=(IToken)Match(input,QUARTER,Follow._QUARTER_in_ident_sp_label5928); if (state.failed) return retval;

				}
				break;
			case 178:
				DebugEnterAlt(178);
				// MySQL51Parser.g3:654:4: tok= QUERY
				{
				DebugLocation(654, 7);
				tok=(IToken)Match(input,QUERY,Follow._QUERY_in_ident_sp_label5936); if (state.failed) return retval;

				}
				break;
			case 179:
				DebugEnterAlt(179);
				// MySQL51Parser.g3:655:4: tok= QUICK
				{
				DebugLocation(655, 7);
				tok=(IToken)Match(input,QUICK,Follow._QUICK_in_ident_sp_label5944); if (state.failed) return retval;

				}
				break;
			case 180:
				DebugEnterAlt(180);
				// MySQL51Parser.g3:656:4: tok= REBUILD
				{
				DebugLocation(656, 7);
				tok=(IToken)Match(input,REBUILD,Follow._REBUILD_in_ident_sp_label5952); if (state.failed) return retval;

				}
				break;
			case 181:
				DebugEnterAlt(181);
				// MySQL51Parser.g3:657:4: tok= RECOVER
				{
				DebugLocation(657, 7);
				tok=(IToken)Match(input,RECOVER,Follow._RECOVER_in_ident_sp_label5960); if (state.failed) return retval;

				}
				break;
			case 182:
				DebugEnterAlt(182);
				// MySQL51Parser.g3:658:4: tok= REDO_BUFFER_SIZE
				{
				DebugLocation(658, 7);
				tok=(IToken)Match(input,REDO_BUFFER_SIZE,Follow._REDO_BUFFER_SIZE_in_ident_sp_label5968); if (state.failed) return retval;

				}
				break;
			case 183:
				DebugEnterAlt(183);
				// MySQL51Parser.g3:659:4: tok= REDOFILE
				{
				DebugLocation(659, 7);
				tok=(IToken)Match(input,REDOFILE,Follow._REDOFILE_in_ident_sp_label5976); if (state.failed) return retval;

				}
				break;
			case 184:
				DebugEnterAlt(184);
				// MySQL51Parser.g3:660:4: tok= REDUNDANT
				{
				DebugLocation(660, 7);
				tok=(IToken)Match(input,REDUNDANT,Follow._REDUNDANT_in_ident_sp_label5984); if (state.failed) return retval;

				}
				break;
			case 185:
				DebugEnterAlt(185);
				// MySQL51Parser.g3:661:4: tok= RELAY_LOG_FILE
				{
				DebugLocation(661, 7);
				tok=(IToken)Match(input,RELAY_LOG_FILE,Follow._RELAY_LOG_FILE_in_ident_sp_label5992); if (state.failed) return retval;

				}
				break;
			case 186:
				DebugEnterAlt(186);
				// MySQL51Parser.g3:662:4: tok= RELAY_LOG_POS
				{
				DebugLocation(662, 7);
				tok=(IToken)Match(input,RELAY_LOG_POS,Follow._RELAY_LOG_POS_in_ident_sp_label6000); if (state.failed) return retval;

				}
				break;
			case 187:
				DebugEnterAlt(187);
				// MySQL51Parser.g3:663:4: tok= RELAY_THREAD
				{
				DebugLocation(663, 7);
				tok=(IToken)Match(input,RELAY_THREAD,Follow._RELAY_THREAD_in_ident_sp_label6008); if (state.failed) return retval;

				}
				break;
			case 188:
				DebugEnterAlt(188);
				// MySQL51Parser.g3:664:4: tok= RELOAD
				{
				DebugLocation(664, 7);
				tok=(IToken)Match(input,RELOAD,Follow._RELOAD_in_ident_sp_label6016); if (state.failed) return retval;

				}
				break;
			case 189:
				DebugEnterAlt(189);
				// MySQL51Parser.g3:665:4: tok= REORGANIZE
				{
				DebugLocation(665, 7);
				tok=(IToken)Match(input,REORGANIZE,Follow._REORGANIZE_in_ident_sp_label6024); if (state.failed) return retval;

				}
				break;
			case 190:
				DebugEnterAlt(190);
				// MySQL51Parser.g3:666:4: tok= REPEATABLE
				{
				DebugLocation(666, 7);
				tok=(IToken)Match(input,REPEATABLE,Follow._REPEATABLE_in_ident_sp_label6032); if (state.failed) return retval;

				}
				break;
			case 191:
				DebugEnterAlt(191);
				// MySQL51Parser.g3:667:4: tok= REPLICATION
				{
				DebugLocation(667, 7);
				tok=(IToken)Match(input,REPLICATION,Follow._REPLICATION_in_ident_sp_label6040); if (state.failed) return retval;

				}
				break;
			case 192:
				DebugEnterAlt(192);
				// MySQL51Parser.g3:668:4: tok= RESOURCES
				{
				DebugLocation(668, 7);
				tok=(IToken)Match(input,RESOURCES,Follow._RESOURCES_in_ident_sp_label6048); if (state.failed) return retval;

				}
				break;
			case 193:
				DebugEnterAlt(193);
				// MySQL51Parser.g3:669:4: tok= RESUME
				{
				DebugLocation(669, 7);
				tok=(IToken)Match(input,RESUME,Follow._RESUME_in_ident_sp_label6056); if (state.failed) return retval;

				}
				break;
			case 194:
				DebugEnterAlt(194);
				// MySQL51Parser.g3:670:4: tok= RETURNS
				{
				DebugLocation(670, 7);
				tok=(IToken)Match(input,RETURNS,Follow._RETURNS_in_ident_sp_label6064); if (state.failed) return retval;

				}
				break;
			case 195:
				DebugEnterAlt(195);
				// MySQL51Parser.g3:671:4: tok= ROLLUP
				{
				DebugLocation(671, 7);
				tok=(IToken)Match(input,ROLLUP,Follow._ROLLUP_in_ident_sp_label6072); if (state.failed) return retval;

				}
				break;
			case 196:
				DebugEnterAlt(196);
				// MySQL51Parser.g3:672:4: tok= ROUTINE
				{
				DebugLocation(672, 7);
				tok=(IToken)Match(input,ROUTINE,Follow._ROUTINE_in_ident_sp_label6080); if (state.failed) return retval;

				}
				break;
			case 197:
				DebugEnterAlt(197);
				// MySQL51Parser.g3:673:4: tok= ROWS
				{
				DebugLocation(673, 7);
				tok=(IToken)Match(input,ROWS,Follow._ROWS_in_ident_sp_label6088); if (state.failed) return retval;

				}
				break;
			case 198:
				DebugEnterAlt(198);
				// MySQL51Parser.g3:674:4: tok= ROW_FORMAT
				{
				DebugLocation(674, 7);
				tok=(IToken)Match(input,ROW_FORMAT,Follow._ROW_FORMAT_in_ident_sp_label6096); if (state.failed) return retval;

				}
				break;
			case 199:
				DebugEnterAlt(199);
				// MySQL51Parser.g3:675:4: tok= ROW
				{
				DebugLocation(675, 7);
				tok=(IToken)Match(input,ROW,Follow._ROW_in_ident_sp_label6104); if (state.failed) return retval;

				}
				break;
			case 200:
				DebugEnterAlt(200);
				// MySQL51Parser.g3:676:4: tok= RTREE
				{
				DebugLocation(676, 7);
				tok=(IToken)Match(input,RTREE,Follow._RTREE_in_ident_sp_label6112); if (state.failed) return retval;

				}
				break;
			case 201:
				DebugEnterAlt(201);
				// MySQL51Parser.g3:677:4: tok= SCHEDULE
				{
				DebugLocation(677, 7);
				tok=(IToken)Match(input,SCHEDULE,Follow._SCHEDULE_in_ident_sp_label6120); if (state.failed) return retval;

				}
				break;
			case 202:
				DebugEnterAlt(202);
				// MySQL51Parser.g3:678:4: tok= SECOND
				{
				DebugLocation(678, 7);
				tok=(IToken)Match(input,SECOND,Follow._SECOND_in_ident_sp_label6128); if (state.failed) return retval;

				}
				break;
			case 203:
				DebugEnterAlt(203);
				// MySQL51Parser.g3:679:4: tok= SERIAL
				{
				DebugLocation(679, 7);
				tok=(IToken)Match(input,SERIAL,Follow._SERIAL_in_ident_sp_label6136); if (state.failed) return retval;

				}
				break;
			case 204:
				DebugEnterAlt(204);
				// MySQL51Parser.g3:680:4: tok= SERIALIZABLE
				{
				DebugLocation(680, 7);
				tok=(IToken)Match(input,SERIALIZABLE,Follow._SERIALIZABLE_in_ident_sp_label6144); if (state.failed) return retval;

				}
				break;
			case 205:
				DebugEnterAlt(205);
				// MySQL51Parser.g3:681:4: tok= SESSION
				{
				DebugLocation(681, 7);
				tok=(IToken)Match(input,SESSION,Follow._SESSION_in_ident_sp_label6152); if (state.failed) return retval;

				}
				break;
			case 206:
				DebugEnterAlt(206);
				// MySQL51Parser.g3:682:4: tok= SIMPLE
				{
				DebugLocation(682, 7);
				tok=(IToken)Match(input,SIMPLE,Follow._SIMPLE_in_ident_sp_label6160); if (state.failed) return retval;

				}
				break;
			case 207:
				DebugEnterAlt(207);
				// MySQL51Parser.g3:683:4: tok= SHARE
				{
				DebugLocation(683, 7);
				tok=(IToken)Match(input,SHARE,Follow._SHARE_in_ident_sp_label6168); if (state.failed) return retval;

				}
				break;
			case 208:
				DebugEnterAlt(208);
				// MySQL51Parser.g3:684:4: tok= SHUTDOWN
				{
				DebugLocation(684, 7);
				tok=(IToken)Match(input,SHUTDOWN,Follow._SHUTDOWN_in_ident_sp_label6176); if (state.failed) return retval;

				}
				break;
			case 209:
				DebugEnterAlt(209);
				// MySQL51Parser.g3:685:4: tok= SNAPSHOT
				{
				DebugLocation(685, 7);
				tok=(IToken)Match(input,SNAPSHOT,Follow._SNAPSHOT_in_ident_sp_label6184); if (state.failed) return retval;

				}
				break;
			case 210:
				DebugEnterAlt(210);
				// MySQL51Parser.g3:686:4: tok= SOUNDS
				{
				DebugLocation(686, 7);
				tok=(IToken)Match(input,SOUNDS,Follow._SOUNDS_in_ident_sp_label6192); if (state.failed) return retval;

				}
				break;
			case 211:
				DebugEnterAlt(211);
				// MySQL51Parser.g3:687:4: tok= SOURCE
				{
				DebugLocation(687, 7);
				tok=(IToken)Match(input,SOURCE,Follow._SOURCE_in_ident_sp_label6200); if (state.failed) return retval;

				}
				break;
			case 212:
				DebugEnterAlt(212);
				// MySQL51Parser.g3:688:4: tok= SQL_CACHE
				{
				DebugLocation(688, 7);
				tok=(IToken)Match(input,SQL_CACHE,Follow._SQL_CACHE_in_ident_sp_label6208); if (state.failed) return retval;

				}
				break;
			case 213:
				DebugEnterAlt(213);
				// MySQL51Parser.g3:689:4: tok= SQL_BUFFER_RESULT
				{
				DebugLocation(689, 7);
				tok=(IToken)Match(input,SQL_BUFFER_RESULT,Follow._SQL_BUFFER_RESULT_in_ident_sp_label6216); if (state.failed) return retval;

				}
				break;
			case 214:
				DebugEnterAlt(214);
				// MySQL51Parser.g3:690:4: tok= SQL_NO_CACHE
				{
				DebugLocation(690, 7);
				tok=(IToken)Match(input,SQL_NO_CACHE,Follow._SQL_NO_CACHE_in_ident_sp_label6224); if (state.failed) return retval;

				}
				break;
			case 215:
				DebugEnterAlt(215);
				// MySQL51Parser.g3:691:4: tok= SQL_THREAD
				{
				DebugLocation(691, 7);
				tok=(IToken)Match(input,SQL_THREAD,Follow._SQL_THREAD_in_ident_sp_label6232); if (state.failed) return retval;

				}
				break;
			case 216:
				DebugEnterAlt(216);
				// MySQL51Parser.g3:692:4: tok= STARTS
				{
				DebugLocation(692, 7);
				tok=(IToken)Match(input,STARTS,Follow._STARTS_in_ident_sp_label6240); if (state.failed) return retval;

				}
				break;
			case 217:
				DebugEnterAlt(217);
				// MySQL51Parser.g3:693:4: tok= STATUS
				{
				DebugLocation(693, 7);
				tok=(IToken)Match(input,STATUS,Follow._STATUS_in_ident_sp_label6248); if (state.failed) return retval;

				}
				break;
			case 218:
				DebugEnterAlt(218);
				// MySQL51Parser.g3:694:4: tok= STORAGE
				{
				DebugLocation(694, 7);
				tok=(IToken)Match(input,STORAGE,Follow._STORAGE_in_ident_sp_label6256); if (state.failed) return retval;

				}
				break;
			case 219:
				DebugEnterAlt(219);
				// MySQL51Parser.g3:695:4: tok= STRING_KEYWORD
				{
				DebugLocation(695, 7);
				tok=(IToken)Match(input,STRING_KEYWORD,Follow._STRING_KEYWORD_in_ident_sp_label6264); if (state.failed) return retval;

				}
				break;
			case 220:
				DebugEnterAlt(220);
				// MySQL51Parser.g3:696:4: tok= SUBDATE
				{
				DebugLocation(696, 7);
				tok=(IToken)Match(input,SUBDATE,Follow._SUBDATE_in_ident_sp_label6272); if (state.failed) return retval;

				}
				break;
			case 221:
				DebugEnterAlt(221);
				// MySQL51Parser.g3:697:4: tok= SUBJECT
				{
				DebugLocation(697, 7);
				tok=(IToken)Match(input,SUBJECT,Follow._SUBJECT_in_ident_sp_label6280); if (state.failed) return retval;

				}
				break;
			case 222:
				DebugEnterAlt(222);
				// MySQL51Parser.g3:698:4: tok= SUBPARTITION
				{
				DebugLocation(698, 7);
				tok=(IToken)Match(input,SUBPARTITION,Follow._SUBPARTITION_in_ident_sp_label6288); if (state.failed) return retval;

				}
				break;
			case 223:
				DebugEnterAlt(223);
				// MySQL51Parser.g3:699:4: tok= SUBPARTITIONS
				{
				DebugLocation(699, 7);
				tok=(IToken)Match(input,SUBPARTITIONS,Follow._SUBPARTITIONS_in_ident_sp_label6296); if (state.failed) return retval;

				}
				break;
			case 224:
				DebugEnterAlt(224);
				// MySQL51Parser.g3:700:4: tok= SUPER
				{
				DebugLocation(700, 7);
				tok=(IToken)Match(input,SUPER,Follow._SUPER_in_ident_sp_label6304); if (state.failed) return retval;

				}
				break;
			case 225:
				DebugEnterAlt(225);
				// MySQL51Parser.g3:701:4: tok= SUSPEND
				{
				DebugLocation(701, 7);
				tok=(IToken)Match(input,SUSPEND,Follow._SUSPEND_in_ident_sp_label6312); if (state.failed) return retval;

				}
				break;
			case 226:
				DebugEnterAlt(226);
				// MySQL51Parser.g3:702:4: tok= SWAPS
				{
				DebugLocation(702, 7);
				tok=(IToken)Match(input,SWAPS,Follow._SWAPS_in_ident_sp_label6320); if (state.failed) return retval;

				}
				break;
			case 227:
				DebugEnterAlt(227);
				// MySQL51Parser.g3:703:4: tok= SWITCHES
				{
				DebugLocation(703, 7);
				tok=(IToken)Match(input,SWITCHES,Follow._SWITCHES_in_ident_sp_label6328); if (state.failed) return retval;

				}
				break;
			case 228:
				DebugEnterAlt(228);
				// MySQL51Parser.g3:704:4: tok= TABLES
				{
				DebugLocation(704, 7);
				tok=(IToken)Match(input,TABLES,Follow._TABLES_in_ident_sp_label6336); if (state.failed) return retval;

				}
				break;
			case 229:
				DebugEnterAlt(229);
				// MySQL51Parser.g3:705:4: tok= TABLESPACE
				{
				DebugLocation(705, 7);
				tok=(IToken)Match(input,TABLESPACE,Follow._TABLESPACE_in_ident_sp_label6344); if (state.failed) return retval;

				}
				break;
			case 230:
				DebugEnterAlt(230);
				// MySQL51Parser.g3:706:4: tok= TEMPORARY
				{
				DebugLocation(706, 7);
				tok=(IToken)Match(input,TEMPORARY,Follow._TEMPORARY_in_ident_sp_label6352); if (state.failed) return retval;

				}
				break;
			case 231:
				DebugEnterAlt(231);
				// MySQL51Parser.g3:707:4: tok= TEMPTABLE
				{
				DebugLocation(707, 7);
				tok=(IToken)Match(input,TEMPTABLE,Follow._TEMPTABLE_in_ident_sp_label6360); if (state.failed) return retval;

				}
				break;
			case 232:
				DebugEnterAlt(232);
				// MySQL51Parser.g3:708:4: tok= TEXT
				{
				DebugLocation(708, 7);
				tok=(IToken)Match(input,TEXT,Follow._TEXT_in_ident_sp_label6368); if (state.failed) return retval;

				}
				break;
			case 233:
				DebugEnterAlt(233);
				// MySQL51Parser.g3:709:4: tok= THAN
				{
				DebugLocation(709, 7);
				tok=(IToken)Match(input,THAN,Follow._THAN_in_ident_sp_label6376); if (state.failed) return retval;

				}
				break;
			case 234:
				DebugEnterAlt(234);
				// MySQL51Parser.g3:710:4: tok= TRANSACTION
				{
				DebugLocation(710, 7);
				tok=(IToken)Match(input,TRANSACTION,Follow._TRANSACTION_in_ident_sp_label6384); if (state.failed) return retval;

				}
				break;
			case 235:
				DebugEnterAlt(235);
				// MySQL51Parser.g3:711:4: tok= TRANSACTIONAL
				{
				DebugLocation(711, 7);
				tok=(IToken)Match(input,TRANSACTIONAL,Follow._TRANSACTIONAL_in_ident_sp_label6392); if (state.failed) return retval;

				}
				break;
			case 236:
				DebugEnterAlt(236);
				// MySQL51Parser.g3:712:4: tok= TRIGGERS
				{
				DebugLocation(712, 7);
				tok=(IToken)Match(input,TRIGGERS,Follow._TRIGGERS_in_ident_sp_label6400); if (state.failed) return retval;

				}
				break;
			case 237:
				DebugEnterAlt(237);
				// MySQL51Parser.g3:713:4: tok= TIMESTAMP
				{
				DebugLocation(713, 7);
				tok=(IToken)Match(input,TIMESTAMP,Follow._TIMESTAMP_in_ident_sp_label6408); if (state.failed) return retval;

				}
				break;
			case 238:
				DebugEnterAlt(238);
				// MySQL51Parser.g3:714:4: tok= TIMESTAMP_ADD
				{
				DebugLocation(714, 7);
				tok=(IToken)Match(input,TIMESTAMP_ADD,Follow._TIMESTAMP_ADD_in_ident_sp_label6416); if (state.failed) return retval;

				}
				break;
			case 239:
				DebugEnterAlt(239);
				// MySQL51Parser.g3:715:4: tok= TIMESTAMP_DIFF
				{
				DebugLocation(715, 7);
				tok=(IToken)Match(input,TIMESTAMP_DIFF,Follow._TIMESTAMP_DIFF_in_ident_sp_label6424); if (state.failed) return retval;

				}
				break;
			case 240:
				DebugEnterAlt(240);
				// MySQL51Parser.g3:716:4: tok= TIME
				{
				DebugLocation(716, 7);
				tok=(IToken)Match(input,TIME,Follow._TIME_in_ident_sp_label6432); if (state.failed) return retval;

				}
				break;
			case 241:
				DebugEnterAlt(241);
				// MySQL51Parser.g3:717:4: tok= TYPES
				{
				DebugLocation(717, 7);
				tok=(IToken)Match(input,TYPES,Follow._TYPES_in_ident_sp_label6440); if (state.failed) return retval;

				}
				break;
			case 242:
				DebugEnterAlt(242);
				// MySQL51Parser.g3:718:4: tok= TYPE
				{
				DebugLocation(718, 7);
				tok=(IToken)Match(input,TYPE,Follow._TYPE_in_ident_sp_label6448); if (state.failed) return retval;

				}
				break;
			case 243:
				DebugEnterAlt(243);
				// MySQL51Parser.g3:719:4: tok= UDF_RETURNS
				{
				DebugLocation(719, 7);
				tok=(IToken)Match(input,UDF_RETURNS,Follow._UDF_RETURNS_in_ident_sp_label6456); if (state.failed) return retval;

				}
				break;
			case 244:
				DebugEnterAlt(244);
				// MySQL51Parser.g3:720:4: tok= FUNCTION
				{
				DebugLocation(720, 7);
				tok=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_ident_sp_label6464); if (state.failed) return retval;

				}
				break;
			case 245:
				DebugEnterAlt(245);
				// MySQL51Parser.g3:721:4: tok= UNCOMMITTED
				{
				DebugLocation(721, 7);
				tok=(IToken)Match(input,UNCOMMITTED,Follow._UNCOMMITTED_in_ident_sp_label6472); if (state.failed) return retval;

				}
				break;
			case 246:
				DebugEnterAlt(246);
				// MySQL51Parser.g3:722:4: tok= UNDEFINED
				{
				DebugLocation(722, 7);
				tok=(IToken)Match(input,UNDEFINED,Follow._UNDEFINED_in_ident_sp_label6480); if (state.failed) return retval;

				}
				break;
			case 247:
				DebugEnterAlt(247);
				// MySQL51Parser.g3:723:4: tok= UNDO_BUFFER_SIZE
				{
				DebugLocation(723, 7);
				tok=(IToken)Match(input,UNDO_BUFFER_SIZE,Follow._UNDO_BUFFER_SIZE_in_ident_sp_label6488); if (state.failed) return retval;

				}
				break;
			case 248:
				DebugEnterAlt(248);
				// MySQL51Parser.g3:724:4: tok= UNDOFILE
				{
				DebugLocation(724, 7);
				tok=(IToken)Match(input,UNDOFILE,Follow._UNDOFILE_in_ident_sp_label6496); if (state.failed) return retval;

				}
				break;
			case 249:
				DebugEnterAlt(249);
				// MySQL51Parser.g3:725:4: tok= UNKNOWN
				{
				DebugLocation(725, 7);
				tok=(IToken)Match(input,UNKNOWN,Follow._UNKNOWN_in_ident_sp_label6504); if (state.failed) return retval;

				}
				break;
			case 250:
				DebugEnterAlt(250);
				// MySQL51Parser.g3:726:4: tok= UNTIL
				{
				DebugLocation(726, 7);
				tok=(IToken)Match(input,UNTIL,Follow._UNTIL_in_ident_sp_label6512); if (state.failed) return retval;

				}
				break;
			case 251:
				DebugEnterAlt(251);
				// MySQL51Parser.g3:727:4: tok= USER
				{
				DebugLocation(727, 7);
				tok=(IToken)Match(input,USER,Follow._USER_in_ident_sp_label6520); if (state.failed) return retval;

				}
				break;
			case 252:
				DebugEnterAlt(252);
				// MySQL51Parser.g3:728:4: tok= USE_FRM
				{
				DebugLocation(728, 7);
				tok=(IToken)Match(input,USE_FRM,Follow._USE_FRM_in_ident_sp_label6528); if (state.failed) return retval;

				}
				break;
			case 253:
				DebugEnterAlt(253);
				// MySQL51Parser.g3:729:4: tok= VARIABLES
				{
				DebugLocation(729, 7);
				tok=(IToken)Match(input,VARIABLES,Follow._VARIABLES_in_ident_sp_label6536); if (state.failed) return retval;

				}
				break;
			case 254:
				DebugEnterAlt(254);
				// MySQL51Parser.g3:730:4: tok= VIEW
				{
				DebugLocation(730, 7);
				tok=(IToken)Match(input,VIEW,Follow._VIEW_in_ident_sp_label6544); if (state.failed) return retval;

				}
				break;
			case 255:
				DebugEnterAlt(255);
				// MySQL51Parser.g3:731:4: tok= VALUE
				{
				DebugLocation(731, 7);
				tok=(IToken)Match(input,VALUE,Follow._VALUE_in_ident_sp_label6552); if (state.failed) return retval;

				}
				break;
			case 256:
				DebugEnterAlt(256);
				// MySQL51Parser.g3:732:4: tok= WARNINGS
				{
				DebugLocation(732, 7);
				tok=(IToken)Match(input,WARNINGS,Follow._WARNINGS_in_ident_sp_label6560); if (state.failed) return retval;

				}
				break;
			case 257:
				DebugEnterAlt(257);
				// MySQL51Parser.g3:733:4: tok= WAIT
				{
				DebugLocation(733, 7);
				tok=(IToken)Match(input,WAIT,Follow._WAIT_in_ident_sp_label6568); if (state.failed) return retval;

				}
				break;
			case 258:
				DebugEnterAlt(258);
				// MySQL51Parser.g3:734:4: tok= WEEK
				{
				DebugLocation(734, 7);
				tok=(IToken)Match(input,WEEK,Follow._WEEK_in_ident_sp_label6576); if (state.failed) return retval;

				}
				break;
			case 259:
				DebugEnterAlt(259);
				// MySQL51Parser.g3:735:4: tok= WORK
				{
				DebugLocation(735, 7);
				tok=(IToken)Match(input,WORK,Follow._WORK_in_ident_sp_label6584); if (state.failed) return retval;

				}
				break;
			case 260:
				DebugEnterAlt(260);
				// MySQL51Parser.g3:736:4: tok= X509
				{
				DebugLocation(736, 7);
				tok=(IToken)Match(input,X509,Follow._X509_in_ident_sp_label6592); if (state.failed) return retval;

				}
				break;
			case 261:
				DebugEnterAlt(261);
				// MySQL51Parser.g3:737:4: tok= YEAR
				{
				DebugLocation(737, 7);
				tok=(IToken)Match(input,YEAR,Follow._YEAR_in_ident_sp_label6600); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(739, 2);
			if (state.backtracking == 0)
			{

						adaptor.AddChild(root_0, (object)adaptor.Create(ID, tok));
					
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_sp_label", 39);
			LeaveRule("ident_sp_label", 39);
			LeaveRule_ident_sp_label();
		}
		DebugLocation(742, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_sp_label"); }
		return retval;

	}
	// $ANTLR end "ident_sp_label"

	private sealed partial class index_hint_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public index_hint_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_index_hint_list();
	partial void LeaveRule_index_hint_list();

	// $ANTLR start "index_hint_list"
	// MySQL51Parser.g3:744:1: index_hint_list : index_hint ( COMMA index_hint )* -> ^( INDEX_HINTS ( index_hint )+ ) ;
	[GrammarRule("index_hint_list")]
	private MySQL51Parser.index_hint_list_return index_hint_list()
	{
		EnterRule_index_hint_list();
		EnterRule("index_hint_list", 40);
		TraceIn("index_hint_list", 40);
		MySQL51Parser.index_hint_list_return retval = new MySQL51Parser.index_hint_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA312 = default(IToken);
		MySQL51Parser.index_hint_return index_hint311 = default(MySQL51Parser.index_hint_return);
		MySQL51Parser.index_hint_return index_hint313 = default(MySQL51Parser.index_hint_return);

		object COMMA312_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_index_hint=new RewriteRuleSubtreeStream(adaptor,"rule index_hint");
		try { DebugEnterRule(GrammarFileName, "index_hint_list");
		DebugLocation(744, 1);
		try
		{
			// MySQL51Parser.g3:745:2: ( index_hint ( COMMA index_hint )* -> ^( INDEX_HINTS ( index_hint )+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:745:4: index_hint ( COMMA index_hint )*
			{
			DebugLocation(745, 4);
			PushFollow(Follow._index_hint_in_index_hint_list6619);
			index_hint311=index_hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_index_hint.Add(index_hint311.Tree);
			DebugLocation(745, 15);
			// MySQL51Parser.g3:745:15: ( COMMA index_hint )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==COMMA))
				{
					int LA120_2 = input.LA(2);

					if ((LA120_2==FORCE||LA120_2==IGNORE||LA120_2==USE))
					{
						alt120 = 1;
					}


				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:745:16: COMMA index_hint
					{
					DebugLocation(745, 16);
					COMMA312=(IToken)Match(input,COMMA,Follow._COMMA_in_index_hint_list6622); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA312);

					DebugLocation(745, 22);
					PushFollow(Follow._index_hint_in_index_hint_list6624);
					index_hint313=index_hint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_index_hint.Add(index_hint313.Tree);

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }



			{
			// AST REWRITE
			// elements: index_hint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 745:36: -> ^( INDEX_HINTS ( index_hint )+ )
			{
				DebugLocation(745, 39);
				// MySQL51Parser.g3:745:39: ^( INDEX_HINTS ( index_hint )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(745, 41);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEX_HINTS, "INDEX_HINTS"), root_1);

				DebugLocation(745, 53);
				if (!(stream_index_hint.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_index_hint.HasNext )
				{
					DebugLocation(745, 53);
					adaptor.AddChild(root_1, stream_index_hint.NextTree());

				}
				stream_index_hint.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("index_hint_list", 40);
			LeaveRule("index_hint_list", 40);
			LeaveRule_index_hint_list();
		}
		DebugLocation(746, 1);
		} finally { DebugExitRule(GrammarFileName, "index_hint_list"); }
		return retval;

	}
	// $ANTLR end "index_hint_list"

	protected sealed partial class index_hint_scope
	{
		public bool namesOptional;

		public index_hint_scope(MySQL51Parser grammar) { OnCreated(grammar); }
		partial void OnCreated(MySQL51Parser grammar);
	}
	partial void index_hint_scopeInit( index_hint_scope scope );
	partial void index_hint_scopeAfter( index_hint_scope scope );
	protected readonly Stack<index_hint_scope> index_hint_stack = new Stack<index_hint_scope>();

	private sealed partial class index_hint_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public index_hint_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_index_hint();
	partial void LeaveRule_index_hint();

	// $ANTLR start "index_hint"
	// MySQL51Parser.g3:748:1: index_hint : ( USE index_hint_rest -> ^( USE index_hint_rest ) | IGNORE index_hint_rest -> ^( IGNORE index_hint_rest ) | FORCE index_hint_rest -> ^( FORCE index_hint_rest ) );
	[GrammarRule("index_hint")]
	private MySQL51Parser.index_hint_return index_hint()
	{
		EnterRule_index_hint();
		EnterRule("index_hint", 41);
		TraceIn("index_hint", 41);
		index_hint_stack.Push(new index_hint_scope(this));index_hint_scopeInit(index_hint_stack.Peek());
		MySQL51Parser.index_hint_return retval = new MySQL51Parser.index_hint_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken USE314 = default(IToken);
		IToken IGNORE316 = default(IToken);
		IToken FORCE318 = default(IToken);
		MySQL51Parser.index_hint_rest_return index_hint_rest315 = default(MySQL51Parser.index_hint_rest_return);
		MySQL51Parser.index_hint_rest_return index_hint_rest317 = default(MySQL51Parser.index_hint_rest_return);
		MySQL51Parser.index_hint_rest_return index_hint_rest319 = default(MySQL51Parser.index_hint_rest_return);

		object USE314_tree = default(object);
		object IGNORE316_tree = default(object);
		object FORCE318_tree = default(object);
		RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
		RewriteRuleITokenStream stream_IGNORE=new RewriteRuleITokenStream(adaptor,"token IGNORE");
		RewriteRuleITokenStream stream_FORCE=new RewriteRuleITokenStream(adaptor,"token FORCE");
		RewriteRuleSubtreeStream stream_index_hint_rest=new RewriteRuleSubtreeStream(adaptor,"rule index_hint_rest");

		index_hint_stack.Peek().namesOptional =  false;

		try { DebugEnterRule(GrammarFileName, "index_hint");
		DebugLocation(748, 1);
		try
		{
			// MySQL51Parser.g3:755:2: ( USE index_hint_rest -> ^( USE index_hint_rest ) | IGNORE index_hint_rest -> ^( IGNORE index_hint_rest ) | FORCE index_hint_rest -> ^( FORCE index_hint_rest ) )
			int alt121=3;
			try { DebugEnterDecision(121, false);
			switch (input.LA(1))
			{
			case USE:
				{
				alt121 = 1;
				}
				break;
			case IGNORE:
				{
				alt121 = 2;
				}
				break;
			case FORCE:
				{
				alt121 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:755:4: USE index_hint_rest
				{
				DebugLocation(755, 4);
				USE314=(IToken)Match(input,USE,Follow._USE_in_index_hint6656); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_USE.Add(USE314);

				DebugLocation(755, 8);
				if (state.backtracking == 0)
				{
					index_hint_stack.Peek().namesOptional =  true;
				}
				DebugLocation(755, 45);
				PushFollow(Follow._index_hint_rest_in_index_hint6660);
				index_hint_rest315=index_hint_rest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_index_hint_rest.Add(index_hint_rest315.Tree);


				{
				// AST REWRITE
				// elements: USE, index_hint_rest
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 755:62: -> ^( USE index_hint_rest )
				{
					DebugLocation(755, 65);
					// MySQL51Parser.g3:755:65: ^( USE index_hint_rest )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(755, 67);
					root_1 = (object)adaptor.BecomeRoot(stream_USE.NextNode(), root_1);

					DebugLocation(755, 71);
					adaptor.AddChild(root_1, stream_index_hint_rest.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:756:4: IGNORE index_hint_rest
				{
				DebugLocation(756, 4);
				IGNORE316=(IToken)Match(input,IGNORE,Follow._IGNORE_in_index_hint6674); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IGNORE.Add(IGNORE316);

				DebugLocation(756, 11);
				if (state.backtracking == 0)
				{
					index_hint_stack.Peek().namesOptional =  false;
				}
				DebugLocation(756, 49);
				PushFollow(Follow._index_hint_rest_in_index_hint6678);
				index_hint_rest317=index_hint_rest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_index_hint_rest.Add(index_hint_rest317.Tree);


				{
				// AST REWRITE
				// elements: IGNORE, index_hint_rest
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 756:65: -> ^( IGNORE index_hint_rest )
				{
					DebugLocation(756, 68);
					// MySQL51Parser.g3:756:68: ^( IGNORE index_hint_rest )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(756, 70);
					root_1 = (object)adaptor.BecomeRoot(stream_IGNORE.NextNode(), root_1);

					DebugLocation(756, 77);
					adaptor.AddChild(root_1, stream_index_hint_rest.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:757:4: FORCE index_hint_rest
				{
				DebugLocation(757, 4);
				FORCE318=(IToken)Match(input,FORCE,Follow._FORCE_in_index_hint6691); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FORCE.Add(FORCE318);

				DebugLocation(757, 10);
				if (state.backtracking == 0)
				{
					index_hint_stack.Peek().namesOptional =  false;
				}
				DebugLocation(757, 48);
				PushFollow(Follow._index_hint_rest_in_index_hint6695);
				index_hint_rest319=index_hint_rest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_index_hint_rest.Add(index_hint_rest319.Tree);


				{
				// AST REWRITE
				// elements: FORCE, index_hint_rest
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 757:64: -> ^( FORCE index_hint_rest )
				{
					DebugLocation(757, 67);
					// MySQL51Parser.g3:757:67: ^( FORCE index_hint_rest )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(757, 69);
					root_1 = (object)adaptor.BecomeRoot(stream_FORCE.NextNode(), root_1);

					DebugLocation(757, 75);
					adaptor.AddChild(root_1, stream_index_hint_rest.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("index_hint", 41);
			LeaveRule("index_hint", 41);
			LeaveRule_index_hint();
			index_hint_scopeAfter(index_hint_stack.Peek());index_hint_stack.Pop();
		}
		DebugLocation(758, 1);
		} finally { DebugExitRule(GrammarFileName, "index_hint"); }
		return retval;

	}
	// $ANTLR end "index_hint"

	private sealed partial class index_hint_rest_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public index_hint_rest_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_index_hint_rest();
	partial void LeaveRule_index_hint_rest();

	// $ANTLR start "index_hint_rest"
	// MySQL51Parser.g3:760:1: index_hint_rest : (name= INDEX |name= KEY ) ( FOR (usage= JOIN |usage= ORDER BY |usage= GROUP BY ) )? LPAREN ({...}? => (names+= ident ( COMMA names+= ident )* )? |names+= ident ( COMMA names+= ident )* ) RPAREN -> $name ^( LPAREN ( $names)? ) ( $usage)? ;
	[GrammarRule("index_hint_rest")]
	private MySQL51Parser.index_hint_rest_return index_hint_rest()
	{
		EnterRule_index_hint_rest();
		EnterRule("index_hint_rest", 42);
		TraceIn("index_hint_rest", 42);
		MySQL51Parser.index_hint_rest_return retval = new MySQL51Parser.index_hint_rest_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken name = default(IToken);
		IToken usage = default(IToken);
		IToken FOR320 = default(IToken);
		IToken BY321 = default(IToken);
		IToken BY322 = default(IToken);
		IToken LPAREN323 = default(IToken);
		IToken COMMA324 = default(IToken);
		IToken COMMA325 = default(IToken);
		IToken RPAREN326 = default(IToken);
		List<object> list_names = null;
		MySQL51Parser.ident_return names = default(MySQL51Parser.ident_return);
		object name_tree = default(object);
		object usage_tree = default(object);
		object FOR320_tree = default(object);
		object BY321_tree = default(object);
		object BY322_tree = default(object);
		object LPAREN323_tree = default(object);
		object COMMA324_tree = default(object);
		object COMMA325_tree = default(object);
		object RPAREN326_tree = default(object);
		RewriteRuleITokenStream stream_INDEX=new RewriteRuleITokenStream(adaptor,"token INDEX");
		RewriteRuleITokenStream stream_KEY=new RewriteRuleITokenStream(adaptor,"token KEY");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_JOIN=new RewriteRuleITokenStream(adaptor,"token JOIN");
		RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
		RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
		RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "index_hint_rest");
		DebugLocation(760, 1);
		try
		{
			// MySQL51Parser.g3:761:2: ( (name= INDEX |name= KEY ) ( FOR (usage= JOIN |usage= ORDER BY |usage= GROUP BY ) )? LPAREN ({...}? => (names+= ident ( COMMA names+= ident )* )? |names+= ident ( COMMA names+= ident )* ) RPAREN -> $name ^( LPAREN ( $names)? ) ( $usage)? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:761:4: (name= INDEX |name= KEY ) ( FOR (usage= JOIN |usage= ORDER BY |usage= GROUP BY ) )? LPAREN ({...}? => (names+= ident ( COMMA names+= ident )* )? |names+= ident ( COMMA names+= ident )* ) RPAREN
			{
			DebugLocation(761, 4);
			// MySQL51Parser.g3:761:4: (name= INDEX |name= KEY )
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==INDEX))
			{
				alt122 = 1;
			}
			else if ((LA122_0==KEY))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:761:5: name= INDEX
				{
				DebugLocation(761, 9);
				name=(IToken)Match(input,INDEX,Follow._INDEX_in_index_hint_rest6717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDEX.Add(name);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:761:16: name= KEY
				{
				DebugLocation(761, 20);
				name=(IToken)Match(input,KEY,Follow._KEY_in_index_hint_rest6721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_KEY.Add(name);


				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(761, 26);
			// MySQL51Parser.g3:761:26: ( FOR (usage= JOIN |usage= ORDER BY |usage= GROUP BY ) )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==FOR))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:761:27: FOR (usage= JOIN |usage= ORDER BY |usage= GROUP BY )
				{
				DebugLocation(761, 27);
				FOR320=(IToken)Match(input,FOR,Follow._FOR_in_index_hint_rest6725); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FOR.Add(FOR320);

				DebugLocation(761, 31);
				// MySQL51Parser.g3:761:31: (usage= JOIN |usage= ORDER BY |usage= GROUP BY )
				int alt123=3;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				switch (input.LA(1))
				{
				case JOIN:
					{
					alt123 = 1;
					}
					break;
				case ORDER:
					{
					alt123 = 2;
					}
					break;
				case GROUP:
					{
					alt123 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:761:32: usage= JOIN
					{
					DebugLocation(761, 37);
					usage=(IToken)Match(input,JOIN,Follow._JOIN_in_index_hint_rest6730); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_JOIN.Add(usage);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:761:45: usage= ORDER BY
					{
					DebugLocation(761, 50);
					usage=(IToken)Match(input,ORDER,Follow._ORDER_in_index_hint_rest6736); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ORDER.Add(usage);

					DebugLocation(761, 57);
					BY321=(IToken)Match(input,BY,Follow._BY_in_index_hint_rest6738); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BY.Add(BY321);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:761:62: usage= GROUP BY
					{
					DebugLocation(761, 67);
					usage=(IToken)Match(input,GROUP,Follow._GROUP_in_index_hint_rest6744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_GROUP.Add(usage);

					DebugLocation(761, 74);
					BY322=(IToken)Match(input,BY,Follow._BY_in_index_hint_rest6746); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BY.Add(BY322);


					}
					break;

				}
				} finally { DebugExitSubRule(123); }


				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(762, 3);
			LPAREN323=(IToken)Match(input,LPAREN,Follow._LPAREN_in_index_hint_rest6753); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN323);

			DebugLocation(763, 3);
			// MySQL51Parser.g3:763:3: ({...}? => (names+= ident ( COMMA names+= ident )* )? |names+= ident ( COMMA names+= ident )* )
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			try
			{
				alt128 = dfa128.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:763:5: {...}? => (names+= ident ( COMMA names+= ident )* )?
				{
				DebugLocation(763, 5);
				if (!((index_hint_stack.Peek().namesOptional == true)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "index_hint_rest", "$index_hint::namesOptional == true");
				}
				DebugLocation(763, 45);
				// MySQL51Parser.g3:763:45: (names+= ident ( COMMA names+= ident )* )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==ACTION||(LA126_0>=ADDDATE && LA126_0<=ALGORITHM)||LA126_0==ANY||LA126_0==ASCII||(LA126_0>=AT && LA126_0<=BACKUP)||LA126_0==BEGIN||(LA126_0>=BINLOG && LA126_0<=BIT)||(LA126_0>=BLOCK && LA126_0<=BOOLEAN)||LA126_0==BTREE||(LA126_0>=BYTE && LA126_0<=CACHE)||LA126_0==CASCADED||LA126_0==CHAIN||LA126_0==CHANGED||LA126_0==CHARSET||(LA126_0>=CHECKSUM && LA126_0<=CODE)||LA126_0==COLLATION||LA126_0==COLUMNS||LA126_0==COMMENT||(LA126_0>=COMMIT && LA126_0<=CONCURRENT)||(LA126_0>=CONNECTION && LA126_0<=CONSISTENT)||(LA126_0>=CONTAINS && LA126_0<=CONTEXT)||LA126_0==CONTRIBUTORS||LA126_0==CPU||LA126_0==CUBE||LA126_0==DATA||(LA126_0>=DATAFILE && LA126_0<=DATETIME)||LA126_0==DAY||LA126_0==DEALLOCATE||LA126_0==DEFINER||LA126_0==DELAY_KEY_WRITE||LA126_0==DES_KEY_FILE||(LA126_0>=DIRECTORY && LA126_0<=DISK)||LA126_0==DO||(LA126_0>=DUMPFILE && LA126_0<=DYNAMIC)||LA126_0==ENABLE||(LA126_0>=END && LA126_0<=ENUM)||(LA126_0>=ERRORS && LA126_0<=ESCAPE)||(LA126_0>=EVENT && LA126_0<=EVERY)||LA126_0==EXECUTE||LA126_0==EXPANSION||(LA126_0>=EXTENDED && LA126_0<=EXTENT_SIZE)||(LA126_0>=FAST && LA126_0<=FAULTS)||(LA126_0>=FIELDS && LA126_0<=FIXED)||LA126_0==FLUSH||(LA126_0>=FOUND && LA126_0<=FRAC_SECOND)||LA126_0==FULL||(LA126_0>=FUNCTION && LA126_0<=GLOBAL)||LA126_0==GRANTS||LA126_0==GROUP||(LA126_0>=HANDLER && LA126_0<=HASH)||LA126_0==HELP||(LA126_0>=HOST && LA126_0<=HOUR)||(LA126_0>=ID && LA126_0<=IDENTIFIED)||LA126_0==IMPORT||LA126_0==INDEXES||LA126_0==INITIAL_SIZE||LA126_0==INNOBASE||(LA126_0>=INSERT_METHOD && LA126_0<=INSTALL)||(LA126_0>=INVOKER && LA126_0<=IPC)||(LA126_0>=ISOLATION && LA126_0<=ISSUER)||LA126_0==KEY_BLOCK_SIZE||(LA126_0>=LABEL && LA126_0<=LAST)||LA126_0==LEAVES||LA126_0==LESS||LA126_0==LEVEL||(LA126_0>=LINESTRING && LA126_0<=LIST)||LA126_0==LOCAL||(LA126_0>=LOCKS && LA126_0<=LOGFILE)||LA126_0==LOGS||(LA126_0>=MASTER && LA126_0<=MASTER_SSL_KEY)||LA126_0==MASTER_USER||(LA126_0>=MAX_CONNECTIONS_PER_HOUR && LA126_0<=MEDIUM)||(LA126_0>=MEMORY && LA126_0<=MICROSECOND)||LA126_0==MIGRATE||LA126_0==MINUTE||LA126_0==MIN_ROWS||LA126_0==MODE||LA126_0==MODIFY||LA126_0==MONTH||(LA126_0>=MULTILINESTRING && LA126_0<=MUTEX)||(LA126_0>=NAME && LA126_0<=NATIONAL)||(LA126_0>=NCHAR && LA126_0<=NONE)||LA126_0==NO_WAIT||(LA126_0>=NVARCHAR && LA126_0<=OLD_PASSWORD)||LA126_0==ONE||(LA126_0>=ONE_SHOT && LA126_0<=OPEN)||LA126_0==OPTIONS||(LA126_0>=OWNER && LA126_0<=PLUGINS)||(LA126_0>=POINT && LA126_0<=PORT)||(LA126_0>=PREPARE && LA126_0<=PREV)||LA126_0==PRIVILEGES||(LA126_0>=PROCESS && LA126_0<=PROFILES)||(LA126_0>=QUARTER && LA126_0<=QUICK)||(LA126_0>=REBUILD && LA126_0<=REDUNDANT)||(LA126_0>=RELAY_LOG_FILE && LA126_0<=RELAY_THREAD)||(LA126_0>=RELOAD && LA126_0<=REMOVE)||(LA126_0>=REORGANIZE && LA126_0<=REPAIR)||LA126_0==REPEATABLE||LA126_0==REPLICATION||(LA126_0>=RESET && LA126_0<=RESTORE)||LA126_0==RESUME||LA126_0==RETURNS||(LA126_0>=ROLLBACK && LA126_0<=ROW_FORMAT)||(LA126_0>=RTREE && LA126_0<=SCHEDULE)||LA126_0==SECOND||LA126_0==SECURITY||(LA126_0>=SERIAL && LA126_0<=SESSION)||LA126_0==SHARE||(LA126_0>=SHUTDOWN && LA126_0<=SLAVE)||(LA126_0>=SNAPSHOT && LA126_0<=SOCKET)||(LA126_0>=SONAME && LA126_0<=SOURCE)||(LA126_0>=SQL_BUFFER_RESULT && LA126_0<=SQL_CACHE)||LA126_0==SQL_NO_CACHE||LA126_0==SQL_THREAD||LA126_0==START||(LA126_0>=STARTS && LA126_0<=STATUS)||(LA126_0>=STOP && LA126_0<=STORAGE)||(LA126_0>=STRING_KEYWORD && LA126_0<=SUBPARTITIONS)||(LA126_0>=SUPER && LA126_0<=SWITCHES)||(LA126_0>=TABLES && LA126_0<=TEMPTABLE)||(LA126_0>=TEXT && LA126_0<=THAN)||(LA126_0>=TIME && LA126_0<=TIMESTAMP_DIFF)||(LA126_0>=TRANSACTION && LA126_0<=TRANSACTIONAL)||LA126_0==TRIGGERS||(LA126_0>=TRUNCATE && LA126_0<=UNDEFINED)||(LA126_0>=UNDOFILE && LA126_0<=UNINSTALL)||LA126_0==UNKNOWN||LA126_0==UNTIL||LA126_0==UPGRADE||LA126_0==USER||LA126_0==USE_FRM||LA126_0==VALUE||LA126_0==VARIABLES||(LA126_0>=VIEW && LA126_0<=WEEK)||(LA126_0>=WORK && LA126_0<=WRAPPER)||(LA126_0>=X509 && LA126_0<=XA)||LA126_0==YEAR))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:763:46: names+= ident ( COMMA names+= ident )*
					{
					DebugLocation(763, 51);
					PushFollow(Follow._ident_in_index_hint_rest6765);
					names=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(names.Tree);
					if (list_names==null) list_names=new List<object>();
					list_names.Add(names.Tree);

					DebugLocation(763, 59);
					// MySQL51Parser.g3:763:59: ( COMMA names+= ident )*
					try { DebugEnterSubRule(125);
					while (true)
					{
						int alt125=2;
						try { DebugEnterDecision(125, false);
						int LA125_0 = input.LA(1);

						if ((LA125_0==COMMA))
						{
							alt125 = 1;
						}


						} finally { DebugExitDecision(125); }
						switch ( alt125 )
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:763:60: COMMA names+= ident
							{
							DebugLocation(763, 60);
							COMMA324=(IToken)Match(input,COMMA,Follow._COMMA_in_index_hint_rest6768); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_COMMA.Add(COMMA324);

							DebugLocation(763, 71);
							PushFollow(Follow._ident_in_index_hint_rest6772);
							names=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(names.Tree);
							if (list_names==null) list_names=new List<object>();
							list_names.Add(names.Tree);


							}
							break;

						default:
							goto loop125;
						}
					}

					loop125:
						;

					} finally { DebugExitSubRule(125); }


					}
					break;

				}
				} finally { DebugExitSubRule(126); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:764:5: names+= ident ( COMMA names+= ident )*
				{
				DebugLocation(764, 10);
				PushFollow(Follow._ident_in_index_hint_rest6784);
				names=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(names.Tree);
				if (list_names==null) list_names=new List<object>();
				list_names.Add(names.Tree);

				DebugLocation(764, 18);
				// MySQL51Parser.g3:764:18: ( COMMA names+= ident )*
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=2;
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==COMMA))
					{
						alt127 = 1;
					}


					} finally { DebugExitDecision(127); }
					switch ( alt127 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:764:19: COMMA names+= ident
						{
						DebugLocation(764, 19);
						COMMA325=(IToken)Match(input,COMMA,Follow._COMMA_in_index_hint_rest6787); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA325);

						DebugLocation(764, 30);
						PushFollow(Follow._ident_in_index_hint_rest6791);
						names=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(names.Tree);
						if (list_names==null) list_names=new List<object>();
						list_names.Add(names.Tree);


						}
						break;

					default:
						goto loop127;
					}
				}

				loop127:
					;

				} finally { DebugExitSubRule(127); }


				}
				break;

			}
			} finally { DebugExitSubRule(128); }

			DebugLocation(766, 3);
			RPAREN326=(IToken)Match(input,RPAREN,Follow._RPAREN_in_index_hint_rest6802); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN326);



			{
			// AST REWRITE
			// elements: name, LPAREN, names, usage
			// token labels: name, usage
			// rule labels: retval
			// token list labels: 
			// rule list labels: names
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleITokenStream stream_usage=new RewriteRuleITokenStream(adaptor,"token usage",usage);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_names=new RewriteRuleSubtreeStream(adaptor,"token names",list_names);
			root_0 = (object)adaptor.Nil();
			// 767:3: -> $name ^( LPAREN ( $names)? ) ( $usage)?
			{
				DebugLocation(767, 7);
				adaptor.AddChild(root_0, stream_name.NextNode());
				DebugLocation(767, 12);
				// MySQL51Parser.g3:767:12: ^( LPAREN ( $names)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(767, 14);
				root_1 = (object)adaptor.BecomeRoot(stream_LPAREN.NextNode(), root_1);

				DebugLocation(767, 22);
				// MySQL51Parser.g3:767:22: ( $names)?
				if (stream_names.HasNext)
				{
					DebugLocation(767, 22);
					adaptor.AddChild(root_1, stream_names.NextTree());

				}
				stream_names.Reset();

				adaptor.AddChild(root_0, root_1);
				}
				DebugLocation(767, 31);
				// MySQL51Parser.g3:767:31: ( $usage)?
				if (stream_usage.HasNext)
				{
					DebugLocation(767, 31);
					adaptor.AddChild(root_0, stream_usage.NextNode());

				}
				stream_usage.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("index_hint_rest", 42);
			LeaveRule("index_hint_rest", 42);
			LeaveRule_index_hint_rest();
		}
		DebugLocation(768, 1);
		} finally { DebugExitRule(GrammarFileName, "index_hint_rest"); }
		return retval;

	}
	// $ANTLR end "index_hint_rest"

	private sealed partial class exprList_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public exprList_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_exprList();
	partial void LeaveRule_exprList();

	// $ANTLR start "exprList"
	// MySQL51Parser.g3:771:1: exprList :e+= expr ( COMMA e+= expr )* -> ( $e)+ ;
	[GrammarRule("exprList")]
	private MySQL51Parser.exprList_return exprList()
	{
		EnterRule_exprList();
		EnterRule("exprList", 43);
		TraceIn("exprList", 43);
		MySQL51Parser.exprList_return retval = new MySQL51Parser.exprList_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA327 = default(IToken);
		List<object> list_e = null;
		MySQL51Parser.expr_return e = default(MySQL51Parser.expr_return);
		object COMMA327_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "exprList");
		DebugLocation(771, 1);
		try
		{
			// MySQL51Parser.g3:772:2: (e+= expr ( COMMA e+= expr )* -> ( $e)+ )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:772:4: e+= expr ( COMMA e+= expr )*
			{
			DebugLocation(772, 5);
			PushFollow(Follow._expr_in_exprList6835);
			e=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(e.Tree);
			if (list_e==null) list_e=new List<object>();
			list_e.Add(e.Tree);

			DebugLocation(772, 12);
			// MySQL51Parser.g3:772:12: ( COMMA e+= expr )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==COMMA))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:772:13: COMMA e+= expr
					{
					DebugLocation(772, 13);
					COMMA327=(IToken)Match(input,COMMA,Follow._COMMA_in_exprList6838); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA327);

					DebugLocation(772, 20);
					PushFollow(Follow._expr_in_exprList6842);
					e=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(e.Tree);
					if (list_e==null) list_e=new List<object>();
					list_e.Add(e.Tree);


					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }



			{
			// AST REWRITE
			// elements: e
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: e
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
			root_0 = (object)adaptor.Nil();
			// 772:29: -> ( $e)+
			{
				DebugLocation(772, 33);
				if (!(stream_e.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_e.HasNext )
				{
					DebugLocation(772, 33);
					adaptor.AddChild(root_0, stream_e.NextTree());

				}
				stream_e.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprList", 43);
			LeaveRule("exprList", 43);
			LeaveRule_exprList();
		}
		DebugLocation(773, 1);
		} finally { DebugExitRule(GrammarFileName, "exprList"); }
		return retval;

	}
	// $ANTLR end "exprList"

	private sealed partial class parenExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public parenExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_parenExpr();
	partial void LeaveRule_parenExpr();

	// $ANTLR start "parenExpr"
	// MySQL51Parser.g3:775:1: parenExpr : LPAREN expr RPAREN -> ^( LPAREN expr ) ;
	[GrammarRule("parenExpr")]
	private MySQL51Parser.parenExpr_return parenExpr()
	{
		EnterRule_parenExpr();
		EnterRule("parenExpr", 44);
		TraceIn("parenExpr", 44);
		MySQL51Parser.parenExpr_return retval = new MySQL51Parser.parenExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN328 = default(IToken);
		IToken RPAREN330 = default(IToken);
		MySQL51Parser.expr_return expr329 = default(MySQL51Parser.expr_return);

		object LPAREN328_tree = default(object);
		object RPAREN330_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "parenExpr");
		DebugLocation(775, 1);
		try
		{
			// MySQL51Parser.g3:776:2: ( LPAREN expr RPAREN -> ^( LPAREN expr ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:776:4: LPAREN expr RPAREN
			{
			DebugLocation(776, 4);
			LPAREN328=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenExpr6861); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN328);

			DebugLocation(776, 11);
			PushFollow(Follow._expr_in_parenExpr6863);
			expr329=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr329.Tree);
			DebugLocation(776, 16);
			RPAREN330=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenExpr6865); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN330);



			{
			// AST REWRITE
			// elements: LPAREN, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 776:23: -> ^( LPAREN expr )
			{
				DebugLocation(776, 26);
				// MySQL51Parser.g3:776:26: ^( LPAREN expr )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(776, 28);
				root_1 = (object)adaptor.BecomeRoot(stream_LPAREN.NextNode(), root_1);

				DebugLocation(776, 35);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenExpr", 44);
			LeaveRule("parenExpr", 44);
			LeaveRule_parenExpr();
		}
		DebugLocation(777, 1);
		} finally { DebugExitRule(GrammarFileName, "parenExpr"); }
		return retval;

	}
	// $ANTLR end "parenExpr"

	private sealed partial class parenExprList_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public parenExprList_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_parenExprList();
	partial void LeaveRule_parenExprList();

	// $ANTLR start "parenExprList"
	// MySQL51Parser.g3:779:1: parenExprList : LPAREN exprList RPAREN -> ^( LPAREN exprList ) ;
	[GrammarRule("parenExprList")]
	private MySQL51Parser.parenExprList_return parenExprList()
	{
		EnterRule_parenExprList();
		EnterRule("parenExprList", 45);
		TraceIn("parenExprList", 45);
		MySQL51Parser.parenExprList_return retval = new MySQL51Parser.parenExprList_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN331 = default(IToken);
		IToken RPAREN333 = default(IToken);
		MySQL51Parser.exprList_return exprList332 = default(MySQL51Parser.exprList_return);

		object LPAREN331_tree = default(object);
		object RPAREN333_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		try { DebugEnterRule(GrammarFileName, "parenExprList");
		DebugLocation(779, 1);
		try
		{
			// MySQL51Parser.g3:780:2: ( LPAREN exprList RPAREN -> ^( LPAREN exprList ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:780:4: LPAREN exprList RPAREN
			{
			DebugLocation(780, 4);
			LPAREN331=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenExprList6885); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN331);

			DebugLocation(780, 11);
			PushFollow(Follow._exprList_in_parenExprList6887);
			exprList332=exprList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_exprList.Add(exprList332.Tree);
			DebugLocation(780, 20);
			RPAREN333=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenExprList6889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN333);



			{
			// AST REWRITE
			// elements: LPAREN, exprList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 780:27: -> ^( LPAREN exprList )
			{
				DebugLocation(780, 30);
				// MySQL51Parser.g3:780:30: ^( LPAREN exprList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(780, 32);
				root_1 = (object)adaptor.BecomeRoot(stream_LPAREN.NextNode(), root_1);

				DebugLocation(780, 39);
				adaptor.AddChild(root_1, stream_exprList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenExprList", 45);
			LeaveRule("parenExprList", 45);
			LeaveRule_parenExprList();
		}
		DebugLocation(781, 1);
		} finally { DebugExitRule(GrammarFileName, "parenExprList"); }
		return retval;

	}
	// $ANTLR end "parenExprList"

	private sealed partial class parenOptExprList_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public parenOptExprList_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_parenOptExprList();
	partial void LeaveRule_parenOptExprList();

	// $ANTLR start "parenOptExprList"
	// MySQL51Parser.g3:783:1: parenOptExprList : LPAREN (e+= exprList )? RPAREN -> ^( LPAREN ( $e)* ) ;
	[GrammarRule("parenOptExprList")]
	private MySQL51Parser.parenOptExprList_return parenOptExprList()
	{
		EnterRule_parenOptExprList();
		EnterRule("parenOptExprList", 46);
		TraceIn("parenOptExprList", 46);
		MySQL51Parser.parenOptExprList_return retval = new MySQL51Parser.parenOptExprList_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN334 = default(IToken);
		IToken RPAREN335 = default(IToken);
		List<object> list_e = null;
		MySQL51Parser.exprList_return e = default(MySQL51Parser.exprList_return);
		object LPAREN334_tree = default(object);
		object RPAREN335_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		try { DebugEnterRule(GrammarFileName, "parenOptExprList");
		DebugLocation(783, 1);
		try
		{
			// MySQL51Parser.g3:784:2: ( LPAREN (e+= exprList )? RPAREN -> ^( LPAREN ( $e)* ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:784:4: LPAREN (e+= exprList )? RPAREN
			{
			DebugLocation(784, 4);
			LPAREN334=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parenOptExprList6909); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN334);

			DebugLocation(784, 12);
			// MySQL51Parser.g3:784:12: (e+= exprList )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==ACTION||(LA130_0>=ADDDATE && LA130_0<=ALGORITHM)||LA130_0==ANY||LA130_0==ASCII||(LA130_0>=AT && LA130_0<=BACKUP)||LA130_0==BEGIN||(LA130_0>=BINARY && LA130_0<=BIT)||LA130_0==BITWISE_INVERSION||(LA130_0>=BIT_AND && LA130_0<=BIT_XOR)||(LA130_0>=BLOCK && LA130_0<=BOOLEAN)||LA130_0==BTREE||(LA130_0>=BYTE && LA130_0<=CACHE)||(LA130_0>=CASCADED && LA130_0<=CHAIN)||(LA130_0>=CHANGED && LA130_0<=CHAR)||LA130_0==CHARSET||(LA130_0>=CHECKSUM && LA130_0<=COLLATION)||LA130_0==COLUMNS||LA130_0==COMMENT||(LA130_0>=COMMIT && LA130_0<=CONCURRENT)||(LA130_0>=CONNECTION && LA130_0<=CONSISTENT)||(LA130_0>=CONTAINS && LA130_0<=CONTEXT)||LA130_0==CONTRIBUTORS||(LA130_0>=COUNT && LA130_0<=CPU)||(LA130_0>=CUBE && LA130_0<=CURRENT_USER)||LA130_0==CURTIME||(LA130_0>=DATA && LA130_0<=DATABASE)||(LA130_0>=DATAFILE && LA130_0<=DATE_ADD)||LA130_0==DATE_SUB||LA130_0==DAY||LA130_0==DEALLOCATE||LA130_0==DEFINER||LA130_0==DELAY_KEY_WRITE||LA130_0==DES_KEY_FILE||(LA130_0>=DIRECTORY && LA130_0<=DISK)||LA130_0==DO||(LA130_0>=DUMPFILE && LA130_0<=DYNAMIC)||LA130_0==ENABLE||(LA130_0>=END && LA130_0<=ENUM)||(LA130_0>=ERRORS && LA130_0<=ESCAPE)||(LA130_0>=EVENT && LA130_0<=EVERY)||(LA130_0>=EXECUTE && LA130_0<=EXISTS)||LA130_0==EXPANSION||(LA130_0>=EXTENDED && LA130_0<=FAULTS)||(LA130_0>=FIELDS && LA130_0<=FIXED)||LA130_0==FLUSH||(LA130_0>=FOUND && LA130_0<=FRAC_SECOND)||LA130_0==FULL||(LA130_0>=FUNCTION && LA130_0<=GLOBAL_VARIABLE)||LA130_0==GRANTS||(LA130_0>=GROUP && LA130_0<=HASH)||(LA130_0>=HELP && LA130_0<=HEXA_VALUE)||(LA130_0>=HOST && LA130_0<=HOUR)||(LA130_0>=ID && LA130_0<=IFNULL)||LA130_0==IMPORT||LA130_0==INDEXES||LA130_0==INITIAL_SIZE||LA130_0==INNOBASE||(LA130_0>=INSERT && LA130_0<=INSTALL)||LA130_0==INTERVAL||(LA130_0>=INT_NUMBER && LA130_0<=IPC)||(LA130_0>=ISOLATION && LA130_0<=ISSUER)||LA130_0==KEY_BLOCK_SIZE||(LA130_0>=LABEL && LA130_0<=LCURLY)||(LA130_0>=LEAVES && LA130_0<=LEFT)||LA130_0==LESS||LA130_0==LEVEL||(LA130_0>=LINESTRING && LA130_0<=LIST)||LA130_0==LOCAL||(LA130_0>=LOCKS && LA130_0<=LOGFILE)||LA130_0==LOGS||(LA130_0>=LPAREN && LA130_0<=MASTER_SSL_KEY)||(LA130_0>=MASTER_USER && LA130_0<=MEDIUM)||(LA130_0>=MEMORY && LA130_0<=MID)||(LA130_0>=MIGRATE && LA130_0<=MINUTE)||(LA130_0>=MIN_ROWS && LA130_0<=MODE)||LA130_0==MODIFY||LA130_0==MONTH||(LA130_0>=MULTILINESTRING && LA130_0<=MUTEX)||(LA130_0>=NAME && LA130_0<=NATIONAL)||(LA130_0>=NCHAR && LA130_0<=NOT)||(LA130_0>=NOT_OP && LA130_0<=NO_WAIT)||(LA130_0>=NULL && LA130_0<=NULLIF)||LA130_0==NUMBER||(LA130_0>=NVARCHAR && LA130_0<=OLD_PASSWORD)||LA130_0==ONE||(LA130_0>=ONE_SHOT && LA130_0<=OPEN)||LA130_0==OPTIONS||(LA130_0>=OWNER && LA130_0<=POSITION)||(LA130_0>=PREPARE && LA130_0<=PREV)||LA130_0==PRIVILEGES||(LA130_0>=PROCESS && LA130_0<=PROFILES)||(LA130_0>=QUARTER && LA130_0<=QUICK)||(LA130_0>=REBUILD && LA130_0<=REDUNDANT)||(LA130_0>=RELAY_LOG_FILE && LA130_0<=RELAY_THREAD)||(LA130_0>=RELOAD && LA130_0<=REMOVE)||(LA130_0>=REORGANIZE && LA130_0<=REPLICATION)||(LA130_0>=RESET && LA130_0<=RESTORE)||LA130_0==RESUME||LA130_0==RETURNS||LA130_0==RIGHT||(LA130_0>=ROLLBACK && LA130_0<=ROW_FORMAT)||(LA130_0>=RTREE && LA130_0<=SCHEDULE)||LA130_0==SECOND||LA130_0==SECURITY||(LA130_0>=SERIAL && LA130_0<=SESSION_VARIABLE)||LA130_0==SHARE||(LA130_0>=SHUTDOWN && LA130_0<=SLAVE)||(LA130_0>=SNAPSHOT && LA130_0<=SOCKET)||(LA130_0>=SONAME && LA130_0<=SOURCE)||(LA130_0>=SQL_BUFFER_RESULT && LA130_0<=SQL_CACHE)||LA130_0==SQL_NO_CACHE||LA130_0==SQL_THREAD||LA130_0==START||(LA130_0>=STARTS && LA130_0<=STORAGE)||(LA130_0>=STRING && LA130_0<=SYSTEM_USER)||(LA130_0>=TABLES && LA130_0<=TEMPTABLE)||(LA130_0>=TEXT && LA130_0<=THAN)||(LA130_0>=TIME && LA130_0<=TIMESTAMP_DIFF)||(LA130_0>=TRANSACTION && LA130_0<=TRANSACTIONAL)||(LA130_0>=TRIGGERS && LA130_0<=UNDEFINED)||(LA130_0>=UNDOFILE && LA130_0<=UNINSTALL)||LA130_0==UNKNOWN||LA130_0==UNTIL||LA130_0==UPGRADE||LA130_0==USER||LA130_0==USE_FRM||(LA130_0>=UTC_DATE && LA130_0<=VALUE)||LA130_0==VALUE_PLACEHOLDER||(LA130_0>=VARIABLES && LA130_0<=VARIANCE)||(LA130_0>=VAR_POP && LA130_0<=WEEK)||(LA130_0>=WORK && LA130_0<=WRAPPER)||(LA130_0>=X509 && LA130_0<=XA)||LA130_0==YEAR||LA130_0==CONCAT))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:784:12: e+= exprList
				{
				DebugLocation(784, 12);
				PushFollow(Follow._exprList_in_parenOptExprList6913);
				e=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(e.Tree);
				if (list_e==null) list_e=new List<object>();
				list_e.Add(e.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(784, 24);
			RPAREN335=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parenOptExprList6916); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN335);



			{
			// AST REWRITE
			// elements: LPAREN, e
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: e
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
			root_0 = (object)adaptor.Nil();
			// 784:31: -> ^( LPAREN ( $e)* )
			{
				DebugLocation(784, 34);
				// MySQL51Parser.g3:784:34: ^( LPAREN ( $e)* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(784, 36);
				root_1 = (object)adaptor.BecomeRoot(stream_LPAREN.NextNode(), root_1);

				DebugLocation(784, 44);
				// MySQL51Parser.g3:784:44: ( $e)*
				while ( stream_e.HasNext )
				{
					DebugLocation(784, 44);
					adaptor.AddChild(root_1, stream_e.NextTree());

				}
				stream_e.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parenOptExprList", 46);
			LeaveRule("parenOptExprList", 46);
			LeaveRule_parenOptExprList();
		}
		DebugLocation(785, 1);
		} finally { DebugExitRule(GrammarFileName, "parenOptExprList"); }
		return retval;

	}
	// $ANTLR end "parenOptExprList"

	private sealed partial class expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// MySQL51Parser.g3:787:1: expr : lhs= assignOrExpr (op= ASSIGN rhs= expr )? ;
	[GrammarRule("expr")]
	private MySQL51Parser.expr_return expr()
	{
		EnterRule_expr();
		EnterRule("expr", 47);
		TraceIn("expr", 47);
		MySQL51Parser.expr_return retval = new MySQL51Parser.expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		MySQL51Parser.assignOrExpr_return lhs = default(MySQL51Parser.assignOrExpr_return);
		MySQL51Parser.expr_return rhs = default(MySQL51Parser.expr_return);

		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(787, 1);
		try
		{
			// MySQL51Parser.g3:788:2: (lhs= assignOrExpr (op= ASSIGN rhs= expr )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:788:4: lhs= assignOrExpr (op= ASSIGN rhs= expr )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(788, 7);
			PushFollow(Follow._assignOrExpr_in_expr6939);
			lhs=assignOrExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(788, 21);
			// MySQL51Parser.g3:788:21: (op= ASSIGN rhs= expr )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_0 = input.LA(1);

			if ((LA131_0==ASSIGN))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:788:22: op= ASSIGN rhs= expr
				{
				DebugLocation(788, 24);
				op=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_expr6944); if (state.failed) return retval;
				if (state.backtracking == 0) {
				op_tree = (object)adaptor.Create(op);
				root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
				}
				DebugLocation(788, 36);
				PushFollow(Follow._expr_in_expr6949);
				rhs=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 47);
			LeaveRule("expr", 47);
			LeaveRule_expr();
		}
		DebugLocation(789, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	private sealed partial class assignOrExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignOrExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_assignOrExpr();
	partial void LeaveRule_assignOrExpr();

	// $ANTLR start "assignOrExpr"
	// MySQL51Parser.g3:791:1: assignOrExpr : lhs= assignXORExpr ( (op+= LOGICAL_OR |op+= OR ) rhs+= assignXORExpr )* ;
	[GrammarRule("assignOrExpr")]
	private MySQL51Parser.assignOrExpr_return assignOrExpr()
	{
		EnterRule_assignOrExpr();
		EnterRule("assignOrExpr", 48);
		TraceIn("assignOrExpr", 48);
		MySQL51Parser.assignOrExpr_return retval = new MySQL51Parser.assignOrExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.assignXORExpr_return lhs = default(MySQL51Parser.assignXORExpr_return);
		MySQL51Parser.assignXORExpr_return rhs = default(MySQL51Parser.assignXORExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignOrExpr");
		DebugLocation(791, 1);
		try
		{
			// MySQL51Parser.g3:792:2: (lhs= assignXORExpr ( (op+= LOGICAL_OR |op+= OR ) rhs+= assignXORExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:792:4: lhs= assignXORExpr ( (op+= LOGICAL_OR |op+= OR ) rhs+= assignXORExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(792, 7);
			PushFollow(Follow._assignXORExpr_in_assignOrExpr6964);
			lhs=assignXORExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(792, 22);
			// MySQL51Parser.g3:792:22: ( (op+= LOGICAL_OR |op+= OR ) rhs+= assignXORExpr )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==LOGICAL_OR||LA133_0==OR))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:792:23: (op+= LOGICAL_OR |op+= OR ) rhs+= assignXORExpr
					{
					DebugLocation(792, 23);
					// MySQL51Parser.g3:792:23: (op+= LOGICAL_OR |op+= OR )
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==LOGICAL_OR))
					{
						alt132 = 1;
					}
					else if ((LA132_0==OR))
					{
						alt132 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:792:24: op+= LOGICAL_OR
						{
						DebugLocation(792, 26);
						op=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_assignOrExpr6970); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:792:42: op+= OR
						{
						DebugLocation(792, 44);
						op=(IToken)Match(input,OR,Follow._OR_in_assignOrExpr6977); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;

					}
					} finally { DebugExitSubRule(132); }

					DebugLocation(792, 54);
					PushFollow(Follow._assignXORExpr_in_assignOrExpr6983);
					rhs=assignXORExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignOrExpr", 48);
			LeaveRule("assignOrExpr", 48);
			LeaveRule_assignOrExpr();
		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "assignOrExpr"); }
		return retval;

	}
	// $ANTLR end "assignOrExpr"

	private sealed partial class assignXORExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignXORExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_assignXORExpr();
	partial void LeaveRule_assignXORExpr();

	// $ANTLR start "assignXORExpr"
	// MySQL51Parser.g3:795:1: assignXORExpr : lhs= assignAndExpr (op+= XOR rhs+= assignAndExpr )* ;
	[GrammarRule("assignXORExpr")]
	private MySQL51Parser.assignXORExpr_return assignXORExpr()
	{
		EnterRule_assignXORExpr();
		EnterRule("assignXORExpr", 49);
		TraceIn("assignXORExpr", 49);
		MySQL51Parser.assignXORExpr_return retval = new MySQL51Parser.assignXORExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.assignAndExpr_return lhs = default(MySQL51Parser.assignAndExpr_return);
		MySQL51Parser.assignAndExpr_return rhs = default(MySQL51Parser.assignAndExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignXORExpr");
		DebugLocation(795, 1);
		try
		{
			// MySQL51Parser.g3:796:2: (lhs= assignAndExpr (op+= XOR rhs+= assignAndExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:796:4: lhs= assignAndExpr (op+= XOR rhs+= assignAndExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(796, 7);
			PushFollow(Follow._assignAndExpr_in_assignXORExpr6998);
			lhs=assignAndExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(796, 22);
			// MySQL51Parser.g3:796:22: (op+= XOR rhs+= assignAndExpr )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==XOR))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:796:23: op+= XOR rhs+= assignAndExpr
					{
					DebugLocation(796, 25);
					op=(IToken)Match(input,XOR,Follow._XOR_in_assignXORExpr7003); if (state.failed) return retval;
					if (state.backtracking == 0) {
					op_tree = (object)adaptor.Create(op);
					root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
					}
					if (list_op==null) list_op=new List<IToken>();
					list_op.Add(op);

					DebugLocation(796, 35);
					PushFollow(Follow._assignAndExpr_in_assignXORExpr7008);
					rhs=assignAndExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignXORExpr", 49);
			LeaveRule("assignXORExpr", 49);
			LeaveRule_assignXORExpr();
		}
		DebugLocation(797, 1);
		} finally { DebugExitRule(GrammarFileName, "assignXORExpr"); }
		return retval;

	}
	// $ANTLR end "assignXORExpr"

	private sealed partial class assignAndExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignAndExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_assignAndExpr();
	partial void LeaveRule_assignAndExpr();

	// $ANTLR start "assignAndExpr"
	// MySQL51Parser.g3:799:1: assignAndExpr : lhs= assignNotExpr ( (op+= LOGICAL_AND |op+= AND ) rhs+= assignNotExpr )* ;
	[GrammarRule("assignAndExpr")]
	private MySQL51Parser.assignAndExpr_return assignAndExpr()
	{
		EnterRule_assignAndExpr();
		EnterRule("assignAndExpr", 50);
		TraceIn("assignAndExpr", 50);
		MySQL51Parser.assignAndExpr_return retval = new MySQL51Parser.assignAndExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.assignNotExpr_return lhs = default(MySQL51Parser.assignNotExpr_return);
		MySQL51Parser.assignNotExpr_return rhs = default(MySQL51Parser.assignNotExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignAndExpr");
		DebugLocation(799, 1);
		try
		{
			// MySQL51Parser.g3:800:2: (lhs= assignNotExpr ( (op+= LOGICAL_AND |op+= AND ) rhs+= assignNotExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:800:4: lhs= assignNotExpr ( (op+= LOGICAL_AND |op+= AND ) rhs+= assignNotExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(800, 7);
			PushFollow(Follow._assignNotExpr_in_assignAndExpr7023);
			lhs=assignNotExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(800, 22);
			// MySQL51Parser.g3:800:22: ( (op+= LOGICAL_AND |op+= AND ) rhs+= assignNotExpr )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==AND||LA136_0==LOGICAL_AND))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:800:23: (op+= LOGICAL_AND |op+= AND ) rhs+= assignNotExpr
					{
					DebugLocation(800, 23);
					// MySQL51Parser.g3:800:23: (op+= LOGICAL_AND |op+= AND )
					int alt135=2;
					try { DebugEnterSubRule(135);
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==LOGICAL_AND))
					{
						alt135 = 1;
					}
					else if ((LA135_0==AND))
					{
						alt135 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:800:25: op+= LOGICAL_AND
						{
						DebugLocation(800, 27);
						op=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_assignAndExpr7030); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:800:44: op+= AND
						{
						DebugLocation(800, 46);
						op=(IToken)Match(input,AND,Follow._AND_in_assignAndExpr7037); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;

					}
					} finally { DebugExitSubRule(135); }

					DebugLocation(800, 58);
					PushFollow(Follow._assignNotExpr_in_assignAndExpr7044);
					rhs=assignNotExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignAndExpr", 50);
			LeaveRule("assignAndExpr", 50);
			LeaveRule_assignAndExpr();
		}
		DebugLocation(801, 1);
		} finally { DebugExitRule(GrammarFileName, "assignAndExpr"); }
		return retval;

	}
	// $ANTLR end "assignAndExpr"

	private sealed partial class assignNotExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignNotExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_assignNotExpr();
	partial void LeaveRule_assignNotExpr();

	// $ANTLR start "assignNotExpr"
	// MySQL51Parser.g3:803:1: assignNotExpr : (lhs= equalityExpr |op+= NOT rhs+= equalityExpr );
	[GrammarRule("assignNotExpr")]
	private MySQL51Parser.assignNotExpr_return assignNotExpr()
	{
		EnterRule_assignNotExpr();
		EnterRule("assignNotExpr", 51);
		TraceIn("assignNotExpr", 51);
		MySQL51Parser.assignNotExpr_return retval = new MySQL51Parser.assignNotExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.equalityExpr_return lhs = default(MySQL51Parser.equalityExpr_return);
		MySQL51Parser.equalityExpr_return rhs = default(MySQL51Parser.equalityExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignNotExpr");
		DebugLocation(803, 1);
		try
		{
			// MySQL51Parser.g3:804:2: (lhs= equalityExpr |op+= NOT rhs+= equalityExpr )
			int alt137=2;
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==ACTION||(LA137_0>=ADDDATE && LA137_0<=ALGORITHM)||LA137_0==ANY||LA137_0==ASCII||(LA137_0>=AT && LA137_0<=BACKUP)||LA137_0==BEGIN||(LA137_0>=BINARY && LA137_0<=BIT)||LA137_0==BITWISE_INVERSION||(LA137_0>=BIT_AND && LA137_0<=BIT_XOR)||(LA137_0>=BLOCK && LA137_0<=BOOLEAN)||LA137_0==BTREE||(LA137_0>=BYTE && LA137_0<=CACHE)||(LA137_0>=CASCADED && LA137_0<=CHAIN)||(LA137_0>=CHANGED && LA137_0<=CHAR)||LA137_0==CHARSET||(LA137_0>=CHECKSUM && LA137_0<=COLLATION)||LA137_0==COLUMNS||LA137_0==COMMENT||(LA137_0>=COMMIT && LA137_0<=CONCURRENT)||(LA137_0>=CONNECTION && LA137_0<=CONSISTENT)||(LA137_0>=CONTAINS && LA137_0<=CONTEXT)||LA137_0==CONTRIBUTORS||(LA137_0>=COUNT && LA137_0<=CPU)||(LA137_0>=CUBE && LA137_0<=CURRENT_USER)||LA137_0==CURTIME||(LA137_0>=DATA && LA137_0<=DATABASE)||(LA137_0>=DATAFILE && LA137_0<=DATE_ADD)||LA137_0==DATE_SUB||LA137_0==DAY||LA137_0==DEALLOCATE||LA137_0==DEFINER||LA137_0==DELAY_KEY_WRITE||LA137_0==DES_KEY_FILE||(LA137_0>=DIRECTORY && LA137_0<=DISK)||LA137_0==DO||(LA137_0>=DUMPFILE && LA137_0<=DYNAMIC)||LA137_0==ENABLE||(LA137_0>=END && LA137_0<=ENUM)||(LA137_0>=ERRORS && LA137_0<=ESCAPE)||(LA137_0>=EVENT && LA137_0<=EVERY)||(LA137_0>=EXECUTE && LA137_0<=EXISTS)||LA137_0==EXPANSION||(LA137_0>=EXTENDED && LA137_0<=FAULTS)||(LA137_0>=FIELDS && LA137_0<=FIXED)||LA137_0==FLUSH||(LA137_0>=FOUND && LA137_0<=FRAC_SECOND)||LA137_0==FULL||(LA137_0>=FUNCTION && LA137_0<=GLOBAL_VARIABLE)||LA137_0==GRANTS||(LA137_0>=GROUP && LA137_0<=HASH)||(LA137_0>=HELP && LA137_0<=HEXA_VALUE)||(LA137_0>=HOST && LA137_0<=HOUR)||(LA137_0>=ID && LA137_0<=IFNULL)||LA137_0==IMPORT||LA137_0==INDEXES||LA137_0==INITIAL_SIZE||LA137_0==INNOBASE||(LA137_0>=INSERT && LA137_0<=INSTALL)||LA137_0==INTERVAL||(LA137_0>=INT_NUMBER && LA137_0<=IPC)||(LA137_0>=ISOLATION && LA137_0<=ISSUER)||LA137_0==KEY_BLOCK_SIZE||(LA137_0>=LABEL && LA137_0<=LCURLY)||(LA137_0>=LEAVES && LA137_0<=LEFT)||LA137_0==LESS||LA137_0==LEVEL||(LA137_0>=LINESTRING && LA137_0<=LIST)||LA137_0==LOCAL||(LA137_0>=LOCKS && LA137_0<=LOGFILE)||LA137_0==LOGS||(LA137_0>=LPAREN && LA137_0<=MASTER_SSL_KEY)||(LA137_0>=MASTER_USER && LA137_0<=MEDIUM)||(LA137_0>=MEMORY && LA137_0<=MID)||(LA137_0>=MIGRATE && LA137_0<=MINUTE)||(LA137_0>=MIN_ROWS && LA137_0<=MODE)||LA137_0==MODIFY||LA137_0==MONTH||(LA137_0>=MULTILINESTRING && LA137_0<=MUTEX)||(LA137_0>=NAME && LA137_0<=NATIONAL)||(LA137_0>=NCHAR && LA137_0<=NONE)||(LA137_0>=NOT_OP && LA137_0<=NO_WAIT)||(LA137_0>=NULL && LA137_0<=NULLIF)||LA137_0==NUMBER||(LA137_0>=NVARCHAR && LA137_0<=OLD_PASSWORD)||LA137_0==ONE||(LA137_0>=ONE_SHOT && LA137_0<=OPEN)||LA137_0==OPTIONS||(LA137_0>=OWNER && LA137_0<=POSITION)||(LA137_0>=PREPARE && LA137_0<=PREV)||LA137_0==PRIVILEGES||(LA137_0>=PROCESS && LA137_0<=PROFILES)||(LA137_0>=QUARTER && LA137_0<=QUICK)||(LA137_0>=REBUILD && LA137_0<=REDUNDANT)||(LA137_0>=RELAY_LOG_FILE && LA137_0<=RELAY_THREAD)||(LA137_0>=RELOAD && LA137_0<=REMOVE)||(LA137_0>=REORGANIZE && LA137_0<=REPLICATION)||(LA137_0>=RESET && LA137_0<=RESTORE)||LA137_0==RESUME||LA137_0==RETURNS||LA137_0==RIGHT||(LA137_0>=ROLLBACK && LA137_0<=ROW_FORMAT)||(LA137_0>=RTREE && LA137_0<=SCHEDULE)||LA137_0==SECOND||LA137_0==SECURITY||(LA137_0>=SERIAL && LA137_0<=SESSION_VARIABLE)||LA137_0==SHARE||(LA137_0>=SHUTDOWN && LA137_0<=SLAVE)||(LA137_0>=SNAPSHOT && LA137_0<=SOCKET)||(LA137_0>=SONAME && LA137_0<=SOURCE)||(LA137_0>=SQL_BUFFER_RESULT && LA137_0<=SQL_CACHE)||LA137_0==SQL_NO_CACHE||LA137_0==SQL_THREAD||LA137_0==START||(LA137_0>=STARTS && LA137_0<=STORAGE)||(LA137_0>=STRING && LA137_0<=SYSTEM_USER)||(LA137_0>=TABLES && LA137_0<=TEMPTABLE)||(LA137_0>=TEXT && LA137_0<=THAN)||(LA137_0>=TIME && LA137_0<=TIMESTAMP_DIFF)||(LA137_0>=TRANSACTION && LA137_0<=TRANSACTIONAL)||(LA137_0>=TRIGGERS && LA137_0<=UNDEFINED)||(LA137_0>=UNDOFILE && LA137_0<=UNINSTALL)||LA137_0==UNKNOWN||LA137_0==UNTIL||LA137_0==UPGRADE||LA137_0==USER||LA137_0==USE_FRM||(LA137_0>=UTC_DATE && LA137_0<=VALUE)||LA137_0==VALUE_PLACEHOLDER||(LA137_0>=VARIABLES && LA137_0<=VARIANCE)||(LA137_0>=VAR_POP && LA137_0<=WEEK)||(LA137_0>=WORK && LA137_0<=WRAPPER)||(LA137_0>=X509 && LA137_0<=XA)||LA137_0==YEAR||LA137_0==CONCAT))
			{
				alt137 = 1;
			}
			else if ((LA137_0==NOT))
			{
				alt137 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:804:4: lhs= equalityExpr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(804, 7);
				PushFollow(Follow._equalityExpr_in_assignNotExpr7059);
				lhs=equalityExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:805:4: op+= NOT rhs+= equalityExpr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(805, 6);
				op=(IToken)Match(input,NOT,Follow._NOT_in_assignNotExpr7066); if (state.failed) return retval;
				if (state.backtracking == 0) {
				op_tree = (object)adaptor.Create(op);
				root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
				}
				if (list_op==null) list_op=new List<IToken>();
				list_op.Add(op);

				DebugLocation(805, 16);
				PushFollow(Follow._equalityExpr_in_assignNotExpr7071);
				rhs=equalityExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
				if (list_rhs==null) list_rhs=new List<object>();
				list_rhs.Add(rhs.Tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignNotExpr", 51);
			LeaveRule("assignNotExpr", 51);
			LeaveRule_assignNotExpr();
		}
		DebugLocation(806, 1);
		} finally { DebugExitRule(GrammarFileName, "assignNotExpr"); }
		return retval;

	}
	// $ANTLR end "assignNotExpr"

	private sealed partial class equalityExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_equalityExpr();
	partial void LeaveRule_equalityExpr();

	// $ANTLR start "equalityExpr"
	// MySQL51Parser.g3:808:1: equalityExpr : bitwiseOrExpr (op+= equalityOperator ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr ) )* ;
	[GrammarRule("equalityExpr")]
	private MySQL51Parser.equalityExpr_return equalityExpr()
	{
		EnterRule_equalityExpr();
		EnterRule("equalityExpr", 52);
		TraceIn("equalityExpr", 52);
		MySQL51Parser.equalityExpr_return retval = new MySQL51Parser.equalityExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		List<object> list_op = null;
		MySQL51Parser.bitwiseOrExpr_return bitwiseOrExpr336 = default(MySQL51Parser.bitwiseOrExpr_return);
		MySQL51Parser.subselect_in_expr_rhs_return subselect_in_expr_rhs337 = default(MySQL51Parser.subselect_in_expr_rhs_return);
		MySQL51Parser.bitwiseOrExpr_return bitwiseOrExpr338 = default(MySQL51Parser.bitwiseOrExpr_return);
		MySQL51Parser.equalityOperator_return op = default(MySQL51Parser.equalityOperator_return);

		try { DebugEnterRule(GrammarFileName, "equalityExpr");
		DebugLocation(808, 1);
		try
		{
			// MySQL51Parser.g3:809:2: ( bitwiseOrExpr (op+= equalityOperator ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr ) )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:809:4: bitwiseOrExpr (op+= equalityOperator ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(809, 4);
			PushFollow(Follow._bitwiseOrExpr_in_equalityExpr7082);
			bitwiseOrExpr336=bitwiseOrExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOrExpr336.Tree);
			DebugLocation(810, 3);
			// MySQL51Parser.g3:810:3: (op+= equalityOperator ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr ) )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==BETWEEN||LA139_0==EQUALS||(LA139_0>=GREATER_THAN && LA139_0<=GREATER_THAN_EQUAL)||(LA139_0>=LESS_THAN && LA139_0<=LESS_THAN_EQUAL)||LA139_0==NOT_EQUAL||LA139_0==NULL_SAFE_NOT_EQUAL||LA139_0==REGEXP))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:810:4: op+= equalityOperator ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr )
					{
					DebugLocation(810, 6);
					PushFollow(Follow._equalityOperator_in_equalityExpr7089);
					op=equalityOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(op.Tree, root_0);
					if (list_op==null) list_op=new List<object>();
					list_op.Add(op.Tree);

					DebugLocation(810, 26);
					// MySQL51Parser.g3:810:26: ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr )
					int alt138=2;
					try { DebugEnterSubRule(138);
					try { DebugEnterDecision(138, false);
					try
					{
						alt138 = dfa138.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(138); }
					switch (alt138)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:810:27: ( subselect_in_expr_rhs )=> subselect_in_expr_rhs
						{
						DebugLocation(810, 53);
						PushFollow(Follow._subselect_in_expr_rhs_in_equalityExpr7098);
						subselect_in_expr_rhs337=subselect_in_expr_rhs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subselect_in_expr_rhs337.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:810:77: bitwiseOrExpr
						{
						DebugLocation(810, 77);
						PushFollow(Follow._bitwiseOrExpr_in_equalityExpr7102);
						bitwiseOrExpr338=bitwiseOrExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOrExpr338.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(138); }


					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpr", 52);
			LeaveRule("equalityExpr", 52);
			LeaveRule_equalityExpr();
		}
		DebugLocation(811, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpr"); }
		return retval;

	}
	// $ANTLR end "equalityExpr"

	private sealed partial class subselect_in_expr_rhs_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public subselect_in_expr_rhs_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_subselect_in_expr_rhs();
	partial void LeaveRule_subselect_in_expr_rhs();

	// $ANTLR start "subselect_in_expr_rhs"
	// MySQL51Parser.g3:813:1: subselect_in_expr_rhs : (mod= ANY |mod= SOME |mod= ALL ) LPAREN select RPAREN -> ^( SUBSELECT $mod select ) ;
	[GrammarRule("subselect_in_expr_rhs")]
	private MySQL51Parser.subselect_in_expr_rhs_return subselect_in_expr_rhs()
	{
		EnterRule_subselect_in_expr_rhs();
		EnterRule("subselect_in_expr_rhs", 53);
		TraceIn("subselect_in_expr_rhs", 53);
		MySQL51Parser.subselect_in_expr_rhs_return retval = new MySQL51Parser.subselect_in_expr_rhs_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken mod = default(IToken);
		IToken LPAREN339 = default(IToken);
		IToken RPAREN341 = default(IToken);
		MySQL51Parser.select_return select340 = default(MySQL51Parser.select_return);

		object mod_tree = default(object);
		object LPAREN339_tree = default(object);
		object RPAREN341_tree = default(object);
		RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
		RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_select=new RewriteRuleSubtreeStream(adaptor,"rule select");
		try { DebugEnterRule(GrammarFileName, "subselect_in_expr_rhs");
		DebugLocation(813, 1);
		try
		{
			// MySQL51Parser.g3:814:2: ( (mod= ANY |mod= SOME |mod= ALL ) LPAREN select RPAREN -> ^( SUBSELECT $mod select ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:814:4: (mod= ANY |mod= SOME |mod= ALL ) LPAREN select RPAREN
			{
			DebugLocation(814, 4);
			// MySQL51Parser.g3:814:4: (mod= ANY |mod= SOME |mod= ALL )
			int alt140=3;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			switch (input.LA(1))
			{
			case ANY:
				{
				alt140 = 1;
				}
				break;
			case SOME:
				{
				alt140 = 2;
				}
				break;
			case ALL:
				{
				alt140 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 140, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:814:5: mod= ANY
				{
				DebugLocation(814, 8);
				mod=(IToken)Match(input,ANY,Follow._ANY_in_subselect_in_expr_rhs7119); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ANY.Add(mod);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:814:15: mod= SOME
				{
				DebugLocation(814, 18);
				mod=(IToken)Match(input,SOME,Follow._SOME_in_subselect_in_expr_rhs7125); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SOME.Add(mod);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:814:26: mod= ALL
				{
				DebugLocation(814, 29);
				mod=(IToken)Match(input,ALL,Follow._ALL_in_subselect_in_expr_rhs7131); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(mod);


				}
				break;

			}
			} finally { DebugExitSubRule(140); }

			DebugLocation(814, 35);
			LPAREN339=(IToken)Match(input,LPAREN,Follow._LPAREN_in_subselect_in_expr_rhs7134); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN339);

			DebugLocation(814, 42);
			PushFollow(Follow._select_in_subselect_in_expr_rhs7136);
			select340=select();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select.Add(select340.Tree);
			DebugLocation(814, 49);
			RPAREN341=(IToken)Match(input,RPAREN,Follow._RPAREN_in_subselect_in_expr_rhs7138); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN341);



			{
			// AST REWRITE
			// elements: mod, select
			// token labels: mod
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_mod=new RewriteRuleITokenStream(adaptor,"token mod",mod);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 814:56: -> ^( SUBSELECT $mod select )
			{
				DebugLocation(814, 59);
				// MySQL51Parser.g3:814:59: ^( SUBSELECT $mod select )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(814, 61);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SUBSELECT, "SUBSELECT"), root_1);

				DebugLocation(814, 72);
				adaptor.AddChild(root_1, stream_mod.NextNode());
				DebugLocation(814, 76);
				adaptor.AddChild(root_1, stream_select.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subselect_in_expr_rhs", 53);
			LeaveRule("subselect_in_expr_rhs", 53);
			LeaveRule_subselect_in_expr_rhs();
		}
		DebugLocation(815, 1);
		} finally { DebugExitRule(GrammarFileName, "subselect_in_expr_rhs"); }
		return retval;

	}
	// $ANTLR end "subselect_in_expr_rhs"

	private sealed partial class subselect_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public subselect_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_subselect();
	partial void LeaveRule_subselect();

	// $ANTLR start "subselect"
	// MySQL51Parser.g3:817:1: subselect : LPAREN select_inner RPAREN -> ^( SUBSELECT select_inner ) ;
	[GrammarRule("subselect")]
	private MySQL51Parser.subselect_return subselect()
	{
		EnterRule_subselect();
		EnterRule("subselect", 54);
		TraceIn("subselect", 54);
		MySQL51Parser.subselect_return retval = new MySQL51Parser.subselect_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN342 = default(IToken);
		IToken RPAREN344 = default(IToken);
		MySQL51Parser.select_inner_return select_inner343 = default(MySQL51Parser.select_inner_return);

		object LPAREN342_tree = default(object);
		object RPAREN344_tree = default(object);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_select_inner=new RewriteRuleSubtreeStream(adaptor,"rule select_inner");
		try { DebugEnterRule(GrammarFileName, "subselect");
		DebugLocation(817, 1);
		try
		{
			// MySQL51Parser.g3:818:2: ( LPAREN select_inner RPAREN -> ^( SUBSELECT select_inner ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:818:4: LPAREN select_inner RPAREN
			{
			DebugLocation(818, 4);
			LPAREN342=(IToken)Match(input,LPAREN,Follow._LPAREN_in_subselect7161); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN342);

			DebugLocation(818, 11);
			PushFollow(Follow._select_inner_in_subselect7163);
			select_inner343=select_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_inner.Add(select_inner343.Tree);
			DebugLocation(818, 24);
			RPAREN344=(IToken)Match(input,RPAREN,Follow._RPAREN_in_subselect7165); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN344);



			{
			// AST REWRITE
			// elements: select_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 818:31: -> ^( SUBSELECT select_inner )
			{
				DebugLocation(818, 34);
				// MySQL51Parser.g3:818:34: ^( SUBSELECT select_inner )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(818, 36);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SUBSELECT, "SUBSELECT"), root_1);

				DebugLocation(818, 46);
				adaptor.AddChild(root_1, stream_select_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subselect", 54);
			LeaveRule("subselect", 54);
			LeaveRule_subselect();
		}
		DebugLocation(819, 1);
		} finally { DebugExitRule(GrammarFileName, "subselect"); }
		return retval;

	}
	// $ANTLR end "subselect"

	private sealed partial class isOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public isOperator_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_isOperator();
	partial void LeaveRule_isOperator();

	// $ANTLR start "isOperator"
	// MySQL51Parser.g3:821:1: isOperator : IS ( NOT )? (value2= NULL |value2= FALSE |value2= TRUE |value2= UNKNOWN ) -> ^( IS ( NOT )? $value2) ;
	[GrammarRule("isOperator")]
	private MySQL51Parser.isOperator_return isOperator()
	{
		EnterRule_isOperator();
		EnterRule("isOperator", 55);
		TraceIn("isOperator", 55);
		MySQL51Parser.isOperator_return retval = new MySQL51Parser.isOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken value2 = default(IToken);
		IToken IS345 = default(IToken);
		IToken NOT346 = default(IToken);

		object value2_tree = default(object);
		object IS345_tree = default(object);
		object NOT346_tree = default(object);
		RewriteRuleITokenStream stream_IS=new RewriteRuleITokenStream(adaptor,"token IS");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_NULL=new RewriteRuleITokenStream(adaptor,"token NULL");
		RewriteRuleITokenStream stream_FALSE=new RewriteRuleITokenStream(adaptor,"token FALSE");
		RewriteRuleITokenStream stream_TRUE=new RewriteRuleITokenStream(adaptor,"token TRUE");
		RewriteRuleITokenStream stream_UNKNOWN=new RewriteRuleITokenStream(adaptor,"token UNKNOWN");

		try { DebugEnterRule(GrammarFileName, "isOperator");
		DebugLocation(821, 1);
		try
		{
			// MySQL51Parser.g3:822:2: ( IS ( NOT )? (value2= NULL |value2= FALSE |value2= TRUE |value2= UNKNOWN ) -> ^( IS ( NOT )? $value2) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:822:4: IS ( NOT )? (value2= NULL |value2= FALSE |value2= TRUE |value2= UNKNOWN )
			{
			DebugLocation(822, 4);
			IS345=(IToken)Match(input,IS,Follow._IS_in_isOperator7184); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IS.Add(IS345);

			DebugLocation(822, 7);
			// MySQL51Parser.g3:822:7: ( NOT )?
			int alt141=2;
			try { DebugEnterSubRule(141);
			try { DebugEnterDecision(141, false);
			int LA141_0 = input.LA(1);

			if ((LA141_0==NOT))
			{
				alt141 = 1;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:822:7: NOT
				{
				DebugLocation(822, 7);
				NOT346=(IToken)Match(input,NOT,Follow._NOT_in_isOperator7186); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT346);


				}
				break;

			}
			} finally { DebugExitSubRule(141); }

			DebugLocation(822, 12);
			// MySQL51Parser.g3:822:12: (value2= NULL |value2= FALSE |value2= TRUE |value2= UNKNOWN )
			int alt142=4;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt142 = 1;
				}
				break;
			case FALSE:
				{
				alt142 = 2;
				}
				break;
			case TRUE:
				{
				alt142 = 3;
				}
				break;
			case UNKNOWN:
				{
				alt142 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:822:13: value2= NULL
				{
				DebugLocation(822, 19);
				value2=(IToken)Match(input,NULL,Follow._NULL_in_isOperator7192); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NULL.Add(value2);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:822:27: value2= FALSE
				{
				DebugLocation(822, 33);
				value2=(IToken)Match(input,FALSE,Follow._FALSE_in_isOperator7198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FALSE.Add(value2);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:822:42: value2= TRUE
				{
				DebugLocation(822, 48);
				value2=(IToken)Match(input,TRUE,Follow._TRUE_in_isOperator7204); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRUE.Add(value2);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:822:56: value2= UNKNOWN
				{
				DebugLocation(822, 62);
				value2=(IToken)Match(input,UNKNOWN,Follow._UNKNOWN_in_isOperator7210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UNKNOWN.Add(value2);


				}
				break;

			}
			} finally { DebugExitSubRule(142); }



			{
			// AST REWRITE
			// elements: IS, NOT, value2
			// token labels: value2
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_value2=new RewriteRuleITokenStream(adaptor,"token value2",value2);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 822:72: -> ^( IS ( NOT )? $value2)
			{
				DebugLocation(822, 75);
				// MySQL51Parser.g3:822:75: ^( IS ( NOT )? $value2)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(822, 77);
				root_1 = (object)adaptor.BecomeRoot(stream_IS.NextNode(), root_1);

				DebugLocation(822, 80);
				// MySQL51Parser.g3:822:80: ( NOT )?
				if (stream_NOT.HasNext)
				{
					DebugLocation(822, 80);
					adaptor.AddChild(root_1, stream_NOT.NextNode());

				}
				stream_NOT.Reset();
				DebugLocation(822, 86);
				adaptor.AddChild(root_1, stream_value2.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("isOperator", 55);
			LeaveRule("isOperator", 55);
			LeaveRule_isOperator();
		}
		DebugLocation(823, 1);
		} finally { DebugExitRule(GrammarFileName, "isOperator"); }
		return retval;

	}
	// $ANTLR end "isOperator"

	private sealed partial class equalityOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityOperator_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_equalityOperator();
	partial void LeaveRule_equalityOperator();

	// $ANTLR start "equalityOperator"
	// MySQL51Parser.g3:825:1: equalityOperator : (value= EQUALS |value= NOT_EQUAL |value= LESS_THAN |value= LESS_THAN_EQUAL |value= GREATER_THAN |value= GREATER_THAN_EQUAL |value= NULL_SAFE_NOT_EQUAL |value= REGEXP |value= BETWEEN ) ;
	[GrammarRule("equalityOperator")]
	private MySQL51Parser.equalityOperator_return equalityOperator()
	{
		EnterRule_equalityOperator();
		EnterRule("equalityOperator", 56);
		TraceIn("equalityOperator", 56);
		MySQL51Parser.equalityOperator_return retval = new MySQL51Parser.equalityOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken value = default(IToken);

		object value_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "equalityOperator");
		DebugLocation(825, 1);
		try
		{
			// MySQL51Parser.g3:826:2: ( (value= EQUALS |value= NOT_EQUAL |value= LESS_THAN |value= LESS_THAN_EQUAL |value= GREATER_THAN |value= GREATER_THAN_EQUAL |value= NULL_SAFE_NOT_EQUAL |value= REGEXP |value= BETWEEN ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:826:4: (value= EQUALS |value= NOT_EQUAL |value= LESS_THAN |value= LESS_THAN_EQUAL |value= GREATER_THAN |value= GREATER_THAN_EQUAL |value= NULL_SAFE_NOT_EQUAL |value= REGEXP |value= BETWEEN )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(826, 4);
			// MySQL51Parser.g3:826:4: (value= EQUALS |value= NOT_EQUAL |value= LESS_THAN |value= LESS_THAN_EQUAL |value= GREATER_THAN |value= GREATER_THAN_EQUAL |value= NULL_SAFE_NOT_EQUAL |value= REGEXP |value= BETWEEN )
			int alt143=9;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case EQUALS:
				{
				alt143 = 1;
				}
				break;
			case NOT_EQUAL:
				{
				alt143 = 2;
				}
				break;
			case LESS_THAN:
				{
				alt143 = 3;
				}
				break;
			case LESS_THAN_EQUAL:
				{
				alt143 = 4;
				}
				break;
			case GREATER_THAN:
				{
				alt143 = 5;
				}
				break;
			case GREATER_THAN_EQUAL:
				{
				alt143 = 6;
				}
				break;
			case NULL_SAFE_NOT_EQUAL:
				{
				alt143 = 7;
				}
				break;
			case REGEXP:
				{
				alt143 = 8;
				}
				break;
			case BETWEEN:
				{
				alt143 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:826:6: value= EQUALS
				{
				DebugLocation(826, 11);
				value=(IToken)Match(input,EQUALS,Follow._EQUALS_in_equalityOperator7238); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:827:5: value= NOT_EQUAL
				{
				DebugLocation(827, 10);
				value=(IToken)Match(input,NOT_EQUAL,Follow._NOT_EQUAL_in_equalityOperator7246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:828:5: value= LESS_THAN
				{
				DebugLocation(828, 10);
				value=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_equalityOperator7254); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:829:5: value= LESS_THAN_EQUAL
				{
				DebugLocation(829, 10);
				value=(IToken)Match(input,LESS_THAN_EQUAL,Follow._LESS_THAN_EQUAL_in_equalityOperator7262); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:830:5: value= GREATER_THAN
				{
				DebugLocation(830, 10);
				value=(IToken)Match(input,GREATER_THAN,Follow._GREATER_THAN_in_equalityOperator7270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:831:6: value= GREATER_THAN_EQUAL
				{
				DebugLocation(831, 11);
				value=(IToken)Match(input,GREATER_THAN_EQUAL,Follow._GREATER_THAN_EQUAL_in_equalityOperator7283); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:832:5: value= NULL_SAFE_NOT_EQUAL
				{
				DebugLocation(832, 10);
				value=(IToken)Match(input,NULL_SAFE_NOT_EQUAL,Follow._NULL_SAFE_NOT_EQUAL_in_equalityOperator7293); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:833:6: value= REGEXP
				{
				DebugLocation(833, 11);
				value=(IToken)Match(input,REGEXP,Follow._REGEXP_in_equalityOperator7302); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:834:5: value= BETWEEN
				{
				DebugLocation(834, 10);
				value=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_equalityOperator7312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityOperator", 56);
			LeaveRule("equalityOperator", 56);
			LeaveRule_equalityOperator();
		}
		DebugLocation(842, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityOperator"); }
		return retval;

	}
	// $ANTLR end "equalityOperator"

	private sealed partial class bitwiseOrExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseOrExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_bitwiseOrExpr();
	partial void LeaveRule_bitwiseOrExpr();

	// $ANTLR start "bitwiseOrExpr"
	// MySQL51Parser.g3:844:1: bitwiseOrExpr : lhs= bitwiseAndExpr ( (op+= BITWISE_OR rhs+= bitwiseAndExpr )+ | ( ( NOT )? IN ( parenExprList | subselect ) ) | LIKE unaryExpr ( ESCAPE STRING )? | BETWEEN bitwiseAndExpr AND bitwiseOrExpr | SOUNDS LIKE bitwiseAndExpr | isOperator )? ;
	[GrammarRule("bitwiseOrExpr")]
	private MySQL51Parser.bitwiseOrExpr_return bitwiseOrExpr()
	{
		EnterRule_bitwiseOrExpr();
		EnterRule("bitwiseOrExpr", 57);
		TraceIn("bitwiseOrExpr", 57);
		MySQL51Parser.bitwiseOrExpr_return retval = new MySQL51Parser.bitwiseOrExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT347 = default(IToken);
		IToken IN348 = default(IToken);
		IToken LIKE351 = default(IToken);
		IToken ESCAPE353 = default(IToken);
		IToken STRING354 = default(IToken);
		IToken BETWEEN355 = default(IToken);
		IToken AND357 = default(IToken);
		IToken SOUNDS359 = default(IToken);
		IToken LIKE360 = default(IToken);
		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.bitwiseAndExpr_return lhs = default(MySQL51Parser.bitwiseAndExpr_return);
		MySQL51Parser.parenExprList_return parenExprList349 = default(MySQL51Parser.parenExprList_return);
		MySQL51Parser.subselect_return subselect350 = default(MySQL51Parser.subselect_return);
		MySQL51Parser.unaryExpr_return unaryExpr352 = default(MySQL51Parser.unaryExpr_return);
		MySQL51Parser.bitwiseAndExpr_return bitwiseAndExpr356 = default(MySQL51Parser.bitwiseAndExpr_return);
		MySQL51Parser.bitwiseOrExpr_return bitwiseOrExpr358 = default(MySQL51Parser.bitwiseOrExpr_return);
		MySQL51Parser.bitwiseAndExpr_return bitwiseAndExpr361 = default(MySQL51Parser.bitwiseAndExpr_return);
		MySQL51Parser.isOperator_return isOperator362 = default(MySQL51Parser.isOperator_return);
		MySQL51Parser.bitwiseAndExpr_return rhs = default(MySQL51Parser.bitwiseAndExpr_return);
		object NOT347_tree = default(object);
		object IN348_tree = default(object);
		object LIKE351_tree = default(object);
		object ESCAPE353_tree = default(object);
		object STRING354_tree = default(object);
		object BETWEEN355_tree = default(object);
		object AND357_tree = default(object);
		object SOUNDS359_tree = default(object);
		object LIKE360_tree = default(object);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseOrExpr");
		DebugLocation(844, 2);
		try
		{
			// MySQL51Parser.g3:845:3: (lhs= bitwiseAndExpr ( (op+= BITWISE_OR rhs+= bitwiseAndExpr )+ | ( ( NOT )? IN ( parenExprList | subselect ) ) | LIKE unaryExpr ( ESCAPE STRING )? | BETWEEN bitwiseAndExpr AND bitwiseOrExpr | SOUNDS LIKE bitwiseAndExpr | isOperator )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:845:5: lhs= bitwiseAndExpr ( (op+= BITWISE_OR rhs+= bitwiseAndExpr )+ | ( ( NOT )? IN ( parenExprList | subselect ) ) | LIKE unaryExpr ( ESCAPE STRING )? | BETWEEN bitwiseAndExpr AND bitwiseOrExpr | SOUNDS LIKE bitwiseAndExpr | isOperator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(845, 8);
			PushFollow(Follow._bitwiseAndExpr_in_bitwiseOrExpr7334);
			lhs=bitwiseAndExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(846, 5);
			// MySQL51Parser.g3:846:5: ( (op+= BITWISE_OR rhs+= bitwiseAndExpr )+ | ( ( NOT )? IN ( parenExprList | subselect ) ) | LIKE unaryExpr ( ESCAPE STRING )? | BETWEEN bitwiseAndExpr AND bitwiseOrExpr | SOUNDS LIKE bitwiseAndExpr | isOperator )?
			int alt148=7;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			try
			{
				alt148 = dfa148.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:846:7: (op+= BITWISE_OR rhs+= bitwiseAndExpr )+
				{
				DebugLocation(846, 7);
				// MySQL51Parser.g3:846:7: (op+= BITWISE_OR rhs+= bitwiseAndExpr )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==BITWISE_OR))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:846:8: op+= BITWISE_OR rhs+= bitwiseAndExpr
						{
						DebugLocation(846, 10);
						op=(IToken)Match(input,BITWISE_OR,Follow._BITWISE_OR_in_bitwiseOrExpr7346); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);

						DebugLocation(846, 27);
						PushFollow(Follow._bitwiseAndExpr_in_bitwiseOrExpr7351);
						rhs=bitwiseAndExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
						if (list_rhs==null) list_rhs=new List<object>();
						list_rhs.Add(rhs.Tree);


						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:847:7: ( ( NOT )? IN ( parenExprList | subselect ) )
				{
				DebugLocation(847, 7);
				// MySQL51Parser.g3:847:7: ( ( NOT )? IN ( parenExprList | subselect ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:847:8: ( NOT )? IN ( parenExprList | subselect )
				{
				DebugLocation(847, 8);
				// MySQL51Parser.g3:847:8: ( NOT )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==NOT))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:847:9: NOT
					{
					DebugLocation(847, 12);
					NOT347=(IToken)Match(input,NOT,Follow._NOT_in_bitwiseOrExpr7363); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NOT347_tree = (object)adaptor.Create(NOT347);
					root_0 = (object)adaptor.BecomeRoot(NOT347_tree, root_0);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(847, 18);
				IN348=(IToken)Match(input,IN,Follow._IN_in_bitwiseOrExpr7368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IN348_tree = (object)adaptor.Create(IN348);
				root_0 = (object)adaptor.BecomeRoot(IN348_tree, root_0);
				}
				DebugLocation(847, 20);
				// MySQL51Parser.g3:847:20: ( parenExprList | subselect )
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==LPAREN))
				{
					int LA146_1 = input.LA(2);

					if ((LA146_1==ACTION||(LA146_1>=ADDDATE && LA146_1<=ALGORITHM)||LA146_1==ANY||LA146_1==ASCII||(LA146_1>=AT && LA146_1<=BACKUP)||LA146_1==BEGIN||(LA146_1>=BINARY && LA146_1<=BIT)||LA146_1==BITWISE_INVERSION||(LA146_1>=BIT_AND && LA146_1<=BIT_XOR)||(LA146_1>=BLOCK && LA146_1<=BOOLEAN)||LA146_1==BTREE||(LA146_1>=BYTE && LA146_1<=CACHE)||(LA146_1>=CASCADED && LA146_1<=CHAIN)||(LA146_1>=CHANGED && LA146_1<=CHAR)||LA146_1==CHARSET||(LA146_1>=CHECKSUM && LA146_1<=COLLATION)||LA146_1==COLUMNS||LA146_1==COMMENT||(LA146_1>=COMMIT && LA146_1<=CONCURRENT)||(LA146_1>=CONNECTION && LA146_1<=CONSISTENT)||(LA146_1>=CONTAINS && LA146_1<=CONTEXT)||LA146_1==CONTRIBUTORS||(LA146_1>=COUNT && LA146_1<=CPU)||(LA146_1>=CUBE && LA146_1<=CURRENT_USER)||LA146_1==CURTIME||(LA146_1>=DATA && LA146_1<=DATABASE)||(LA146_1>=DATAFILE && LA146_1<=DATE_ADD)||LA146_1==DATE_SUB||LA146_1==DAY||LA146_1==DEALLOCATE||LA146_1==DEFINER||LA146_1==DELAY_KEY_WRITE||LA146_1==DES_KEY_FILE||(LA146_1>=DIRECTORY && LA146_1<=DISK)||LA146_1==DO||(LA146_1>=DUMPFILE && LA146_1<=DYNAMIC)||LA146_1==ENABLE||(LA146_1>=END && LA146_1<=ENUM)||(LA146_1>=ERRORS && LA146_1<=ESCAPE)||(LA146_1>=EVENT && LA146_1<=EVERY)||(LA146_1>=EXECUTE && LA146_1<=EXISTS)||LA146_1==EXPANSION||(LA146_1>=EXTENDED && LA146_1<=FAULTS)||(LA146_1>=FIELDS && LA146_1<=FIXED)||LA146_1==FLUSH||(LA146_1>=FOUND && LA146_1<=FRAC_SECOND)||LA146_1==FULL||(LA146_1>=FUNCTION && LA146_1<=GLOBAL_VARIABLE)||LA146_1==GRANTS||(LA146_1>=GROUP && LA146_1<=HASH)||(LA146_1>=HELP && LA146_1<=HEXA_VALUE)||(LA146_1>=HOST && LA146_1<=HOUR)||(LA146_1>=ID && LA146_1<=IFNULL)||LA146_1==IMPORT||LA146_1==INDEXES||LA146_1==INITIAL_SIZE||LA146_1==INNOBASE||(LA146_1>=INSERT && LA146_1<=INSTALL)||LA146_1==INTERVAL||(LA146_1>=INT_NUMBER && LA146_1<=IPC)||(LA146_1>=ISOLATION && LA146_1<=ISSUER)||LA146_1==KEY_BLOCK_SIZE||(LA146_1>=LABEL && LA146_1<=LCURLY)||(LA146_1>=LEAVES && LA146_1<=LEFT)||LA146_1==LESS||LA146_1==LEVEL||(LA146_1>=LINESTRING && LA146_1<=LIST)||LA146_1==LOCAL||(LA146_1>=LOCKS && LA146_1<=LOGFILE)||LA146_1==LOGS||(LA146_1>=LPAREN && LA146_1<=MASTER_SSL_KEY)||(LA146_1>=MASTER_USER && LA146_1<=MEDIUM)||(LA146_1>=MEMORY && LA146_1<=MID)||(LA146_1>=MIGRATE && LA146_1<=MINUTE)||(LA146_1>=MIN_ROWS && LA146_1<=MODE)||LA146_1==MODIFY||LA146_1==MONTH||(LA146_1>=MULTILINESTRING && LA146_1<=MUTEX)||(LA146_1>=NAME && LA146_1<=NATIONAL)||(LA146_1>=NCHAR && LA146_1<=NOT)||(LA146_1>=NOT_OP && LA146_1<=NO_WAIT)||(LA146_1>=NULL && LA146_1<=NULLIF)||LA146_1==NUMBER||(LA146_1>=NVARCHAR && LA146_1<=OLD_PASSWORD)||LA146_1==ONE||(LA146_1>=ONE_SHOT && LA146_1<=OPEN)||LA146_1==OPTIONS||(LA146_1>=OWNER && LA146_1<=POSITION)||(LA146_1>=PREPARE && LA146_1<=PREV)||LA146_1==PRIVILEGES||(LA146_1>=PROCESS && LA146_1<=PROFILES)||(LA146_1>=QUARTER && LA146_1<=QUICK)||(LA146_1>=REBUILD && LA146_1<=REDUNDANT)||(LA146_1>=RELAY_LOG_FILE && LA146_1<=RELAY_THREAD)||(LA146_1>=RELOAD && LA146_1<=REMOVE)||(LA146_1>=REORGANIZE && LA146_1<=REPLICATION)||(LA146_1>=RESET && LA146_1<=RESTORE)||LA146_1==RESUME||LA146_1==RETURNS||LA146_1==RIGHT||(LA146_1>=ROLLBACK && LA146_1<=ROW_FORMAT)||(LA146_1>=RTREE && LA146_1<=SCHEDULE)||LA146_1==SECOND||LA146_1==SECURITY||(LA146_1>=SERIAL && LA146_1<=SESSION_VARIABLE)||LA146_1==SHARE||(LA146_1>=SHUTDOWN && LA146_1<=SLAVE)||(LA146_1>=SNAPSHOT && LA146_1<=SOCKET)||(LA146_1>=SONAME && LA146_1<=SOURCE)||(LA146_1>=SQL_BUFFER_RESULT && LA146_1<=SQL_CACHE)||LA146_1==SQL_NO_CACHE||LA146_1==SQL_THREAD||LA146_1==START||(LA146_1>=STARTS && LA146_1<=STORAGE)||(LA146_1>=STRING && LA146_1<=SYSTEM_USER)||(LA146_1>=TABLES && LA146_1<=TEMPTABLE)||(LA146_1>=TEXT && LA146_1<=THAN)||(LA146_1>=TIME && LA146_1<=TIMESTAMP_DIFF)||(LA146_1>=TRANSACTION && LA146_1<=TRANSACTIONAL)||(LA146_1>=TRIGGERS && LA146_1<=UNDEFINED)||(LA146_1>=UNDOFILE && LA146_1<=UNINSTALL)||LA146_1==UNKNOWN||LA146_1==UNTIL||LA146_1==UPGRADE||LA146_1==USER||LA146_1==USE_FRM||(LA146_1>=UTC_DATE && LA146_1<=VALUE)||LA146_1==VALUE_PLACEHOLDER||(LA146_1>=VARIABLES && LA146_1<=VARIANCE)||(LA146_1>=VAR_POP && LA146_1<=WEEK)||(LA146_1>=WORK && LA146_1<=WRAPPER)||(LA146_1>=X509 && LA146_1<=XA)||LA146_1==YEAR||LA146_1==CONCAT))
					{
						alt146 = 1;
					}
					else if ((LA146_1==SELECT))
					{
						alt146 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 146, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 146, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:847:21: parenExprList
					{
					DebugLocation(847, 21);
					PushFollow(Follow._parenExprList_in_bitwiseOrExpr7372);
					parenExprList349=parenExprList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parenExprList349.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:847:37: subselect
					{
					DebugLocation(847, 37);
					PushFollow(Follow._subselect_in_bitwiseOrExpr7376);
					subselect350=subselect();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, subselect350.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:848:7: LIKE unaryExpr ( ESCAPE STRING )?
				{
				DebugLocation(848, 11);
				LIKE351=(IToken)Match(input,LIKE,Follow._LIKE_in_bitwiseOrExpr7386); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LIKE351_tree = (object)adaptor.Create(LIKE351);
				root_0 = (object)adaptor.BecomeRoot(LIKE351_tree, root_0);
				}
				DebugLocation(848, 13);
				PushFollow(Follow._unaryExpr_in_bitwiseOrExpr7389);
				unaryExpr352=unaryExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpr352.Tree);
				DebugLocation(848, 23);
				// MySQL51Parser.g3:848:23: ( ESCAPE STRING )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, false);
				int LA147_0 = input.LA(1);

				if ((LA147_0==ESCAPE))
				{
					int LA147_1 = input.LA(2);

					if ((LA147_1==STRING))
					{
						alt147 = 1;
					}
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:848:24: ESCAPE STRING
					{
					DebugLocation(848, 24);
					ESCAPE353=(IToken)Match(input,ESCAPE,Follow._ESCAPE_in_bitwiseOrExpr7392); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ESCAPE353_tree = (object)adaptor.Create(ESCAPE353);
					adaptor.AddChild(root_0, ESCAPE353_tree);
					}
					DebugLocation(848, 31);
					STRING354=(IToken)Match(input,STRING,Follow._STRING_in_bitwiseOrExpr7394); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING354_tree = (object)adaptor.Create(STRING354);
					adaptor.AddChild(root_0, STRING354_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(147); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:849:4: BETWEEN bitwiseAndExpr AND bitwiseOrExpr
				{
				DebugLocation(849, 4);
				BETWEEN355=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_bitwiseOrExpr7403); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BETWEEN355_tree = (object)adaptor.Create(BETWEEN355);
				adaptor.AddChild(root_0, BETWEEN355_tree);
				}
				DebugLocation(849, 12);
				PushFollow(Follow._bitwiseAndExpr_in_bitwiseOrExpr7405);
				bitwiseAndExpr356=bitwiseAndExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseAndExpr356.Tree);
				DebugLocation(849, 27);
				AND357=(IToken)Match(input,AND,Follow._AND_in_bitwiseOrExpr7407); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AND357_tree = (object)adaptor.Create(AND357);
				adaptor.AddChild(root_0, AND357_tree);
				}
				DebugLocation(849, 31);
				PushFollow(Follow._bitwiseOrExpr_in_bitwiseOrExpr7409);
				bitwiseOrExpr358=bitwiseOrExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOrExpr358.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:850:4: SOUNDS LIKE bitwiseAndExpr
				{
				DebugLocation(850, 4);
				SOUNDS359=(IToken)Match(input,SOUNDS,Follow._SOUNDS_in_bitwiseOrExpr7414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SOUNDS359_tree = (object)adaptor.Create(SOUNDS359);
				adaptor.AddChild(root_0, SOUNDS359_tree);
				}
				DebugLocation(850, 11);
				LIKE360=(IToken)Match(input,LIKE,Follow._LIKE_in_bitwiseOrExpr7416); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LIKE360_tree = (object)adaptor.Create(LIKE360);
				adaptor.AddChild(root_0, LIKE360_tree);
				}
				DebugLocation(850, 16);
				PushFollow(Follow._bitwiseAndExpr_in_bitwiseOrExpr7418);
				bitwiseAndExpr361=bitwiseAndExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseAndExpr361.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:851:7: isOperator
				{
				DebugLocation(851, 17);
				PushFollow(Follow._isOperator_in_bitwiseOrExpr7426);
				isOperator362=isOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(isOperator362.Tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOrExpr", 57);
			LeaveRule("bitwiseOrExpr", 57);
			LeaveRule_bitwiseOrExpr();
		}
		DebugLocation(853, 2);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOrExpr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOrExpr"

	private sealed partial class bitwiseAndExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseAndExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_bitwiseAndExpr();
	partial void LeaveRule_bitwiseAndExpr();

	// $ANTLR start "bitwiseAndExpr"
	// MySQL51Parser.g3:855:1: bitwiseAndExpr : lhs= shiftExpr (op+= BITWISE_AND rhs+= shiftExpr )* ;
	[GrammarRule("bitwiseAndExpr")]
	private MySQL51Parser.bitwiseAndExpr_return bitwiseAndExpr()
	{
		EnterRule_bitwiseAndExpr();
		EnterRule("bitwiseAndExpr", 58);
		TraceIn("bitwiseAndExpr", 58);
		MySQL51Parser.bitwiseAndExpr_return retval = new MySQL51Parser.bitwiseAndExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.shiftExpr_return lhs = default(MySQL51Parser.shiftExpr_return);
		MySQL51Parser.shiftExpr_return rhs = default(MySQL51Parser.shiftExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseAndExpr");
		DebugLocation(855, 1);
		try
		{
			// MySQL51Parser.g3:856:2: (lhs= shiftExpr (op+= BITWISE_AND rhs+= shiftExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:856:4: lhs= shiftExpr (op+= BITWISE_AND rhs+= shiftExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(856, 7);
			PushFollow(Follow._shiftExpr_in_bitwiseAndExpr7448);
			lhs=shiftExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(856, 18);
			// MySQL51Parser.g3:856:18: (op+= BITWISE_AND rhs+= shiftExpr )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==BITWISE_AND))
				{
					alt149 = 1;
				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:856:19: op+= BITWISE_AND rhs+= shiftExpr
					{
					DebugLocation(856, 21);
					op=(IToken)Match(input,BITWISE_AND,Follow._BITWISE_AND_in_bitwiseAndExpr7453); if (state.failed) return retval;
					if (state.backtracking == 0) {
					op_tree = (object)adaptor.Create(op);
					root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
					}
					if (list_op==null) list_op=new List<IToken>();
					list_op.Add(op);

					DebugLocation(856, 39);
					PushFollow(Follow._shiftExpr_in_bitwiseAndExpr7458);
					rhs=shiftExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseAndExpr", 58);
			LeaveRule("bitwiseAndExpr", 58);
			LeaveRule_bitwiseAndExpr();
		}
		DebugLocation(857, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseAndExpr"); }
		return retval;

	}
	// $ANTLR end "bitwiseAndExpr"

	private sealed partial class shiftExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public shiftExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_shiftExpr();
	partial void LeaveRule_shiftExpr();

	// $ANTLR start "shiftExpr"
	// MySQL51Parser.g3:859:1: shiftExpr : lhs= additiveExpr ( (op+= LEFT_SHIFT |op+= RIGHT_SHIFT ) rhs+= additiveExpr )* ;
	[GrammarRule("shiftExpr")]
	private MySQL51Parser.shiftExpr_return shiftExpr()
	{
		EnterRule_shiftExpr();
		EnterRule("shiftExpr", 59);
		TraceIn("shiftExpr", 59);
		MySQL51Parser.shiftExpr_return retval = new MySQL51Parser.shiftExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.additiveExpr_return lhs = default(MySQL51Parser.additiveExpr_return);
		MySQL51Parser.additiveExpr_return rhs = default(MySQL51Parser.additiveExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "shiftExpr");
		DebugLocation(859, 1);
		try
		{
			// MySQL51Parser.g3:860:2: (lhs= additiveExpr ( (op+= LEFT_SHIFT |op+= RIGHT_SHIFT ) rhs+= additiveExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:860:4: lhs= additiveExpr ( (op+= LEFT_SHIFT |op+= RIGHT_SHIFT ) rhs+= additiveExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(860, 7);
			PushFollow(Follow._additiveExpr_in_shiftExpr7473);
			lhs=additiveExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(860, 21);
			// MySQL51Parser.g3:860:21: ( (op+= LEFT_SHIFT |op+= RIGHT_SHIFT ) rhs+= additiveExpr )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==LEFT_SHIFT||LA151_0==RIGHT_SHIFT))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:860:22: (op+= LEFT_SHIFT |op+= RIGHT_SHIFT ) rhs+= additiveExpr
					{
					DebugLocation(860, 22);
					// MySQL51Parser.g3:860:22: (op+= LEFT_SHIFT |op+= RIGHT_SHIFT )
					int alt150=2;
					try { DebugEnterSubRule(150);
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==LEFT_SHIFT))
					{
						alt150 = 1;
					}
					else if ((LA150_0==RIGHT_SHIFT))
					{
						alt150 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(150); }
					switch (alt150)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:860:23: op+= LEFT_SHIFT
						{
						DebugLocation(860, 25);
						op=(IToken)Match(input,LEFT_SHIFT,Follow._LEFT_SHIFT_in_shiftExpr7479); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:860:41: op+= RIGHT_SHIFT
						{
						DebugLocation(860, 43);
						op=(IToken)Match(input,RIGHT_SHIFT,Follow._RIGHT_SHIFT_in_shiftExpr7486); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;

					}
					} finally { DebugExitSubRule(150); }

					DebugLocation(860, 62);
					PushFollow(Follow._additiveExpr_in_shiftExpr7492);
					rhs=additiveExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpr", 59);
			LeaveRule("shiftExpr", 59);
			LeaveRule_shiftExpr();
		}
		DebugLocation(861, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpr"); }
		return retval;

	}
	// $ANTLR end "shiftExpr"

	private sealed partial class additiveExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public additiveExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_additiveExpr();
	partial void LeaveRule_additiveExpr();

	// $ANTLR start "additiveExpr"
	// MySQL51Parser.g3:868:1: additiveExpr : lhs= multiplicativeExpr ( (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr )* ;
	[GrammarRule("additiveExpr")]
	private MySQL51Parser.additiveExpr_return additiveExpr()
	{
		EnterRule_additiveExpr();
		EnterRule("additiveExpr", 60);
		TraceIn("additiveExpr", 60);
		MySQL51Parser.additiveExpr_return retval = new MySQL51Parser.additiveExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.multiplicativeExpr_return lhs = default(MySQL51Parser.multiplicativeExpr_return);
		MySQL51Parser.multiplicativeExpr_return rhs = default(MySQL51Parser.multiplicativeExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "additiveExpr");
		DebugLocation(868, 1);
		try
		{
			// MySQL51Parser.g3:869:2: (lhs= multiplicativeExpr ( (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:869:4: lhs= multiplicativeExpr ( (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(869, 7);
			PushFollow(Follow._multiplicativeExpr_in_additiveExpr7509);
			lhs=multiplicativeExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(869, 27);
			// MySQL51Parser.g3:869:27: ( (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr )*
			try { DebugEnterSubRule(153);
			while (true)
			{
				int alt153=2;
				try { DebugEnterDecision(153, false);
				try
				{
					alt153 = dfa153.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(153); }
				switch ( alt153 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:869:28: (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr
					{
					DebugLocation(869, 28);
					// MySQL51Parser.g3:869:28: (op+= PLUS |op+= MINUS )
					int alt152=2;
					try { DebugEnterSubRule(152);
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==PLUS))
					{
						alt152 = 1;
					}
					else if ((LA152_0==MINUS))
					{
						alt152 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:869:29: op+= PLUS
						{
						DebugLocation(869, 31);
						op=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpr7515); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:869:39: op+= MINUS
						{
						DebugLocation(869, 41);
						op=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpr7520); if (state.failed) return retval;
						if (state.backtracking == 0) {
						op_tree = (object)adaptor.Create(op);
						root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
						}
						if (list_op==null) list_op=new List<IToken>();
						list_op.Add(op);


						}
						break;

					}
					} finally { DebugExitSubRule(152); }

					DebugLocation(869, 54);
					PushFollow(Follow._multiplicativeExpr_in_additiveExpr7526);
					rhs=multiplicativeExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop153;
				}
			}

			loop153:
				;

			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpr", 60);
			LeaveRule("additiveExpr", 60);
			LeaveRule_additiveExpr();
		}
		DebugLocation(870, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpr"); }
		return retval;

	}
	// $ANTLR end "additiveExpr"

	private sealed partial class multOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multOperator_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_multOperator();
	partial void LeaveRule_multOperator();

	// $ANTLR start "multOperator"
	// MySQL51Parser.g3:872:1: multOperator : (value= MULT |value= DIVISION |value= DIV |value= MODULO );
	[GrammarRule("multOperator")]
	private MySQL51Parser.multOperator_return multOperator()
	{
		EnterRule_multOperator();
		EnterRule("multOperator", 61);
		TraceIn("multOperator", 61);
		MySQL51Parser.multOperator_return retval = new MySQL51Parser.multOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken value = default(IToken);

		object value_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "multOperator");
		DebugLocation(872, 1);
		try
		{
			// MySQL51Parser.g3:873:2: (value= MULT |value= DIVISION |value= DIV |value= MODULO )
			int alt154=4;
			try { DebugEnterDecision(154, false);
			switch (input.LA(1))
			{
			case MULT:
				{
				alt154 = 1;
				}
				break;
			case DIVISION:
				{
				alt154 = 2;
				}
				break;
			case DIV:
				{
				alt154 = 3;
				}
				break;
			case MODULO:
				{
				alt154 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:873:4: value= MULT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(873, 9);
				value=(IToken)Match(input,MULT,Follow._MULT_in_multOperator7541); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:874:4: value= DIVISION
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(874, 9);
				value=(IToken)Match(input,DIVISION,Follow._DIVISION_in_multOperator7548); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:875:4: value= DIV
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(875, 9);
				value=(IToken)Match(input,DIV,Follow._DIV_in_multOperator7555); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:876:4: value= MODULO
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(876, 9);
				value=(IToken)Match(input,MODULO,Follow._MODULO_in_multOperator7562); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multOperator", 61);
			LeaveRule("multOperator", 61);
			LeaveRule_multOperator();
		}
		DebugLocation(877, 1);
		} finally { DebugExitRule(GrammarFileName, "multOperator"); }
		return retval;

	}
	// $ANTLR end "multOperator"

	private sealed partial class multiplicativeExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multiplicativeExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_multiplicativeExpr();
	partial void LeaveRule_multiplicativeExpr();

	// $ANTLR start "multiplicativeExpr"
	// MySQL51Parser.g3:879:1: multiplicativeExpr : lhs= bitwiseXORExpr (op+= multOperator rhs+= bitwiseXORExpr )* ;
	[GrammarRule("multiplicativeExpr")]
	private MySQL51Parser.multiplicativeExpr_return multiplicativeExpr()
	{
		EnterRule_multiplicativeExpr();
		EnterRule("multiplicativeExpr", 62);
		TraceIn("multiplicativeExpr", 62);
		MySQL51Parser.multiplicativeExpr_return retval = new MySQL51Parser.multiplicativeExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		List<object> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.bitwiseXORExpr_return lhs = default(MySQL51Parser.bitwiseXORExpr_return);
		MySQL51Parser.multOperator_return op = default(MySQL51Parser.multOperator_return);
		MySQL51Parser.bitwiseXORExpr_return rhs = default(MySQL51Parser.bitwiseXORExpr_return);

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpr");
		DebugLocation(879, 1);
		try
		{
			// MySQL51Parser.g3:880:2: (lhs= bitwiseXORExpr (op+= multOperator rhs+= bitwiseXORExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:880:4: lhs= bitwiseXORExpr (op+= multOperator rhs+= bitwiseXORExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(880, 7);
			PushFollow(Follow._bitwiseXORExpr_in_multiplicativeExpr7575);
			lhs=bitwiseXORExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(880, 23);
			// MySQL51Parser.g3:880:23: (op+= multOperator rhs+= bitwiseXORExpr )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=2;
				try { DebugEnterDecision(155, false);
				int LA155_0 = input.LA(1);

				if (((LA155_0>=DIV && LA155_0<=DIVISION)||LA155_0==MODULO||LA155_0==MULT))
				{
					alt155 = 1;
				}


				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:880:24: op+= multOperator rhs+= bitwiseXORExpr
					{
					DebugLocation(880, 26);
					PushFollow(Follow._multOperator_in_multiplicativeExpr7580);
					op=multOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot(op.Tree, root_0);
					if (list_op==null) list_op=new List<object>();
					list_op.Add(op.Tree);

					DebugLocation(880, 45);
					PushFollow(Follow._bitwiseXORExpr_in_multiplicativeExpr7585);
					rhs=bitwiseXORExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpr", 62);
			LeaveRule("multiplicativeExpr", 62);
			LeaveRule_multiplicativeExpr();
		}
		DebugLocation(881, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpr"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpr"

	private sealed partial class bitwiseXORExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseXORExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_bitwiseXORExpr();
	partial void LeaveRule_bitwiseXORExpr();

	// $ANTLR start "bitwiseXORExpr"
	// MySQL51Parser.g3:883:1: bitwiseXORExpr : lhs= unaryExpr (op+= BITWISE_XOR rhs+= unaryExpr )* ;
	[GrammarRule("bitwiseXORExpr")]
	private MySQL51Parser.bitwiseXORExpr_return bitwiseXORExpr()
	{
		EnterRule_bitwiseXORExpr();
		EnterRule("bitwiseXORExpr", 63);
		TraceIn("bitwiseXORExpr", 63);
		MySQL51Parser.bitwiseXORExpr_return retval = new MySQL51Parser.bitwiseXORExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		List<IToken> list_op = null;
		List<object> list_rhs = null;
		MySQL51Parser.unaryExpr_return lhs = default(MySQL51Parser.unaryExpr_return);
		MySQL51Parser.unaryExpr_return rhs = default(MySQL51Parser.unaryExpr_return);
		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpr");
		DebugLocation(883, 1);
		try
		{
			// MySQL51Parser.g3:884:2: (lhs= unaryExpr (op+= BITWISE_XOR rhs+= unaryExpr )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:884:4: lhs= unaryExpr (op+= BITWISE_XOR rhs+= unaryExpr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(884, 7);
			PushFollow(Follow._unaryExpr_in_bitwiseXORExpr7600);
			lhs=unaryExpr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(884, 18);
			// MySQL51Parser.g3:884:18: (op+= BITWISE_XOR rhs+= unaryExpr )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, false);
				int LA156_0 = input.LA(1);

				if ((LA156_0==BITWISE_XOR))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:884:19: op+= BITWISE_XOR rhs+= unaryExpr
					{
					DebugLocation(884, 21);
					op=(IToken)Match(input,BITWISE_XOR,Follow._BITWISE_XOR_in_bitwiseXORExpr7605); if (state.failed) return retval;
					if (state.backtracking == 0) {
					op_tree = (object)adaptor.Create(op);
					root_0 = (object)adaptor.BecomeRoot(op_tree, root_0);
					}
					if (list_op==null) list_op=new List<IToken>();
					list_op.Add(op);

					DebugLocation(884, 39);
					PushFollow(Follow._unaryExpr_in_bitwiseXORExpr7610);
					rhs=unaryExpr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rhs.Tree);
					if (list_rhs==null) list_rhs=new List<object>();
					list_rhs.Add(rhs.Tree);


					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpr", 63);
			LeaveRule("bitwiseXORExpr", 63);
			LeaveRule_bitwiseXORExpr();
		}
		DebugLocation(885, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpr"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpr"

	private sealed partial class unaryExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_unaryExpr();
	partial void LeaveRule_unaryExpr();

	// $ANTLR start "unaryExpr"
	// MySQL51Parser.g3:887:1: unaryExpr : (op= MINUS lhs= unaryExpr -> ^( UNARY_MINUS[$op] $lhs) |op= PLUS lhs= unaryExpr -> ^( UNARY_PLUS[$op] $lhs) |op= BITWISE_INVERSION lhs= unaryExpr -> ^( BITWISE_INVERSION $lhs) |lhsUnaryNot= unaryNotExpr -> unaryNotExpr );
	[GrammarRule("unaryExpr")]
	private MySQL51Parser.unaryExpr_return unaryExpr()
	{
		EnterRule_unaryExpr();
		EnterRule("unaryExpr", 64);
		TraceIn("unaryExpr", 64);
		MySQL51Parser.unaryExpr_return retval = new MySQL51Parser.unaryExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		MySQL51Parser.unaryExpr_return lhs = default(MySQL51Parser.unaryExpr_return);
		MySQL51Parser.unaryNotExpr_return lhsUnaryNot = default(MySQL51Parser.unaryNotExpr_return);

		object op_tree = default(object);
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_BITWISE_INVERSION=new RewriteRuleITokenStream(adaptor,"token BITWISE_INVERSION");
		RewriteRuleSubtreeStream stream_unaryExpr=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpr");
		RewriteRuleSubtreeStream stream_unaryNotExpr=new RewriteRuleSubtreeStream(adaptor,"rule unaryNotExpr");
		try { DebugEnterRule(GrammarFileName, "unaryExpr");
		DebugLocation(887, 1);
		try
		{
			// MySQL51Parser.g3:888:2: (op= MINUS lhs= unaryExpr -> ^( UNARY_MINUS[$op] $lhs) |op= PLUS lhs= unaryExpr -> ^( UNARY_PLUS[$op] $lhs) |op= BITWISE_INVERSION lhs= unaryExpr -> ^( BITWISE_INVERSION $lhs) |lhsUnaryNot= unaryNotExpr -> unaryNotExpr )
			int alt157=4;
			try { DebugEnterDecision(157, false);
			int LA157_0 = input.LA(1);

			if ((LA157_0==MINUS))
			{
				alt157 = 1;
			}
			else if ((LA157_0==PLUS))
			{
				alt157 = 2;
			}
			else if ((LA157_0==BITWISE_INVERSION))
			{
				alt157 = 3;
			}
			else if ((LA157_0==ACTION||(LA157_0>=ADDDATE && LA157_0<=ALGORITHM)||LA157_0==ANY||LA157_0==ASCII||(LA157_0>=AT && LA157_0<=BACKUP)||LA157_0==BEGIN||(LA157_0>=BINARY && LA157_0<=BIT)||(LA157_0>=BIT_AND && LA157_0<=BIT_XOR)||(LA157_0>=BLOCK && LA157_0<=BOOLEAN)||LA157_0==BTREE||(LA157_0>=BYTE && LA157_0<=CACHE)||(LA157_0>=CASCADED && LA157_0<=CHAIN)||(LA157_0>=CHANGED && LA157_0<=CHAR)||LA157_0==CHARSET||(LA157_0>=CHECKSUM && LA157_0<=COLLATION)||LA157_0==COLUMNS||LA157_0==COMMENT||(LA157_0>=COMMIT && LA157_0<=CONCURRENT)||(LA157_0>=CONNECTION && LA157_0<=CONSISTENT)||(LA157_0>=CONTAINS && LA157_0<=CONTEXT)||LA157_0==CONTRIBUTORS||(LA157_0>=COUNT && LA157_0<=CPU)||(LA157_0>=CUBE && LA157_0<=CURRENT_USER)||LA157_0==CURTIME||(LA157_0>=DATA && LA157_0<=DATABASE)||(LA157_0>=DATAFILE && LA157_0<=DATE_ADD)||LA157_0==DATE_SUB||LA157_0==DAY||LA157_0==DEALLOCATE||LA157_0==DEFINER||LA157_0==DELAY_KEY_WRITE||LA157_0==DES_KEY_FILE||(LA157_0>=DIRECTORY && LA157_0<=DISK)||LA157_0==DO||(LA157_0>=DUMPFILE && LA157_0<=DYNAMIC)||LA157_0==ENABLE||(LA157_0>=END && LA157_0<=ENUM)||(LA157_0>=ERRORS && LA157_0<=ESCAPE)||(LA157_0>=EVENT && LA157_0<=EVERY)||(LA157_0>=EXECUTE && LA157_0<=EXISTS)||LA157_0==EXPANSION||(LA157_0>=EXTENDED && LA157_0<=FAULTS)||(LA157_0>=FIELDS && LA157_0<=FIXED)||LA157_0==FLUSH||(LA157_0>=FOUND && LA157_0<=FRAC_SECOND)||LA157_0==FULL||(LA157_0>=FUNCTION && LA157_0<=GLOBAL_VARIABLE)||LA157_0==GRANTS||(LA157_0>=GROUP && LA157_0<=HASH)||(LA157_0>=HELP && LA157_0<=HEXA_VALUE)||(LA157_0>=HOST && LA157_0<=HOUR)||(LA157_0>=ID && LA157_0<=IFNULL)||LA157_0==IMPORT||LA157_0==INDEXES||LA157_0==INITIAL_SIZE||LA157_0==INNOBASE||(LA157_0>=INSERT && LA157_0<=INSTALL)||LA157_0==INTERVAL||(LA157_0>=INT_NUMBER && LA157_0<=IPC)||(LA157_0>=ISOLATION && LA157_0<=ISSUER)||LA157_0==KEY_BLOCK_SIZE||(LA157_0>=LABEL && LA157_0<=LCURLY)||(LA157_0>=LEAVES && LA157_0<=LEFT)||LA157_0==LESS||LA157_0==LEVEL||(LA157_0>=LINESTRING && LA157_0<=LIST)||LA157_0==LOCAL||(LA157_0>=LOCKS && LA157_0<=LOGFILE)||LA157_0==LOGS||(LA157_0>=LPAREN && LA157_0<=MASTER_SSL_KEY)||(LA157_0>=MASTER_USER && LA157_0<=MEDIUM)||(LA157_0>=MEMORY && LA157_0<=MID)||(LA157_0>=MIGRATE && LA157_0<=MIN)||LA157_0==MINUTE||(LA157_0>=MIN_ROWS && LA157_0<=MODE)||LA157_0==MODIFY||LA157_0==MONTH||(LA157_0>=MULTILINESTRING && LA157_0<=MUTEX)||(LA157_0>=NAME && LA157_0<=NATIONAL)||(LA157_0>=NCHAR && LA157_0<=NONE)||(LA157_0>=NOT_OP && LA157_0<=NO_WAIT)||(LA157_0>=NULL && LA157_0<=NULLIF)||LA157_0==NUMBER||(LA157_0>=NVARCHAR && LA157_0<=OLD_PASSWORD)||LA157_0==ONE||(LA157_0>=ONE_SHOT && LA157_0<=OPEN)||LA157_0==OPTIONS||(LA157_0>=OWNER && LA157_0<=PLUGINS)||(LA157_0>=POINT && LA157_0<=POSITION)||(LA157_0>=PREPARE && LA157_0<=PREV)||LA157_0==PRIVILEGES||(LA157_0>=PROCESS && LA157_0<=PROFILES)||(LA157_0>=QUARTER && LA157_0<=QUICK)||(LA157_0>=REBUILD && LA157_0<=REDUNDANT)||(LA157_0>=RELAY_LOG_FILE && LA157_0<=RELAY_THREAD)||(LA157_0>=RELOAD && LA157_0<=REMOVE)||(LA157_0>=REORGANIZE && LA157_0<=REPLICATION)||(LA157_0>=RESET && LA157_0<=RESTORE)||LA157_0==RESUME||LA157_0==RETURNS||LA157_0==RIGHT||(LA157_0>=ROLLBACK && LA157_0<=ROW_FORMAT)||(LA157_0>=RTREE && LA157_0<=SCHEDULE)||LA157_0==SECOND||LA157_0==SECURITY||(LA157_0>=SERIAL && LA157_0<=SESSION_VARIABLE)||LA157_0==SHARE||(LA157_0>=SHUTDOWN && LA157_0<=SLAVE)||(LA157_0>=SNAPSHOT && LA157_0<=SOCKET)||(LA157_0>=SONAME && LA157_0<=SOURCE)||(LA157_0>=SQL_BUFFER_RESULT && LA157_0<=SQL_CACHE)||LA157_0==SQL_NO_CACHE||LA157_0==SQL_THREAD||LA157_0==START||(LA157_0>=STARTS && LA157_0<=STORAGE)||(LA157_0>=STRING && LA157_0<=SYSTEM_USER)||(LA157_0>=TABLES && LA157_0<=TEMPTABLE)||(LA157_0>=TEXT && LA157_0<=THAN)||(LA157_0>=TIME && LA157_0<=TIMESTAMP_DIFF)||(LA157_0>=TRANSACTION && LA157_0<=TRANSACTIONAL)||(LA157_0>=TRIGGERS && LA157_0<=UNDEFINED)||(LA157_0>=UNDOFILE && LA157_0<=UNINSTALL)||LA157_0==UNKNOWN||LA157_0==UNTIL||LA157_0==UPGRADE||LA157_0==USER||LA157_0==USE_FRM||(LA157_0>=UTC_DATE && LA157_0<=VALUE)||LA157_0==VALUE_PLACEHOLDER||(LA157_0>=VARIABLES && LA157_0<=VARIANCE)||(LA157_0>=VAR_POP && LA157_0<=WEEK)||(LA157_0>=WORK && LA157_0<=WRAPPER)||(LA157_0>=X509 && LA157_0<=XA)||LA157_0==YEAR||LA157_0==CONCAT))
			{
				alt157 = 4;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:888:4: op= MINUS lhs= unaryExpr
				{
				DebugLocation(888, 6);
				op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpr7625); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(op);

				DebugLocation(888, 16);
				PushFollow(Follow._unaryExpr_in_unaryExpr7629);
				lhs=unaryExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 888:27: -> ^( UNARY_MINUS[$op] $lhs)
				{
					DebugLocation(888, 30);
					// MySQL51Parser.g3:888:30: ^( UNARY_MINUS[$op] $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(888, 32);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY_MINUS, op), root_1);

					DebugLocation(888, 50);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:889:4: op= PLUS lhs= unaryExpr
				{
				DebugLocation(889, 6);
				op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpr7646); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(op);

				DebugLocation(889, 15);
				PushFollow(Follow._unaryExpr_in_unaryExpr7650);
				lhs=unaryExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 889:26: -> ^( UNARY_PLUS[$op] $lhs)
				{
					DebugLocation(889, 29);
					// MySQL51Parser.g3:889:29: ^( UNARY_PLUS[$op] $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(889, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY_PLUS, op), root_1);

					DebugLocation(889, 48);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:890:4: op= BITWISE_INVERSION lhs= unaryExpr
				{
				DebugLocation(890, 6);
				op=(IToken)Match(input,BITWISE_INVERSION,Follow._BITWISE_INVERSION_in_unaryExpr7667); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BITWISE_INVERSION.Add(op);

				DebugLocation(890, 28);
				PushFollow(Follow._unaryExpr_in_unaryExpr7671);
				lhs=unaryExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: BITWISE_INVERSION, lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 890:39: -> ^( BITWISE_INVERSION $lhs)
				{
					DebugLocation(890, 42);
					// MySQL51Parser.g3:890:42: ^( BITWISE_INVERSION $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(890, 44);
					root_1 = (object)adaptor.BecomeRoot(stream_BITWISE_INVERSION.NextNode(), root_1);

					DebugLocation(890, 63);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:891:4: lhsUnaryNot= unaryNotExpr
				{
				DebugLocation(891, 15);
				PushFollow(Follow._unaryNotExpr_in_unaryExpr7687);
				lhsUnaryNot=unaryNotExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryNotExpr.Add(lhsUnaryNot.Tree);


				{
				// AST REWRITE
				// elements: unaryNotExpr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 891:29: -> unaryNotExpr
				{
					DebugLocation(891, 32);
					adaptor.AddChild(root_0, stream_unaryNotExpr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpr", 64);
			LeaveRule("unaryExpr", 64);
			LeaveRule_unaryExpr();
		}
		DebugLocation(892, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpr"); }
		return retval;

	}
	// $ANTLR end "unaryExpr"

	private sealed partial class unaryNotExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryNotExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_unaryNotExpr();
	partial void LeaveRule_unaryNotExpr();

	// $ANTLR start "unaryNotExpr"
	// MySQL51Parser.g3:894:1: unaryNotExpr : (op= NOT_OP lhs= unaryNotExpr -> ^( NOT_OP $lhs) |lhsBin= binaryCollateExpr -> binaryCollateExpr );
	[GrammarRule("unaryNotExpr")]
	private MySQL51Parser.unaryNotExpr_return unaryNotExpr()
	{
		EnterRule_unaryNotExpr();
		EnterRule("unaryNotExpr", 65);
		TraceIn("unaryNotExpr", 65);
		MySQL51Parser.unaryNotExpr_return retval = new MySQL51Parser.unaryNotExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		MySQL51Parser.unaryNotExpr_return lhs = default(MySQL51Parser.unaryNotExpr_return);
		MySQL51Parser.binaryCollateExpr_return lhsBin = default(MySQL51Parser.binaryCollateExpr_return);

		object op_tree = default(object);
		RewriteRuleITokenStream stream_NOT_OP=new RewriteRuleITokenStream(adaptor,"token NOT_OP");
		RewriteRuleSubtreeStream stream_unaryNotExpr=new RewriteRuleSubtreeStream(adaptor,"rule unaryNotExpr");
		RewriteRuleSubtreeStream stream_binaryCollateExpr=new RewriteRuleSubtreeStream(adaptor,"rule binaryCollateExpr");
		try { DebugEnterRule(GrammarFileName, "unaryNotExpr");
		DebugLocation(894, 1);
		try
		{
			// MySQL51Parser.g3:895:2: (op= NOT_OP lhs= unaryNotExpr -> ^( NOT_OP $lhs) |lhsBin= binaryCollateExpr -> binaryCollateExpr )
			int alt158=2;
			try { DebugEnterDecision(158, false);
			int LA158_0 = input.LA(1);

			if ((LA158_0==NOT_OP))
			{
				alt158 = 1;
			}
			else if ((LA158_0==ACTION||(LA158_0>=ADDDATE && LA158_0<=ALGORITHM)||LA158_0==ANY||LA158_0==ASCII||(LA158_0>=AT && LA158_0<=BACKUP)||LA158_0==BEGIN||(LA158_0>=BINARY && LA158_0<=BIT)||(LA158_0>=BIT_AND && LA158_0<=BIT_XOR)||(LA158_0>=BLOCK && LA158_0<=BOOLEAN)||LA158_0==BTREE||(LA158_0>=BYTE && LA158_0<=CACHE)||(LA158_0>=CASCADED && LA158_0<=CHAIN)||(LA158_0>=CHANGED && LA158_0<=CHAR)||LA158_0==CHARSET||(LA158_0>=CHECKSUM && LA158_0<=COLLATION)||LA158_0==COLUMNS||LA158_0==COMMENT||(LA158_0>=COMMIT && LA158_0<=CONCURRENT)||(LA158_0>=CONNECTION && LA158_0<=CONSISTENT)||(LA158_0>=CONTAINS && LA158_0<=CONTEXT)||LA158_0==CONTRIBUTORS||(LA158_0>=COUNT && LA158_0<=CPU)||(LA158_0>=CUBE && LA158_0<=CURRENT_USER)||LA158_0==CURTIME||(LA158_0>=DATA && LA158_0<=DATABASE)||(LA158_0>=DATAFILE && LA158_0<=DATE_ADD)||LA158_0==DATE_SUB||LA158_0==DAY||LA158_0==DEALLOCATE||LA158_0==DEFINER||LA158_0==DELAY_KEY_WRITE||LA158_0==DES_KEY_FILE||(LA158_0>=DIRECTORY && LA158_0<=DISK)||LA158_0==DO||(LA158_0>=DUMPFILE && LA158_0<=DYNAMIC)||LA158_0==ENABLE||(LA158_0>=END && LA158_0<=ENUM)||(LA158_0>=ERRORS && LA158_0<=ESCAPE)||(LA158_0>=EVENT && LA158_0<=EVERY)||(LA158_0>=EXECUTE && LA158_0<=EXISTS)||LA158_0==EXPANSION||(LA158_0>=EXTENDED && LA158_0<=FAULTS)||(LA158_0>=FIELDS && LA158_0<=FIXED)||LA158_0==FLUSH||(LA158_0>=FOUND && LA158_0<=FRAC_SECOND)||LA158_0==FULL||(LA158_0>=FUNCTION && LA158_0<=GLOBAL_VARIABLE)||LA158_0==GRANTS||(LA158_0>=GROUP && LA158_0<=HASH)||(LA158_0>=HELP && LA158_0<=HEXA_VALUE)||(LA158_0>=HOST && LA158_0<=HOUR)||(LA158_0>=ID && LA158_0<=IFNULL)||LA158_0==IMPORT||LA158_0==INDEXES||LA158_0==INITIAL_SIZE||LA158_0==INNOBASE||(LA158_0>=INSERT && LA158_0<=INSTALL)||LA158_0==INTERVAL||(LA158_0>=INT_NUMBER && LA158_0<=IPC)||(LA158_0>=ISOLATION && LA158_0<=ISSUER)||LA158_0==KEY_BLOCK_SIZE||(LA158_0>=LABEL && LA158_0<=LCURLY)||(LA158_0>=LEAVES && LA158_0<=LEFT)||LA158_0==LESS||LA158_0==LEVEL||(LA158_0>=LINESTRING && LA158_0<=LIST)||LA158_0==LOCAL||(LA158_0>=LOCKS && LA158_0<=LOGFILE)||LA158_0==LOGS||(LA158_0>=LPAREN && LA158_0<=MASTER_SSL_KEY)||(LA158_0>=MASTER_USER && LA158_0<=MEDIUM)||(LA158_0>=MEMORY && LA158_0<=MID)||(LA158_0>=MIGRATE && LA158_0<=MIN)||LA158_0==MINUTE||(LA158_0>=MIN_ROWS && LA158_0<=MODE)||LA158_0==MODIFY||LA158_0==MONTH||(LA158_0>=MULTILINESTRING && LA158_0<=MUTEX)||(LA158_0>=NAME && LA158_0<=NATIONAL)||(LA158_0>=NCHAR && LA158_0<=NONE)||(LA158_0>=NOW && LA158_0<=NO_WAIT)||(LA158_0>=NULL && LA158_0<=NULLIF)||LA158_0==NUMBER||(LA158_0>=NVARCHAR && LA158_0<=OLD_PASSWORD)||LA158_0==ONE||(LA158_0>=ONE_SHOT && LA158_0<=OPEN)||LA158_0==OPTIONS||(LA158_0>=OWNER && LA158_0<=PLUGINS)||(LA158_0>=POINT && LA158_0<=POSITION)||(LA158_0>=PREPARE && LA158_0<=PREV)||LA158_0==PRIVILEGES||(LA158_0>=PROCESS && LA158_0<=PROFILES)||(LA158_0>=QUARTER && LA158_0<=QUICK)||(LA158_0>=REBUILD && LA158_0<=REDUNDANT)||(LA158_0>=RELAY_LOG_FILE && LA158_0<=RELAY_THREAD)||(LA158_0>=RELOAD && LA158_0<=REMOVE)||(LA158_0>=REORGANIZE && LA158_0<=REPLICATION)||(LA158_0>=RESET && LA158_0<=RESTORE)||LA158_0==RESUME||LA158_0==RETURNS||LA158_0==RIGHT||(LA158_0>=ROLLBACK && LA158_0<=ROW_FORMAT)||(LA158_0>=RTREE && LA158_0<=SCHEDULE)||LA158_0==SECOND||LA158_0==SECURITY||(LA158_0>=SERIAL && LA158_0<=SESSION_VARIABLE)||LA158_0==SHARE||(LA158_0>=SHUTDOWN && LA158_0<=SLAVE)||(LA158_0>=SNAPSHOT && LA158_0<=SOCKET)||(LA158_0>=SONAME && LA158_0<=SOURCE)||(LA158_0>=SQL_BUFFER_RESULT && LA158_0<=SQL_CACHE)||LA158_0==SQL_NO_CACHE||LA158_0==SQL_THREAD||LA158_0==START||(LA158_0>=STARTS && LA158_0<=STORAGE)||(LA158_0>=STRING && LA158_0<=SYSTEM_USER)||(LA158_0>=TABLES && LA158_0<=TEMPTABLE)||(LA158_0>=TEXT && LA158_0<=THAN)||(LA158_0>=TIME && LA158_0<=TIMESTAMP_DIFF)||(LA158_0>=TRANSACTION && LA158_0<=TRANSACTIONAL)||(LA158_0>=TRIGGERS && LA158_0<=UNDEFINED)||(LA158_0>=UNDOFILE && LA158_0<=UNINSTALL)||LA158_0==UNKNOWN||LA158_0==UNTIL||LA158_0==UPGRADE||LA158_0==USER||LA158_0==USE_FRM||(LA158_0>=UTC_DATE && LA158_0<=VALUE)||LA158_0==VALUE_PLACEHOLDER||(LA158_0>=VARIABLES && LA158_0<=VARIANCE)||(LA158_0>=VAR_POP && LA158_0<=WEEK)||(LA158_0>=WORK && LA158_0<=WRAPPER)||(LA158_0>=X509 && LA158_0<=XA)||LA158_0==YEAR||LA158_0==CONCAT))
			{
				alt158 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:895:4: op= NOT_OP lhs= unaryNotExpr
				{
				DebugLocation(895, 6);
				op=(IToken)Match(input,NOT_OP,Follow._NOT_OP_in_unaryNotExpr7705); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT_OP.Add(op);

				DebugLocation(895, 17);
				PushFollow(Follow._unaryNotExpr_in_unaryNotExpr7709);
				lhs=unaryNotExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryNotExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: NOT_OP, lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 895:31: -> ^( NOT_OP $lhs)
				{
					DebugLocation(895, 34);
					// MySQL51Parser.g3:895:34: ^( NOT_OP $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(895, 36);
					root_1 = (object)adaptor.BecomeRoot(stream_NOT_OP.NextNode(), root_1);

					DebugLocation(895, 44);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:896:4: lhsBin= binaryCollateExpr
				{
				DebugLocation(896, 10);
				PushFollow(Follow._binaryCollateExpr_in_unaryNotExpr7725);
				lhsBin=binaryCollateExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_binaryCollateExpr.Add(lhsBin.Tree);


				{
				// AST REWRITE
				// elements: binaryCollateExpr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 896:29: -> binaryCollateExpr
				{
					DebugLocation(896, 32);
					adaptor.AddChild(root_0, stream_binaryCollateExpr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryNotExpr", 65);
			LeaveRule("unaryNotExpr", 65);
			LeaveRule_unaryNotExpr();
		}
		DebugLocation(897, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryNotExpr"); }
		return retval;

	}
	// $ANTLR end "unaryNotExpr"

	private sealed partial class binaryCollateExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public binaryCollateExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_binaryCollateExpr();
	partial void LeaveRule_binaryCollateExpr();

	// $ANTLR start "binaryCollateExpr"
	// MySQL51Parser.g3:899:1: binaryCollateExpr : (op= BINARY lhs= binaryCollateExpr -> ^( BINARY $lhs) |op= COLLATE lhs= binaryCollateExpr -> ^( COLLATE $lhs) | intervalExpr );
	[GrammarRule("binaryCollateExpr")]
	private MySQL51Parser.binaryCollateExpr_return binaryCollateExpr()
	{
		EnterRule_binaryCollateExpr();
		EnterRule("binaryCollateExpr", 66);
		TraceIn("binaryCollateExpr", 66);
		MySQL51Parser.binaryCollateExpr_return retval = new MySQL51Parser.binaryCollateExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		MySQL51Parser.binaryCollateExpr_return lhs = default(MySQL51Parser.binaryCollateExpr_return);
		MySQL51Parser.intervalExpr_return intervalExpr363 = default(MySQL51Parser.intervalExpr_return);

		object op_tree = default(object);
		RewriteRuleITokenStream stream_BINARY=new RewriteRuleITokenStream(adaptor,"token BINARY");
		RewriteRuleITokenStream stream_COLLATE=new RewriteRuleITokenStream(adaptor,"token COLLATE");
		RewriteRuleSubtreeStream stream_binaryCollateExpr=new RewriteRuleSubtreeStream(adaptor,"rule binaryCollateExpr");
		try { DebugEnterRule(GrammarFileName, "binaryCollateExpr");
		DebugLocation(899, 1);
		try
		{
			// MySQL51Parser.g3:900:2: (op= BINARY lhs= binaryCollateExpr -> ^( BINARY $lhs) |op= COLLATE lhs= binaryCollateExpr -> ^( COLLATE $lhs) | intervalExpr )
			int alt159=3;
			try { DebugEnterDecision(159, false);
			try
			{
				alt159 = dfa159.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:900:4: op= BINARY lhs= binaryCollateExpr
				{
				DebugLocation(900, 6);
				op=(IToken)Match(input,BINARY,Follow._BINARY_in_binaryCollateExpr7742); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BINARY.Add(op);

				DebugLocation(900, 17);
				PushFollow(Follow._binaryCollateExpr_in_binaryCollateExpr7746);
				lhs=binaryCollateExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_binaryCollateExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: BINARY, lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 900:37: -> ^( BINARY $lhs)
				{
					DebugLocation(900, 40);
					// MySQL51Parser.g3:900:40: ^( BINARY $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(900, 42);
					root_1 = (object)adaptor.BecomeRoot(stream_BINARY.NextNode(), root_1);

					DebugLocation(900, 50);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:901:4: op= COLLATE lhs= binaryCollateExpr
				{
				DebugLocation(901, 6);
				op=(IToken)Match(input,COLLATE,Follow._COLLATE_in_binaryCollateExpr7763); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLLATE.Add(op);

				DebugLocation(901, 18);
				PushFollow(Follow._binaryCollateExpr_in_binaryCollateExpr7767);
				lhs=binaryCollateExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_binaryCollateExpr.Add(lhs.Tree);


				{
				// AST REWRITE
				// elements: COLLATE, lhs
				// token labels: 
				// rule labels: lhs, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 901:37: -> ^( COLLATE $lhs)
				{
					DebugLocation(901, 40);
					// MySQL51Parser.g3:901:40: ^( COLLATE $lhs)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(901, 42);
					root_1 = (object)adaptor.BecomeRoot(stream_COLLATE.NextNode(), root_1);

					DebugLocation(901, 51);
					adaptor.AddChild(root_1, stream_lhs.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:902:4: intervalExpr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(902, 4);
				PushFollow(Follow._intervalExpr_in_binaryCollateExpr7781);
				intervalExpr363=intervalExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, intervalExpr363.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binaryCollateExpr", 66);
			LeaveRule("binaryCollateExpr", 66);
			LeaveRule_binaryCollateExpr();
		}
		DebugLocation(903, 1);
		} finally { DebugExitRule(GrammarFileName, "binaryCollateExpr"); }
		return retval;

	}
	// $ANTLR end "binaryCollateExpr"

	private sealed partial class intervalExpr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public intervalExpr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_intervalExpr();
	partial void LeaveRule_intervalExpr();

	// $ANTLR start "intervalExpr"
	// MySQL51Parser.g3:909:1: intervalExpr : ( ( INTERVAL ~ ( LPAREN ) )=> INTERVAL expr timeUnit {...}? -> ^( INTERVAL expr timeUnit ) |lhsPrim= primary -> primary );
	[GrammarRule("intervalExpr")]
	private MySQL51Parser.intervalExpr_return intervalExpr()
	{
		EnterRule_intervalExpr();
		EnterRule("intervalExpr", 67);
		TraceIn("intervalExpr", 67);
		MySQL51Parser.intervalExpr_return retval = new MySQL51Parser.intervalExpr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INTERVAL364 = default(IToken);
		MySQL51Parser.primary_return lhsPrim = default(MySQL51Parser.primary_return);
		MySQL51Parser.expr_return expr365 = default(MySQL51Parser.expr_return);
		MySQL51Parser.timeUnit_return timeUnit366 = default(MySQL51Parser.timeUnit_return);

		object INTERVAL364_tree = default(object);
		RewriteRuleITokenStream stream_INTERVAL=new RewriteRuleITokenStream(adaptor,"token INTERVAL");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_timeUnit=new RewriteRuleSubtreeStream(adaptor,"rule timeUnit");
		RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
		try { DebugEnterRule(GrammarFileName, "intervalExpr");
		DebugLocation(909, 1);
		try
		{
			// MySQL51Parser.g3:910:2: ( ( INTERVAL ~ ( LPAREN ) )=> INTERVAL expr timeUnit {...}? -> ^( INTERVAL expr timeUnit ) |lhsPrim= primary -> primary )
			int alt160=2;
			try { DebugEnterDecision(160, false);
			try
			{
				alt160 = dfa160.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:910:4: ( INTERVAL ~ ( LPAREN ) )=> INTERVAL expr timeUnit {...}?
				{
				DebugLocation(910, 27);
				INTERVAL364=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_intervalExpr7804); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL364);

				DebugLocation(910, 36);
				PushFollow(Follow._expr_in_intervalExpr7806);
				expr365=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr365.Tree);
				DebugLocation(910, 41);
				PushFollow(Follow._timeUnit_in_intervalExpr7808);
				timeUnit366=timeUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timeUnit.Add(timeUnit366.Tree);
				DebugLocation(910, 50);
				if (!((input.LA(1) == PLUS || input.LA(1) == MINUS)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "intervalExpr", "input.LA(1) == PLUS || input.LA(1) == MINUS");
				}


				{
				// AST REWRITE
				// elements: INTERVAL, expr, timeUnit
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 910:97: -> ^( INTERVAL expr timeUnit )
				{
					DebugLocation(910, 100);
					// MySQL51Parser.g3:910:100: ^( INTERVAL expr timeUnit )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(910, 102);
					root_1 = (object)adaptor.BecomeRoot(stream_INTERVAL.NextNode(), root_1);

					DebugLocation(910, 111);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(910, 116);
					adaptor.AddChild(root_1, stream_timeUnit.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:911:4: lhsPrim= primary
				{
				DebugLocation(911, 11);
				PushFollow(Follow._primary_in_intervalExpr7827);
				lhsPrim=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primary.Add(lhsPrim.Tree);


				{
				// AST REWRITE
				// elements: primary
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 911:20: -> primary
				{
					DebugLocation(911, 23);
					adaptor.AddChild(root_0, stream_primary.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("intervalExpr", 67);
			LeaveRule("intervalExpr", 67);
			LeaveRule_intervalExpr();
		}
		DebugLocation(912, 1);
		} finally { DebugExitRule(GrammarFileName, "intervalExpr"); }
		return retval;

	}
	// $ANTLR end "intervalExpr"

	private sealed partial class primary_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primary_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_primary();
	partial void LeaveRule_primary();

	// $ANTLR start "primary"
	// MySQL51Parser.g3:914:1: primary : ( (lhsLit= literal )=> literal | ( subselect )=> subselect | EXISTS subselect -> ^( EXISTS subselect ) | param_marker | BINARY primary | ident | LPAREN exprList RPAREN | ROW LPAREN exprList RPAREN | LCURLY ident expr RCURLY | match_expr | case_expr );
	[GrammarRule("primary")]
	private MySQL51Parser.primary_return primary()
	{
		EnterRule_primary();
		EnterRule("primary", 68);
		TraceIn("primary", 68);
		MySQL51Parser.primary_return retval = new MySQL51Parser.primary_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EXISTS369 = default(IToken);
		IToken BINARY372 = default(IToken);
		IToken LPAREN375 = default(IToken);
		IToken RPAREN377 = default(IToken);
		IToken ROW378 = default(IToken);
		IToken LPAREN379 = default(IToken);
		IToken RPAREN381 = default(IToken);
		IToken LCURLY382 = default(IToken);
		IToken RCURLY385 = default(IToken);
		MySQL51Parser.literal_return literal367 = default(MySQL51Parser.literal_return);
		MySQL51Parser.subselect_return subselect368 = default(MySQL51Parser.subselect_return);
		MySQL51Parser.subselect_return subselect370 = default(MySQL51Parser.subselect_return);
		MySQL51Parser.param_marker_return param_marker371 = default(MySQL51Parser.param_marker_return);
		MySQL51Parser.primary_return primary373 = default(MySQL51Parser.primary_return);
		MySQL51Parser.ident_return ident374 = default(MySQL51Parser.ident_return);
		MySQL51Parser.exprList_return exprList376 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.exprList_return exprList380 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.ident_return ident383 = default(MySQL51Parser.ident_return);
		MySQL51Parser.expr_return expr384 = default(MySQL51Parser.expr_return);
		MySQL51Parser.match_expr_return match_expr386 = default(MySQL51Parser.match_expr_return);
		MySQL51Parser.case_expr_return case_expr387 = default(MySQL51Parser.case_expr_return);

		object EXISTS369_tree = default(object);
		object BINARY372_tree = default(object);
		object LPAREN375_tree = default(object);
		object RPAREN377_tree = default(object);
		object ROW378_tree = default(object);
		object LPAREN379_tree = default(object);
		object RPAREN381_tree = default(object);
		object LCURLY382_tree = default(object);
		object RCURLY385_tree = default(object);
		RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
		RewriteRuleSubtreeStream stream_subselect=new RewriteRuleSubtreeStream(adaptor,"rule subselect");
		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(914, 1);
		try
		{
			// MySQL51Parser.g3:915:2: ( (lhsLit= literal )=> literal | ( subselect )=> subselect | EXISTS subselect -> ^( EXISTS subselect ) | param_marker | BINARY primary | ident | LPAREN exprList RPAREN | ROW LPAREN exprList RPAREN | LCURLY ident expr RCURLY | match_expr | case_expr )
			int alt161=11;
			try { DebugEnterDecision(161, false);
			try
			{
				alt161 = dfa161.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:916:3: (lhsLit= literal )=> literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(916, 25);
				PushFollow(Follow._literal_in_primary7858);
				literal367=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal367.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:917:4: ( subselect )=> subselect
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(917, 21);
				PushFollow(Follow._subselect_in_primary7871);
				subselect368=subselect();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subselect368.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:918:4: EXISTS subselect
				{
				DebugLocation(918, 4);
				EXISTS369=(IToken)Match(input,EXISTS,Follow._EXISTS_in_primary7876); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS369);

				DebugLocation(918, 11);
				PushFollow(Follow._subselect_in_primary7878);
				subselect370=subselect();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subselect.Add(subselect370.Tree);


				{
				// AST REWRITE
				// elements: EXISTS, subselect
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 918:21: -> ^( EXISTS subselect )
				{
					DebugLocation(918, 24);
					// MySQL51Parser.g3:918:24: ^( EXISTS subselect )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(918, 26);
					root_1 = (object)adaptor.BecomeRoot(stream_EXISTS.NextNode(), root_1);

					DebugLocation(918, 33);
					adaptor.AddChild(root_1, stream_subselect.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:921:5: param_marker
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(921, 5);
				PushFollow(Follow._param_marker_in_primary7896);
				param_marker371=param_marker();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, param_marker371.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:923:4: BINARY primary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(923, 4);
				BINARY372=(IToken)Match(input,BINARY,Follow._BINARY_in_primary7905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BINARY372_tree = (object)adaptor.Create(BINARY372);
				adaptor.AddChild(root_0, BINARY372_tree);
				}
				DebugLocation(923, 11);
				PushFollow(Follow._primary_in_primary7907);
				primary373=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary373.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:924:4: ident
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(924, 4);
				PushFollow(Follow._ident_in_primary7912);
				ident374=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident374.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:925:4: LPAREN exprList RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(925, 4);
				LPAREN375=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primary7917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN375_tree = (object)adaptor.Create(LPAREN375);
				adaptor.AddChild(root_0, LPAREN375_tree);
				}
				DebugLocation(925, 11);
				PushFollow(Follow._exprList_in_primary7919);
				exprList376=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exprList376.Tree);
				DebugLocation(925, 20);
				RPAREN377=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primary7921); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN377_tree = (object)adaptor.Create(RPAREN377);
				adaptor.AddChild(root_0, RPAREN377_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:926:4: ROW LPAREN exprList RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(926, 4);
				ROW378=(IToken)Match(input,ROW,Follow._ROW_in_primary7926); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ROW378_tree = (object)adaptor.Create(ROW378);
				adaptor.AddChild(root_0, ROW378_tree);
				}
				DebugLocation(926, 8);
				LPAREN379=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primary7928); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN379_tree = (object)adaptor.Create(LPAREN379);
				adaptor.AddChild(root_0, LPAREN379_tree);
				}
				DebugLocation(926, 15);
				PushFollow(Follow._exprList_in_primary7930);
				exprList380=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exprList380.Tree);
				DebugLocation(926, 24);
				RPAREN381=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primary7932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN381_tree = (object)adaptor.Create(RPAREN381);
				adaptor.AddChild(root_0, RPAREN381_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:927:4: LCURLY ident expr RCURLY
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(927, 4);
				LCURLY382=(IToken)Match(input,LCURLY,Follow._LCURLY_in_primary7937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LCURLY382_tree = (object)adaptor.Create(LCURLY382);
				adaptor.AddChild(root_0, LCURLY382_tree);
				}
				DebugLocation(927, 11);
				PushFollow(Follow._ident_in_primary7939);
				ident383=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident383.Tree);
				DebugLocation(927, 17);
				PushFollow(Follow._expr_in_primary7941);
				expr384=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr384.Tree);
				DebugLocation(927, 22);
				RCURLY385=(IToken)Match(input,RCURLY,Follow._RCURLY_in_primary7943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RCURLY385_tree = (object)adaptor.Create(RCURLY385);
				adaptor.AddChild(root_0, RCURLY385_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:928:4: match_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(928, 4);
				PushFollow(Follow._match_expr_in_primary7948);
				match_expr386=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr386.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:929:4: case_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(929, 4);
				PushFollow(Follow._case_expr_in_primary7953);
				case_expr387=case_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case_expr387.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary", 68);
			LeaveRule("primary", 68);
			LeaveRule_primary();
		}
		DebugLocation(931, 1);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	private sealed partial class param_marker_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public param_marker_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_param_marker();
	partial void LeaveRule_param_marker();

	// $ANTLR start "param_marker"
	// MySQL51Parser.g3:933:1: param_marker : VALUE_PLACEHOLDER ident -> ^( VALUE_PLACEHOLDER ident ) ;
	[GrammarRule("param_marker")]
	private MySQL51Parser.param_marker_return param_marker()
	{
		EnterRule_param_marker();
		EnterRule("param_marker", 69);
		TraceIn("param_marker", 69);
		MySQL51Parser.param_marker_return retval = new MySQL51Parser.param_marker_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VALUE_PLACEHOLDER388 = default(IToken);
		MySQL51Parser.ident_return ident389 = default(MySQL51Parser.ident_return);

		object VALUE_PLACEHOLDER388_tree = default(object);
		RewriteRuleITokenStream stream_VALUE_PLACEHOLDER=new RewriteRuleITokenStream(adaptor,"token VALUE_PLACEHOLDER");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "param_marker");
		DebugLocation(933, 1);
		try
		{
			// MySQL51Parser.g3:934:2: ( VALUE_PLACEHOLDER ident -> ^( VALUE_PLACEHOLDER ident ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:934:4: VALUE_PLACEHOLDER ident
			{
			DebugLocation(934, 4);
			VALUE_PLACEHOLDER388=(IToken)Match(input,VALUE_PLACEHOLDER,Follow._VALUE_PLACEHOLDER_in_param_marker7967); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VALUE_PLACEHOLDER.Add(VALUE_PLACEHOLDER388);

			DebugLocation(934, 22);
			PushFollow(Follow._ident_in_param_marker7969);
			ident389=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident389.Tree);


			{
			// AST REWRITE
			// elements: VALUE_PLACEHOLDER, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 934:28: -> ^( VALUE_PLACEHOLDER ident )
			{
				DebugLocation(934, 31);
				// MySQL51Parser.g3:934:31: ^( VALUE_PLACEHOLDER ident )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(934, 34);
				root_1 = (object)adaptor.BecomeRoot(stream_VALUE_PLACEHOLDER.NextNode(), root_1);

				DebugLocation(934, 52);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param_marker", 69);
			LeaveRule("param_marker", 69);
			LeaveRule_param_marker();
		}
		DebugLocation(935, 1);
		} finally { DebugExitRule(GrammarFileName, "param_marker"); }
		return retval;

	}
	// $ANTLR end "param_marker"

	private sealed partial class match_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public match_expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// MySQL51Parser.g3:937:1: match_expr : MATCH LPAREN column_name_list RPAREN AGAINST LPAREN expr ( ( IN BOOLEAN MODE ) | ( WITH QUERY EXPANSION ) )? RPAREN ;
	[GrammarRule("match_expr")]
	private MySQL51Parser.match_expr_return match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 70);
		TraceIn("match_expr", 70);
		MySQL51Parser.match_expr_return retval = new MySQL51Parser.match_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken MATCH390 = default(IToken);
		IToken LPAREN391 = default(IToken);
		IToken RPAREN393 = default(IToken);
		IToken AGAINST394 = default(IToken);
		IToken LPAREN395 = default(IToken);
		IToken IN397 = default(IToken);
		IToken BOOLEAN398 = default(IToken);
		IToken MODE399 = default(IToken);
		IToken WITH400 = default(IToken);
		IToken QUERY401 = default(IToken);
		IToken EXPANSION402 = default(IToken);
		IToken RPAREN403 = default(IToken);
		MySQL51Parser.column_name_list_return column_name_list392 = default(MySQL51Parser.column_name_list_return);
		MySQL51Parser.expr_return expr396 = default(MySQL51Parser.expr_return);

		object MATCH390_tree = default(object);
		object LPAREN391_tree = default(object);
		object RPAREN393_tree = default(object);
		object AGAINST394_tree = default(object);
		object LPAREN395_tree = default(object);
		object IN397_tree = default(object);
		object BOOLEAN398_tree = default(object);
		object MODE399_tree = default(object);
		object WITH400_tree = default(object);
		object QUERY401_tree = default(object);
		object EXPANSION402_tree = default(object);
		object RPAREN403_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(937, 1);
		try
		{
			// MySQL51Parser.g3:938:2: ( MATCH LPAREN column_name_list RPAREN AGAINST LPAREN expr ( ( IN BOOLEAN MODE ) | ( WITH QUERY EXPANSION ) )? RPAREN )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:938:4: MATCH LPAREN column_name_list RPAREN AGAINST LPAREN expr ( ( IN BOOLEAN MODE ) | ( WITH QUERY EXPANSION ) )? RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(938, 4);
			MATCH390=(IToken)Match(input,MATCH,Follow._MATCH_in_match_expr7990); if (state.failed) return retval;
			if (state.backtracking == 0) {
			MATCH390_tree = (object)adaptor.Create(MATCH390);
			adaptor.AddChild(root_0, MATCH390_tree);
			}
			DebugLocation(938, 10);
			LPAREN391=(IToken)Match(input,LPAREN,Follow._LPAREN_in_match_expr7992); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN391_tree = (object)adaptor.Create(LPAREN391);
			adaptor.AddChild(root_0, LPAREN391_tree);
			}
			DebugLocation(938, 17);
			PushFollow(Follow._column_name_list_in_match_expr7994);
			column_name_list392=column_name_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, column_name_list392.Tree);
			DebugLocation(938, 34);
			RPAREN393=(IToken)Match(input,RPAREN,Follow._RPAREN_in_match_expr7996); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN393_tree = (object)adaptor.Create(RPAREN393);
			adaptor.AddChild(root_0, RPAREN393_tree);
			}
			DebugLocation(938, 41);
			AGAINST394=(IToken)Match(input,AGAINST,Follow._AGAINST_in_match_expr7998); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AGAINST394_tree = (object)adaptor.Create(AGAINST394);
			adaptor.AddChild(root_0, AGAINST394_tree);
			}
			DebugLocation(938, 49);
			LPAREN395=(IToken)Match(input,LPAREN,Follow._LPAREN_in_match_expr8000); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN395_tree = (object)adaptor.Create(LPAREN395);
			adaptor.AddChild(root_0, LPAREN395_tree);
			}
			DebugLocation(938, 56);
			PushFollow(Follow._expr_in_match_expr8002);
			expr396=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr396.Tree);
			DebugLocation(938, 61);
			// MySQL51Parser.g3:938:61: ( ( IN BOOLEAN MODE ) | ( WITH QUERY EXPANSION ) )?
			int alt162=3;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_0 = input.LA(1);

			if ((LA162_0==IN))
			{
				alt162 = 1;
			}
			else if ((LA162_0==WITH))
			{
				alt162 = 2;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:938:62: ( IN BOOLEAN MODE )
				{
				DebugLocation(938, 62);
				// MySQL51Parser.g3:938:62: ( IN BOOLEAN MODE )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:938:64: IN BOOLEAN MODE
				{
				DebugLocation(938, 64);
				IN397=(IToken)Match(input,IN,Follow._IN_in_match_expr8007); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IN397_tree = (object)adaptor.Create(IN397);
				adaptor.AddChild(root_0, IN397_tree);
				}
				DebugLocation(938, 67);
				BOOLEAN398=(IToken)Match(input,BOOLEAN,Follow._BOOLEAN_in_match_expr8009); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BOOLEAN398_tree = (object)adaptor.Create(BOOLEAN398);
				adaptor.AddChild(root_0, BOOLEAN398_tree);
				}
				DebugLocation(938, 75);
				MODE399=(IToken)Match(input,MODE,Follow._MODE_in_match_expr8011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MODE399_tree = (object)adaptor.Create(MODE399);
				adaptor.AddChild(root_0, MODE399_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:938:84: ( WITH QUERY EXPANSION )
				{
				DebugLocation(938, 84);
				// MySQL51Parser.g3:938:84: ( WITH QUERY EXPANSION )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:938:86: WITH QUERY EXPANSION
				{
				DebugLocation(938, 86);
				WITH400=(IToken)Match(input,WITH,Follow._WITH_in_match_expr8019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WITH400_tree = (object)adaptor.Create(WITH400);
				adaptor.AddChild(root_0, WITH400_tree);
				}
				DebugLocation(938, 91);
				QUERY401=(IToken)Match(input,QUERY,Follow._QUERY_in_match_expr8021); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QUERY401_tree = (object)adaptor.Create(QUERY401);
				adaptor.AddChild(root_0, QUERY401_tree);
				}
				DebugLocation(938, 97);
				EXPANSION402=(IToken)Match(input,EXPANSION,Follow._EXPANSION_in_match_expr8023); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXPANSION402_tree = (object)adaptor.Create(EXPANSION402);
				adaptor.AddChild(root_0, EXPANSION402_tree);
				}

				}


				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(938, 111);
			RPAREN403=(IToken)Match(input,RPAREN,Follow._RPAREN_in_match_expr8029); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN403_tree = (object)adaptor.Create(RPAREN403);
			adaptor.AddChild(root_0, RPAREN403_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 70);
			LeaveRule("match_expr", 70);
			LeaveRule_match_expr();
		}
		DebugLocation(939, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	private sealed partial class case_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public case_expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_case_expr();
	partial void LeaveRule_case_expr();

	// $ANTLR start "case_expr"
	// MySQL51Parser.g3:941:1: case_expr : CASE ( ( WHEN ( expr )=> expr THEN expr )+ ({...}? ELSE expr )? END ) ;
	[GrammarRule("case_expr")]
	private MySQL51Parser.case_expr_return case_expr()
	{
		EnterRule_case_expr();
		EnterRule("case_expr", 71);
		TraceIn("case_expr", 71);
		MySQL51Parser.case_expr_return retval = new MySQL51Parser.case_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CASE404 = default(IToken);
		IToken WHEN405 = default(IToken);
		IToken THEN407 = default(IToken);
		IToken ELSE409 = default(IToken);
		IToken END411 = default(IToken);
		MySQL51Parser.expr_return expr406 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr408 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr410 = default(MySQL51Parser.expr_return);

		object CASE404_tree = default(object);
		object WHEN405_tree = default(object);
		object THEN407_tree = default(object);
		object ELSE409_tree = default(object);
		object END411_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "case_expr");
		DebugLocation(941, 1);
		try
		{
			// MySQL51Parser.g3:942:2: ( CASE ( ( WHEN ( expr )=> expr THEN expr )+ ({...}? ELSE expr )? END ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:942:4: CASE ( ( WHEN ( expr )=> expr THEN expr )+ ({...}? ELSE expr )? END )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(942, 4);
			CASE404=(IToken)Match(input,CASE,Follow._CASE_in_case_expr8040); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CASE404_tree = (object)adaptor.Create(CASE404);
			adaptor.AddChild(root_0, CASE404_tree);
			}
			DebugLocation(943, 3);
			// MySQL51Parser.g3:943:3: ( ( WHEN ( expr )=> expr THEN expr )+ ({...}? ELSE expr )? END )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:943:5: ( WHEN ( expr )=> expr THEN expr )+ ({...}? ELSE expr )? END
			{
			DebugLocation(943, 5);
			// MySQL51Parser.g3:943:5: ( WHEN ( expr )=> expr THEN expr )+
			int cnt163=0;
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==WHEN))
				{
					alt163 = 1;
				}


				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:943:7: WHEN ( expr )=> expr THEN expr
					{
					DebugLocation(943, 7);
					WHEN405=(IToken)Match(input,WHEN,Follow._WHEN_in_case_expr8051); if (state.failed) return retval;
					if (state.backtracking == 0) {
					WHEN405_tree = (object)adaptor.Create(WHEN405);
					adaptor.AddChild(root_0, WHEN405_tree);
					}
					DebugLocation(943, 24);
					PushFollow(Follow._expr_in_case_expr8061);
					expr406=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr406.Tree);
					DebugLocation(943, 29);
					THEN407=(IToken)Match(input,THEN,Follow._THEN_in_case_expr8063); if (state.failed) return retval;
					if (state.backtracking == 0) {
					THEN407_tree = (object)adaptor.Create(THEN407);
					adaptor.AddChild(root_0, THEN407_tree);
					}
					DebugLocation(943, 34);
					PushFollow(Follow._expr_in_case_expr8065);
					expr408=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr408.Tree);

					}
					break;

				default:
					if (cnt163 >= 1)
						goto loop163;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee163 = new EarlyExitException( 163, input );
					DebugRecognitionException(eee163);
					throw eee163;
				}
				cnt163++;
			}
			loop163:
				;

			} finally { DebugExitSubRule(163); }

			DebugLocation(943, 42);
			// MySQL51Parser.g3:943:42: ({...}? ELSE expr )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_0 = input.LA(1);

			if ((LA164_0==ELSE))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:943:44: {...}? ELSE expr
				{
				DebugLocation(943, 44);
				if (!(( input.LA(1) == ELSE )))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "case_expr", " input.LA(1) == ELSE ");
				}
				DebugLocation(943, 69);
				ELSE409=(IToken)Match(input,ELSE,Follow._ELSE_in_case_expr8074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ELSE409_tree = (object)adaptor.Create(ELSE409);
				adaptor.AddChild(root_0, ELSE409_tree);
				}
				DebugLocation(943, 74);
				PushFollow(Follow._expr_in_case_expr8076);
				expr410=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr410.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(943, 82);
			END411=(IToken)Match(input,END,Follow._END_in_case_expr8081); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END411_tree = (object)adaptor.Create(END411);
			adaptor.AddChild(root_0, END411_tree);
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_expr", 71);
			LeaveRule("case_expr", 71);
			LeaveRule_case_expr();
		}
		DebugLocation(944, 1);
		} finally { DebugExitRule(GrammarFileName, "case_expr"); }
		return retval;

	}
	// $ANTLR end "case_expr"

	private sealed partial class case_stmt_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public case_stmt_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_case_stmt();
	partial void LeaveRule_case_stmt();

	// $ANTLR start "case_stmt"
	// MySQL51Parser.g3:954:1: case_stmt : ( CASE ( ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END ) | ( primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE ) );
	[GrammarRule("case_stmt")]
	private MySQL51Parser.case_stmt_return case_stmt()
	{
		EnterRule_case_stmt();
		EnterRule("case_stmt", 72);
		TraceIn("case_stmt", 72);
		MySQL51Parser.case_stmt_return retval = new MySQL51Parser.case_stmt_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CASE412 = default(IToken);
		IToken WHEN413 = default(IToken);
		IToken THEN415 = default(IToken);
		IToken ELSE417 = default(IToken);
		IToken END419 = default(IToken);
		IToken WHEN421 = default(IToken);
		IToken THEN423 = default(IToken);
		IToken ELSE425 = default(IToken);
		IToken END427 = default(IToken);
		IToken CASE428 = default(IToken);
		MySQL51Parser.expr_return expr414 = default(MySQL51Parser.expr_return);
		MySQL51Parser.statement_list_return statement_list416 = default(MySQL51Parser.statement_list_return);
		MySQL51Parser.statement_list_return statement_list418 = default(MySQL51Parser.statement_list_return);
		MySQL51Parser.primary_return primary420 = default(MySQL51Parser.primary_return);
		MySQL51Parser.primary_return primary422 = default(MySQL51Parser.primary_return);
		MySQL51Parser.statement_list_return statement_list424 = default(MySQL51Parser.statement_list_return);
		MySQL51Parser.statement_list_return statement_list426 = default(MySQL51Parser.statement_list_return);

		object CASE412_tree = default(object);
		object WHEN413_tree = default(object);
		object THEN415_tree = default(object);
		object ELSE417_tree = default(object);
		object END419_tree = default(object);
		object WHEN421_tree = default(object);
		object THEN423_tree = default(object);
		object ELSE425_tree = default(object);
		object END427_tree = default(object);
		object CASE428_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "case_stmt");
		DebugLocation(954, 1);
		try
		{
			// MySQL51Parser.g3:955:2: ( CASE ( ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END ) | ( primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE ) )
			int alt169=2;
			try { DebugEnterDecision(169, false);
			try
			{
				alt169 = dfa169.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:955:4: CASE ( ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(955, 4);
				CASE412=(IToken)Match(input,CASE,Follow._CASE_in_case_stmt8097); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CASE412_tree = (object)adaptor.Create(CASE412);
				adaptor.AddChild(root_0, CASE412_tree);
				}
				DebugLocation(956, 3);
				// MySQL51Parser.g3:956:3: ( ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:956:5: ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END
				{
				DebugLocation(956, 5);
				// MySQL51Parser.g3:956:5: ( WHEN expr THEN statement_list )+
				int cnt165=0;
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==WHEN))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:956:7: WHEN expr THEN statement_list
						{
						DebugLocation(956, 7);
						WHEN413=(IToken)Match(input,WHEN,Follow._WHEN_in_case_stmt8106); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WHEN413_tree = (object)adaptor.Create(WHEN413);
						adaptor.AddChild(root_0, WHEN413_tree);
						}
						DebugLocation(956, 12);
						PushFollow(Follow._expr_in_case_stmt8108);
						expr414=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expr414.Tree);
						DebugLocation(956, 17);
						THEN415=(IToken)Match(input,THEN,Follow._THEN_in_case_stmt8110); if (state.failed) return retval;
						if (state.backtracking == 0) {
						THEN415_tree = (object)adaptor.Create(THEN415);
						adaptor.AddChild(root_0, THEN415_tree);
						}
						DebugLocation(956, 22);
						PushFollow(Follow._statement_list_in_case_stmt8112);
						statement_list416=statement_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list416.Tree);

						}
						break;

					default:
						if (cnt165 >= 1)
							goto loop165;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee165 = new EarlyExitException( 165, input );
						DebugRecognitionException(eee165);
						throw eee165;
					}
					cnt165++;
				}
				loop165:
					;

				} finally { DebugExitSubRule(165); }

				DebugLocation(956, 40);
				// MySQL51Parser.g3:956:40: ( ELSE statement_list )?
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==ELSE))
				{
					alt166 = 1;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:956:42: ELSE statement_list
					{
					DebugLocation(956, 42);
					ELSE417=(IToken)Match(input,ELSE,Follow._ELSE_in_case_stmt8119); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ELSE417_tree = (object)adaptor.Create(ELSE417);
					adaptor.AddChild(root_0, ELSE417_tree);
					}
					DebugLocation(956, 47);
					PushFollow(Follow._statement_list_in_case_stmt8121);
					statement_list418=statement_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list418.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(166); }

				DebugLocation(956, 65);
				END419=(IToken)Match(input,END,Follow._END_in_case_stmt8126); if (state.failed) return retval;
				if (state.backtracking == 0) {
				END419_tree = (object)adaptor.Create(END419);
				adaptor.AddChild(root_0, END419_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:957:4: ( primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(957, 4);
				// MySQL51Parser.g3:957:4: ( primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:957:6: primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE
				{
				DebugLocation(957, 6);
				PushFollow(Follow._primary_in_case_stmt8135);
				primary420=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary420.Tree);
				DebugLocation(957, 14);
				// MySQL51Parser.g3:957:14: ( WHEN primary THEN statement_list )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==WHEN))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:957:16: WHEN primary THEN statement_list
						{
						DebugLocation(957, 16);
						WHEN421=(IToken)Match(input,WHEN,Follow._WHEN_in_case_stmt8139); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WHEN421_tree = (object)adaptor.Create(WHEN421);
						adaptor.AddChild(root_0, WHEN421_tree);
						}
						DebugLocation(957, 21);
						PushFollow(Follow._primary_in_case_stmt8141);
						primary422=primary();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary422.Tree);
						DebugLocation(957, 29);
						THEN423=(IToken)Match(input,THEN,Follow._THEN_in_case_stmt8143); if (state.failed) return retval;
						if (state.backtracking == 0) {
						THEN423_tree = (object)adaptor.Create(THEN423);
						adaptor.AddChild(root_0, THEN423_tree);
						}
						DebugLocation(957, 34);
						PushFollow(Follow._statement_list_in_case_stmt8145);
						statement_list424=statement_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list424.Tree);

						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(957, 52);
				// MySQL51Parser.g3:957:52: ( ELSE statement_list )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==ELSE))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:957:54: ELSE statement_list
					{
					DebugLocation(957, 54);
					ELSE425=(IToken)Match(input,ELSE,Follow._ELSE_in_case_stmt8152); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ELSE425_tree = (object)adaptor.Create(ELSE425);
					adaptor.AddChild(root_0, ELSE425_tree);
					}
					DebugLocation(957, 59);
					PushFollow(Follow._statement_list_in_case_stmt8154);
					statement_list426=statement_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list426.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(957, 77);
				END427=(IToken)Match(input,END,Follow._END_in_case_stmt8159); if (state.failed) return retval;
				if (state.backtracking == 0) {
				END427_tree = (object)adaptor.Create(END427);
				adaptor.AddChild(root_0, END427_tree);
				}
				DebugLocation(957, 81);
				CASE428=(IToken)Match(input,CASE,Follow._CASE_in_case_stmt8161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CASE428_tree = (object)adaptor.Create(CASE428);
				adaptor.AddChild(root_0, CASE428_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_stmt", 72);
			LeaveRule("case_stmt", 72);
			LeaveRule_case_stmt();
		}
		DebugLocation(958, 1);
		} finally { DebugExitRule(GrammarFileName, "case_stmt"); }
		return retval;

	}
	// $ANTLR end "case_stmt"

	private sealed partial class literal_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public literal_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// MySQL51Parser.g3:960:1: literal : (value= STRING |value= NUMBER |value= INT_NUMBER |value= GLOBAL_VARIABLE |value= SESSION_VARIABLE |value= VALUE_PLACEHOLDER |value= BINARY_VALUE |value= HEXA_VALUE |value= NULL |value= TRUE |value= FALSE | ( functionCall )=> functionCall | field_name );
	[GrammarRule("literal")]
	private MySQL51Parser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 73);
		TraceIn("literal", 73);
		MySQL51Parser.literal_return retval = new MySQL51Parser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken value = default(IToken);
		MySQL51Parser.functionCall_return functionCall429 = default(MySQL51Parser.functionCall_return);
		MySQL51Parser.field_name_return field_name430 = default(MySQL51Parser.field_name_return);

		object value_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(960, 1);
		try
		{
			// MySQL51Parser.g3:961:2: (value= STRING |value= NUMBER |value= INT_NUMBER |value= GLOBAL_VARIABLE |value= SESSION_VARIABLE |value= VALUE_PLACEHOLDER |value= BINARY_VALUE |value= HEXA_VALUE |value= NULL |value= TRUE |value= FALSE | ( functionCall )=> functionCall | field_name )
			int alt170=13;
			try { DebugEnterDecision(170, false);
			try
			{
				alt170 = dfa170.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:961:4: value= STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(961, 9);
				value=(IToken)Match(input,STRING,Follow._STRING_in_literal8176); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:962:4: value= NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(962, 9);
				value=(IToken)Match(input,NUMBER,Follow._NUMBER_in_literal8183); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:963:4: value= INT_NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(963, 9);
				value=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_literal8190); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:964:4: value= GLOBAL_VARIABLE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(964, 9);
				value=(IToken)Match(input,GLOBAL_VARIABLE,Follow._GLOBAL_VARIABLE_in_literal8197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:965:4: value= SESSION_VARIABLE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(965, 9);
				value=(IToken)Match(input,SESSION_VARIABLE,Follow._SESSION_VARIABLE_in_literal8204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:966:4: value= VALUE_PLACEHOLDER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(966, 9);
				value=(IToken)Match(input,VALUE_PLACEHOLDER,Follow._VALUE_PLACEHOLDER_in_literal8211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:967:4: value= BINARY_VALUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(967, 9);
				value=(IToken)Match(input,BINARY_VALUE,Follow._BINARY_VALUE_in_literal8218); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:968:4: value= HEXA_VALUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(968, 9);
				value=(IToken)Match(input,HEXA_VALUE,Follow._HEXA_VALUE_in_literal8225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:969:4: value= NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(969, 9);
				value=(IToken)Match(input,NULL,Follow._NULL_in_literal8232); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:970:4: value= TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(970, 9);
				value=(IToken)Match(input,TRUE,Follow._TRUE_in_literal8239); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:971:4: value= FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(971, 9);
				value=(IToken)Match(input,FALSE,Follow._FALSE_in_literal8246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				value_tree = (object)adaptor.Create(value);
				adaptor.AddChild(root_0, value_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:972:4: ( functionCall )=> functionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(972, 20);
				PushFollow(Follow._functionCall_in_literal8255);
				functionCall429=functionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionCall429.Tree);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:973:4: field_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(973, 4);
				PushFollow(Follow._field_name_in_literal8260);
				field_name430=field_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, field_name430.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 73);
			LeaveRule("literal", 73);
			LeaveRule_literal();
		}
		DebugLocation(974, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class cast_data_type_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public cast_data_type_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_cast_data_type();
	partial void LeaveRule_cast_data_type();

	// $ANTLR start "cast_data_type"
	// MySQL51Parser.g3:977:1: cast_data_type : ( BINARY ( LPAREN INT_NUMBER RPAREN )? | CHAR ( LPAREN INT_NUMBER RPAREN )? | DATE | DATETIME | TIME | DECIMAL ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )? | SIGNED ( INTEGER )? | UNSIGNED ( INTEGER )? );
	[GrammarRule("cast_data_type")]
	private MySQL51Parser.cast_data_type_return cast_data_type()
	{
		EnterRule_cast_data_type();
		EnterRule("cast_data_type", 74);
		TraceIn("cast_data_type", 74);
		MySQL51Parser.cast_data_type_return retval = new MySQL51Parser.cast_data_type_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken num1 = default(IToken);
		IToken num2 = default(IToken);
		IToken BINARY431 = default(IToken);
		IToken LPAREN432 = default(IToken);
		IToken INT_NUMBER433 = default(IToken);
		IToken RPAREN434 = default(IToken);
		IToken CHAR435 = default(IToken);
		IToken LPAREN436 = default(IToken);
		IToken INT_NUMBER437 = default(IToken);
		IToken RPAREN438 = default(IToken);
		IToken DATE439 = default(IToken);
		IToken DATETIME440 = default(IToken);
		IToken TIME441 = default(IToken);
		IToken DECIMAL442 = default(IToken);
		IToken LPAREN443 = default(IToken);
		IToken COMMA444 = default(IToken);
		IToken RPAREN445 = default(IToken);
		IToken SIGNED446 = default(IToken);
		IToken INTEGER447 = default(IToken);
		IToken UNSIGNED448 = default(IToken);
		IToken INTEGER449 = default(IToken);

		object num1_tree = default(object);
		object num2_tree = default(object);
		object BINARY431_tree = default(object);
		object LPAREN432_tree = default(object);
		object INT_NUMBER433_tree = default(object);
		object RPAREN434_tree = default(object);
		object CHAR435_tree = default(object);
		object LPAREN436_tree = default(object);
		object INT_NUMBER437_tree = default(object);
		object RPAREN438_tree = default(object);
		object DATE439_tree = default(object);
		object DATETIME440_tree = default(object);
		object TIME441_tree = default(object);
		object DECIMAL442_tree = default(object);
		object LPAREN443_tree = default(object);
		object COMMA444_tree = default(object);
		object RPAREN445_tree = default(object);
		object SIGNED446_tree = default(object);
		object INTEGER447_tree = default(object);
		object UNSIGNED448_tree = default(object);
		object INTEGER449_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "cast_data_type");
		DebugLocation(977, 1);
		try
		{
			// MySQL51Parser.g3:978:2: ( BINARY ( LPAREN INT_NUMBER RPAREN )? | CHAR ( LPAREN INT_NUMBER RPAREN )? | DATE | DATETIME | TIME | DECIMAL ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )? | SIGNED ( INTEGER )? | UNSIGNED ( INTEGER )? )
			int alt176=8;
			try { DebugEnterDecision(176, false);
			switch (input.LA(1))
			{
			case BINARY:
				{
				alt176 = 1;
				}
				break;
			case CHAR:
				{
				alt176 = 2;
				}
				break;
			case DATE:
				{
				alt176 = 3;
				}
				break;
			case DATETIME:
				{
				alt176 = 4;
				}
				break;
			case TIME:
				{
				alt176 = 5;
				}
				break;
			case DECIMAL:
				{
				alt176 = 6;
				}
				break;
			case SIGNED:
				{
				alt176 = 7;
				}
				break;
			case UNSIGNED:
				{
				alt176 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 176, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:978:4: BINARY ( LPAREN INT_NUMBER RPAREN )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(978, 4);
				BINARY431=(IToken)Match(input,BINARY,Follow._BINARY_in_cast_data_type8272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BINARY431_tree = (object)adaptor.Create(BINARY431);
				adaptor.AddChild(root_0, BINARY431_tree);
				}
				DebugLocation(978, 11);
				// MySQL51Parser.g3:978:11: ( LPAREN INT_NUMBER RPAREN )?
				int alt171=2;
				try { DebugEnterSubRule(171);
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==LPAREN))
				{
					alt171 = 1;
				}
				} finally { DebugExitDecision(171); }
				switch (alt171)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:978:12: LPAREN INT_NUMBER RPAREN
					{
					DebugLocation(978, 12);
					LPAREN432=(IToken)Match(input,LPAREN,Follow._LPAREN_in_cast_data_type8275); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN432_tree = (object)adaptor.Create(LPAREN432);
					adaptor.AddChild(root_0, LPAREN432_tree);
					}
					DebugLocation(978, 19);
					INT_NUMBER433=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_cast_data_type8277); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INT_NUMBER433_tree = (object)adaptor.Create(INT_NUMBER433);
					adaptor.AddChild(root_0, INT_NUMBER433_tree);
					}
					DebugLocation(978, 30);
					RPAREN434=(IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_data_type8279); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN434_tree = (object)adaptor.Create(RPAREN434);
					adaptor.AddChild(root_0, RPAREN434_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(171); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:979:4: CHAR ( LPAREN INT_NUMBER RPAREN )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(979, 4);
				CHAR435=(IToken)Match(input,CHAR,Follow._CHAR_in_cast_data_type8286); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHAR435_tree = (object)adaptor.Create(CHAR435);
				adaptor.AddChild(root_0, CHAR435_tree);
				}
				DebugLocation(979, 9);
				// MySQL51Parser.g3:979:9: ( LPAREN INT_NUMBER RPAREN )?
				int alt172=2;
				try { DebugEnterSubRule(172);
				try { DebugEnterDecision(172, false);
				int LA172_0 = input.LA(1);

				if ((LA172_0==LPAREN))
				{
					alt172 = 1;
				}
				} finally { DebugExitDecision(172); }
				switch (alt172)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:979:10: LPAREN INT_NUMBER RPAREN
					{
					DebugLocation(979, 10);
					LPAREN436=(IToken)Match(input,LPAREN,Follow._LPAREN_in_cast_data_type8289); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN436_tree = (object)adaptor.Create(LPAREN436);
					adaptor.AddChild(root_0, LPAREN436_tree);
					}
					DebugLocation(979, 17);
					INT_NUMBER437=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_cast_data_type8291); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INT_NUMBER437_tree = (object)adaptor.Create(INT_NUMBER437);
					adaptor.AddChild(root_0, INT_NUMBER437_tree);
					}
					DebugLocation(979, 28);
					RPAREN438=(IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_data_type8293); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN438_tree = (object)adaptor.Create(RPAREN438);
					adaptor.AddChild(root_0, RPAREN438_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(172); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:980:4: DATE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(980, 4);
				DATE439=(IToken)Match(input,DATE,Follow._DATE_in_cast_data_type8300); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATE439_tree = (object)adaptor.Create(DATE439);
				adaptor.AddChild(root_0, DATE439_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:981:4: DATETIME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(981, 4);
				DATETIME440=(IToken)Match(input,DATETIME,Follow._DATETIME_in_cast_data_type8305); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATETIME440_tree = (object)adaptor.Create(DATETIME440);
				adaptor.AddChild(root_0, DATETIME440_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:982:4: TIME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(982, 4);
				TIME441=(IToken)Match(input,TIME,Follow._TIME_in_cast_data_type8310); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TIME441_tree = (object)adaptor.Create(TIME441);
				adaptor.AddChild(root_0, TIME441_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:983:4: DECIMAL ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(983, 4);
				DECIMAL442=(IToken)Match(input,DECIMAL,Follow._DECIMAL_in_cast_data_type8315); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DECIMAL442_tree = (object)adaptor.Create(DECIMAL442);
				adaptor.AddChild(root_0, DECIMAL442_tree);
				}
				DebugLocation(983, 12);
				// MySQL51Parser.g3:983:12: ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )?
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==LPAREN))
				{
					alt173 = 1;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:983:13: LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN
					{
					DebugLocation(983, 13);
					LPAREN443=(IToken)Match(input,LPAREN,Follow._LPAREN_in_cast_data_type8318); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN443_tree = (object)adaptor.Create(LPAREN443);
					adaptor.AddChild(root_0, LPAREN443_tree);
					}
					DebugLocation(983, 24);
					num1=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_cast_data_type8322); if (state.failed) return retval;
					if (state.backtracking == 0) {
					num1_tree = (object)adaptor.Create(num1);
					adaptor.AddChild(root_0, num1_tree);
					}
					DebugLocation(983, 36);
					COMMA444=(IToken)Match(input,COMMA,Follow._COMMA_in_cast_data_type8324); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA444_tree = (object)adaptor.Create(COMMA444);
					adaptor.AddChild(root_0, COMMA444_tree);
					}
					DebugLocation(983, 46);
					num2=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_cast_data_type8328); if (state.failed) return retval;
					if (state.backtracking == 0) {
					num2_tree = (object)adaptor.Create(num2);
					adaptor.AddChild(root_0, num2_tree);
					}
					DebugLocation(983, 58);
					RPAREN445=(IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_data_type8330); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN445_tree = (object)adaptor.Create(RPAREN445);
					adaptor.AddChild(root_0, RPAREN445_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(173); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:984:4: SIGNED ( INTEGER )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(984, 4);
				SIGNED446=(IToken)Match(input,SIGNED,Follow._SIGNED_in_cast_data_type8337); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIGNED446_tree = (object)adaptor.Create(SIGNED446);
				adaptor.AddChild(root_0, SIGNED446_tree);
				}
				DebugLocation(984, 11);
				// MySQL51Parser.g3:984:11: ( INTEGER )?
				int alt174=2;
				try { DebugEnterSubRule(174);
				try { DebugEnterDecision(174, false);
				int LA174_0 = input.LA(1);

				if ((LA174_0==INTEGER))
				{
					alt174 = 1;
				}
				} finally { DebugExitDecision(174); }
				switch (alt174)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:984:11: INTEGER
					{
					DebugLocation(984, 11);
					INTEGER447=(IToken)Match(input,INTEGER,Follow._INTEGER_in_cast_data_type8339); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INTEGER447_tree = (object)adaptor.Create(INTEGER447);
					adaptor.AddChild(root_0, INTEGER447_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(174); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:985:4: UNSIGNED ( INTEGER )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(985, 4);
				UNSIGNED448=(IToken)Match(input,UNSIGNED,Follow._UNSIGNED_in_cast_data_type8345); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UNSIGNED448_tree = (object)adaptor.Create(UNSIGNED448);
				adaptor.AddChild(root_0, UNSIGNED448_tree);
				}
				DebugLocation(985, 13);
				// MySQL51Parser.g3:985:13: ( INTEGER )?
				int alt175=2;
				try { DebugEnterSubRule(175);
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==INTEGER))
				{
					alt175 = 1;
				}
				} finally { DebugExitDecision(175); }
				switch (alt175)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:985:13: INTEGER
					{
					DebugLocation(985, 13);
					INTEGER449=(IToken)Match(input,INTEGER,Follow._INTEGER_in_cast_data_type8347); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INTEGER449_tree = (object)adaptor.Create(INTEGER449);
					adaptor.AddChild(root_0, INTEGER449_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(175); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_data_type", 74);
			LeaveRule("cast_data_type", 74);
			LeaveRule_cast_data_type();
		}
		DebugLocation(986, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_data_type"); }
		return retval;

	}
	// $ANTLR end "cast_data_type"

	private sealed partial class timeUnit_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timeUnit_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_timeUnit();
	partial void LeaveRule_timeUnit();

	// $ANTLR start "timeUnit"
	// MySQL51Parser.g3:988:1: timeUnit : ( MICROSECOND | SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH );
	[GrammarRule("timeUnit")]
	private MySQL51Parser.timeUnit_return timeUnit()
	{
		EnterRule_timeUnit();
		EnterRule("timeUnit", 75);
		TraceIn("timeUnit", 75);
		MySQL51Parser.timeUnit_return retval = new MySQL51Parser.timeUnit_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set450 = default(IToken);

		object set450_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "timeUnit");
		DebugLocation(988, 1);
		try
		{
			// MySQL51Parser.g3:989:2: ( MICROSECOND | SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(989, 2);
			set450=(IToken)input.LT(1);
			if ((input.LA(1)>=DAY && input.LA(1)<=DAY_SECOND)||(input.LA(1)>=HOUR && input.LA(1)<=HOUR_SECOND)||input.LA(1)==MICROSECOND||(input.LA(1)>=MINUTE && input.LA(1)<=MINUTE_SECOND)||input.LA(1)==MONTH||input.LA(1)==QUARTER||(input.LA(1)>=SECOND && input.LA(1)<=SECOND_MICROSECOND)||input.LA(1)==WEEK||(input.LA(1)>=YEAR && input.LA(1)<=YEAR_MONTH))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set450));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timeUnit", 75);
			LeaveRule("timeUnit", 75);
			LeaveRule_timeUnit();
		}
		DebugLocation(1009, 1);
		} finally { DebugExitRule(GrammarFileName, "timeUnit"); }
		return retval;

	}
	// $ANTLR end "timeUnit"

	private sealed partial class timestampUnit_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public timestampUnit_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_timestampUnit();
	partial void LeaveRule_timestampUnit();

	// $ANTLR start "timestampUnit"
	// MySQL51Parser.g3:1012:1: timestampUnit : ( FRAC_SECOND | MICROSECOND | SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | QUARTER | YEAR );
	[GrammarRule("timestampUnit")]
	private MySQL51Parser.timestampUnit_return timestampUnit()
	{
		EnterRule_timestampUnit();
		EnterRule("timestampUnit", 76);
		TraceIn("timestampUnit", 76);
		MySQL51Parser.timestampUnit_return retval = new MySQL51Parser.timestampUnit_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set451 = default(IToken);

		object set451_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "timestampUnit");
		DebugLocation(1012, 1);
		try
		{
			// MySQL51Parser.g3:1013:2: ( FRAC_SECOND | MICROSECOND | SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | QUARTER | YEAR )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1013, 2);
			set451=(IToken)input.LT(1);
			if (input.LA(1)==DAY||input.LA(1)==FRAC_SECOND||input.LA(1)==HOUR||input.LA(1)==MICROSECOND||input.LA(1)==MINUTE||input.LA(1)==MONTH||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==WEEK||input.LA(1)==YEAR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set451));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("timestampUnit", 76);
			LeaveRule("timestampUnit", 76);
			LeaveRule_timestampUnit();
		}
		DebugLocation(1022, 1);
		} finally { DebugExitRule(GrammarFileName, "timestampUnit"); }
		return retval;

	}
	// $ANTLR end "timestampUnit"

	private sealed partial class where_condition_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public where_condition_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_where_condition();
	partial void LeaveRule_where_condition();

	// $ANTLR start "where_condition"
	// MySQL51Parser.g3:1024:1: where_condition : expr ;
	[GrammarRule("where_condition")]
	private MySQL51Parser.where_condition_return where_condition()
	{
		EnterRule_where_condition();
		EnterRule("where_condition", 77);
		TraceIn("where_condition", 77);
		MySQL51Parser.where_condition_return retval = new MySQL51Parser.where_condition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		MySQL51Parser.expr_return expr452 = default(MySQL51Parser.expr_return);


		try { DebugEnterRule(GrammarFileName, "where_condition");
		DebugLocation(1024, 1);
		try
		{
			// MySQL51Parser.g3:1025:2: ( expr )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1025:4: expr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1025, 4);
			PushFollow(Follow._expr_in_where_condition8524);
			expr452=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr452.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_condition", 77);
			LeaveRule("where_condition", 77);
			LeaveRule_where_condition();
		}
		DebugLocation(1026, 1);
		} finally { DebugExitRule(GrammarFileName, "where_condition"); }
		return retval;

	}
	// $ANTLR end "where_condition"

	private sealed partial class transaction_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public transaction_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_transaction();
	partial void LeaveRule_transaction();

	// $ANTLR start "transaction"
	// MySQL51Parser.g3:1031:1: transaction : ( ( BEGIN ( WORK )? -> ^( BEGIN ( WORK )? ) | START TRANSACTION ( WITH CONSISTENT SNAPSHOT )? -> ^( START ( SNAPSHOT )? ) ) | COMMIT ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )? -> ^( COMMIT ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? ) | ROLLBACK ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )? -> ^( ROLLBACK ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? ) | SET (txnScope= GLOBAL |txnScope= SESSION )? TRANSACTION ISOLATION LEVEL ( READ UNCOMMITTED -> ^( ISOLATION UNCOMMITTED $txnScope) | READ COMMITTED -> ^( ISOLATION COMMITTED $txnScope) | REPEATABLE READ -> ^( ISOLATION REPEATABLE $txnScope) | SERIALIZABLE -> ^( ISOLATION SERIALIZABLE $txnScope) ) | savepoint | lockTables );
	[GrammarRule("transaction")]
	private MySQL51Parser.transaction_return transaction()
	{
		EnterRule_transaction();
		EnterRule("transaction", 78);
		TraceIn("transaction", 78);
		MySQL51Parser.transaction_return retval = new MySQL51Parser.transaction_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken txnScope = default(IToken);
		IToken BEGIN453 = default(IToken);
		IToken WORK454 = default(IToken);
		IToken START455 = default(IToken);
		IToken TRANSACTION456 = default(IToken);
		IToken WITH457 = default(IToken);
		IToken CONSISTENT458 = default(IToken);
		IToken SNAPSHOT459 = default(IToken);
		IToken COMMIT460 = default(IToken);
		IToken WORK461 = default(IToken);
		IToken AND462 = default(IToken);
		IToken NO463 = default(IToken);
		IToken CHAIN464 = default(IToken);
		IToken NO465 = default(IToken);
		IToken RELEASE466 = default(IToken);
		IToken ROLLBACK467 = default(IToken);
		IToken WORK468 = default(IToken);
		IToken AND469 = default(IToken);
		IToken NO470 = default(IToken);
		IToken CHAIN471 = default(IToken);
		IToken NO472 = default(IToken);
		IToken RELEASE473 = default(IToken);
		IToken SET474 = default(IToken);
		IToken TRANSACTION475 = default(IToken);
		IToken ISOLATION476 = default(IToken);
		IToken LEVEL477 = default(IToken);
		IToken READ478 = default(IToken);
		IToken UNCOMMITTED479 = default(IToken);
		IToken READ480 = default(IToken);
		IToken COMMITTED481 = default(IToken);
		IToken REPEATABLE482 = default(IToken);
		IToken READ483 = default(IToken);
		IToken SERIALIZABLE484 = default(IToken);
		MySQL51Parser.savepoint_return savepoint485 = default(MySQL51Parser.savepoint_return);
		MySQL51Parser.lockTables_return lockTables486 = default(MySQL51Parser.lockTables_return);

		object txnScope_tree = default(object);
		object BEGIN453_tree = default(object);
		object WORK454_tree = default(object);
		object START455_tree = default(object);
		object TRANSACTION456_tree = default(object);
		object WITH457_tree = default(object);
		object CONSISTENT458_tree = default(object);
		object SNAPSHOT459_tree = default(object);
		object COMMIT460_tree = default(object);
		object WORK461_tree = default(object);
		object AND462_tree = default(object);
		object NO463_tree = default(object);
		object CHAIN464_tree = default(object);
		object NO465_tree = default(object);
		object RELEASE466_tree = default(object);
		object ROLLBACK467_tree = default(object);
		object WORK468_tree = default(object);
		object AND469_tree = default(object);
		object NO470_tree = default(object);
		object CHAIN471_tree = default(object);
		object NO472_tree = default(object);
		object RELEASE473_tree = default(object);
		object SET474_tree = default(object);
		object TRANSACTION475_tree = default(object);
		object ISOLATION476_tree = default(object);
		object LEVEL477_tree = default(object);
		object READ478_tree = default(object);
		object UNCOMMITTED479_tree = default(object);
		object READ480_tree = default(object);
		object COMMITTED481_tree = default(object);
		object REPEATABLE482_tree = default(object);
		object READ483_tree = default(object);
		object SERIALIZABLE484_tree = default(object);
		RewriteRuleITokenStream stream_BEGIN=new RewriteRuleITokenStream(adaptor,"token BEGIN");
		RewriteRuleITokenStream stream_WORK=new RewriteRuleITokenStream(adaptor,"token WORK");
		RewriteRuleITokenStream stream_START=new RewriteRuleITokenStream(adaptor,"token START");
		RewriteRuleITokenStream stream_TRANSACTION=new RewriteRuleITokenStream(adaptor,"token TRANSACTION");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleITokenStream stream_CONSISTENT=new RewriteRuleITokenStream(adaptor,"token CONSISTENT");
		RewriteRuleITokenStream stream_SNAPSHOT=new RewriteRuleITokenStream(adaptor,"token SNAPSHOT");
		RewriteRuleITokenStream stream_COMMIT=new RewriteRuleITokenStream(adaptor,"token COMMIT");
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleITokenStream stream_NO=new RewriteRuleITokenStream(adaptor,"token NO");
		RewriteRuleITokenStream stream_CHAIN=new RewriteRuleITokenStream(adaptor,"token CHAIN");
		RewriteRuleITokenStream stream_RELEASE=new RewriteRuleITokenStream(adaptor,"token RELEASE");
		RewriteRuleITokenStream stream_ROLLBACK=new RewriteRuleITokenStream(adaptor,"token ROLLBACK");
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_GLOBAL=new RewriteRuleITokenStream(adaptor,"token GLOBAL");
		RewriteRuleITokenStream stream_SESSION=new RewriteRuleITokenStream(adaptor,"token SESSION");
		RewriteRuleITokenStream stream_ISOLATION=new RewriteRuleITokenStream(adaptor,"token ISOLATION");
		RewriteRuleITokenStream stream_LEVEL=new RewriteRuleITokenStream(adaptor,"token LEVEL");
		RewriteRuleITokenStream stream_READ=new RewriteRuleITokenStream(adaptor,"token READ");
		RewriteRuleITokenStream stream_UNCOMMITTED=new RewriteRuleITokenStream(adaptor,"token UNCOMMITTED");
		RewriteRuleITokenStream stream_COMMITTED=new RewriteRuleITokenStream(adaptor,"token COMMITTED");
		RewriteRuleITokenStream stream_REPEATABLE=new RewriteRuleITokenStream(adaptor,"token REPEATABLE");
		RewriteRuleITokenStream stream_SERIALIZABLE=new RewriteRuleITokenStream(adaptor,"token SERIALIZABLE");

		try { DebugEnterRule(GrammarFileName, "transaction");
		DebugLocation(1031, 1);
		try
		{
			// MySQL51Parser.g3:1033:2: ( ( BEGIN ( WORK )? -> ^( BEGIN ( WORK )? ) | START TRANSACTION ( WITH CONSISTENT SNAPSHOT )? -> ^( START ( SNAPSHOT )? ) ) | COMMIT ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )? -> ^( COMMIT ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? ) | ROLLBACK ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )? -> ^( ROLLBACK ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? ) | SET (txnScope= GLOBAL |txnScope= SESSION )? TRANSACTION ISOLATION LEVEL ( READ UNCOMMITTED -> ^( ISOLATION UNCOMMITTED $txnScope) | READ COMMITTED -> ^( ISOLATION COMMITTED $txnScope) | REPEATABLE READ -> ^( ISOLATION REPEATABLE $txnScope) | SERIALIZABLE -> ^( ISOLATION SERIALIZABLE $txnScope) ) | savepoint | lockTables )
			int alt192=6;
			try { DebugEnterDecision(192, false);
			switch (input.LA(1))
			{
			case BEGIN:
			case START:
				{
				alt192 = 1;
				}
				break;
			case COMMIT:
				{
				alt192 = 2;
				}
				break;
			case ROLLBACK:
				{
				switch (input.LA(2))
				{
				case WORK:
					{
					int LA192_7 = input.LA(3);

					if ((LA192_7==EOF||LA192_7==AND||LA192_7==NO||LA192_7==RELEASE||LA192_7==SEMI))
					{
						alt192 = 3;
					}
					else if ((LA192_7==TO))
					{
						alt192 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 192, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case AND:
				case NO:
				case RELEASE:
				case SEMI:
					{
					alt192 = 3;
					}
					break;
				case TO:
					{
					alt192 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 192, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case SET:
				{
				alt192 = 4;
				}
				break;
			case RELEASE:
			case SAVEPOINT:
				{
				alt192 = 5;
				}
				break;
			case LOCK:
			case UNLOCK:
				{
				alt192 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1033:4: ( BEGIN ( WORK )? -> ^( BEGIN ( WORK )? ) | START TRANSACTION ( WITH CONSISTENT SNAPSHOT )? -> ^( START ( SNAPSHOT )? ) )
				{
				DebugLocation(1033, 4);
				// MySQL51Parser.g3:1033:4: ( BEGIN ( WORK )? -> ^( BEGIN ( WORK )? ) | START TRANSACTION ( WITH CONSISTENT SNAPSHOT )? -> ^( START ( SNAPSHOT )? ) )
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==BEGIN))
				{
					alt179 = 1;
				}
				else if ((LA179_0==START))
				{
					alt179 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1033:6: BEGIN ( WORK )?
					{
					DebugLocation(1033, 6);
					BEGIN453=(IToken)Match(input,BEGIN,Follow._BEGIN_in_transaction8543); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_BEGIN.Add(BEGIN453);

					DebugLocation(1033, 13);
					// MySQL51Parser.g3:1033:13: ( WORK )?
					int alt177=2;
					try { DebugEnterSubRule(177);
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==WORK))
					{
						alt177 = 1;
					}
					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1033:13: WORK
						{
						DebugLocation(1033, 13);
						WORK454=(IToken)Match(input,WORK,Follow._WORK_in_transaction8546); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WORK.Add(WORK454);


						}
						break;

					}
					} finally { DebugExitSubRule(177); }



					{
					// AST REWRITE
					// elements: BEGIN, WORK
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1033:28: -> ^( BEGIN ( WORK )? )
					{
						DebugLocation(1033, 31);
						// MySQL51Parser.g3:1033:31: ^( BEGIN ( WORK )? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1033, 33);
						root_1 = (object)adaptor.BecomeRoot(stream_BEGIN.NextNode(), root_1);

						DebugLocation(1033, 39);
						// MySQL51Parser.g3:1033:39: ( WORK )?
						if (stream_WORK.HasNext)
						{
							DebugLocation(1033, 39);
							adaptor.AddChild(root_1, stream_WORK.NextNode());

						}
						stream_WORK.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1034:5: START TRANSACTION ( WITH CONSISTENT SNAPSHOT )?
					{
					DebugLocation(1034, 5);
					START455=(IToken)Match(input,START,Follow._START_in_transaction8571); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_START.Add(START455);

					DebugLocation(1034, 11);
					TRANSACTION456=(IToken)Match(input,TRANSACTION,Follow._TRANSACTION_in_transaction8573); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_TRANSACTION.Add(TRANSACTION456);

					DebugLocation(1034, 23);
					// MySQL51Parser.g3:1034:23: ( WITH CONSISTENT SNAPSHOT )?
					int alt178=2;
					try { DebugEnterSubRule(178);
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==WITH))
					{
						alt178 = 1;
					}
					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1034:24: WITH CONSISTENT SNAPSHOT
						{
						DebugLocation(1034, 24);
						WITH457=(IToken)Match(input,WITH,Follow._WITH_in_transaction8576); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WITH.Add(WITH457);

						DebugLocation(1034, 29);
						CONSISTENT458=(IToken)Match(input,CONSISTENT,Follow._CONSISTENT_in_transaction8578); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CONSISTENT.Add(CONSISTENT458);

						DebugLocation(1034, 40);
						SNAPSHOT459=(IToken)Match(input,SNAPSHOT,Follow._SNAPSHOT_in_transaction8580); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SNAPSHOT.Add(SNAPSHOT459);


						}
						break;

					}
					} finally { DebugExitSubRule(178); }



					{
					// AST REWRITE
					// elements: START, SNAPSHOT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1034:52: -> ^( START ( SNAPSHOT )? )
					{
						DebugLocation(1034, 55);
						// MySQL51Parser.g3:1034:55: ^( START ( SNAPSHOT )? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1034, 57);
						root_1 = (object)adaptor.BecomeRoot(stream_START.NextNode(), root_1);

						DebugLocation(1034, 63);
						// MySQL51Parser.g3:1034:63: ( SNAPSHOT )?
						if (stream_SNAPSHOT.HasNext)
						{
							DebugLocation(1034, 63);
							adaptor.AddChild(root_1, stream_SNAPSHOT.NextNode());

						}
						stream_SNAPSHOT.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(179); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1036:4: COMMIT ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )?
				{
				DebugLocation(1036, 4);
				COMMIT460=(IToken)Match(input,COMMIT,Follow._COMMIT_in_transaction8601); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMIT.Add(COMMIT460);

				DebugLocation(1036, 11);
				// MySQL51Parser.g3:1036:11: ( WORK )?
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==WORK))
				{
					alt180 = 1;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1036:11: WORK
					{
					DebugLocation(1036, 11);
					WORK461=(IToken)Match(input,WORK,Follow._WORK_in_transaction8603); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WORK.Add(WORK461);


					}
					break;

				}
				} finally { DebugExitSubRule(180); }

				DebugLocation(1037, 3);
				// MySQL51Parser.g3:1037:3: ( AND ( NO )? CHAIN )?
				int alt182=2;
				try { DebugEnterSubRule(182);
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==AND))
				{
					alt182 = 1;
				}
				} finally { DebugExitDecision(182); }
				switch (alt182)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1037:4: AND ( NO )? CHAIN
					{
					DebugLocation(1037, 4);
					AND462=(IToken)Match(input,AND,Follow._AND_in_transaction8609); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND462);

					DebugLocation(1037, 8);
					// MySQL51Parser.g3:1037:8: ( NO )?
					int alt181=2;
					try { DebugEnterSubRule(181);
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==NO))
					{
						alt181 = 1;
					}
					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1037:8: NO
						{
						DebugLocation(1037, 8);
						NO463=(IToken)Match(input,NO,Follow._NO_in_transaction8611); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NO.Add(NO463);


						}
						break;

					}
					} finally { DebugExitSubRule(181); }

					DebugLocation(1037, 12);
					CHAIN464=(IToken)Match(input,CHAIN,Follow._CHAIN_in_transaction8614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CHAIN.Add(CHAIN464);


					}
					break;

				}
				} finally { DebugExitSubRule(182); }

				DebugLocation(1038, 3);
				// MySQL51Parser.g3:1038:3: ( ( NO )? RELEASE )?
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==NO||LA184_0==RELEASE))
				{
					alt184 = 1;
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1038:4: ( NO )? RELEASE
					{
					DebugLocation(1038, 4);
					// MySQL51Parser.g3:1038:4: ( NO )?
					int alt183=2;
					try { DebugEnterSubRule(183);
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==NO))
					{
						alt183 = 1;
					}
					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1038:4: NO
						{
						DebugLocation(1038, 4);
						NO465=(IToken)Match(input,NO,Follow._NO_in_transaction8621); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NO.Add(NO465);


						}
						break;

					}
					} finally { DebugExitSubRule(183); }

					DebugLocation(1038, 8);
					RELEASE466=(IToken)Match(input,RELEASE,Follow._RELEASE_in_transaction8624); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RELEASE.Add(RELEASE466);


					}
					break;

				}
				} finally { DebugExitSubRule(184); }



				{
				// AST REWRITE
				// elements: COMMIT, CHAIN, NO, RELEASE, NO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1038:28: -> ^( COMMIT ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? )
				{
					DebugLocation(1038, 31);
					// MySQL51Parser.g3:1038:31: ^( COMMIT ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1038, 33);
					root_1 = (object)adaptor.BecomeRoot(stream_COMMIT.NextNode(), root_1);

					DebugLocation(1038, 40);
					// MySQL51Parser.g3:1038:40: ( ^( CHAIN ( NO )? ) )?
					if (stream_CHAIN.HasNext||stream_NO.HasNext)
					{
						DebugLocation(1038, 40);
						// MySQL51Parser.g3:1038:40: ^( CHAIN ( NO )? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1038, 42);
						root_2 = (object)adaptor.BecomeRoot(stream_CHAIN.NextNode(), root_2);

						DebugLocation(1038, 48);
						// MySQL51Parser.g3:1038:48: ( NO )?
						if (stream_NO.HasNext)
						{
							DebugLocation(1038, 48);
							adaptor.AddChild(root_2, stream_NO.NextNode());

						}
						stream_NO.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_CHAIN.Reset();
					stream_NO.Reset();
					DebugLocation(1038, 54);
					// MySQL51Parser.g3:1038:54: ( ^( RELEASE ( NO )? ) )?
					if (stream_RELEASE.HasNext||stream_NO.HasNext)
					{
						DebugLocation(1038, 54);
						// MySQL51Parser.g3:1038:54: ^( RELEASE ( NO )? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1038, 56);
						root_2 = (object)adaptor.BecomeRoot(stream_RELEASE.NextNode(), root_2);

						DebugLocation(1038, 64);
						// MySQL51Parser.g3:1038:64: ( NO )?
						if (stream_NO.HasNext)
						{
							DebugLocation(1038, 64);
							adaptor.AddChild(root_2, stream_NO.NextNode());

						}
						stream_NO.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_RELEASE.Reset();
					stream_NO.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1039:4: ROLLBACK ( WORK )? ( AND ( NO )? CHAIN )? ( ( NO )? RELEASE )?
				{
				DebugLocation(1039, 4);
				ROLLBACK467=(IToken)Match(input,ROLLBACK,Follow._ROLLBACK_in_transaction8663); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ROLLBACK.Add(ROLLBACK467);

				DebugLocation(1039, 13);
				// MySQL51Parser.g3:1039:13: ( WORK )?
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==WORK))
				{
					alt185 = 1;
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1039:13: WORK
					{
					DebugLocation(1039, 13);
					WORK468=(IToken)Match(input,WORK,Follow._WORK_in_transaction8665); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WORK.Add(WORK468);


					}
					break;

				}
				} finally { DebugExitSubRule(185); }

				DebugLocation(1040, 3);
				// MySQL51Parser.g3:1040:3: ( AND ( NO )? CHAIN )?
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==AND))
				{
					alt187 = 1;
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1040:4: AND ( NO )? CHAIN
					{
					DebugLocation(1040, 4);
					AND469=(IToken)Match(input,AND,Follow._AND_in_transaction8671); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AND.Add(AND469);

					DebugLocation(1040, 8);
					// MySQL51Parser.g3:1040:8: ( NO )?
					int alt186=2;
					try { DebugEnterSubRule(186);
					try { DebugEnterDecision(186, false);
					int LA186_0 = input.LA(1);

					if ((LA186_0==NO))
					{
						alt186 = 1;
					}
					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1040:8: NO
						{
						DebugLocation(1040, 8);
						NO470=(IToken)Match(input,NO,Follow._NO_in_transaction8673); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NO.Add(NO470);


						}
						break;

					}
					} finally { DebugExitSubRule(186); }

					DebugLocation(1040, 12);
					CHAIN471=(IToken)Match(input,CHAIN,Follow._CHAIN_in_transaction8676); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CHAIN.Add(CHAIN471);


					}
					break;

				}
				} finally { DebugExitSubRule(187); }

				DebugLocation(1041, 3);
				// MySQL51Parser.g3:1041:3: ( ( NO )? RELEASE )?
				int alt189=2;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==NO||LA189_0==RELEASE))
				{
					alt189 = 1;
				}
				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1041:4: ( NO )? RELEASE
					{
					DebugLocation(1041, 4);
					// MySQL51Parser.g3:1041:4: ( NO )?
					int alt188=2;
					try { DebugEnterSubRule(188);
					try { DebugEnterDecision(188, false);
					int LA188_0 = input.LA(1);

					if ((LA188_0==NO))
					{
						alt188 = 1;
					}
					} finally { DebugExitDecision(188); }
					switch (alt188)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1041:4: NO
						{
						DebugLocation(1041, 4);
						NO472=(IToken)Match(input,NO,Follow._NO_in_transaction8683); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NO.Add(NO472);


						}
						break;

					}
					} finally { DebugExitSubRule(188); }

					DebugLocation(1041, 8);
					RELEASE473=(IToken)Match(input,RELEASE,Follow._RELEASE_in_transaction8686); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RELEASE.Add(RELEASE473);


					}
					break;

				}
				} finally { DebugExitSubRule(189); }



				{
				// AST REWRITE
				// elements: ROLLBACK, CHAIN, NO, RELEASE, NO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1041:28: -> ^( ROLLBACK ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? )
				{
					DebugLocation(1041, 31);
					// MySQL51Parser.g3:1041:31: ^( ROLLBACK ( ^( CHAIN ( NO )? ) )? ( ^( RELEASE ( NO )? ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1041, 33);
					root_1 = (object)adaptor.BecomeRoot(stream_ROLLBACK.NextNode(), root_1);

					DebugLocation(1041, 42);
					// MySQL51Parser.g3:1041:42: ( ^( CHAIN ( NO )? ) )?
					if (stream_CHAIN.HasNext||stream_NO.HasNext)
					{
						DebugLocation(1041, 42);
						// MySQL51Parser.g3:1041:42: ^( CHAIN ( NO )? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1041, 44);
						root_2 = (object)adaptor.BecomeRoot(stream_CHAIN.NextNode(), root_2);

						DebugLocation(1041, 50);
						// MySQL51Parser.g3:1041:50: ( NO )?
						if (stream_NO.HasNext)
						{
							DebugLocation(1041, 50);
							adaptor.AddChild(root_2, stream_NO.NextNode());

						}
						stream_NO.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_CHAIN.Reset();
					stream_NO.Reset();
					DebugLocation(1041, 56);
					// MySQL51Parser.g3:1041:56: ( ^( RELEASE ( NO )? ) )?
					if (stream_RELEASE.HasNext||stream_NO.HasNext)
					{
						DebugLocation(1041, 56);
						// MySQL51Parser.g3:1041:56: ^( RELEASE ( NO )? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1041, 58);
						root_2 = (object)adaptor.BecomeRoot(stream_RELEASE.NextNode(), root_2);

						DebugLocation(1041, 66);
						// MySQL51Parser.g3:1041:66: ( NO )?
						if (stream_NO.HasNext)
						{
							DebugLocation(1041, 66);
							adaptor.AddChild(root_2, stream_NO.NextNode());

						}
						stream_NO.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_RELEASE.Reset();
					stream_NO.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1044:4: SET (txnScope= GLOBAL |txnScope= SESSION )? TRANSACTION ISOLATION LEVEL ( READ UNCOMMITTED -> ^( ISOLATION UNCOMMITTED $txnScope) | READ COMMITTED -> ^( ISOLATION COMMITTED $txnScope) | REPEATABLE READ -> ^( ISOLATION REPEATABLE $txnScope) | SERIALIZABLE -> ^( ISOLATION SERIALIZABLE $txnScope) )
				{
				DebugLocation(1044, 4);
				SET474=(IToken)Match(input,SET,Follow._SET_in_transaction8728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET474);

				DebugLocation(1045, 3);
				// MySQL51Parser.g3:1045:3: (txnScope= GLOBAL |txnScope= SESSION )?
				int alt190=3;
				try { DebugEnterSubRule(190);
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==GLOBAL))
				{
					alt190 = 1;
				}
				else if ((LA190_0==SESSION))
				{
					alt190 = 2;
				}
				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1045:5: txnScope= GLOBAL
					{
					DebugLocation(1045, 13);
					txnScope=(IToken)Match(input,GLOBAL,Follow._GLOBAL_in_transaction8737); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_GLOBAL.Add(txnScope);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1046:5: txnScope= SESSION
					{
					DebugLocation(1046, 13);
					txnScope=(IToken)Match(input,SESSION,Follow._SESSION_in_transaction8746); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SESSION.Add(txnScope);


					}
					break;

				}
				} finally { DebugExitSubRule(190); }

				DebugLocation(1048, 3);
				TRANSACTION475=(IToken)Match(input,TRANSACTION,Follow._TRANSACTION_in_transaction8756); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRANSACTION.Add(TRANSACTION475);

				DebugLocation(1048, 15);
				ISOLATION476=(IToken)Match(input,ISOLATION,Follow._ISOLATION_in_transaction8758); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ISOLATION.Add(ISOLATION476);

				DebugLocation(1048, 25);
				LEVEL477=(IToken)Match(input,LEVEL,Follow._LEVEL_in_transaction8760); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LEVEL.Add(LEVEL477);

				DebugLocation(1049, 3);
				// MySQL51Parser.g3:1049:3: ( READ UNCOMMITTED -> ^( ISOLATION UNCOMMITTED $txnScope) | READ COMMITTED -> ^( ISOLATION COMMITTED $txnScope) | REPEATABLE READ -> ^( ISOLATION REPEATABLE $txnScope) | SERIALIZABLE -> ^( ISOLATION SERIALIZABLE $txnScope) )
				int alt191=4;
				try { DebugEnterSubRule(191);
				try { DebugEnterDecision(191, false);
				switch (input.LA(1))
				{
				case READ:
					{
					int LA191_1 = input.LA(2);

					if ((LA191_1==UNCOMMITTED))
					{
						alt191 = 1;
					}
					else if ((LA191_1==COMMITTED))
					{
						alt191 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 191, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case REPEATABLE:
					{
					alt191 = 3;
					}
					break;
				case SERIALIZABLE:
					{
					alt191 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1049:5: READ UNCOMMITTED
					{
					DebugLocation(1049, 5);
					READ478=(IToken)Match(input,READ,Follow._READ_in_transaction8766); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_READ.Add(READ478);

					DebugLocation(1049, 10);
					UNCOMMITTED479=(IToken)Match(input,UNCOMMITTED,Follow._UNCOMMITTED_in_transaction8768); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNCOMMITTED.Add(UNCOMMITTED479);



					{
					// AST REWRITE
					// elements: ISOLATION, UNCOMMITTED, txnScope
					// token labels: txnScope
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_txnScope=new RewriteRuleITokenStream(adaptor,"token txnScope",txnScope);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1049:24: -> ^( ISOLATION UNCOMMITTED $txnScope)
					{
						DebugLocation(1049, 27);
						// MySQL51Parser.g3:1049:27: ^( ISOLATION UNCOMMITTED $txnScope)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1049, 29);
						root_1 = (object)adaptor.BecomeRoot(stream_ISOLATION.NextNode(), root_1);

						DebugLocation(1049, 39);
						adaptor.AddChild(root_1, stream_UNCOMMITTED.NextNode());
						DebugLocation(1049, 52);
						adaptor.AddChild(root_1, stream_txnScope.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1050:5: READ COMMITTED
					{
					DebugLocation(1050, 5);
					READ480=(IToken)Match(input,READ,Follow._READ_in_transaction8787); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_READ.Add(READ480);

					DebugLocation(1050, 10);
					COMMITTED481=(IToken)Match(input,COMMITTED,Follow._COMMITTED_in_transaction8789); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMITTED.Add(COMMITTED481);



					{
					// AST REWRITE
					// elements: ISOLATION, COMMITTED, txnScope
					// token labels: txnScope
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_txnScope=new RewriteRuleITokenStream(adaptor,"token txnScope",txnScope);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1050:23: -> ^( ISOLATION COMMITTED $txnScope)
					{
						DebugLocation(1050, 26);
						// MySQL51Parser.g3:1050:26: ^( ISOLATION COMMITTED $txnScope)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1050, 28);
						root_1 = (object)adaptor.BecomeRoot(stream_ISOLATION.NextNode(), root_1);

						DebugLocation(1050, 38);
						adaptor.AddChild(root_1, stream_COMMITTED.NextNode());
						DebugLocation(1050, 49);
						adaptor.AddChild(root_1, stream_txnScope.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:1051:5: REPEATABLE READ
					{
					DebugLocation(1051, 5);
					REPEATABLE482=(IToken)Match(input,REPEATABLE,Follow._REPEATABLE_in_transaction8810); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_REPEATABLE.Add(REPEATABLE482);

					DebugLocation(1051, 16);
					READ483=(IToken)Match(input,READ,Follow._READ_in_transaction8812); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_READ.Add(READ483);



					{
					// AST REWRITE
					// elements: ISOLATION, REPEATABLE, txnScope
					// token labels: txnScope
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_txnScope=new RewriteRuleITokenStream(adaptor,"token txnScope",txnScope);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1051:24: -> ^( ISOLATION REPEATABLE $txnScope)
					{
						DebugLocation(1051, 27);
						// MySQL51Parser.g3:1051:27: ^( ISOLATION REPEATABLE $txnScope)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1051, 29);
						root_1 = (object)adaptor.BecomeRoot(stream_ISOLATION.NextNode(), root_1);

						DebugLocation(1051, 39);
						adaptor.AddChild(root_1, stream_REPEATABLE.NextNode());
						DebugLocation(1051, 51);
						adaptor.AddChild(root_1, stream_txnScope.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// MySQL51Parser.g3:1052:5: SERIALIZABLE
					{
					DebugLocation(1052, 5);
					SERIALIZABLE484=(IToken)Match(input,SERIALIZABLE,Follow._SERIALIZABLE_in_transaction8832); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SERIALIZABLE.Add(SERIALIZABLE484);



					{
					// AST REWRITE
					// elements: ISOLATION, SERIALIZABLE, txnScope
					// token labels: txnScope
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_txnScope=new RewriteRuleITokenStream(adaptor,"token txnScope",txnScope);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1052:21: -> ^( ISOLATION SERIALIZABLE $txnScope)
					{
						DebugLocation(1052, 24);
						// MySQL51Parser.g3:1052:24: ^( ISOLATION SERIALIZABLE $txnScope)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1052, 26);
						root_1 = (object)adaptor.BecomeRoot(stream_ISOLATION.NextNode(), root_1);

						DebugLocation(1052, 36);
						adaptor.AddChild(root_1, stream_SERIALIZABLE.NextNode());
						DebugLocation(1052, 50);
						adaptor.AddChild(root_1, stream_txnScope.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(191); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1054:4: savepoint
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1054, 4);
				PushFollow(Follow._savepoint_in_transaction8856);
				savepoint485=savepoint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, savepoint485.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1055:4: lockTables
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1055, 4);
				PushFollow(Follow._lockTables_in_transaction8861);
				lockTables486=lockTables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lockTables486.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("transaction", 78);
			LeaveRule("transaction", 78);
			LeaveRule_transaction();
		}
		DebugLocation(1057, 1);
		} finally { DebugExitRule(GrammarFileName, "transaction"); }
		return retval;

	}
	// $ANTLR end "transaction"

	private sealed partial class savepoint_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public savepoint_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_savepoint();
	partial void LeaveRule_savepoint();

	// $ANTLR start "savepoint"
	// MySQL51Parser.g3:1060:1: savepoint : ( ( RELEASE )? SAVEPOINT ident -> ^( SAVEPOINT ident ( RELEASE )? ) | ROLLBACK ( WORK )? TO ( SAVEPOINT )? ident -> ^( ROLLBACK_POINT ident ) );
	[GrammarRule("savepoint")]
	private MySQL51Parser.savepoint_return savepoint()
	{
		EnterRule_savepoint();
		EnterRule("savepoint", 79);
		TraceIn("savepoint", 79);
		MySQL51Parser.savepoint_return retval = new MySQL51Parser.savepoint_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RELEASE487 = default(IToken);
		IToken SAVEPOINT488 = default(IToken);
		IToken ROLLBACK490 = default(IToken);
		IToken WORK491 = default(IToken);
		IToken TO492 = default(IToken);
		IToken SAVEPOINT493 = default(IToken);
		MySQL51Parser.ident_return ident489 = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return ident494 = default(MySQL51Parser.ident_return);

		object RELEASE487_tree = default(object);
		object SAVEPOINT488_tree = default(object);
		object ROLLBACK490_tree = default(object);
		object WORK491_tree = default(object);
		object TO492_tree = default(object);
		object SAVEPOINT493_tree = default(object);
		RewriteRuleITokenStream stream_RELEASE=new RewriteRuleITokenStream(adaptor,"token RELEASE");
		RewriteRuleITokenStream stream_SAVEPOINT=new RewriteRuleITokenStream(adaptor,"token SAVEPOINT");
		RewriteRuleITokenStream stream_ROLLBACK=new RewriteRuleITokenStream(adaptor,"token ROLLBACK");
		RewriteRuleITokenStream stream_WORK=new RewriteRuleITokenStream(adaptor,"token WORK");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "savepoint");
		DebugLocation(1060, 1);
		try
		{
			// MySQL51Parser.g3:1061:2: ( ( RELEASE )? SAVEPOINT ident -> ^( SAVEPOINT ident ( RELEASE )? ) | ROLLBACK ( WORK )? TO ( SAVEPOINT )? ident -> ^( ROLLBACK_POINT ident ) )
			int alt196=2;
			try { DebugEnterDecision(196, false);
			int LA196_0 = input.LA(1);

			if ((LA196_0==RELEASE||LA196_0==SAVEPOINT))
			{
				alt196 = 1;
			}
			else if ((LA196_0==ROLLBACK))
			{
				alt196 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1061:4: ( RELEASE )? SAVEPOINT ident
				{
				DebugLocation(1061, 4);
				// MySQL51Parser.g3:1061:4: ( RELEASE )?
				int alt193=2;
				try { DebugEnterSubRule(193);
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==RELEASE))
				{
					alt193 = 1;
				}
				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1061:4: RELEASE
					{
					DebugLocation(1061, 4);
					RELEASE487=(IToken)Match(input,RELEASE,Follow._RELEASE_in_savepoint8875); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RELEASE.Add(RELEASE487);


					}
					break;

				}
				} finally { DebugExitSubRule(193); }

				DebugLocation(1061, 13);
				SAVEPOINT488=(IToken)Match(input,SAVEPOINT,Follow._SAVEPOINT_in_savepoint8878); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SAVEPOINT.Add(SAVEPOINT488);

				DebugLocation(1061, 23);
				PushFollow(Follow._ident_in_savepoint8880);
				ident489=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident489.Tree);


				{
				// AST REWRITE
				// elements: SAVEPOINT, ident, RELEASE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1061:32: -> ^( SAVEPOINT ident ( RELEASE )? )
				{
					DebugLocation(1061, 35);
					// MySQL51Parser.g3:1061:35: ^( SAVEPOINT ident ( RELEASE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1061, 37);
					root_1 = (object)adaptor.BecomeRoot(stream_SAVEPOINT.NextNode(), root_1);

					DebugLocation(1061, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(1061, 53);
					// MySQL51Parser.g3:1061:53: ( RELEASE )?
					if (stream_RELEASE.HasNext)
					{
						DebugLocation(1061, 53);
						adaptor.AddChild(root_1, stream_RELEASE.NextNode());

					}
					stream_RELEASE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1062:4: ROLLBACK ( WORK )? TO ( SAVEPOINT )? ident
				{
				DebugLocation(1062, 4);
				ROLLBACK490=(IToken)Match(input,ROLLBACK,Follow._ROLLBACK_in_savepoint8899); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ROLLBACK.Add(ROLLBACK490);

				DebugLocation(1062, 13);
				// MySQL51Parser.g3:1062:13: ( WORK )?
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==WORK))
				{
					alt194 = 1;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1062:13: WORK
					{
					DebugLocation(1062, 13);
					WORK491=(IToken)Match(input,WORK,Follow._WORK_in_savepoint8901); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WORK.Add(WORK491);


					}
					break;

				}
				} finally { DebugExitSubRule(194); }

				DebugLocation(1062, 19);
				TO492=(IToken)Match(input,TO,Follow._TO_in_savepoint8904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TO.Add(TO492);

				DebugLocation(1062, 22);
				// MySQL51Parser.g3:1062:22: ( SAVEPOINT )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_0 = input.LA(1);

				if ((LA195_0==SAVEPOINT))
				{
					int LA195_1 = input.LA(2);

					if ((LA195_1==ACTION||(LA195_1>=ADDDATE && LA195_1<=ALGORITHM)||LA195_1==ANY||LA195_1==ASCII||(LA195_1>=AT && LA195_1<=BACKUP)||LA195_1==BEGIN||(LA195_1>=BINLOG && LA195_1<=BIT)||(LA195_1>=BLOCK && LA195_1<=BOOLEAN)||LA195_1==BTREE||(LA195_1>=BYTE && LA195_1<=CACHE)||LA195_1==CASCADED||LA195_1==CHAIN||LA195_1==CHANGED||LA195_1==CHARSET||(LA195_1>=CHECKSUM && LA195_1<=CODE)||LA195_1==COLLATION||LA195_1==COLUMNS||LA195_1==COMMENT||(LA195_1>=COMMIT && LA195_1<=CONCURRENT)||(LA195_1>=CONNECTION && LA195_1<=CONSISTENT)||(LA195_1>=CONTAINS && LA195_1<=CONTEXT)||LA195_1==CONTRIBUTORS||LA195_1==CPU||LA195_1==CUBE||LA195_1==DATA||(LA195_1>=DATAFILE && LA195_1<=DATETIME)||LA195_1==DAY||LA195_1==DEALLOCATE||LA195_1==DEFINER||LA195_1==DELAY_KEY_WRITE||LA195_1==DES_KEY_FILE||(LA195_1>=DIRECTORY && LA195_1<=DISK)||LA195_1==DO||(LA195_1>=DUMPFILE && LA195_1<=DYNAMIC)||LA195_1==ENABLE||(LA195_1>=END && LA195_1<=ENUM)||(LA195_1>=ERRORS && LA195_1<=ESCAPE)||(LA195_1>=EVENT && LA195_1<=EVERY)||LA195_1==EXECUTE||LA195_1==EXPANSION||(LA195_1>=EXTENDED && LA195_1<=EXTENT_SIZE)||(LA195_1>=FAST && LA195_1<=FAULTS)||(LA195_1>=FIELDS && LA195_1<=FIXED)||LA195_1==FLUSH||(LA195_1>=FOUND && LA195_1<=FRAC_SECOND)||LA195_1==FULL||(LA195_1>=FUNCTION && LA195_1<=GLOBAL)||LA195_1==GRANTS||LA195_1==GROUP||(LA195_1>=HANDLER && LA195_1<=HASH)||LA195_1==HELP||(LA195_1>=HOST && LA195_1<=HOUR)||(LA195_1>=ID && LA195_1<=IDENTIFIED)||LA195_1==IMPORT||LA195_1==INDEXES||LA195_1==INITIAL_SIZE||LA195_1==INNOBASE||(LA195_1>=INSERT_METHOD && LA195_1<=INSTALL)||(LA195_1>=INVOKER && LA195_1<=IPC)||(LA195_1>=ISOLATION && LA195_1<=ISSUER)||LA195_1==KEY_BLOCK_SIZE||(LA195_1>=LABEL && LA195_1<=LAST)||LA195_1==LEAVES||LA195_1==LESS||LA195_1==LEVEL||(LA195_1>=LINESTRING && LA195_1<=LIST)||LA195_1==LOCAL||(LA195_1>=LOCKS && LA195_1<=LOGFILE)||LA195_1==LOGS||(LA195_1>=MASTER && LA195_1<=MASTER_SSL_KEY)||LA195_1==MASTER_USER||(LA195_1>=MAX_CONNECTIONS_PER_HOUR && LA195_1<=MEDIUM)||(LA195_1>=MEMORY && LA195_1<=MICROSECOND)||LA195_1==MIGRATE||LA195_1==MINUTE||LA195_1==MIN_ROWS||LA195_1==MODE||LA195_1==MODIFY||LA195_1==MONTH||(LA195_1>=MULTILINESTRING && LA195_1<=MUTEX)||(LA195_1>=NAME && LA195_1<=NATIONAL)||(LA195_1>=NCHAR && LA195_1<=NONE)||LA195_1==NO_WAIT||(LA195_1>=NVARCHAR && LA195_1<=OLD_PASSWORD)||LA195_1==ONE||(LA195_1>=ONE_SHOT && LA195_1<=OPEN)||LA195_1==OPTIONS||(LA195_1>=OWNER && LA195_1<=PLUGINS)||(LA195_1>=POINT && LA195_1<=PORT)||(LA195_1>=PREPARE && LA195_1<=PREV)||LA195_1==PRIVILEGES||(LA195_1>=PROCESS && LA195_1<=PROFILES)||(LA195_1>=QUARTER && LA195_1<=QUICK)||(LA195_1>=REBUILD && LA195_1<=REDUNDANT)||(LA195_1>=RELAY_LOG_FILE && LA195_1<=RELAY_THREAD)||(LA195_1>=RELOAD && LA195_1<=REMOVE)||(LA195_1>=REORGANIZE && LA195_1<=REPAIR)||LA195_1==REPEATABLE||LA195_1==REPLICATION||(LA195_1>=RESET && LA195_1<=RESTORE)||LA195_1==RESUME||LA195_1==RETURNS||(LA195_1>=ROLLBACK && LA195_1<=ROW_FORMAT)||(LA195_1>=RTREE && LA195_1<=SCHEDULE)||LA195_1==SECOND||LA195_1==SECURITY||(LA195_1>=SERIAL && LA195_1<=SESSION)||LA195_1==SHARE||(LA195_1>=SHUTDOWN && LA195_1<=SLAVE)||(LA195_1>=SNAPSHOT && LA195_1<=SOCKET)||(LA195_1>=SONAME && LA195_1<=SOURCE)||(LA195_1>=SQL_BUFFER_RESULT && LA195_1<=SQL_CACHE)||LA195_1==SQL_NO_CACHE||LA195_1==SQL_THREAD||LA195_1==START||(LA195_1>=STARTS && LA195_1<=STATUS)||(LA195_1>=STOP && LA195_1<=STORAGE)||(LA195_1>=STRING_KEYWORD && LA195_1<=SUBPARTITIONS)||(LA195_1>=SUPER && LA195_1<=SWITCHES)||(LA195_1>=TABLES && LA195_1<=TEMPTABLE)||(LA195_1>=TEXT && LA195_1<=THAN)||(LA195_1>=TIME && LA195_1<=TIMESTAMP_DIFF)||(LA195_1>=TRANSACTION && LA195_1<=TRANSACTIONAL)||LA195_1==TRIGGERS||(LA195_1>=TRUNCATE && LA195_1<=UNDEFINED)||(LA195_1>=UNDOFILE && LA195_1<=UNINSTALL)||LA195_1==UNKNOWN||LA195_1==UNTIL||LA195_1==UPGRADE||LA195_1==USER||LA195_1==USE_FRM||LA195_1==VALUE||LA195_1==VARIABLES||(LA195_1>=VIEW && LA195_1<=WEEK)||(LA195_1>=WORK && LA195_1<=WRAPPER)||(LA195_1>=X509 && LA195_1<=XA)||LA195_1==YEAR))
					{
						alt195 = 1;
					}
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1062:22: SAVEPOINT
					{
					DebugLocation(1062, 22);
					SAVEPOINT493=(IToken)Match(input,SAVEPOINT,Follow._SAVEPOINT_in_savepoint8906); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SAVEPOINT.Add(SAVEPOINT493);


					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(1062, 33);
				PushFollow(Follow._ident_in_savepoint8909);
				ident494=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident494.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1062:40: -> ^( ROLLBACK_POINT ident )
				{
					DebugLocation(1062, 43);
					// MySQL51Parser.g3:1062:43: ^( ROLLBACK_POINT ident )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1062, 45);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ROLLBACK_POINT, "ROLLBACK_POINT"), root_1);

					DebugLocation(1062, 60);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("savepoint", 79);
			LeaveRule("savepoint", 79);
			LeaveRule_savepoint();
		}
		DebugLocation(1063, 1);
		} finally { DebugExitRule(GrammarFileName, "savepoint"); }
		return retval;

	}
	// $ANTLR end "savepoint"

	private sealed partial class insert_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public insert_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_insert();
	partial void LeaveRule_insert();

	// $ANTLR start "insert"
	// MySQL51Parser.g3:1069:1: insert : INSERT (opt= LOW_PRIORITY |opt= DELAYED |opt= HIGH_PRIORITY )? ( IGNORE )? ( INTO )? table= simple_table_ref_no_alias ( insert_columns ( select | insert_values ) | set_columns ) ( on_dup_key )? -> ^( INSERT ( IGNORE )? ( INTO )? ( $opt)? ^( TABLE $table) ( insert_columns )? ( set_columns )? ( select )? ( on_dup_key )? ) ;
	[GrammarRule("insert")]
	private MySQL51Parser.insert_return insert()
	{
		EnterRule_insert();
		EnterRule("insert", 80);
		TraceIn("insert", 80);
		MySQL51Parser.insert_return retval = new MySQL51Parser.insert_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken opt = default(IToken);
		IToken INSERT495 = default(IToken);
		IToken IGNORE496 = default(IToken);
		IToken INTO497 = default(IToken);
		MySQL51Parser.simple_table_ref_no_alias_return table = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.insert_columns_return insert_columns498 = default(MySQL51Parser.insert_columns_return);
		MySQL51Parser.select_return select499 = default(MySQL51Parser.select_return);
		MySQL51Parser.insert_values_return insert_values500 = default(MySQL51Parser.insert_values_return);
		MySQL51Parser.set_columns_return set_columns501 = default(MySQL51Parser.set_columns_return);
		MySQL51Parser.on_dup_key_return on_dup_key502 = default(MySQL51Parser.on_dup_key_return);

		object opt_tree = default(object);
		object INSERT495_tree = default(object);
		object IGNORE496_tree = default(object);
		object INTO497_tree = default(object);
		RewriteRuleITokenStream stream_INSERT=new RewriteRuleITokenStream(adaptor,"token INSERT");
		RewriteRuleITokenStream stream_LOW_PRIORITY=new RewriteRuleITokenStream(adaptor,"token LOW_PRIORITY");
		RewriteRuleITokenStream stream_DELAYED=new RewriteRuleITokenStream(adaptor,"token DELAYED");
		RewriteRuleITokenStream stream_HIGH_PRIORITY=new RewriteRuleITokenStream(adaptor,"token HIGH_PRIORITY");
		RewriteRuleITokenStream stream_IGNORE=new RewriteRuleITokenStream(adaptor,"token IGNORE");
		RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
		RewriteRuleSubtreeStream stream_simple_table_ref_no_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_no_alias");
		RewriteRuleSubtreeStream stream_insert_columns=new RewriteRuleSubtreeStream(adaptor,"rule insert_columns");
		RewriteRuleSubtreeStream stream_select=new RewriteRuleSubtreeStream(adaptor,"rule select");
		RewriteRuleSubtreeStream stream_insert_values=new RewriteRuleSubtreeStream(adaptor,"rule insert_values");
		RewriteRuleSubtreeStream stream_set_columns=new RewriteRuleSubtreeStream(adaptor,"rule set_columns");
		RewriteRuleSubtreeStream stream_on_dup_key=new RewriteRuleSubtreeStream(adaptor,"rule on_dup_key");
		try { DebugEnterRule(GrammarFileName, "insert");
		DebugLocation(1069, 1);
		try
		{
			// MySQL51Parser.g3:1070:2: ( INSERT (opt= LOW_PRIORITY |opt= DELAYED |opt= HIGH_PRIORITY )? ( IGNORE )? ( INTO )? table= simple_table_ref_no_alias ( insert_columns ( select | insert_values ) | set_columns ) ( on_dup_key )? -> ^( INSERT ( IGNORE )? ( INTO )? ( $opt)? ^( TABLE $table) ( insert_columns )? ( set_columns )? ( select )? ( on_dup_key )? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1070:4: INSERT (opt= LOW_PRIORITY |opt= DELAYED |opt= HIGH_PRIORITY )? ( IGNORE )? ( INTO )? table= simple_table_ref_no_alias ( insert_columns ( select | insert_values ) | set_columns ) ( on_dup_key )?
			{
			DebugLocation(1070, 4);
			INSERT495=(IToken)Match(input,INSERT,Follow._INSERT_in_insert8933); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INSERT.Add(INSERT495);

			DebugLocation(1070, 11);
			// MySQL51Parser.g3:1070:11: (opt= LOW_PRIORITY |opt= DELAYED |opt= HIGH_PRIORITY )?
			int alt197=4;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			switch (input.LA(1))
			{
			case LOW_PRIORITY:
				{
				alt197 = 1;
				}
				break;
			case DELAYED:
				{
				alt197 = 2;
				}
				break;
			case HIGH_PRIORITY:
				{
				alt197 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1070:12: opt= LOW_PRIORITY
				{
				DebugLocation(1070, 15);
				opt=(IToken)Match(input,LOW_PRIORITY,Follow._LOW_PRIORITY_in_insert8938); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOW_PRIORITY.Add(opt);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1070:31: opt= DELAYED
				{
				DebugLocation(1070, 34);
				opt=(IToken)Match(input,DELAYED,Follow._DELAYED_in_insert8944); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DELAYED.Add(opt);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1070:45: opt= HIGH_PRIORITY
				{
				DebugLocation(1070, 48);
				opt=(IToken)Match(input,HIGH_PRIORITY,Follow._HIGH_PRIORITY_in_insert8950); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HIGH_PRIORITY.Add(opt);


				}
				break;

			}
			} finally { DebugExitSubRule(197); }

			DebugLocation(1071, 3);
			// MySQL51Parser.g3:1071:3: ( IGNORE )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==IGNORE))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1071:3: IGNORE
				{
				DebugLocation(1071, 3);
				IGNORE496=(IToken)Match(input,IGNORE,Follow._IGNORE_in_insert8956); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IGNORE.Add(IGNORE496);


				}
				break;

			}
			} finally { DebugExitSubRule(198); }

			DebugLocation(1071, 11);
			// MySQL51Parser.g3:1071:11: ( INTO )?
			int alt199=2;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==INTO))
			{
				alt199 = 1;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1071:11: INTO
				{
				DebugLocation(1071, 11);
				INTO497=(IToken)Match(input,INTO,Follow._INTO_in_insert8959); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INTO.Add(INTO497);


				}
				break;

			}
			} finally { DebugExitSubRule(199); }

			DebugLocation(1072, 8);
			PushFollow(Follow._simple_table_ref_no_alias_in_insert8966);
			table=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(table.Tree);
			DebugLocation(1073, 3);
			// MySQL51Parser.g3:1073:3: ( insert_columns ( select | insert_values ) | set_columns )
			int alt201=2;
			try { DebugEnterSubRule(201);
			try { DebugEnterDecision(201, false);
			int LA201_0 = input.LA(1);

			if ((LA201_0==LPAREN||LA201_0==SELECT||(LA201_0>=VALUE && LA201_0<=VALUES)))
			{
				alt201 = 1;
			}
			else if ((LA201_0==SET))
			{
				alt201 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1073:5: insert_columns ( select | insert_values )
				{
				DebugLocation(1073, 5);
				PushFollow(Follow._insert_columns_in_insert8972);
				insert_columns498=insert_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_insert_columns.Add(insert_columns498.Tree);
				DebugLocation(1073, 20);
				// MySQL51Parser.g3:1073:20: ( select | insert_values )
				int alt200=2;
				try { DebugEnterSubRule(200);
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==LPAREN||LA200_0==SELECT))
				{
					alt200 = 1;
				}
				else if (((LA200_0>=VALUE && LA200_0<=VALUES)))
				{
					alt200 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(200); }
				switch (alt200)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1073:22: select
					{
					DebugLocation(1073, 22);
					PushFollow(Follow._select_in_insert8976);
					select499=select();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select.Add(select499.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1073:31: insert_values
					{
					DebugLocation(1073, 31);
					PushFollow(Follow._insert_values_in_insert8980);
					insert_values500=insert_values();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_insert_values.Add(insert_values500.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(200); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1074:5: set_columns
				{
				DebugLocation(1074, 5);
				PushFollow(Follow._set_columns_in_insert8988);
				set_columns501=set_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_set_columns.Add(set_columns501.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(201); }

			DebugLocation(1076, 3);
			// MySQL51Parser.g3:1076:3: ( on_dup_key )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==ON))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1076:3: on_dup_key
				{
				DebugLocation(1076, 3);
				PushFollow(Follow._on_dup_key_in_insert8996);
				on_dup_key502=on_dup_key();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_on_dup_key.Add(on_dup_key502.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(202); }



			{
			// AST REWRITE
			// elements: INSERT, IGNORE, INTO, opt, table, insert_columns, set_columns, select, on_dup_key
			// token labels: opt
			// rule labels: table, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_opt=new RewriteRuleITokenStream(adaptor,"token opt",opt);
			RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table",table!=null?table.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1077:3: -> ^( INSERT ( IGNORE )? ( INTO )? ( $opt)? ^( TABLE $table) ( insert_columns )? ( set_columns )? ( select )? ( on_dup_key )? )
			{
				DebugLocation(1077, 6);
				// MySQL51Parser.g3:1077:6: ^( INSERT ( IGNORE )? ( INTO )? ( $opt)? ^( TABLE $table) ( insert_columns )? ( set_columns )? ( select )? ( on_dup_key )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1077, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_INSERT.NextNode(), root_1);

				DebugLocation(1077, 15);
				// MySQL51Parser.g3:1077:15: ( IGNORE )?
				if (stream_IGNORE.HasNext)
				{
					DebugLocation(1077, 15);
					adaptor.AddChild(root_1, stream_IGNORE.NextNode());

				}
				stream_IGNORE.Reset();
				DebugLocation(1077, 23);
				// MySQL51Parser.g3:1077:23: ( INTO )?
				if (stream_INTO.HasNext)
				{
					DebugLocation(1077, 23);
					adaptor.AddChild(root_1, stream_INTO.NextNode());

				}
				stream_INTO.Reset();
				DebugLocation(1077, 30);
				// MySQL51Parser.g3:1077:30: ( $opt)?
				if (stream_opt.HasNext)
				{
					DebugLocation(1077, 30);
					adaptor.AddChild(root_1, stream_opt.NextNode());

				}
				stream_opt.Reset();
				DebugLocation(1077, 35);
				// MySQL51Parser.g3:1077:35: ^( TABLE $table)
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(1077, 37);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_2);

				DebugLocation(1077, 44);
				adaptor.AddChild(root_2, stream_table.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(1080, 4);
				// MySQL51Parser.g3:1080:4: ( insert_columns )?
				if (stream_insert_columns.HasNext)
				{
					DebugLocation(1080, 4);
					adaptor.AddChild(root_1, stream_insert_columns.NextTree());

				}
				stream_insert_columns.Reset();
				DebugLocation(1081, 4);
				// MySQL51Parser.g3:1081:4: ( set_columns )?
				if (stream_set_columns.HasNext)
				{
					DebugLocation(1081, 4);
					adaptor.AddChild(root_1, stream_set_columns.NextTree());

				}
				stream_set_columns.Reset();
				DebugLocation(1082, 4);
				// MySQL51Parser.g3:1082:4: ( select )?
				if (stream_select.HasNext)
				{
					DebugLocation(1082, 4);
					adaptor.AddChild(root_1, stream_select.NextTree());

				}
				stream_select.Reset();
				DebugLocation(1083, 4);
				// MySQL51Parser.g3:1083:4: ( on_dup_key )?
				if (stream_on_dup_key.HasNext)
				{
					DebugLocation(1083, 4);
					adaptor.AddChild(root_1, stream_on_dup_key.NextTree());

				}
				stream_on_dup_key.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insert", 80);
			LeaveRule("insert", 80);
			LeaveRule_insert();
		}
		DebugLocation(1084, 1);
		} finally { DebugExitRule(GrammarFileName, "insert"); }
		return retval;

	}
	// $ANTLR end "insert"

	private sealed partial class insert_columns_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public insert_columns_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_insert_columns();
	partial void LeaveRule_insert_columns();

	// $ANTLR start "insert_columns"
	// MySQL51Parser.g3:1086:1: insert_columns : ( LPAREN ( column_name_list )? RPAREN )? ;
	[GrammarRule("insert_columns")]
	private MySQL51Parser.insert_columns_return insert_columns()
	{
		EnterRule_insert_columns();
		EnterRule("insert_columns", 81);
		TraceIn("insert_columns", 81);
		MySQL51Parser.insert_columns_return retval = new MySQL51Parser.insert_columns_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN503 = default(IToken);
		IToken RPAREN505 = default(IToken);
		MySQL51Parser.column_name_list_return column_name_list504 = default(MySQL51Parser.column_name_list_return);

		object LPAREN503_tree = default(object);
		object RPAREN505_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "insert_columns");
		DebugLocation(1086, 1);
		try
		{
			// MySQL51Parser.g3:1087:2: ( ( LPAREN ( column_name_list )? RPAREN )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1087:4: ( LPAREN ( column_name_list )? RPAREN )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1087, 4);
			// MySQL51Parser.g3:1087:4: ( LPAREN ( column_name_list )? RPAREN )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_0 = input.LA(1);

			if ((LA204_0==LPAREN))
			{
				int LA204_1 = input.LA(2);

				if ((LA204_1==ACTION||(LA204_1>=ADDDATE && LA204_1<=ALGORITHM)||LA204_1==ANY||LA204_1==ASCII||(LA204_1>=AT && LA204_1<=BACKUP)||LA204_1==BEGIN||(LA204_1>=BINLOG && LA204_1<=BIT)||(LA204_1>=BLOCK && LA204_1<=BOOLEAN)||LA204_1==BTREE||(LA204_1>=BYTE && LA204_1<=CACHE)||LA204_1==CASCADED||LA204_1==CHAIN||LA204_1==CHANGED||LA204_1==CHARSET||(LA204_1>=CHECKSUM && LA204_1<=CODE)||LA204_1==COLLATION||LA204_1==COLUMNS||LA204_1==COMMENT||(LA204_1>=COMMIT && LA204_1<=CONCURRENT)||(LA204_1>=CONNECTION && LA204_1<=CONSISTENT)||(LA204_1>=CONTAINS && LA204_1<=CONTEXT)||LA204_1==CONTRIBUTORS||LA204_1==CPU||LA204_1==CUBE||LA204_1==DATA||(LA204_1>=DATAFILE && LA204_1<=DATETIME)||LA204_1==DAY||LA204_1==DEALLOCATE||LA204_1==DEFINER||LA204_1==DELAY_KEY_WRITE||LA204_1==DES_KEY_FILE||(LA204_1>=DIRECTORY && LA204_1<=DISK)||LA204_1==DO||(LA204_1>=DUMPFILE && LA204_1<=DYNAMIC)||LA204_1==ENABLE||(LA204_1>=END && LA204_1<=ENUM)||(LA204_1>=ERRORS && LA204_1<=ESCAPE)||(LA204_1>=EVENT && LA204_1<=EVERY)||LA204_1==EXECUTE||LA204_1==EXPANSION||(LA204_1>=EXTENDED && LA204_1<=EXTENT_SIZE)||(LA204_1>=FAST && LA204_1<=FAULTS)||(LA204_1>=FIELDS && LA204_1<=FIXED)||LA204_1==FLUSH||(LA204_1>=FOUND && LA204_1<=FRAC_SECOND)||LA204_1==FULL||(LA204_1>=FUNCTION && LA204_1<=GLOBAL)||LA204_1==GRANTS||LA204_1==GROUP||(LA204_1>=HANDLER && LA204_1<=HASH)||LA204_1==HELP||(LA204_1>=HOST && LA204_1<=HOUR)||(LA204_1>=ID && LA204_1<=IDENTIFIED)||LA204_1==IMPORT||LA204_1==INDEXES||LA204_1==INITIAL_SIZE||LA204_1==INNOBASE||(LA204_1>=INSERT_METHOD && LA204_1<=INSTALL)||(LA204_1>=INVOKER && LA204_1<=IPC)||(LA204_1>=ISOLATION && LA204_1<=ISSUER)||LA204_1==KEY_BLOCK_SIZE||(LA204_1>=LABEL && LA204_1<=LAST)||LA204_1==LEAVES||LA204_1==LESS||LA204_1==LEVEL||(LA204_1>=LINESTRING && LA204_1<=LIST)||LA204_1==LOCAL||(LA204_1>=LOCKS && LA204_1<=LOGFILE)||LA204_1==LOGS||(LA204_1>=MASTER && LA204_1<=MASTER_SSL_KEY)||LA204_1==MASTER_USER||(LA204_1>=MAX_CONNECTIONS_PER_HOUR && LA204_1<=MEDIUM)||(LA204_1>=MEMORY && LA204_1<=MICROSECOND)||LA204_1==MIGRATE||LA204_1==MINUTE||LA204_1==MIN_ROWS||LA204_1==MODE||LA204_1==MODIFY||LA204_1==MONTH||(LA204_1>=MULTILINESTRING && LA204_1<=MUTEX)||(LA204_1>=NAME && LA204_1<=NATIONAL)||(LA204_1>=NCHAR && LA204_1<=NONE)||LA204_1==NO_WAIT||(LA204_1>=NVARCHAR && LA204_1<=OLD_PASSWORD)||LA204_1==ONE||(LA204_1>=ONE_SHOT && LA204_1<=OPEN)||LA204_1==OPTIONS||(LA204_1>=OWNER && LA204_1<=PLUGINS)||(LA204_1>=POINT && LA204_1<=PORT)||(LA204_1>=PREPARE && LA204_1<=PREV)||LA204_1==PRIVILEGES||(LA204_1>=PROCESS && LA204_1<=PROFILES)||(LA204_1>=QUARTER && LA204_1<=QUICK)||(LA204_1>=REBUILD && LA204_1<=REDUNDANT)||(LA204_1>=RELAY_LOG_FILE && LA204_1<=RELAY_THREAD)||(LA204_1>=RELOAD && LA204_1<=REMOVE)||(LA204_1>=REORGANIZE && LA204_1<=REPAIR)||LA204_1==REPEATABLE||LA204_1==REPLICATION||(LA204_1>=RESET && LA204_1<=RESTORE)||LA204_1==RESUME||LA204_1==RETURNS||(LA204_1>=ROLLBACK && LA204_1<=SCHEDULE)||LA204_1==SECOND||LA204_1==SECURITY||(LA204_1>=SERIAL && LA204_1<=SESSION)||LA204_1==SHARE||(LA204_1>=SHUTDOWN && LA204_1<=SLAVE)||(LA204_1>=SNAPSHOT && LA204_1<=SOCKET)||(LA204_1>=SONAME && LA204_1<=SOURCE)||(LA204_1>=SQL_BUFFER_RESULT && LA204_1<=SQL_CACHE)||LA204_1==SQL_NO_CACHE||LA204_1==SQL_THREAD||LA204_1==START||(LA204_1>=STARTS && LA204_1<=STATUS)||(LA204_1>=STOP && LA204_1<=STORAGE)||(LA204_1>=STRING_KEYWORD && LA204_1<=SUBPARTITIONS)||(LA204_1>=SUPER && LA204_1<=SWITCHES)||(LA204_1>=TABLES && LA204_1<=TEMPTABLE)||(LA204_1>=TEXT && LA204_1<=THAN)||(LA204_1>=TIME && LA204_1<=TIMESTAMP_DIFF)||(LA204_1>=TRANSACTION && LA204_1<=TRANSACTIONAL)||LA204_1==TRIGGERS||(LA204_1>=TRUNCATE && LA204_1<=UNDEFINED)||(LA204_1>=UNDOFILE && LA204_1<=UNINSTALL)||LA204_1==UNKNOWN||LA204_1==UNTIL||LA204_1==UPGRADE||LA204_1==USER||LA204_1==USE_FRM||LA204_1==VALUE||LA204_1==VARIABLES||(LA204_1>=VIEW && LA204_1<=WEEK)||(LA204_1>=WORK && LA204_1<=WRAPPER)||(LA204_1>=X509 && LA204_1<=XA)||LA204_1==YEAR))
				{
					alt204 = 1;
				}
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1087:5: LPAREN ( column_name_list )? RPAREN
				{
				DebugLocation(1087, 5);
				LPAREN503=(IToken)Match(input,LPAREN,Follow._LPAREN_in_insert_columns9068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN503_tree = (object)adaptor.Create(LPAREN503);
				adaptor.AddChild(root_0, LPAREN503_tree);
				}
				DebugLocation(1087, 12);
				// MySQL51Parser.g3:1087:12: ( column_name_list )?
				int alt203=2;
				try { DebugEnterSubRule(203);
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==ACTION||(LA203_0>=ADDDATE && LA203_0<=ALGORITHM)||LA203_0==ANY||LA203_0==ASCII||(LA203_0>=AT && LA203_0<=BACKUP)||LA203_0==BEGIN||(LA203_0>=BINLOG && LA203_0<=BIT)||(LA203_0>=BLOCK && LA203_0<=BOOLEAN)||LA203_0==BTREE||(LA203_0>=BYTE && LA203_0<=CACHE)||LA203_0==CASCADED||LA203_0==CHAIN||LA203_0==CHANGED||LA203_0==CHARSET||(LA203_0>=CHECKSUM && LA203_0<=CODE)||LA203_0==COLLATION||LA203_0==COLUMNS||LA203_0==COMMENT||(LA203_0>=COMMIT && LA203_0<=CONCURRENT)||(LA203_0>=CONNECTION && LA203_0<=CONSISTENT)||(LA203_0>=CONTAINS && LA203_0<=CONTEXT)||LA203_0==CONTRIBUTORS||LA203_0==CPU||LA203_0==CUBE||LA203_0==DATA||(LA203_0>=DATAFILE && LA203_0<=DATETIME)||LA203_0==DAY||LA203_0==DEALLOCATE||LA203_0==DEFINER||LA203_0==DELAY_KEY_WRITE||LA203_0==DES_KEY_FILE||(LA203_0>=DIRECTORY && LA203_0<=DISK)||LA203_0==DO||(LA203_0>=DUMPFILE && LA203_0<=DYNAMIC)||LA203_0==ENABLE||(LA203_0>=END && LA203_0<=ENUM)||(LA203_0>=ERRORS && LA203_0<=ESCAPE)||(LA203_0>=EVENT && LA203_0<=EVERY)||LA203_0==EXECUTE||LA203_0==EXPANSION||(LA203_0>=EXTENDED && LA203_0<=EXTENT_SIZE)||(LA203_0>=FAST && LA203_0<=FAULTS)||(LA203_0>=FIELDS && LA203_0<=FIXED)||LA203_0==FLUSH||(LA203_0>=FOUND && LA203_0<=FRAC_SECOND)||LA203_0==FULL||(LA203_0>=FUNCTION && LA203_0<=GLOBAL)||LA203_0==GRANTS||LA203_0==GROUP||(LA203_0>=HANDLER && LA203_0<=HASH)||LA203_0==HELP||(LA203_0>=HOST && LA203_0<=HOUR)||(LA203_0>=ID && LA203_0<=IDENTIFIED)||LA203_0==IMPORT||LA203_0==INDEXES||LA203_0==INITIAL_SIZE||LA203_0==INNOBASE||(LA203_0>=INSERT_METHOD && LA203_0<=INSTALL)||(LA203_0>=INVOKER && LA203_0<=IPC)||(LA203_0>=ISOLATION && LA203_0<=ISSUER)||LA203_0==KEY_BLOCK_SIZE||(LA203_0>=LABEL && LA203_0<=LAST)||LA203_0==LEAVES||LA203_0==LESS||LA203_0==LEVEL||(LA203_0>=LINESTRING && LA203_0<=LIST)||LA203_0==LOCAL||(LA203_0>=LOCKS && LA203_0<=LOGFILE)||LA203_0==LOGS||(LA203_0>=MASTER && LA203_0<=MASTER_SSL_KEY)||LA203_0==MASTER_USER||(LA203_0>=MAX_CONNECTIONS_PER_HOUR && LA203_0<=MEDIUM)||(LA203_0>=MEMORY && LA203_0<=MICROSECOND)||LA203_0==MIGRATE||LA203_0==MINUTE||LA203_0==MIN_ROWS||LA203_0==MODE||LA203_0==MODIFY||LA203_0==MONTH||(LA203_0>=MULTILINESTRING && LA203_0<=MUTEX)||(LA203_0>=NAME && LA203_0<=NATIONAL)||(LA203_0>=NCHAR && LA203_0<=NONE)||LA203_0==NO_WAIT||(LA203_0>=NVARCHAR && LA203_0<=OLD_PASSWORD)||LA203_0==ONE||(LA203_0>=ONE_SHOT && LA203_0<=OPEN)||LA203_0==OPTIONS||(LA203_0>=OWNER && LA203_0<=PLUGINS)||(LA203_0>=POINT && LA203_0<=PORT)||(LA203_0>=PREPARE && LA203_0<=PREV)||LA203_0==PRIVILEGES||(LA203_0>=PROCESS && LA203_0<=PROFILES)||(LA203_0>=QUARTER && LA203_0<=QUICK)||(LA203_0>=REBUILD && LA203_0<=REDUNDANT)||(LA203_0>=RELAY_LOG_FILE && LA203_0<=RELAY_THREAD)||(LA203_0>=RELOAD && LA203_0<=REMOVE)||(LA203_0>=REORGANIZE && LA203_0<=REPAIR)||LA203_0==REPEATABLE||LA203_0==REPLICATION||(LA203_0>=RESET && LA203_0<=RESTORE)||LA203_0==RESUME||LA203_0==RETURNS||(LA203_0>=ROLLBACK && LA203_0<=ROW_FORMAT)||(LA203_0>=RTREE && LA203_0<=SCHEDULE)||LA203_0==SECOND||LA203_0==SECURITY||(LA203_0>=SERIAL && LA203_0<=SESSION)||LA203_0==SHARE||(LA203_0>=SHUTDOWN && LA203_0<=SLAVE)||(LA203_0>=SNAPSHOT && LA203_0<=SOCKET)||(LA203_0>=SONAME && LA203_0<=SOURCE)||(LA203_0>=SQL_BUFFER_RESULT && LA203_0<=SQL_CACHE)||LA203_0==SQL_NO_CACHE||LA203_0==SQL_THREAD||LA203_0==START||(LA203_0>=STARTS && LA203_0<=STATUS)||(LA203_0>=STOP && LA203_0<=STORAGE)||(LA203_0>=STRING_KEYWORD && LA203_0<=SUBPARTITIONS)||(LA203_0>=SUPER && LA203_0<=SWITCHES)||(LA203_0>=TABLES && LA203_0<=TEMPTABLE)||(LA203_0>=TEXT && LA203_0<=THAN)||(LA203_0>=TIME && LA203_0<=TIMESTAMP_DIFF)||(LA203_0>=TRANSACTION && LA203_0<=TRANSACTIONAL)||LA203_0==TRIGGERS||(LA203_0>=TRUNCATE && LA203_0<=UNDEFINED)||(LA203_0>=UNDOFILE && LA203_0<=UNINSTALL)||LA203_0==UNKNOWN||LA203_0==UNTIL||LA203_0==UPGRADE||LA203_0==USER||LA203_0==USE_FRM||LA203_0==VALUE||LA203_0==VARIABLES||(LA203_0>=VIEW && LA203_0<=WEEK)||(LA203_0>=WORK && LA203_0<=WRAPPER)||(LA203_0>=X509 && LA203_0<=XA)||LA203_0==YEAR))
				{
					alt203 = 1;
				}
				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1087:12: column_name_list
					{
					DebugLocation(1087, 12);
					PushFollow(Follow._column_name_list_in_insert_columns9070);
					column_name_list504=column_name_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, column_name_list504.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(203); }

				DebugLocation(1087, 30);
				RPAREN505=(IToken)Match(input,RPAREN,Follow._RPAREN_in_insert_columns9073); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN505_tree = (object)adaptor.Create(RPAREN505);
				adaptor.AddChild(root_0, RPAREN505_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insert_columns", 81);
			LeaveRule("insert_columns", 81);
			LeaveRule_insert_columns();
		}
		DebugLocation(1088, 1);
		} finally { DebugExitRule(GrammarFileName, "insert_columns"); }
		return retval;

	}
	// $ANTLR end "insert_columns"

	private sealed partial class insert_values_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public insert_values_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_insert_values();
	partial void LeaveRule_insert_values();

	// $ANTLR start "insert_values"
	// MySQL51Parser.g3:1090:1: insert_values : ( VALUE | VALUES ) LPAREN val+= insert_default_or_expression ( COMMA val+= insert_default_or_expression )* RPAREN -> ^( INSERT_VALUES VALUES[] ( $val)+ ) ;
	[GrammarRule("insert_values")]
	private MySQL51Parser.insert_values_return insert_values()
	{
		EnterRule_insert_values();
		EnterRule("insert_values", 82);
		TraceIn("insert_values", 82);
		MySQL51Parser.insert_values_return retval = new MySQL51Parser.insert_values_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VALUE506 = default(IToken);
		IToken VALUES507 = default(IToken);
		IToken LPAREN508 = default(IToken);
		IToken COMMA509 = default(IToken);
		IToken RPAREN510 = default(IToken);
		List<object> list_val = null;
		MySQL51Parser.insert_default_or_expression_return val = default(MySQL51Parser.insert_default_or_expression_return);
		object VALUE506_tree = default(object);
		object VALUES507_tree = default(object);
		object LPAREN508_tree = default(object);
		object COMMA509_tree = default(object);
		object RPAREN510_tree = default(object);
		RewriteRuleITokenStream stream_VALUE=new RewriteRuleITokenStream(adaptor,"token VALUE");
		RewriteRuleITokenStream stream_VALUES=new RewriteRuleITokenStream(adaptor,"token VALUES");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_insert_default_or_expression=new RewriteRuleSubtreeStream(adaptor,"rule insert_default_or_expression");
		try { DebugEnterRule(GrammarFileName, "insert_values");
		DebugLocation(1090, 1);
		try
		{
			// MySQL51Parser.g3:1091:2: ( ( VALUE | VALUES ) LPAREN val+= insert_default_or_expression ( COMMA val+= insert_default_or_expression )* RPAREN -> ^( INSERT_VALUES VALUES[] ( $val)+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1091:4: ( VALUE | VALUES ) LPAREN val+= insert_default_or_expression ( COMMA val+= insert_default_or_expression )* RPAREN
			{
			DebugLocation(1091, 4);
			// MySQL51Parser.g3:1091:4: ( VALUE | VALUES )
			int alt205=2;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==VALUE))
			{
				alt205 = 1;
			}
			else if ((LA205_0==VALUES))
			{
				alt205 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 205, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1091:5: VALUE
				{
				DebugLocation(1091, 5);
				VALUE506=(IToken)Match(input,VALUE,Follow._VALUE_in_insert_values9089); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VALUE.Add(VALUE506);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1091:11: VALUES
				{
				DebugLocation(1091, 11);
				VALUES507=(IToken)Match(input,VALUES,Follow._VALUES_in_insert_values9091); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VALUES.Add(VALUES507);


				}
				break;

			}
			} finally { DebugExitSubRule(205); }

			DebugLocation(1091, 19);
			LPAREN508=(IToken)Match(input,LPAREN,Follow._LPAREN_in_insert_values9094); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN508);

			DebugLocation(1091, 29);
			PushFollow(Follow._insert_default_or_expression_in_insert_values9098);
			val=insert_default_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_insert_default_or_expression.Add(val.Tree);
			if (list_val==null) list_val=new List<object>();
			list_val.Add(val.Tree);

			DebugLocation(1091, 60);
			// MySQL51Parser.g3:1091:60: ( COMMA val+= insert_default_or_expression )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==COMMA))
				{
					alt206 = 1;
				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1091:61: COMMA val+= insert_default_or_expression
					{
					DebugLocation(1091, 61);
					COMMA509=(IToken)Match(input,COMMA,Follow._COMMA_in_insert_values9101); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA509);

					DebugLocation(1091, 70);
					PushFollow(Follow._insert_default_or_expression_in_insert_values9105);
					val=insert_default_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_insert_default_or_expression.Add(val.Tree);
					if (list_val==null) list_val=new List<object>();
					list_val.Add(val.Tree);


					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }

			DebugLocation(1091, 103);
			RPAREN510=(IToken)Match(input,RPAREN,Follow._RPAREN_in_insert_values9109); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN510);



			{
			// AST REWRITE
			// elements: VALUES, val
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: val
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"token val",list_val);
			root_0 = (object)adaptor.Nil();
			// 1092:4: -> ^( INSERT_VALUES VALUES[] ( $val)+ )
			{
				DebugLocation(1092, 7);
				// MySQL51Parser.g3:1092:7: ^( INSERT_VALUES VALUES[] ( $val)+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1092, 9);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INSERT_VALUES, "INSERT_VALUES"), root_1);

				DebugLocation(1092, 23);
				adaptor.AddChild(root_1, (object)adaptor.Create(VALUES, "VALUES"));
				DebugLocation(1092, 33);
				if (!(stream_val.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_val.HasNext )
				{
					DebugLocation(1092, 33);
					adaptor.AddChild(root_1, stream_val.NextTree());

				}
				stream_val.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insert_values", 82);
			LeaveRule("insert_values", 82);
			LeaveRule_insert_values();
		}
		DebugLocation(1093, 1);
		} finally { DebugExitRule(GrammarFileName, "insert_values"); }
		return retval;

	}
	// $ANTLR end "insert_values"

	private sealed partial class insert_default_or_expression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public insert_default_or_expression_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_insert_default_or_expression();
	partial void LeaveRule_insert_default_or_expression();

	// $ANTLR start "insert_default_or_expression"
	// MySQL51Parser.g3:1095:1: insert_default_or_expression : ( DEFAULT | expr );
	[GrammarRule("insert_default_or_expression")]
	private MySQL51Parser.insert_default_or_expression_return insert_default_or_expression()
	{
		EnterRule_insert_default_or_expression();
		EnterRule("insert_default_or_expression", 83);
		TraceIn("insert_default_or_expression", 83);
		MySQL51Parser.insert_default_or_expression_return retval = new MySQL51Parser.insert_default_or_expression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DEFAULT511 = default(IToken);
		MySQL51Parser.expr_return expr512 = default(MySQL51Parser.expr_return);

		object DEFAULT511_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "insert_default_or_expression");
		DebugLocation(1095, 1);
		try
		{
			// MySQL51Parser.g3:1096:2: ( DEFAULT | expr )
			int alt207=2;
			try { DebugEnterDecision(207, false);
			int LA207_0 = input.LA(1);

			if ((LA207_0==DEFAULT))
			{
				alt207 = 1;
			}
			else if ((LA207_0==ACTION||(LA207_0>=ADDDATE && LA207_0<=ALGORITHM)||LA207_0==ANY||LA207_0==ASCII||(LA207_0>=AT && LA207_0<=BACKUP)||LA207_0==BEGIN||(LA207_0>=BINARY && LA207_0<=BIT)||LA207_0==BITWISE_INVERSION||(LA207_0>=BIT_AND && LA207_0<=BIT_XOR)||(LA207_0>=BLOCK && LA207_0<=BOOLEAN)||LA207_0==BTREE||(LA207_0>=BYTE && LA207_0<=CACHE)||(LA207_0>=CASCADED && LA207_0<=CHAIN)||(LA207_0>=CHANGED && LA207_0<=CHAR)||LA207_0==CHARSET||(LA207_0>=CHECKSUM && LA207_0<=COLLATION)||LA207_0==COLUMNS||LA207_0==COMMENT||(LA207_0>=COMMIT && LA207_0<=CONCURRENT)||(LA207_0>=CONNECTION && LA207_0<=CONSISTENT)||(LA207_0>=CONTAINS && LA207_0<=CONTEXT)||LA207_0==CONTRIBUTORS||(LA207_0>=COUNT && LA207_0<=CPU)||(LA207_0>=CUBE && LA207_0<=CURRENT_USER)||LA207_0==CURTIME||(LA207_0>=DATA && LA207_0<=DATABASE)||(LA207_0>=DATAFILE && LA207_0<=DATE_ADD)||LA207_0==DATE_SUB||LA207_0==DAY||LA207_0==DEALLOCATE||LA207_0==DEFINER||LA207_0==DELAY_KEY_WRITE||LA207_0==DES_KEY_FILE||(LA207_0>=DIRECTORY && LA207_0<=DISK)||LA207_0==DO||(LA207_0>=DUMPFILE && LA207_0<=DYNAMIC)||LA207_0==ENABLE||(LA207_0>=END && LA207_0<=ENUM)||(LA207_0>=ERRORS && LA207_0<=ESCAPE)||(LA207_0>=EVENT && LA207_0<=EVERY)||(LA207_0>=EXECUTE && LA207_0<=EXISTS)||LA207_0==EXPANSION||(LA207_0>=EXTENDED && LA207_0<=FAULTS)||(LA207_0>=FIELDS && LA207_0<=FIXED)||LA207_0==FLUSH||(LA207_0>=FOUND && LA207_0<=FRAC_SECOND)||LA207_0==FULL||(LA207_0>=FUNCTION && LA207_0<=GLOBAL_VARIABLE)||LA207_0==GRANTS||(LA207_0>=GROUP && LA207_0<=HASH)||(LA207_0>=HELP && LA207_0<=HEXA_VALUE)||(LA207_0>=HOST && LA207_0<=HOUR)||(LA207_0>=ID && LA207_0<=IFNULL)||LA207_0==IMPORT||LA207_0==INDEXES||LA207_0==INITIAL_SIZE||LA207_0==INNOBASE||(LA207_0>=INSERT && LA207_0<=INSTALL)||LA207_0==INTERVAL||(LA207_0>=INT_NUMBER && LA207_0<=IPC)||(LA207_0>=ISOLATION && LA207_0<=ISSUER)||LA207_0==KEY_BLOCK_SIZE||(LA207_0>=LABEL && LA207_0<=LCURLY)||(LA207_0>=LEAVES && LA207_0<=LEFT)||LA207_0==LESS||LA207_0==LEVEL||(LA207_0>=LINESTRING && LA207_0<=LIST)||LA207_0==LOCAL||(LA207_0>=LOCKS && LA207_0<=LOGFILE)||LA207_0==LOGS||(LA207_0>=LPAREN && LA207_0<=MASTER_SSL_KEY)||(LA207_0>=MASTER_USER && LA207_0<=MEDIUM)||(LA207_0>=MEMORY && LA207_0<=MID)||(LA207_0>=MIGRATE && LA207_0<=MINUTE)||(LA207_0>=MIN_ROWS && LA207_0<=MODE)||LA207_0==MODIFY||LA207_0==MONTH||(LA207_0>=MULTILINESTRING && LA207_0<=MUTEX)||(LA207_0>=NAME && LA207_0<=NATIONAL)||(LA207_0>=NCHAR && LA207_0<=NOT)||(LA207_0>=NOT_OP && LA207_0<=NO_WAIT)||(LA207_0>=NULL && LA207_0<=NULLIF)||LA207_0==NUMBER||(LA207_0>=NVARCHAR && LA207_0<=OLD_PASSWORD)||LA207_0==ONE||(LA207_0>=ONE_SHOT && LA207_0<=OPEN)||LA207_0==OPTIONS||(LA207_0>=OWNER && LA207_0<=POSITION)||(LA207_0>=PREPARE && LA207_0<=PREV)||LA207_0==PRIVILEGES||(LA207_0>=PROCESS && LA207_0<=PROFILES)||(LA207_0>=QUARTER && LA207_0<=QUICK)||(LA207_0>=REBUILD && LA207_0<=REDUNDANT)||(LA207_0>=RELAY_LOG_FILE && LA207_0<=RELAY_THREAD)||(LA207_0>=RELOAD && LA207_0<=REMOVE)||(LA207_0>=REORGANIZE && LA207_0<=REPLICATION)||(LA207_0>=RESET && LA207_0<=RESTORE)||LA207_0==RESUME||LA207_0==RETURNS||LA207_0==RIGHT||(LA207_0>=ROLLBACK && LA207_0<=ROW_FORMAT)||(LA207_0>=RTREE && LA207_0<=SCHEDULE)||LA207_0==SECOND||LA207_0==SECURITY||(LA207_0>=SERIAL && LA207_0<=SESSION_VARIABLE)||LA207_0==SHARE||(LA207_0>=SHUTDOWN && LA207_0<=SLAVE)||(LA207_0>=SNAPSHOT && LA207_0<=SOCKET)||(LA207_0>=SONAME && LA207_0<=SOURCE)||(LA207_0>=SQL_BUFFER_RESULT && LA207_0<=SQL_CACHE)||LA207_0==SQL_NO_CACHE||LA207_0==SQL_THREAD||LA207_0==START||(LA207_0>=STARTS && LA207_0<=STORAGE)||(LA207_0>=STRING && LA207_0<=SYSTEM_USER)||(LA207_0>=TABLES && LA207_0<=TEMPTABLE)||(LA207_0>=TEXT && LA207_0<=THAN)||(LA207_0>=TIME && LA207_0<=TIMESTAMP_DIFF)||(LA207_0>=TRANSACTION && LA207_0<=TRANSACTIONAL)||(LA207_0>=TRIGGERS && LA207_0<=UNDEFINED)||(LA207_0>=UNDOFILE && LA207_0<=UNINSTALL)||LA207_0==UNKNOWN||LA207_0==UNTIL||LA207_0==UPGRADE||LA207_0==USER||LA207_0==USE_FRM||(LA207_0>=UTC_DATE && LA207_0<=VALUE)||LA207_0==VALUE_PLACEHOLDER||(LA207_0>=VARIABLES && LA207_0<=VARIANCE)||(LA207_0>=VAR_POP && LA207_0<=WEEK)||(LA207_0>=WORK && LA207_0<=WRAPPER)||(LA207_0>=X509 && LA207_0<=XA)||LA207_0==YEAR||LA207_0==CONCAT))
			{
				alt207 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1096:4: DEFAULT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1096, 4);
				DEFAULT511=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_insert_default_or_expression9136); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DEFAULT511_tree = (object)adaptor.Create(DEFAULT511);
				adaptor.AddChild(root_0, DEFAULT511_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1097:4: expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1097, 4);
				PushFollow(Follow._expr_in_insert_default_or_expression9141);
				expr512=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr512.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insert_default_or_expression", 83);
			LeaveRule("insert_default_or_expression", 83);
			LeaveRule_insert_default_or_expression();
		}
		DebugLocation(1098, 1);
		} finally { DebugExitRule(GrammarFileName, "insert_default_or_expression"); }
		return retval;

	}
	// $ANTLR end "insert_default_or_expression"

	private sealed partial class set_columns_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public set_columns_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_set_columns();
	partial void LeaveRule_set_columns();

	// $ANTLR start "set_columns"
	// MySQL51Parser.g3:1100:1: set_columns : SET column_assignment ( COMMA column_assignment )* -> ^( SET ( column_assignment )+ ) ;
	[GrammarRule("set_columns")]
	private MySQL51Parser.set_columns_return set_columns()
	{
		EnterRule_set_columns();
		EnterRule("set_columns", 84);
		TraceIn("set_columns", 84);
		MySQL51Parser.set_columns_return retval = new MySQL51Parser.set_columns_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SET513 = default(IToken);
		IToken COMMA515 = default(IToken);
		MySQL51Parser.column_assignment_return column_assignment514 = default(MySQL51Parser.column_assignment_return);
		MySQL51Parser.column_assignment_return column_assignment516 = default(MySQL51Parser.column_assignment_return);

		object SET513_tree = default(object);
		object COMMA515_tree = default(object);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_column_assignment=new RewriteRuleSubtreeStream(adaptor,"rule column_assignment");
		try { DebugEnterRule(GrammarFileName, "set_columns");
		DebugLocation(1100, 1);
		try
		{
			// MySQL51Parser.g3:1101:2: ( SET column_assignment ( COMMA column_assignment )* -> ^( SET ( column_assignment )+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1101:4: SET column_assignment ( COMMA column_assignment )*
			{
			DebugLocation(1101, 4);
			SET513=(IToken)Match(input,SET,Follow._SET_in_set_columns9153); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET513);

			DebugLocation(1101, 8);
			PushFollow(Follow._column_assignment_in_set_columns9155);
			column_assignment514=column_assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column_assignment.Add(column_assignment514.Tree);
			DebugLocation(1101, 26);
			// MySQL51Parser.g3:1101:26: ( COMMA column_assignment )*
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==COMMA))
				{
					alt208 = 1;
				}


				} finally { DebugExitDecision(208); }
				switch ( alt208 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1101:27: COMMA column_assignment
					{
					DebugLocation(1101, 27);
					COMMA515=(IToken)Match(input,COMMA,Follow._COMMA_in_set_columns9158); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA515);

					DebugLocation(1101, 33);
					PushFollow(Follow._column_assignment_in_set_columns9160);
					column_assignment516=column_assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column_assignment.Add(column_assignment516.Tree);

					}
					break;

				default:
					goto loop208;
				}
			}

			loop208:
				;

			} finally { DebugExitSubRule(208); }



			{
			// AST REWRITE
			// elements: SET, column_assignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1101:53: -> ^( SET ( column_assignment )+ )
			{
				DebugLocation(1101, 56);
				// MySQL51Parser.g3:1101:56: ^( SET ( column_assignment )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1101, 58);
				root_1 = (object)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(1101, 62);
				if (!(stream_column_assignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_column_assignment.HasNext )
				{
					DebugLocation(1101, 62);
					adaptor.AddChild(root_1, stream_column_assignment.NextTree());

				}
				stream_column_assignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_columns", 84);
			LeaveRule("set_columns", 84);
			LeaveRule_set_columns();
		}
		DebugLocation(1102, 1);
		} finally { DebugExitRule(GrammarFileName, "set_columns"); }
		return retval;

	}
	// $ANTLR end "set_columns"

	private sealed partial class on_dup_key_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public on_dup_key_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_on_dup_key();
	partial void LeaveRule_on_dup_key();

	// $ANTLR start "on_dup_key"
	// MySQL51Parser.g3:1104:1: on_dup_key : ON DUPLICATE KEY UPDATE column_assignment ( COMMA column_assignment )* -> ^( DUPLICATE ( column_assignment )+ ) ;
	[GrammarRule("on_dup_key")]
	private MySQL51Parser.on_dup_key_return on_dup_key()
	{
		EnterRule_on_dup_key();
		EnterRule("on_dup_key", 85);
		TraceIn("on_dup_key", 85);
		MySQL51Parser.on_dup_key_return retval = new MySQL51Parser.on_dup_key_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ON517 = default(IToken);
		IToken DUPLICATE518 = default(IToken);
		IToken KEY519 = default(IToken);
		IToken UPDATE520 = default(IToken);
		IToken COMMA522 = default(IToken);
		MySQL51Parser.column_assignment_return column_assignment521 = default(MySQL51Parser.column_assignment_return);
		MySQL51Parser.column_assignment_return column_assignment523 = default(MySQL51Parser.column_assignment_return);

		object ON517_tree = default(object);
		object DUPLICATE518_tree = default(object);
		object KEY519_tree = default(object);
		object UPDATE520_tree = default(object);
		object COMMA522_tree = default(object);
		RewriteRuleITokenStream stream_ON=new RewriteRuleITokenStream(adaptor,"token ON");
		RewriteRuleITokenStream stream_DUPLICATE=new RewriteRuleITokenStream(adaptor,"token DUPLICATE");
		RewriteRuleITokenStream stream_KEY=new RewriteRuleITokenStream(adaptor,"token KEY");
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_column_assignment=new RewriteRuleSubtreeStream(adaptor,"rule column_assignment");
		try { DebugEnterRule(GrammarFileName, "on_dup_key");
		DebugLocation(1104, 1);
		try
		{
			// MySQL51Parser.g3:1105:2: ( ON DUPLICATE KEY UPDATE column_assignment ( COMMA column_assignment )* -> ^( DUPLICATE ( column_assignment )+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1105:4: ON DUPLICATE KEY UPDATE column_assignment ( COMMA column_assignment )*
			{
			DebugLocation(1105, 4);
			ON517=(IToken)Match(input,ON,Follow._ON_in_on_dup_key9182); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ON.Add(ON517);

			DebugLocation(1105, 7);
			DUPLICATE518=(IToken)Match(input,DUPLICATE,Follow._DUPLICATE_in_on_dup_key9184); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DUPLICATE.Add(DUPLICATE518);

			DebugLocation(1105, 17);
			KEY519=(IToken)Match(input,KEY,Follow._KEY_in_on_dup_key9186); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_KEY.Add(KEY519);

			DebugLocation(1105, 21);
			UPDATE520=(IToken)Match(input,UPDATE,Follow._UPDATE_in_on_dup_key9188); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE520);

			DebugLocation(1106, 3);
			PushFollow(Follow._column_assignment_in_on_dup_key9192);
			column_assignment521=column_assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column_assignment.Add(column_assignment521.Tree);
			DebugLocation(1106, 21);
			// MySQL51Parser.g3:1106:21: ( COMMA column_assignment )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=2;
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==COMMA))
				{
					alt209 = 1;
				}


				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1106:22: COMMA column_assignment
					{
					DebugLocation(1106, 22);
					COMMA522=(IToken)Match(input,COMMA,Follow._COMMA_in_on_dup_key9195); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA522);

					DebugLocation(1106, 28);
					PushFollow(Follow._column_assignment_in_on_dup_key9197);
					column_assignment523=column_assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column_assignment.Add(column_assignment523.Tree);

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }



			{
			// AST REWRITE
			// elements: DUPLICATE, column_assignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1106:48: -> ^( DUPLICATE ( column_assignment )+ )
			{
				DebugLocation(1106, 51);
				// MySQL51Parser.g3:1106:51: ^( DUPLICATE ( column_assignment )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1106, 53);
				root_1 = (object)adaptor.BecomeRoot(stream_DUPLICATE.NextNode(), root_1);

				DebugLocation(1106, 63);
				if (!(stream_column_assignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_column_assignment.HasNext )
				{
					DebugLocation(1106, 63);
					adaptor.AddChild(root_1, stream_column_assignment.NextTree());

				}
				stream_column_assignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("on_dup_key", 85);
			LeaveRule("on_dup_key", 85);
			LeaveRule_on_dup_key();
		}
		DebugLocation(1107, 1);
		} finally { DebugExitRule(GrammarFileName, "on_dup_key"); }
		return retval;

	}
	// $ANTLR end "on_dup_key"

	private sealed partial class column_assignment_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public column_assignment_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_column_assignment();
	partial void LeaveRule_column_assignment();

	// $ANTLR start "column_assignment"
	// MySQL51Parser.g3:1109:1: column_assignment : field_name EQUALS ( DEFAULT -> ^( EQUALS field_name DEFAULT ) | expr -> ^( EQUALS field_name expr ) ) ;
	[GrammarRule("column_assignment")]
	private MySQL51Parser.column_assignment_return column_assignment()
	{
		EnterRule_column_assignment();
		EnterRule("column_assignment", 86);
		TraceIn("column_assignment", 86);
		MySQL51Parser.column_assignment_return retval = new MySQL51Parser.column_assignment_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EQUALS525 = default(IToken);
		IToken DEFAULT526 = default(IToken);
		MySQL51Parser.field_name_return field_name524 = default(MySQL51Parser.field_name_return);
		MySQL51Parser.expr_return expr527 = default(MySQL51Parser.expr_return);

		object EQUALS525_tree = default(object);
		object DEFAULT526_tree = default(object);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_DEFAULT=new RewriteRuleITokenStream(adaptor,"token DEFAULT");
		RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "column_assignment");
		DebugLocation(1109, 1);
		try
		{
			// MySQL51Parser.g3:1110:2: ( field_name EQUALS ( DEFAULT -> ^( EQUALS field_name DEFAULT ) | expr -> ^( EQUALS field_name expr ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1110:4: field_name EQUALS ( DEFAULT -> ^( EQUALS field_name DEFAULT ) | expr -> ^( EQUALS field_name expr ) )
			{
			DebugLocation(1110, 4);
			PushFollow(Follow._field_name_in_column_assignment9219);
			field_name524=field_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_field_name.Add(field_name524.Tree);
			DebugLocation(1110, 15);
			EQUALS525=(IToken)Match(input,EQUALS,Follow._EQUALS_in_column_assignment9221); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS525);

			DebugLocation(1111, 3);
			// MySQL51Parser.g3:1111:3: ( DEFAULT -> ^( EQUALS field_name DEFAULT ) | expr -> ^( EQUALS field_name expr ) )
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			int LA210_0 = input.LA(1);

			if ((LA210_0==DEFAULT))
			{
				alt210 = 1;
			}
			else if ((LA210_0==ACTION||(LA210_0>=ADDDATE && LA210_0<=ALGORITHM)||LA210_0==ANY||LA210_0==ASCII||(LA210_0>=AT && LA210_0<=BACKUP)||LA210_0==BEGIN||(LA210_0>=BINARY && LA210_0<=BIT)||LA210_0==BITWISE_INVERSION||(LA210_0>=BIT_AND && LA210_0<=BIT_XOR)||(LA210_0>=BLOCK && LA210_0<=BOOLEAN)||LA210_0==BTREE||(LA210_0>=BYTE && LA210_0<=CACHE)||(LA210_0>=CASCADED && LA210_0<=CHAIN)||(LA210_0>=CHANGED && LA210_0<=CHAR)||LA210_0==CHARSET||(LA210_0>=CHECKSUM && LA210_0<=COLLATION)||LA210_0==COLUMNS||LA210_0==COMMENT||(LA210_0>=COMMIT && LA210_0<=CONCURRENT)||(LA210_0>=CONNECTION && LA210_0<=CONSISTENT)||(LA210_0>=CONTAINS && LA210_0<=CONTEXT)||LA210_0==CONTRIBUTORS||(LA210_0>=COUNT && LA210_0<=CPU)||(LA210_0>=CUBE && LA210_0<=CURRENT_USER)||LA210_0==CURTIME||(LA210_0>=DATA && LA210_0<=DATABASE)||(LA210_0>=DATAFILE && LA210_0<=DATE_ADD)||LA210_0==DATE_SUB||LA210_0==DAY||LA210_0==DEALLOCATE||LA210_0==DEFINER||LA210_0==DELAY_KEY_WRITE||LA210_0==DES_KEY_FILE||(LA210_0>=DIRECTORY && LA210_0<=DISK)||LA210_0==DO||(LA210_0>=DUMPFILE && LA210_0<=DYNAMIC)||LA210_0==ENABLE||(LA210_0>=END && LA210_0<=ENUM)||(LA210_0>=ERRORS && LA210_0<=ESCAPE)||(LA210_0>=EVENT && LA210_0<=EVERY)||(LA210_0>=EXECUTE && LA210_0<=EXISTS)||LA210_0==EXPANSION||(LA210_0>=EXTENDED && LA210_0<=FAULTS)||(LA210_0>=FIELDS && LA210_0<=FIXED)||LA210_0==FLUSH||(LA210_0>=FOUND && LA210_0<=FRAC_SECOND)||LA210_0==FULL||(LA210_0>=FUNCTION && LA210_0<=GLOBAL_VARIABLE)||LA210_0==GRANTS||(LA210_0>=GROUP && LA210_0<=HASH)||(LA210_0>=HELP && LA210_0<=HEXA_VALUE)||(LA210_0>=HOST && LA210_0<=HOUR)||(LA210_0>=ID && LA210_0<=IFNULL)||LA210_0==IMPORT||LA210_0==INDEXES||LA210_0==INITIAL_SIZE||LA210_0==INNOBASE||(LA210_0>=INSERT && LA210_0<=INSTALL)||LA210_0==INTERVAL||(LA210_0>=INT_NUMBER && LA210_0<=IPC)||(LA210_0>=ISOLATION && LA210_0<=ISSUER)||LA210_0==KEY_BLOCK_SIZE||(LA210_0>=LABEL && LA210_0<=LCURLY)||(LA210_0>=LEAVES && LA210_0<=LEFT)||LA210_0==LESS||LA210_0==LEVEL||(LA210_0>=LINESTRING && LA210_0<=LIST)||LA210_0==LOCAL||(LA210_0>=LOCKS && LA210_0<=LOGFILE)||LA210_0==LOGS||(LA210_0>=LPAREN && LA210_0<=MASTER_SSL_KEY)||(LA210_0>=MASTER_USER && LA210_0<=MEDIUM)||(LA210_0>=MEMORY && LA210_0<=MID)||(LA210_0>=MIGRATE && LA210_0<=MINUTE)||(LA210_0>=MIN_ROWS && LA210_0<=MODE)||LA210_0==MODIFY||LA210_0==MONTH||(LA210_0>=MULTILINESTRING && LA210_0<=MUTEX)||(LA210_0>=NAME && LA210_0<=NATIONAL)||(LA210_0>=NCHAR && LA210_0<=NOT)||(LA210_0>=NOT_OP && LA210_0<=NO_WAIT)||(LA210_0>=NULL && LA210_0<=NULLIF)||LA210_0==NUMBER||(LA210_0>=NVARCHAR && LA210_0<=OLD_PASSWORD)||LA210_0==ONE||(LA210_0>=ONE_SHOT && LA210_0<=OPEN)||LA210_0==OPTIONS||(LA210_0>=OWNER && LA210_0<=POSITION)||(LA210_0>=PREPARE && LA210_0<=PREV)||LA210_0==PRIVILEGES||(LA210_0>=PROCESS && LA210_0<=PROFILES)||(LA210_0>=QUARTER && LA210_0<=QUICK)||(LA210_0>=REBUILD && LA210_0<=REDUNDANT)||(LA210_0>=RELAY_LOG_FILE && LA210_0<=RELAY_THREAD)||(LA210_0>=RELOAD && LA210_0<=REMOVE)||(LA210_0>=REORGANIZE && LA210_0<=REPLICATION)||(LA210_0>=RESET && LA210_0<=RESTORE)||LA210_0==RESUME||LA210_0==RETURNS||LA210_0==RIGHT||(LA210_0>=ROLLBACK && LA210_0<=ROW_FORMAT)||(LA210_0>=RTREE && LA210_0<=SCHEDULE)||LA210_0==SECOND||LA210_0==SECURITY||(LA210_0>=SERIAL && LA210_0<=SESSION_VARIABLE)||LA210_0==SHARE||(LA210_0>=SHUTDOWN && LA210_0<=SLAVE)||(LA210_0>=SNAPSHOT && LA210_0<=SOCKET)||(LA210_0>=SONAME && LA210_0<=SOURCE)||(LA210_0>=SQL_BUFFER_RESULT && LA210_0<=SQL_CACHE)||LA210_0==SQL_NO_CACHE||LA210_0==SQL_THREAD||LA210_0==START||(LA210_0>=STARTS && LA210_0<=STORAGE)||(LA210_0>=STRING && LA210_0<=SYSTEM_USER)||(LA210_0>=TABLES && LA210_0<=TEMPTABLE)||(LA210_0>=TEXT && LA210_0<=THAN)||(LA210_0>=TIME && LA210_0<=TIMESTAMP_DIFF)||(LA210_0>=TRANSACTION && LA210_0<=TRANSACTIONAL)||(LA210_0>=TRIGGERS && LA210_0<=UNDEFINED)||(LA210_0>=UNDOFILE && LA210_0<=UNINSTALL)||LA210_0==UNKNOWN||LA210_0==UNTIL||LA210_0==UPGRADE||LA210_0==USER||LA210_0==USE_FRM||(LA210_0>=UTC_DATE && LA210_0<=VALUE)||LA210_0==VALUE_PLACEHOLDER||(LA210_0>=VARIABLES && LA210_0<=VARIANCE)||(LA210_0>=VAR_POP && LA210_0<=WEEK)||(LA210_0>=WORK && LA210_0<=WRAPPER)||(LA210_0>=X509 && LA210_0<=XA)||LA210_0==YEAR||LA210_0==CONCAT))
			{
				alt210 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 210, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1111:5: DEFAULT
				{
				DebugLocation(1111, 5);
				DEFAULT526=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_column_assignment9228); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEFAULT.Add(DEFAULT526);



				{
				// AST REWRITE
				// elements: EQUALS, field_name, DEFAULT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1111:15: -> ^( EQUALS field_name DEFAULT )
				{
					DebugLocation(1111, 18);
					// MySQL51Parser.g3:1111:18: ^( EQUALS field_name DEFAULT )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1111, 20);
					root_1 = (object)adaptor.BecomeRoot(stream_EQUALS.NextNode(), root_1);

					DebugLocation(1111, 27);
					adaptor.AddChild(root_1, stream_field_name.NextTree());
					DebugLocation(1111, 38);
					adaptor.AddChild(root_1, stream_DEFAULT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1112:5: expr
				{
				DebugLocation(1112, 5);
				PushFollow(Follow._expr_in_column_assignment9246);
				expr527=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr527.Tree);


				{
				// AST REWRITE
				// elements: EQUALS, field_name, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1112:12: -> ^( EQUALS field_name expr )
				{
					DebugLocation(1112, 15);
					// MySQL51Parser.g3:1112:15: ^( EQUALS field_name expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1112, 17);
					root_1 = (object)adaptor.BecomeRoot(stream_EQUALS.NextNode(), root_1);

					DebugLocation(1112, 24);
					adaptor.AddChild(root_1, stream_field_name.NextTree());
					DebugLocation(1112, 35);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_assignment", 86);
			LeaveRule("column_assignment", 86);
			LeaveRule_column_assignment();
		}
		DebugLocation(1114, 1);
		} finally { DebugExitRule(GrammarFileName, "column_assignment"); }
		return retval;

	}
	// $ANTLR end "column_assignment"

	private sealed partial class column_name_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public column_name_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_column_name_list();
	partial void LeaveRule_column_name_list();

	// $ANTLR start "column_name_list"
	// MySQL51Parser.g3:1116:1: column_name_list : field_name ( COMMA field_name )* -> ^( COLUMNS ( field_name )+ ) ;
	[GrammarRule("column_name_list")]
	private MySQL51Parser.column_name_list_return column_name_list()
	{
		EnterRule_column_name_list();
		EnterRule("column_name_list", 87);
		TraceIn("column_name_list", 87);
		MySQL51Parser.column_name_list_return retval = new MySQL51Parser.column_name_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA529 = default(IToken);
		MySQL51Parser.field_name_return field_name528 = default(MySQL51Parser.field_name_return);
		MySQL51Parser.field_name_return field_name530 = default(MySQL51Parser.field_name_return);

		object COMMA529_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
		try { DebugEnterRule(GrammarFileName, "column_name_list");
		DebugLocation(1116, 1);
		try
		{
			// MySQL51Parser.g3:1117:2: ( field_name ( COMMA field_name )* -> ^( COLUMNS ( field_name )+ ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1117:4: field_name ( COMMA field_name )*
			{
			DebugLocation(1117, 4);
			PushFollow(Follow._field_name_in_column_name_list9274);
			field_name528=field_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_field_name.Add(field_name528.Tree);
			DebugLocation(1117, 15);
			// MySQL51Parser.g3:1117:15: ( COMMA field_name )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==COMMA))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1117:16: COMMA field_name
					{
					DebugLocation(1117, 16);
					COMMA529=(IToken)Match(input,COMMA,Follow._COMMA_in_column_name_list9277); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA529);

					DebugLocation(1117, 22);
					PushFollow(Follow._field_name_in_column_name_list9279);
					field_name530=field_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_field_name.Add(field_name530.Tree);

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }



			{
			// AST REWRITE
			// elements: field_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1117:35: -> ^( COLUMNS ( field_name )+ )
			{
				DebugLocation(1117, 38);
				// MySQL51Parser.g3:1117:38: ^( COLUMNS ( field_name )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1117, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLUMNS, "COLUMNS"), root_1);

				DebugLocation(1117, 48);
				if (!(stream_field_name.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_field_name.HasNext )
				{
					DebugLocation(1117, 48);
					adaptor.AddChild(root_1, stream_field_name.NextTree());

				}
				stream_field_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name_list", 87);
			LeaveRule("column_name_list", 87);
			LeaveRule_column_name_list();
		}
		DebugLocation(1118, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name_list"); }
		return retval;

	}
	// $ANTLR end "column_name_list"

	private sealed partial class update_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public update_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_update();
	partial void LeaveRule_update();

	// $ANTLR start "update"
	// MySQL51Parser.g3:1123:1: update : UPDATE ( LOW_PRIORITY )? ( IGNORE )? table= table_references set= set_columns ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> ^( UPDATE ( LOW_PRIORITY )? ( IGNORE )? $table $set ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) ;
	[GrammarRule("update")]
	private MySQL51Parser.update_return update()
	{
		EnterRule_update();
		EnterRule("update", 88);
		TraceIn("update", 88);
		MySQL51Parser.update_return retval = new MySQL51Parser.update_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken UPDATE531 = default(IToken);
		IToken LOW_PRIORITY532 = default(IToken);
		IToken IGNORE533 = default(IToken);
		IToken WHERE534 = default(IToken);
		IToken LIMIT537 = default(IToken);
		IToken INT_NUMBER538 = default(IToken);
		MySQL51Parser.table_references_return table = default(MySQL51Parser.table_references_return);
		MySQL51Parser.set_columns_return set = default(MySQL51Parser.set_columns_return);
		MySQL51Parser.where_condition_return where_condition535 = default(MySQL51Parser.where_condition_return);
		MySQL51Parser.order_by_return order_by536 = default(MySQL51Parser.order_by_return);

		object UPDATE531_tree = default(object);
		object LOW_PRIORITY532_tree = default(object);
		object IGNORE533_tree = default(object);
		object WHERE534_tree = default(object);
		object LIMIT537_tree = default(object);
		object INT_NUMBER538_tree = default(object);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_LOW_PRIORITY=new RewriteRuleITokenStream(adaptor,"token LOW_PRIORITY");
		RewriteRuleITokenStream stream_IGNORE=new RewriteRuleITokenStream(adaptor,"token IGNORE");
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleITokenStream stream_LIMIT=new RewriteRuleITokenStream(adaptor,"token LIMIT");
		RewriteRuleITokenStream stream_INT_NUMBER=new RewriteRuleITokenStream(adaptor,"token INT_NUMBER");
		RewriteRuleSubtreeStream stream_table_references=new RewriteRuleSubtreeStream(adaptor,"rule table_references");
		RewriteRuleSubtreeStream stream_set_columns=new RewriteRuleSubtreeStream(adaptor,"rule set_columns");
		RewriteRuleSubtreeStream stream_where_condition=new RewriteRuleSubtreeStream(adaptor,"rule where_condition");
		RewriteRuleSubtreeStream stream_order_by=new RewriteRuleSubtreeStream(adaptor,"rule order_by");
		try { DebugEnterRule(GrammarFileName, "update");
		DebugLocation(1123, 1);
		try
		{
			// MySQL51Parser.g3:1124:2: ( UPDATE ( LOW_PRIORITY )? ( IGNORE )? table= table_references set= set_columns ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> ^( UPDATE ( LOW_PRIORITY )? ( IGNORE )? $table $set ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1124:4: UPDATE ( LOW_PRIORITY )? ( IGNORE )? table= table_references set= set_columns ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )?
			{
			DebugLocation(1124, 4);
			UPDATE531=(IToken)Match(input,UPDATE,Follow._UPDATE_in_update9304); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE531);

			DebugLocation(1124, 11);
			// MySQL51Parser.g3:1124:11: ( LOW_PRIORITY )?
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_0 = input.LA(1);

			if ((LA212_0==LOW_PRIORITY))
			{
				alt212 = 1;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1124:11: LOW_PRIORITY
				{
				DebugLocation(1124, 11);
				LOW_PRIORITY532=(IToken)Match(input,LOW_PRIORITY,Follow._LOW_PRIORITY_in_update9306); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOW_PRIORITY.Add(LOW_PRIORITY532);


				}
				break;

			}
			} finally { DebugExitSubRule(212); }

			DebugLocation(1124, 25);
			// MySQL51Parser.g3:1124:25: ( IGNORE )?
			int alt213=2;
			try { DebugEnterSubRule(213);
			try { DebugEnterDecision(213, false);
			int LA213_0 = input.LA(1);

			if ((LA213_0==IGNORE))
			{
				alt213 = 1;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1124:25: IGNORE
				{
				DebugLocation(1124, 25);
				IGNORE533=(IToken)Match(input,IGNORE,Follow._IGNORE_in_update9309); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IGNORE.Add(IGNORE533);


				}
				break;

			}
			} finally { DebugExitSubRule(213); }

			DebugLocation(1125, 8);
			PushFollow(Follow._table_references_in_update9316);
			table=table_references();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_table_references.Add(table.Tree);
			DebugLocation(1126, 6);
			PushFollow(Follow._set_columns_in_update9325);
			set=set_columns();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_set_columns.Add(set.Tree);
			DebugLocation(1127, 3);
			// MySQL51Parser.g3:1127:3: ( WHERE where_condition )?
			int alt214=2;
			try { DebugEnterSubRule(214);
			try { DebugEnterDecision(214, false);
			int LA214_0 = input.LA(1);

			if ((LA214_0==WHERE))
			{
				alt214 = 1;
			}
			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1127:4: WHERE where_condition
				{
				DebugLocation(1127, 4);
				WHERE534=(IToken)Match(input,WHERE,Follow._WHERE_in_update9330); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WHERE.Add(WHERE534);

				DebugLocation(1127, 10);
				PushFollow(Follow._where_condition_in_update9332);
				where_condition535=where_condition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_condition.Add(where_condition535.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(214); }

			DebugLocation(1129, 3);
			// MySQL51Parser.g3:1129:3: ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )?
			int alt217=2;
			try { DebugEnterSubRule(217);
			try { DebugEnterDecision(217, false);
			int LA217_0 = input.LA(1);

			if ((LA217_0==LIMIT||LA217_0==ORDER) && (((table!=null?table.table_count:default(int))==1)))
			{
				alt217 = 1;
			}
			else if ((LA217_0==SEMI))
			{
				int LA217_2 = input.LA(2);

				if ((((table!=null?table.table_count:default(int))==1)))
				{
					alt217 = 1;
				}
			}
			else if ((LA217_0==EOF))
			{
				int LA217_3 = input.LA(2);

				if ((((table!=null?table.table_count:default(int))==1)))
				{
					alt217 = 1;
				}
			}
			} finally { DebugExitDecision(217); }
			switch (alt217)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1129:4: {...}? => ( order_by )? ( LIMIT INT_NUMBER )?
				{
				DebugLocation(1129, 4);
				if (!(((table!=null?table.table_count:default(int))==1)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "update", "$table.table_count==1");
				}
				DebugLocation(1130, 4);
				// MySQL51Parser.g3:1130:4: ( order_by )?
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==ORDER))
				{
					alt215 = 1;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1130:4: order_by
					{
					DebugLocation(1130, 4);
					PushFollow(Follow._order_by_in_update9350);
					order_by536=order_by();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_order_by.Add(order_by536.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(215); }

				DebugLocation(1131, 4);
				// MySQL51Parser.g3:1131:4: ( LIMIT INT_NUMBER )?
				int alt216=2;
				try { DebugEnterSubRule(216);
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==LIMIT))
				{
					alt216 = 1;
				}
				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1131:5: LIMIT INT_NUMBER
					{
					DebugLocation(1131, 5);
					LIMIT537=(IToken)Match(input,LIMIT,Follow._LIMIT_in_update9357); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LIMIT.Add(LIMIT537);

					DebugLocation(1131, 11);
					INT_NUMBER538=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_update9359); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INT_NUMBER.Add(INT_NUMBER538);


					}
					break;

				}
				} finally { DebugExitSubRule(216); }


				}
				break;

			}
			} finally { DebugExitSubRule(217); }



			{
			// AST REWRITE
			// elements: UPDATE, LOW_PRIORITY, IGNORE, table, set, WHERE, where_condition, order_by, LIMIT, INT_NUMBER
			// token labels: 
			// rule labels: table, set, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table",table!=null?table.Tree:null);
			RewriteRuleSubtreeStream stream_set=new RewriteRuleSubtreeStream(adaptor,"rule set",set!=null?set.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1133:3: -> ^( UPDATE ( LOW_PRIORITY )? ( IGNORE )? $table $set ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? )
			{
				DebugLocation(1133, 6);
				// MySQL51Parser.g3:1133:6: ^( UPDATE ( LOW_PRIORITY )? ( IGNORE )? $table $set ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1133, 8);
				root_1 = (object)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(1133, 15);
				// MySQL51Parser.g3:1133:15: ( LOW_PRIORITY )?
				if (stream_LOW_PRIORITY.HasNext)
				{
					DebugLocation(1133, 15);
					adaptor.AddChild(root_1, stream_LOW_PRIORITY.NextNode());

				}
				stream_LOW_PRIORITY.Reset();
				DebugLocation(1133, 29);
				// MySQL51Parser.g3:1133:29: ( IGNORE )?
				if (stream_IGNORE.HasNext)
				{
					DebugLocation(1133, 29);
					adaptor.AddChild(root_1, stream_IGNORE.NextNode());

				}
				stream_IGNORE.Reset();
				DebugLocation(1133, 38);
				adaptor.AddChild(root_1, stream_table.NextTree());
				DebugLocation(1133, 45);
				adaptor.AddChild(root_1, stream_set.NextTree());
				DebugLocation(1133, 49);
				// MySQL51Parser.g3:1133:49: ( ^( WHERE where_condition ) )?
				if (stream_WHERE.HasNext||stream_where_condition.HasNext)
				{
					DebugLocation(1133, 49);
					// MySQL51Parser.g3:1133:49: ^( WHERE where_condition )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1133, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_2);

					DebugLocation(1133, 57);
					adaptor.AddChild(root_2, stream_where_condition.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_WHERE.Reset();
				stream_where_condition.Reset();
				DebugLocation(1133, 75);
				// MySQL51Parser.g3:1133:75: ( order_by )?
				if (stream_order_by.HasNext)
				{
					DebugLocation(1133, 75);
					adaptor.AddChild(root_1, stream_order_by.NextTree());

				}
				stream_order_by.Reset();
				DebugLocation(1133, 85);
				// MySQL51Parser.g3:1133:85: ( ^( LIMIT INT_NUMBER ) )?
				if (stream_LIMIT.HasNext||stream_INT_NUMBER.HasNext)
				{
					DebugLocation(1133, 85);
					// MySQL51Parser.g3:1133:85: ^( LIMIT INT_NUMBER )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1133, 87);
					root_2 = (object)adaptor.BecomeRoot(stream_LIMIT.NextNode(), root_2);

					DebugLocation(1133, 93);
					adaptor.AddChild(root_2, stream_INT_NUMBER.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_LIMIT.Reset();
				stream_INT_NUMBER.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("update", 88);
			LeaveRule("update", 88);
			LeaveRule_update();
		}
		DebugLocation(1134, 1);
		} finally { DebugExitRule(GrammarFileName, "update"); }
		return retval;

	}
	// $ANTLR end "update"

	private sealed partial class delete_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public delete_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_delete();
	partial void LeaveRule_delete();

	// $ANTLR start "delete"
	// MySQL51Parser.g3:1144:1: delete : DELETE ( options {k=1; } :opts+= LOW_PRIORITY |opts+= QUICK |opts+= IGNORE )* ( FROM t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* ( USING tr= table_references )? ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> {multiTableDelete}? ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? ) -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) |t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* FROM tr= table_references ( WHERE where_condition )? -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? ) ) ;
	[GrammarRule("delete")]
	private MySQL51Parser.delete_return delete()
	{
		EnterRule_delete();
		EnterRule("delete", 89);
		TraceIn("delete", 89);
		MySQL51Parser.delete_return retval = new MySQL51Parser.delete_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DELETE539 = default(IToken);
		IToken FROM540 = default(IToken);
		IToken DOT541 = default(IToken);
		IToken MULT542 = default(IToken);
		IToken COMMA543 = default(IToken);
		IToken DOT544 = default(IToken);
		IToken MULT545 = default(IToken);
		IToken USING546 = default(IToken);
		IToken WHERE547 = default(IToken);
		IToken LIMIT550 = default(IToken);
		IToken INT_NUMBER551 = default(IToken);
		IToken DOT552 = default(IToken);
		IToken MULT553 = default(IToken);
		IToken COMMA554 = default(IToken);
		IToken DOT555 = default(IToken);
		IToken MULT556 = default(IToken);
		IToken FROM557 = default(IToken);
		IToken WHERE558 = default(IToken);
		IToken opts = default(IToken);
		List<IToken> list_opts = null;
		List<object> list_t = null;
		MySQL51Parser.table_references_return tr = default(MySQL51Parser.table_references_return);
		MySQL51Parser.where_condition_return where_condition548 = default(MySQL51Parser.where_condition_return);
		MySQL51Parser.order_by_return order_by549 = default(MySQL51Parser.order_by_return);
		MySQL51Parser.where_condition_return where_condition559 = default(MySQL51Parser.where_condition_return);
		MySQL51Parser.simple_table_ref_no_alias_return t = default(MySQL51Parser.simple_table_ref_no_alias_return);
		object DELETE539_tree = default(object);
		object FROM540_tree = default(object);
		object DOT541_tree = default(object);
		object MULT542_tree = default(object);
		object COMMA543_tree = default(object);
		object DOT544_tree = default(object);
		object MULT545_tree = default(object);
		object USING546_tree = default(object);
		object WHERE547_tree = default(object);
		object LIMIT550_tree = default(object);
		object INT_NUMBER551_tree = default(object);
		object DOT552_tree = default(object);
		object MULT553_tree = default(object);
		object COMMA554_tree = default(object);
		object DOT555_tree = default(object);
		object MULT556_tree = default(object);
		object FROM557_tree = default(object);
		object WHERE558_tree = default(object);
		object opts_tree = default(object);
		RewriteRuleITokenStream stream_DELETE=new RewriteRuleITokenStream(adaptor,"token DELETE");
		RewriteRuleITokenStream stream_LOW_PRIORITY=new RewriteRuleITokenStream(adaptor,"token LOW_PRIORITY");
		RewriteRuleITokenStream stream_QUICK=new RewriteRuleITokenStream(adaptor,"token QUICK");
		RewriteRuleITokenStream stream_IGNORE=new RewriteRuleITokenStream(adaptor,"token IGNORE");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_MULT=new RewriteRuleITokenStream(adaptor,"token MULT");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleITokenStream stream_LIMIT=new RewriteRuleITokenStream(adaptor,"token LIMIT");
		RewriteRuleITokenStream stream_INT_NUMBER=new RewriteRuleITokenStream(adaptor,"token INT_NUMBER");
		RewriteRuleSubtreeStream stream_simple_table_ref_no_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_no_alias");
		RewriteRuleSubtreeStream stream_table_references=new RewriteRuleSubtreeStream(adaptor,"rule table_references");
		RewriteRuleSubtreeStream stream_where_condition=new RewriteRuleSubtreeStream(adaptor,"rule where_condition");
		RewriteRuleSubtreeStream stream_order_by=new RewriteRuleSubtreeStream(adaptor,"rule order_by");

		bool multiTableDelete = false;

		try { DebugEnterRule(GrammarFileName, "delete");
		DebugLocation(1144, 1);
		try
		{
			// MySQL51Parser.g3:1148:2: ( DELETE ( options {k=1; } :opts+= LOW_PRIORITY |opts+= QUICK |opts+= IGNORE )* ( FROM t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* ( USING tr= table_references )? ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> {multiTableDelete}? ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? ) -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) |t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* FROM tr= table_references ( WHERE where_condition )? -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1148:4: DELETE ( options {k=1; } :opts+= LOW_PRIORITY |opts+= QUICK |opts+= IGNORE )* ( FROM t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* ( USING tr= table_references )? ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> {multiTableDelete}? ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? ) -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) |t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* FROM tr= table_references ( WHERE where_condition )? -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? ) )
			{
			DebugLocation(1148, 4);
			DELETE539=(IToken)Match(input,DELETE,Follow._DELETE_in_delete9427); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DELETE.Add(DELETE539);

			DebugLocation(1149, 3);
			// MySQL51Parser.g3:1149:3: ( options {k=1; } :opts+= LOW_PRIORITY |opts+= QUICK |opts+= IGNORE )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=4;
				try { DebugEnterDecision(218, false);
				try
				{
					alt218 = dfa218.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1149:19: opts+= LOW_PRIORITY
					{
					DebugLocation(1149, 23);
					opts=(IToken)Match(input,LOW_PRIORITY,Follow._LOW_PRIORITY_in_delete9442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LOW_PRIORITY.Add(opts);

					if (list_opts==null) list_opts=new List<IToken>();
					list_opts.Add(opts);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1149:40: opts+= QUICK
					{
					DebugLocation(1149, 44);
					opts=(IToken)Match(input,QUICK,Follow._QUICK_in_delete9448); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_QUICK.Add(opts);

					if (list_opts==null) list_opts=new List<IToken>();
					list_opts.Add(opts);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:1149:54: opts+= IGNORE
					{
					DebugLocation(1149, 58);
					opts=(IToken)Match(input,IGNORE,Follow._IGNORE_in_delete9454); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IGNORE.Add(opts);

					if (list_opts==null) list_opts=new List<IToken>();
					list_opts.Add(opts);


					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }

			DebugLocation(1150, 3);
			// MySQL51Parser.g3:1150:3: ( FROM t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* ( USING tr= table_references )? ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )? -> {multiTableDelete}? ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? ) -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? ) |t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* FROM tr= table_references ( WHERE where_condition )? -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? ) )
			int alt231=2;
			try { DebugEnterSubRule(231);
			try { DebugEnterDecision(231, false);
			int LA231_0 = input.LA(1);

			if ((LA231_0==FROM))
			{
				alt231 = 1;
			}
			else if ((LA231_0==ACTION||(LA231_0>=ADDDATE && LA231_0<=ALGORITHM)||LA231_0==ANY||LA231_0==ASCII||(LA231_0>=AT && LA231_0<=BACKUP)||LA231_0==BEGIN||(LA231_0>=BINLOG && LA231_0<=BIT)||(LA231_0>=BLOCK && LA231_0<=BOOLEAN)||LA231_0==BTREE||(LA231_0>=BYTE && LA231_0<=CACHE)||LA231_0==CASCADED||LA231_0==CHAIN||LA231_0==CHANGED||LA231_0==CHARSET||(LA231_0>=CHECKSUM && LA231_0<=CODE)||LA231_0==COLLATION||LA231_0==COLUMNS||LA231_0==COMMENT||(LA231_0>=COMMIT && LA231_0<=CONCURRENT)||(LA231_0>=CONNECTION && LA231_0<=CONSISTENT)||(LA231_0>=CONTAINS && LA231_0<=CONTEXT)||LA231_0==CONTRIBUTORS||LA231_0==CPU||LA231_0==CUBE||LA231_0==DATA||(LA231_0>=DATAFILE && LA231_0<=DATETIME)||LA231_0==DAY||LA231_0==DEALLOCATE||LA231_0==DEFINER||LA231_0==DELAY_KEY_WRITE||LA231_0==DES_KEY_FILE||(LA231_0>=DIRECTORY && LA231_0<=DISK)||LA231_0==DO||(LA231_0>=DUMPFILE && LA231_0<=DYNAMIC)||LA231_0==ENABLE||(LA231_0>=END && LA231_0<=ENUM)||(LA231_0>=ERRORS && LA231_0<=ESCAPE)||(LA231_0>=EVENT && LA231_0<=EVERY)||LA231_0==EXECUTE||LA231_0==EXPANSION||(LA231_0>=EXTENDED && LA231_0<=EXTENT_SIZE)||(LA231_0>=FAST && LA231_0<=FAULTS)||(LA231_0>=FIELDS && LA231_0<=FIXED)||LA231_0==FLUSH||(LA231_0>=FOUND && LA231_0<=FRAC_SECOND)||LA231_0==FULL||(LA231_0>=FUNCTION && LA231_0<=GLOBAL)||LA231_0==GRANTS||LA231_0==GROUP||(LA231_0>=HANDLER && LA231_0<=HASH)||LA231_0==HELP||(LA231_0>=HOST && LA231_0<=HOUR)||(LA231_0>=ID && LA231_0<=IDENTIFIED)||LA231_0==IMPORT||LA231_0==INDEXES||LA231_0==INITIAL_SIZE||LA231_0==INNOBASE||(LA231_0>=INSERT_METHOD && LA231_0<=INSTALL)||(LA231_0>=INVOKER && LA231_0<=IPC)||(LA231_0>=ISOLATION && LA231_0<=ISSUER)||LA231_0==KEY_BLOCK_SIZE||(LA231_0>=LABEL && LA231_0<=LAST)||LA231_0==LEAVES||LA231_0==LESS||LA231_0==LEVEL||(LA231_0>=LINESTRING && LA231_0<=LIST)||LA231_0==LOCAL||(LA231_0>=LOCKS && LA231_0<=LOGFILE)||LA231_0==LOGS||(LA231_0>=MASTER && LA231_0<=MASTER_SSL_KEY)||LA231_0==MASTER_USER||(LA231_0>=MAX_CONNECTIONS_PER_HOUR && LA231_0<=MEDIUM)||(LA231_0>=MEMORY && LA231_0<=MICROSECOND)||LA231_0==MIGRATE||LA231_0==MINUTE||LA231_0==MIN_ROWS||LA231_0==MODE||LA231_0==MODIFY||LA231_0==MONTH||(LA231_0>=MULTILINESTRING && LA231_0<=MUTEX)||(LA231_0>=NAME && LA231_0<=NATIONAL)||(LA231_0>=NCHAR && LA231_0<=NONE)||LA231_0==NO_WAIT||(LA231_0>=NVARCHAR && LA231_0<=OLD_PASSWORD)||LA231_0==ONE||(LA231_0>=ONE_SHOT && LA231_0<=OPEN)||LA231_0==OPTIONS||(LA231_0>=OWNER && LA231_0<=PLUGINS)||(LA231_0>=POINT && LA231_0<=PORT)||(LA231_0>=PREPARE && LA231_0<=PREV)||LA231_0==PRIVILEGES||(LA231_0>=PROCESS && LA231_0<=PROFILES)||(LA231_0>=QUARTER && LA231_0<=QUICK)||(LA231_0>=REBUILD && LA231_0<=REDUNDANT)||(LA231_0>=RELAY_LOG_FILE && LA231_0<=RELAY_THREAD)||(LA231_0>=RELOAD && LA231_0<=REMOVE)||(LA231_0>=REORGANIZE && LA231_0<=REPAIR)||LA231_0==REPEATABLE||LA231_0==REPLICATION||(LA231_0>=RESET && LA231_0<=RESTORE)||LA231_0==RESUME||LA231_0==RETURNS||(LA231_0>=ROLLBACK && LA231_0<=ROW_FORMAT)||(LA231_0>=RTREE && LA231_0<=SCHEDULE)||LA231_0==SECOND||LA231_0==SECURITY||(LA231_0>=SERIAL && LA231_0<=SESSION)||LA231_0==SHARE||(LA231_0>=SHUTDOWN && LA231_0<=SLAVE)||(LA231_0>=SNAPSHOT && LA231_0<=SOCKET)||(LA231_0>=SONAME && LA231_0<=SOURCE)||(LA231_0>=SQL_BUFFER_RESULT && LA231_0<=SQL_CACHE)||LA231_0==SQL_NO_CACHE||LA231_0==SQL_THREAD||LA231_0==START||(LA231_0>=STARTS && LA231_0<=STATUS)||(LA231_0>=STOP && LA231_0<=STORAGE)||(LA231_0>=STRING_KEYWORD && LA231_0<=SUBPARTITIONS)||(LA231_0>=SUPER && LA231_0<=SWITCHES)||(LA231_0>=TABLES && LA231_0<=TEMPTABLE)||(LA231_0>=TEXT && LA231_0<=THAN)||(LA231_0>=TIME && LA231_0<=TIMESTAMP_DIFF)||(LA231_0>=TRANSACTION && LA231_0<=TRANSACTIONAL)||LA231_0==TRIGGERS||(LA231_0>=TRUNCATE && LA231_0<=UNDEFINED)||(LA231_0>=UNDOFILE && LA231_0<=UNINSTALL)||LA231_0==UNKNOWN||LA231_0==UNTIL||LA231_0==UPGRADE||LA231_0==USER||LA231_0==USE_FRM||LA231_0==VALUE||LA231_0==VARIABLES||(LA231_0>=VIEW && LA231_0<=WEEK)||(LA231_0>=WORK && LA231_0<=WRAPPER)||(LA231_0>=X509 && LA231_0<=XA)||LA231_0==YEAR))
			{
				alt231 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1150:5: FROM t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* ( USING tr= table_references )? ( WHERE where_condition )? ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )?
				{
				DebugLocation(1150, 5);
				FROM540=(IToken)Match(input,FROM,Follow._FROM_in_delete9464); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM540);

				DebugLocation(1151, 5);
				PushFollow(Follow._simple_table_ref_no_alias_in_delete9472);
				t=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(t.Tree);
				if (list_t==null) list_t=new List<object>();
				list_t.Add(t.Tree);

				DebugLocation(1151, 33);
				// MySQL51Parser.g3:1151:33: ( DOT MULT )?
				int alt219=2;
				try { DebugEnterSubRule(219);
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==DOT))
				{
					alt219 = 1;
				}
				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1151:34: DOT MULT
					{
					DebugLocation(1151, 34);
					DOT541=(IToken)Match(input,DOT,Follow._DOT_in_delete9475); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT541);

					DebugLocation(1151, 38);
					MULT542=(IToken)Match(input,MULT,Follow._MULT_in_delete9477); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_MULT.Add(MULT542);

					DebugLocation(1151, 43);
					if (state.backtracking == 0)
					{
						multiTableDelete = true;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(219); }

				DebugLocation(1151, 73);
				// MySQL51Parser.g3:1151:73: ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )*
				try { DebugEnterSubRule(221);
				while (true)
				{
					int alt221=2;
					try { DebugEnterDecision(221, false);
					int LA221_0 = input.LA(1);

					if ((LA221_0==COMMA))
					{
						alt221 = 1;
					}


					} finally { DebugExitDecision(221); }
					switch ( alt221 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1151:74: COMMA t+= simple_table_ref_no_alias ( DOT MULT )?
						{
						DebugLocation(1151, 74);
						COMMA543=(IToken)Match(input,COMMA,Follow._COMMA_in_delete9485); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA543);

						DebugLocation(1151, 81);
						PushFollow(Follow._simple_table_ref_no_alias_in_delete9489);
						t=simple_table_ref_no_alias();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(t.Tree);
						if (list_t==null) list_t=new List<object>();
						list_t.Add(t.Tree);

						DebugLocation(1151, 109);
						// MySQL51Parser.g3:1151:109: ( DOT MULT )?
						int alt220=2;
						try { DebugEnterSubRule(220);
						try { DebugEnterDecision(220, false);
						int LA220_0 = input.LA(1);

						if ((LA220_0==DOT))
						{
							alt220 = 1;
						}
						} finally { DebugExitDecision(220); }
						switch (alt220)
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:1151:110: DOT MULT
							{
							DebugLocation(1151, 110);
							DOT544=(IToken)Match(input,DOT,Follow._DOT_in_delete9492); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DOT.Add(DOT544);

							DebugLocation(1151, 114);
							MULT545=(IToken)Match(input,MULT,Follow._MULT_in_delete9494); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_MULT.Add(MULT545);


							}
							break;

						}
						} finally { DebugExitSubRule(220); }

						DebugLocation(1151, 121);
						if (state.backtracking == 0)
						{
							multiTableDelete = true;
						}

						}
						break;

					default:
						goto loop221;
					}
				}

				loop221:
					;

				} finally { DebugExitSubRule(221); }

				DebugLocation(1152, 4);
				// MySQL51Parser.g3:1152:4: ( USING tr= table_references )?
				int alt222=2;
				try { DebugEnterSubRule(222);
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==USING))
				{
					alt222 = 1;
				}
				} finally { DebugExitDecision(222); }
				switch (alt222)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1152:5: USING tr= table_references
					{
					DebugLocation(1152, 5);
					USING546=(IToken)Match(input,USING,Follow._USING_in_delete9507); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_USING.Add(USING546);

					DebugLocation(1152, 13);
					PushFollow(Follow._table_references_in_delete9511);
					tr=table_references();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_references.Add(tr.Tree);
					DebugLocation(1152, 31);
					if (state.backtracking == 0)
					{
						multiTableDelete = true;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(222); }

				DebugLocation(1153, 4);
				// MySQL51Parser.g3:1153:4: ( WHERE where_condition )?
				int alt223=2;
				try { DebugEnterSubRule(223);
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==WHERE))
				{
					alt223 = 1;
				}
				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1153:5: WHERE where_condition
					{
					DebugLocation(1153, 5);
					WHERE547=(IToken)Match(input,WHERE,Follow._WHERE_in_delete9521); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WHERE.Add(WHERE547);

					DebugLocation(1153, 11);
					PushFollow(Follow._where_condition_in_delete9523);
					where_condition548=where_condition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_condition.Add(where_condition548.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(223); }

				DebugLocation(1154, 4);
				// MySQL51Parser.g3:1154:4: ({...}? => ( order_by )? ( LIMIT INT_NUMBER )? )?
				int alt226=2;
				try { DebugEnterSubRule(226);
				try { DebugEnterDecision(226, false);
				int LA226_0 = input.LA(1);

				if ((LA226_0==LIMIT||LA226_0==ORDER) && ((multiTableDelete == false)))
				{
					alt226 = 1;
				}
				else if ((LA226_0==SEMI))
				{
					int LA226_2 = input.LA(2);

					if (((multiTableDelete == false)))
					{
						alt226 = 1;
					}
				}
				else if ((LA226_0==EOF))
				{
					int LA226_3 = input.LA(2);

					if (((multiTableDelete == false)))
					{
						alt226 = 1;
					}
				}
				} finally { DebugExitDecision(226); }
				switch (alt226)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1154:5: {...}? => ( order_by )? ( LIMIT INT_NUMBER )?
					{
					DebugLocation(1154, 5);
					if (!((multiTableDelete == false)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "delete", "multiTableDelete == false");
					}
					DebugLocation(1155, 5);
					// MySQL51Parser.g3:1155:5: ( order_by )?
					int alt224=2;
					try { DebugEnterSubRule(224);
					try { DebugEnterDecision(224, false);
					int LA224_0 = input.LA(1);

					if ((LA224_0==ORDER))
					{
						alt224 = 1;
					}
					} finally { DebugExitDecision(224); }
					switch (alt224)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1155:5: order_by
						{
						DebugLocation(1155, 5);
						PushFollow(Follow._order_by_in_delete9538);
						order_by549=order_by();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_order_by.Add(order_by549.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(224); }

					DebugLocation(1156, 5);
					// MySQL51Parser.g3:1156:5: ( LIMIT INT_NUMBER )?
					int alt225=2;
					try { DebugEnterSubRule(225);
					try { DebugEnterDecision(225, false);
					int LA225_0 = input.LA(1);

					if ((LA225_0==LIMIT))
					{
						alt225 = 1;
					}
					} finally { DebugExitDecision(225); }
					switch (alt225)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1156:6: LIMIT INT_NUMBER
						{
						DebugLocation(1156, 6);
						LIMIT550=(IToken)Match(input,LIMIT,Follow._LIMIT_in_delete9546); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LIMIT.Add(LIMIT550);

						DebugLocation(1156, 12);
						INT_NUMBER551=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_delete9548); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INT_NUMBER.Add(INT_NUMBER551);


						}
						break;

					}
					} finally { DebugExitSubRule(225); }


					}
					break;

				}
				} finally { DebugExitSubRule(226); }



				{
				// AST REWRITE
				// elements: DELETE, opts, t, USING, tr, WHERE, where_condition, DELETE, opts, t, WHERE, where_condition, order_by, LIMIT, INT_NUMBER
				// token labels: 
				// rule labels: tr, retval
				// token list labels: opts
				// rule list labels: t
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_opts=new RewriteRuleITokenStream(adaptor,"token opts", list_opts);
				RewriteRuleSubtreeStream stream_tr=new RewriteRuleSubtreeStream(adaptor,"rule tr",tr!=null?tr.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
				root_0 = (object)adaptor.Nil();
				// 1158:9: -> {multiTableDelete}? ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? )
				if (multiTableDelete)
				{
					DebugLocation(1158, 32);
					// MySQL51Parser.g3:1158:32: ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( USING $tr) ( ^( WHERE where_condition ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1158, 34);
					root_1 = (object)adaptor.BecomeRoot(stream_DELETE.NextNode(), root_1);

					DebugLocation(1158, 41);
					// MySQL51Parser.g3:1158:41: ( ^( OPTIONS ( $opts)+ ) )?
					if (stream_opts.HasNext)
					{
						DebugLocation(1158, 41);
						// MySQL51Parser.g3:1158:41: ^( OPTIONS ( $opts)+ )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1158, 43);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPTIONS, "OPTIONS"), root_2);

						DebugLocation(1158, 52);
						if (!(stream_opts.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_opts.HasNext )
						{
							DebugLocation(1158, 52);
							adaptor.AddChild(root_2, stream_opts.NextNode());

						}
						stream_opts.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_opts.Reset();
					DebugLocation(1158, 60);
					if (!(stream_t.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_t.HasNext )
					{
						DebugLocation(1158, 60);
						// MySQL51Parser.g3:1158:60: ^( TABLE $t)
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1158, 62);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_2);

						DebugLocation(1158, 69);
						adaptor.AddChild(root_2, stream_t.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_t.Reset();
					DebugLocation(1158, 73);
					// MySQL51Parser.g3:1158:73: ^( USING $tr)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1158, 75);
					root_2 = (object)adaptor.BecomeRoot(stream_USING.NextNode(), root_2);

					DebugLocation(1158, 82);
					adaptor.AddChild(root_2, stream_tr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(1158, 86);
					// MySQL51Parser.g3:1158:86: ( ^( WHERE where_condition ) )?
					if (stream_WHERE.HasNext||stream_where_condition.HasNext)
					{
						DebugLocation(1158, 86);
						// MySQL51Parser.g3:1158:86: ^( WHERE where_condition )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1158, 88);
						root_2 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_2);

						DebugLocation(1158, 94);
						adaptor.AddChild(root_2, stream_where_condition.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_WHERE.Reset();
					stream_where_condition.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 1159:16: -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? )
				{
					DebugLocation(1159, 19);
					// MySQL51Parser.g3:1159:19: ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ^( TABLE $t) ( ^( WHERE where_condition ) )? ( order_by )? ( ^( LIMIT INT_NUMBER ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1159, 21);
					root_1 = (object)adaptor.BecomeRoot(stream_DELETE.NextNode(), root_1);

					DebugLocation(1159, 28);
					// MySQL51Parser.g3:1159:28: ( ^( OPTIONS ( $opts)+ ) )?
					if (stream_opts.HasNext)
					{
						DebugLocation(1159, 28);
						// MySQL51Parser.g3:1159:28: ^( OPTIONS ( $opts)+ )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1159, 30);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPTIONS, "OPTIONS"), root_2);

						DebugLocation(1159, 39);
						if (!(stream_opts.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_opts.HasNext )
						{
							DebugLocation(1159, 39);
							adaptor.AddChild(root_2, stream_opts.NextNode());

						}
						stream_opts.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_opts.Reset();
					DebugLocation(1159, 47);
					// MySQL51Parser.g3:1159:47: ^( TABLE $t)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1159, 49);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_2);

					DebugLocation(1159, 56);
					adaptor.AddChild(root_2, stream_t.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(1159, 59);
					// MySQL51Parser.g3:1159:59: ( ^( WHERE where_condition ) )?
					if (stream_WHERE.HasNext||stream_where_condition.HasNext)
					{
						DebugLocation(1159, 59);
						// MySQL51Parser.g3:1159:59: ^( WHERE where_condition )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1159, 61);
						root_2 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_2);

						DebugLocation(1159, 67);
						adaptor.AddChild(root_2, stream_where_condition.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_WHERE.Reset();
					stream_where_condition.Reset();
					DebugLocation(1159, 85);
					// MySQL51Parser.g3:1159:85: ( order_by )?
					if (stream_order_by.HasNext)
					{
						DebugLocation(1159, 85);
						adaptor.AddChild(root_1, stream_order_by.NextTree());

					}
					stream_order_by.Reset();
					DebugLocation(1159, 95);
					// MySQL51Parser.g3:1159:95: ( ^( LIMIT INT_NUMBER ) )?
					if (stream_LIMIT.HasNext||stream_INT_NUMBER.HasNext)
					{
						DebugLocation(1159, 95);
						// MySQL51Parser.g3:1159:95: ^( LIMIT INT_NUMBER )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1159, 97);
						root_2 = (object)adaptor.BecomeRoot(stream_LIMIT.NextNode(), root_2);

						DebugLocation(1159, 103);
						adaptor.AddChild(root_2, stream_INT_NUMBER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_LIMIT.Reset();
					stream_INT_NUMBER.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1161:5: t+= simple_table_ref_no_alias ( DOT MULT )? ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )* FROM tr= table_references ( WHERE where_condition )?
				{
				DebugLocation(1161, 6);
				PushFollow(Follow._simple_table_ref_no_alias_in_delete9675);
				t=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(t.Tree);
				if (list_t==null) list_t=new List<object>();
				list_t.Add(t.Tree);

				DebugLocation(1161, 34);
				// MySQL51Parser.g3:1161:34: ( DOT MULT )?
				int alt227=2;
				try { DebugEnterSubRule(227);
				try { DebugEnterDecision(227, false);
				int LA227_0 = input.LA(1);

				if ((LA227_0==DOT))
				{
					alt227 = 1;
				}
				} finally { DebugExitDecision(227); }
				switch (alt227)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1161:35: DOT MULT
					{
					DebugLocation(1161, 35);
					DOT552=(IToken)Match(input,DOT,Follow._DOT_in_delete9678); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DOT.Add(DOT552);

					DebugLocation(1161, 39);
					MULT553=(IToken)Match(input,MULT,Follow._MULT_in_delete9680); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_MULT.Add(MULT553);


					}
					break;

				}
				} finally { DebugExitSubRule(227); }

				DebugLocation(1161, 46);
				// MySQL51Parser.g3:1161:46: ( COMMA t+= simple_table_ref_no_alias ( DOT MULT )? )*
				try { DebugEnterSubRule(229);
				while (true)
				{
					int alt229=2;
					try { DebugEnterDecision(229, false);
					int LA229_0 = input.LA(1);

					if ((LA229_0==COMMA))
					{
						alt229 = 1;
					}


					} finally { DebugExitDecision(229); }
					switch ( alt229 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1161:47: COMMA t+= simple_table_ref_no_alias ( DOT MULT )?
						{
						DebugLocation(1161, 47);
						COMMA554=(IToken)Match(input,COMMA,Follow._COMMA_in_delete9685); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA554);

						DebugLocation(1161, 54);
						PushFollow(Follow._simple_table_ref_no_alias_in_delete9689);
						t=simple_table_ref_no_alias();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(t.Tree);
						if (list_t==null) list_t=new List<object>();
						list_t.Add(t.Tree);

						DebugLocation(1161, 82);
						// MySQL51Parser.g3:1161:82: ( DOT MULT )?
						int alt228=2;
						try { DebugEnterSubRule(228);
						try { DebugEnterDecision(228, false);
						int LA228_0 = input.LA(1);

						if ((LA228_0==DOT))
						{
							alt228 = 1;
						}
						} finally { DebugExitDecision(228); }
						switch (alt228)
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:1161:83: DOT MULT
							{
							DebugLocation(1161, 83);
							DOT555=(IToken)Match(input,DOT,Follow._DOT_in_delete9692); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DOT.Add(DOT555);

							DebugLocation(1161, 87);
							MULT556=(IToken)Match(input,MULT,Follow._MULT_in_delete9694); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_MULT.Add(MULT556);


							}
							break;

						}
						} finally { DebugExitSubRule(228); }


						}
						break;

					default:
						goto loop229;
					}
				}

				loop229:
					;

				} finally { DebugExitSubRule(229); }

				DebugLocation(1162, 4);
				FROM557=(IToken)Match(input,FROM,Follow._FROM_in_delete9703); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM557);

				DebugLocation(1162, 11);
				PushFollow(Follow._table_references_in_delete9707);
				tr=table_references();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_references.Add(tr.Tree);
				DebugLocation(1163, 4);
				// MySQL51Parser.g3:1163:4: ( WHERE where_condition )?
				int alt230=2;
				try { DebugEnterSubRule(230);
				try { DebugEnterDecision(230, false);
				int LA230_0 = input.LA(1);

				if ((LA230_0==WHERE))
				{
					alt230 = 1;
				}
				} finally { DebugExitDecision(230); }
				switch (alt230)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1163:5: WHERE where_condition
					{
					DebugLocation(1163, 5);
					WHERE558=(IToken)Match(input,WHERE,Follow._WHERE_in_delete9713); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WHERE.Add(WHERE558);

					DebugLocation(1163, 11);
					PushFollow(Follow._where_condition_in_delete9715);
					where_condition559=where_condition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_condition.Add(where_condition559.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(230); }



				{
				// AST REWRITE
				// elements: DELETE, opts, t, FROM, tr, WHERE, where_condition
				// token labels: 
				// rule labels: tr, retval
				// token list labels: opts
				// rule list labels: t
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_opts=new RewriteRuleITokenStream(adaptor,"token opts", list_opts);
				RewriteRuleSubtreeStream stream_tr=new RewriteRuleSubtreeStream(adaptor,"rule tr",tr!=null?tr.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
				root_0 = (object)adaptor.Nil();
				// 1163:31: -> ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? )
				{
					DebugLocation(1163, 34);
					// MySQL51Parser.g3:1163:34: ^( DELETE ( ^( OPTIONS ( $opts)+ ) )? ( ^( TABLE $t) )+ ^( FROM $tr) ( ^( WHERE where_condition ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1163, 36);
					root_1 = (object)adaptor.BecomeRoot(stream_DELETE.NextNode(), root_1);

					DebugLocation(1163, 43);
					// MySQL51Parser.g3:1163:43: ( ^( OPTIONS ( $opts)+ ) )?
					if (stream_opts.HasNext)
					{
						DebugLocation(1163, 43);
						// MySQL51Parser.g3:1163:43: ^( OPTIONS ( $opts)+ )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1163, 45);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPTIONS, "OPTIONS"), root_2);

						DebugLocation(1163, 54);
						if (!(stream_opts.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_opts.HasNext )
						{
							DebugLocation(1163, 54);
							adaptor.AddChild(root_2, stream_opts.NextNode());

						}
						stream_opts.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_opts.Reset();
					DebugLocation(1163, 62);
					if (!(stream_t.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_t.HasNext )
					{
						DebugLocation(1163, 62);
						// MySQL51Parser.g3:1163:62: ^( TABLE $t)
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1163, 64);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(TABLE, "TABLE"), root_2);

						DebugLocation(1163, 71);
						adaptor.AddChild(root_2, stream_t.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_t.Reset();
					DebugLocation(1163, 75);
					// MySQL51Parser.g3:1163:75: ^( FROM $tr)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1163, 77);
					root_2 = (object)adaptor.BecomeRoot(stream_FROM.NextNode(), root_2);

					DebugLocation(1163, 83);
					adaptor.AddChild(root_2, stream_tr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(1163, 87);
					// MySQL51Parser.g3:1163:87: ( ^( WHERE where_condition ) )?
					if (stream_WHERE.HasNext||stream_where_condition.HasNext)
					{
						DebugLocation(1163, 87);
						// MySQL51Parser.g3:1163:87: ^( WHERE where_condition )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1163, 89);
						root_2 = (object)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_2);

						DebugLocation(1163, 95);
						adaptor.AddChild(root_2, stream_where_condition.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_WHERE.Reset();
					stream_where_condition.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(231); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delete", 89);
			LeaveRule("delete", 89);
			LeaveRule_delete();
		}
		DebugLocation(1165, 1);
		} finally { DebugExitRule(GrammarFileName, "delete"); }
		return retval;

	}
	// $ANTLR end "delete"

	private sealed partial class lockTables_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public lockTables_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_lockTables();
	partial void LeaveRule_lockTables();

	// $ANTLR start "lockTables"
	// MySQL51Parser.g3:1171:1: lockTables : ( LOCK TABLES tables+= lock_table_ref ( COMMA tables+= lock_table_ref )* -> ^( LOCK $tables) | UNLOCK TABLES -> ^( UNLOCK TABLES ) );
	[GrammarRule("lockTables")]
	private MySQL51Parser.lockTables_return lockTables()
	{
		EnterRule_lockTables();
		EnterRule("lockTables", 90);
		TraceIn("lockTables", 90);
		MySQL51Parser.lockTables_return retval = new MySQL51Parser.lockTables_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LOCK560 = default(IToken);
		IToken TABLES561 = default(IToken);
		IToken COMMA562 = default(IToken);
		IToken UNLOCK563 = default(IToken);
		IToken TABLES564 = default(IToken);
		List<object> list_tables = null;
		MySQL51Parser.lock_table_ref_return tables = default(MySQL51Parser.lock_table_ref_return);
		object LOCK560_tree = default(object);
		object TABLES561_tree = default(object);
		object COMMA562_tree = default(object);
		object UNLOCK563_tree = default(object);
		object TABLES564_tree = default(object);
		RewriteRuleITokenStream stream_LOCK=new RewriteRuleITokenStream(adaptor,"token LOCK");
		RewriteRuleITokenStream stream_TABLES=new RewriteRuleITokenStream(adaptor,"token TABLES");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_UNLOCK=new RewriteRuleITokenStream(adaptor,"token UNLOCK");
		RewriteRuleSubtreeStream stream_lock_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule lock_table_ref");
		try { DebugEnterRule(GrammarFileName, "lockTables");
		DebugLocation(1171, 1);
		try
		{
			// MySQL51Parser.g3:1172:2: ( LOCK TABLES tables+= lock_table_ref ( COMMA tables+= lock_table_ref )* -> ^( LOCK $tables) | UNLOCK TABLES -> ^( UNLOCK TABLES ) )
			int alt233=2;
			try { DebugEnterDecision(233, false);
			int LA233_0 = input.LA(1);

			if ((LA233_0==LOCK))
			{
				alt233 = 1;
			}
			else if ((LA233_0==UNLOCK))
			{
				alt233 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 233, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1172:4: LOCK TABLES tables+= lock_table_ref ( COMMA tables+= lock_table_ref )*
				{
				DebugLocation(1172, 4);
				LOCK560=(IToken)Match(input,LOCK,Follow._LOCK_in_lockTables9775); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LOCK.Add(LOCK560);

				DebugLocation(1172, 9);
				TABLES561=(IToken)Match(input,TABLES,Follow._TABLES_in_lockTables9777); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLES.Add(TABLES561);

				DebugLocation(1172, 22);
				PushFollow(Follow._lock_table_ref_in_lockTables9781);
				tables=lock_table_ref();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lock_table_ref.Add(tables.Tree);
				if (list_tables==null) list_tables=new List<object>();
				list_tables.Add(tables.Tree);

				DebugLocation(1172, 39);
				// MySQL51Parser.g3:1172:39: ( COMMA tables+= lock_table_ref )*
				try { DebugEnterSubRule(232);
				while (true)
				{
					int alt232=2;
					try { DebugEnterDecision(232, false);
					int LA232_0 = input.LA(1);

					if ((LA232_0==COMMA))
					{
						alt232 = 1;
					}


					} finally { DebugExitDecision(232); }
					switch ( alt232 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1172:40: COMMA tables+= lock_table_ref
						{
						DebugLocation(1172, 40);
						COMMA562=(IToken)Match(input,COMMA,Follow._COMMA_in_lockTables9784); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA562);

						DebugLocation(1172, 52);
						PushFollow(Follow._lock_table_ref_in_lockTables9788);
						tables=lock_table_ref();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lock_table_ref.Add(tables.Tree);
						if (list_tables==null) list_tables=new List<object>();
						list_tables.Add(tables.Tree);


						}
						break;

					default:
						goto loop232;
					}
				}

				loop232:
					;

				} finally { DebugExitSubRule(232); }



				{
				// AST REWRITE
				// elements: LOCK, tables
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: tables
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_tables=new RewriteRuleSubtreeStream(adaptor,"token tables",list_tables);
				root_0 = (object)adaptor.Nil();
				// 1172:71: -> ^( LOCK $tables)
				{
					DebugLocation(1172, 74);
					// MySQL51Parser.g3:1172:74: ^( LOCK $tables)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1172, 76);
					root_1 = (object)adaptor.BecomeRoot(stream_LOCK.NextNode(), root_1);

					DebugLocation(1172, 82);
					adaptor.AddChild(root_1, stream_tables.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1173:4: UNLOCK TABLES
				{
				DebugLocation(1173, 4);
				UNLOCK563=(IToken)Match(input,UNLOCK,Follow._UNLOCK_in_lockTables9804); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UNLOCK.Add(UNLOCK563);

				DebugLocation(1173, 11);
				TABLES564=(IToken)Match(input,TABLES,Follow._TABLES_in_lockTables9806); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TABLES.Add(TABLES564);



				{
				// AST REWRITE
				// elements: UNLOCK, TABLES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1173:31: -> ^( UNLOCK TABLES )
				{
					DebugLocation(1173, 34);
					// MySQL51Parser.g3:1173:34: ^( UNLOCK TABLES )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1173, 36);
					root_1 = (object)adaptor.BecomeRoot(stream_UNLOCK.NextNode(), root_1);

					DebugLocation(1173, 43);
					adaptor.AddChild(root_1, stream_TABLES.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lockTables", 90);
			LeaveRule("lockTables", 90);
			LeaveRule_lockTables();
		}
		DebugLocation(1174, 1);
		} finally { DebugExitRule(GrammarFileName, "lockTables"); }
		return retval;

	}
	// $ANTLR end "lockTables"

	private sealed partial class lock_table_ref_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public lock_table_ref_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_lock_table_ref();
	partial void LeaveRule_lock_table_ref();

	// $ANTLR start "lock_table_ref"
	// MySQL51Parser.g3:1176:1: lock_table_ref : simple_table_ref_alias ( READ ( LOCAL )? -> ^( READ simple_table_ref_alias ( LOCAL )? ) | ( LOW_PRIORITY )? WRITE -> ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? ) ) ;
	[GrammarRule("lock_table_ref")]
	private MySQL51Parser.lock_table_ref_return lock_table_ref()
	{
		EnterRule_lock_table_ref();
		EnterRule("lock_table_ref", 91);
		TraceIn("lock_table_ref", 91);
		MySQL51Parser.lock_table_ref_return retval = new MySQL51Parser.lock_table_ref_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken READ566 = default(IToken);
		IToken LOCAL567 = default(IToken);
		IToken LOW_PRIORITY568 = default(IToken);
		IToken WRITE569 = default(IToken);
		MySQL51Parser.simple_table_ref_alias_return simple_table_ref_alias565 = default(MySQL51Parser.simple_table_ref_alias_return);

		object READ566_tree = default(object);
		object LOCAL567_tree = default(object);
		object LOW_PRIORITY568_tree = default(object);
		object WRITE569_tree = default(object);
		RewriteRuleITokenStream stream_READ=new RewriteRuleITokenStream(adaptor,"token READ");
		RewriteRuleITokenStream stream_LOCAL=new RewriteRuleITokenStream(adaptor,"token LOCAL");
		RewriteRuleITokenStream stream_LOW_PRIORITY=new RewriteRuleITokenStream(adaptor,"token LOW_PRIORITY");
		RewriteRuleITokenStream stream_WRITE=new RewriteRuleITokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_simple_table_ref_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_alias");
		try { DebugEnterRule(GrammarFileName, "lock_table_ref");
		DebugLocation(1176, 1);
		try
		{
			// MySQL51Parser.g3:1177:2: ( simple_table_ref_alias ( READ ( LOCAL )? -> ^( READ simple_table_ref_alias ( LOCAL )? ) | ( LOW_PRIORITY )? WRITE -> ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1177:4: simple_table_ref_alias ( READ ( LOCAL )? -> ^( READ simple_table_ref_alias ( LOCAL )? ) | ( LOW_PRIORITY )? WRITE -> ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? ) )
			{
			DebugLocation(1177, 4);
			PushFollow(Follow._simple_table_ref_alias_in_lock_table_ref9838);
			simple_table_ref_alias565=simple_table_ref_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_table_ref_alias.Add(simple_table_ref_alias565.Tree);
			DebugLocation(1178, 3);
			// MySQL51Parser.g3:1178:3: ( READ ( LOCAL )? -> ^( READ simple_table_ref_alias ( LOCAL )? ) | ( LOW_PRIORITY )? WRITE -> ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? ) )
			int alt236=2;
			try { DebugEnterSubRule(236);
			try { DebugEnterDecision(236, false);
			int LA236_0 = input.LA(1);

			if ((LA236_0==READ))
			{
				alt236 = 1;
			}
			else if ((LA236_0==LOW_PRIORITY||LA236_0==WRITE))
			{
				alt236 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 236, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1178:5: READ ( LOCAL )?
				{
				DebugLocation(1178, 5);
				READ566=(IToken)Match(input,READ,Follow._READ_in_lock_table_ref9844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_READ.Add(READ566);

				DebugLocation(1178, 11);
				// MySQL51Parser.g3:1178:11: ( LOCAL )?
				int alt234=2;
				try { DebugEnterSubRule(234);
				try { DebugEnterDecision(234, false);
				int LA234_0 = input.LA(1);

				if ((LA234_0==LOCAL))
				{
					alt234 = 1;
				}
				} finally { DebugExitDecision(234); }
				switch (alt234)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1178:12: LOCAL
					{
					DebugLocation(1178, 12);
					LOCAL567=(IToken)Match(input,LOCAL,Follow._LOCAL_in_lock_table_ref9848); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LOCAL.Add(LOCAL567);


					}
					break;

				}
				} finally { DebugExitSubRule(234); }



				{
				// AST REWRITE
				// elements: READ, simple_table_ref_alias, LOCAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1178:25: -> ^( READ simple_table_ref_alias ( LOCAL )? )
				{
					DebugLocation(1178, 28);
					// MySQL51Parser.g3:1178:28: ^( READ simple_table_ref_alias ( LOCAL )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1178, 30);
					root_1 = (object)adaptor.BecomeRoot(stream_READ.NextNode(), root_1);

					DebugLocation(1178, 35);
					adaptor.AddChild(root_1, stream_simple_table_ref_alias.NextTree());
					DebugLocation(1178, 58);
					// MySQL51Parser.g3:1178:58: ( LOCAL )?
					if (stream_LOCAL.HasNext)
					{
						DebugLocation(1178, 58);
						adaptor.AddChild(root_1, stream_LOCAL.NextNode());

					}
					stream_LOCAL.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1179:5: ( LOW_PRIORITY )? WRITE
				{
				DebugLocation(1179, 5);
				// MySQL51Parser.g3:1179:5: ( LOW_PRIORITY )?
				int alt235=2;
				try { DebugEnterSubRule(235);
				try { DebugEnterDecision(235, false);
				int LA235_0 = input.LA(1);

				if ((LA235_0==LOW_PRIORITY))
				{
					alt235 = 1;
				}
				} finally { DebugExitDecision(235); }
				switch (alt235)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1179:6: LOW_PRIORITY
					{
					DebugLocation(1179, 6);
					LOW_PRIORITY568=(IToken)Match(input,LOW_PRIORITY,Follow._LOW_PRIORITY_in_lock_table_ref9873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LOW_PRIORITY.Add(LOW_PRIORITY568);


					}
					break;

				}
				} finally { DebugExitSubRule(235); }

				DebugLocation(1179, 22);
				WRITE569=(IToken)Match(input,WRITE,Follow._WRITE_in_lock_table_ref9878); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WRITE.Add(WRITE569);



				{
				// AST REWRITE
				// elements: WRITE, simple_table_ref_alias, LOW_PRIORITY
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1179:31: -> ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? )
				{
					DebugLocation(1179, 34);
					// MySQL51Parser.g3:1179:34: ^( WRITE simple_table_ref_alias ( LOW_PRIORITY )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1179, 36);
					root_1 = (object)adaptor.BecomeRoot(stream_WRITE.NextNode(), root_1);

					DebugLocation(1179, 42);
					adaptor.AddChild(root_1, stream_simple_table_ref_alias.NextTree());
					DebugLocation(1179, 65);
					// MySQL51Parser.g3:1179:65: ( LOW_PRIORITY )?
					if (stream_LOW_PRIORITY.HasNext)
					{
						DebugLocation(1179, 65);
						adaptor.AddChild(root_1, stream_LOW_PRIORITY.NextNode());

					}
					stream_LOW_PRIORITY.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(236); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lock_table_ref", 91);
			LeaveRule("lock_table_ref", 91);
			LeaveRule_lock_table_ref();
		}
		DebugLocation(1181, 1);
		} finally { DebugExitRule(GrammarFileName, "lock_table_ref"); }
		return retval;

	}
	// $ANTLR end "lock_table_ref"

	private sealed partial class create_table_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_table_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_table();
	partial void LeaveRule_create_table();

	// $ANTLR start "create_table"
	// MySQL51Parser.g3:1191:1: create_table : CREATE ( TEMPORARY )? TABLE ( IF NOT EXISTS )? tableName= simple_table_ref_no_alias LPAREN create+= create_definition ( COMMA create+= create_definition )* RPAREN ( create_table_options )? ( ( IGNORE | REPLACE )? ( AS )? select )? -> ^( CREATE_TABLE ( TEMPORARY )? ( EXISTS )? simple_table_ref_no_alias ^( DEFINITIONS ( $create)+ ) ) ;
	[GrammarRule("create_table")]
	private MySQL51Parser.create_table_return create_table()
	{
		EnterRule_create_table();
		EnterRule("create_table", 92);
		TraceIn("create_table", 92);
		MySQL51Parser.create_table_return retval = new MySQL51Parser.create_table_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CREATE570 = default(IToken);
		IToken TEMPORARY571 = default(IToken);
		IToken TABLE572 = default(IToken);
		IToken IF573 = default(IToken);
		IToken NOT574 = default(IToken);
		IToken EXISTS575 = default(IToken);
		IToken LPAREN576 = default(IToken);
		IToken COMMA577 = default(IToken);
		IToken RPAREN578 = default(IToken);
		IToken IGNORE580 = default(IToken);
		IToken REPLACE581 = default(IToken);
		IToken AS582 = default(IToken);
		List<object> list_create = null;
		MySQL51Parser.simple_table_ref_no_alias_return tableName = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.create_table_options_return create_table_options579 = default(MySQL51Parser.create_table_options_return);
		MySQL51Parser.select_return select583 = default(MySQL51Parser.select_return);
		MySQL51Parser.create_definition_return create = default(MySQL51Parser.create_definition_return);
		object CREATE570_tree = default(object);
		object TEMPORARY571_tree = default(object);
		object TABLE572_tree = default(object);
		object IF573_tree = default(object);
		object NOT574_tree = default(object);
		object EXISTS575_tree = default(object);
		object LPAREN576_tree = default(object);
		object COMMA577_tree = default(object);
		object RPAREN578_tree = default(object);
		object IGNORE580_tree = default(object);
		object REPLACE581_tree = default(object);
		object AS582_tree = default(object);
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_TEMPORARY=new RewriteRuleITokenStream(adaptor,"token TEMPORARY");
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IGNORE=new RewriteRuleITokenStream(adaptor,"token IGNORE");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_simple_table_ref_no_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_no_alias");
		RewriteRuleSubtreeStream stream_create_definition=new RewriteRuleSubtreeStream(adaptor,"rule create_definition");
		RewriteRuleSubtreeStream stream_create_table_options=new RewriteRuleSubtreeStream(adaptor,"rule create_table_options");
		RewriteRuleSubtreeStream stream_select=new RewriteRuleSubtreeStream(adaptor,"rule select");
		try { DebugEnterRule(GrammarFileName, "create_table");
		DebugLocation(1191, 1);
		try
		{
			// MySQL51Parser.g3:1192:2: ( CREATE ( TEMPORARY )? TABLE ( IF NOT EXISTS )? tableName= simple_table_ref_no_alias LPAREN create+= create_definition ( COMMA create+= create_definition )* RPAREN ( create_table_options )? ( ( IGNORE | REPLACE )? ( AS )? select )? -> ^( CREATE_TABLE ( TEMPORARY )? ( EXISTS )? simple_table_ref_no_alias ^( DEFINITIONS ( $create)+ ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1192:4: CREATE ( TEMPORARY )? TABLE ( IF NOT EXISTS )? tableName= simple_table_ref_no_alias LPAREN create+= create_definition ( COMMA create+= create_definition )* RPAREN ( create_table_options )? ( ( IGNORE | REPLACE )? ( AS )? select )?
			{
			DebugLocation(1192, 4);
			CREATE570=(IToken)Match(input,CREATE,Follow._CREATE_in_create_table9915); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE570);

			DebugLocation(1192, 11);
			// MySQL51Parser.g3:1192:11: ( TEMPORARY )?
			int alt237=2;
			try { DebugEnterSubRule(237);
			try { DebugEnterDecision(237, false);
			int LA237_0 = input.LA(1);

			if ((LA237_0==TEMPORARY))
			{
				alt237 = 1;
			}
			} finally { DebugExitDecision(237); }
			switch (alt237)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1192:12: TEMPORARY
				{
				DebugLocation(1192, 12);
				TEMPORARY571=(IToken)Match(input,TEMPORARY,Follow._TEMPORARY_in_create_table9918); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEMPORARY.Add(TEMPORARY571);


				}
				break;

			}
			} finally { DebugExitSubRule(237); }

			DebugLocation(1192, 25);
			TABLE572=(IToken)Match(input,TABLE,Follow._TABLE_in_create_table9923); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE572);

			DebugLocation(1193, 3);
			// MySQL51Parser.g3:1193:3: ( IF NOT EXISTS )?
			int alt238=2;
			try { DebugEnterSubRule(238);
			try { DebugEnterDecision(238, false);
			int LA238_0 = input.LA(1);

			if ((LA238_0==IF))
			{
				alt238 = 1;
			}
			} finally { DebugExitDecision(238); }
			switch (alt238)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1193:4: IF NOT EXISTS
				{
				DebugLocation(1193, 4);
				IF573=(IToken)Match(input,IF,Follow._IF_in_create_table9928); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF573);

				DebugLocation(1193, 7);
				NOT574=(IToken)Match(input,NOT,Follow._NOT_in_create_table9930); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT574);

				DebugLocation(1193, 11);
				EXISTS575=(IToken)Match(input,EXISTS,Follow._EXISTS_in_create_table9932); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS575);


				}
				break;

			}
			} finally { DebugExitSubRule(238); }

			DebugLocation(1194, 12);
			PushFollow(Follow._simple_table_ref_no_alias_in_create_table9941);
			tableName=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(tableName.Tree);
			DebugLocation(1195, 3);
			LPAREN576=(IToken)Match(input,LPAREN,Follow._LPAREN_in_create_table9945); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(LPAREN576);

			DebugLocation(1195, 16);
			PushFollow(Follow._create_definition_in_create_table9949);
			create=create_definition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_create_definition.Add(create.Tree);
			if (list_create==null) list_create=new List<object>();
			list_create.Add(create.Tree);

			DebugLocation(1195, 36);
			// MySQL51Parser.g3:1195:36: ( COMMA create+= create_definition )*
			try { DebugEnterSubRule(239);
			while (true)
			{
				int alt239=2;
				try { DebugEnterDecision(239, false);
				int LA239_0 = input.LA(1);

				if ((LA239_0==COMMA))
				{
					alt239 = 1;
				}


				} finally { DebugExitDecision(239); }
				switch ( alt239 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1195:37: COMMA create+= create_definition
					{
					DebugLocation(1195, 37);
					COMMA577=(IToken)Match(input,COMMA,Follow._COMMA_in_create_table9952); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA577);

					DebugLocation(1195, 49);
					PushFollow(Follow._create_definition_in_create_table9956);
					create=create_definition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_create_definition.Add(create.Tree);
					if (list_create==null) list_create=new List<object>();
					list_create.Add(create.Tree);


					}
					break;

				default:
					goto loop239;
				}
			}

			loop239:
				;

			} finally { DebugExitSubRule(239); }

			DebugLocation(1195, 71);
			RPAREN578=(IToken)Match(input,RPAREN,Follow._RPAREN_in_create_table9960); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(RPAREN578);

			DebugLocation(1196, 3);
			// MySQL51Parser.g3:1196:3: ( create_table_options )?
			int alt240=2;
			try { DebugEnterSubRule(240);
			try { DebugEnterDecision(240, false);
			int LA240_0 = input.LA(1);

			if ((LA240_0==AUTO_INCREMENT||LA240_0==AVG_ROW_LENGTH||LA240_0==CHARACTER||LA240_0==CHECKSUM||LA240_0==COLLATE||LA240_0==COMMENT||LA240_0==CONNECTION||LA240_0==DATA||LA240_0==DEFAULT||LA240_0==DELAY_KEY_WRITE||LA240_0==ENGINE||LA240_0==INDEX||LA240_0==INSERT_METHOD||LA240_0==MAX_ROWS||LA240_0==MIN_ROWS||LA240_0==PACK_KEYS||LA240_0==PASSWORD||LA240_0==ROW_FORMAT||LA240_0==TYPE||LA240_0==UNION))
			{
				alt240 = 1;
			}
			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1196:3: create_table_options
				{
				DebugLocation(1196, 3);
				PushFollow(Follow._create_table_options_in_create_table9964);
				create_table_options579=create_table_options();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_create_table_options.Add(create_table_options579.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(240); }

			DebugLocation(1196, 25);
			// MySQL51Parser.g3:1196:25: ( ( IGNORE | REPLACE )? ( AS )? select )?
			int alt243=2;
			try { DebugEnterSubRule(243);
			try { DebugEnterDecision(243, false);
			int LA243_0 = input.LA(1);

			if ((LA243_0==AS||LA243_0==IGNORE||LA243_0==LPAREN||LA243_0==REPLACE||LA243_0==SELECT))
			{
				alt243 = 1;
			}
			} finally { DebugExitDecision(243); }
			switch (alt243)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1196:27: ( IGNORE | REPLACE )? ( AS )? select
				{
				DebugLocation(1196, 27);
				// MySQL51Parser.g3:1196:27: ( IGNORE | REPLACE )?
				int alt241=3;
				try { DebugEnterSubRule(241);
				try { DebugEnterDecision(241, false);
				int LA241_0 = input.LA(1);

				if ((LA241_0==IGNORE))
				{
					alt241 = 1;
				}
				else if ((LA241_0==REPLACE))
				{
					alt241 = 2;
				}
				} finally { DebugExitDecision(241); }
				switch (alt241)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1196:29: IGNORE
					{
					DebugLocation(1196, 29);
					IGNORE580=(IToken)Match(input,IGNORE,Follow._IGNORE_in_create_table9971); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IGNORE.Add(IGNORE580);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1196:38: REPLACE
					{
					DebugLocation(1196, 38);
					REPLACE581=(IToken)Match(input,REPLACE,Follow._REPLACE_in_create_table9975); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_REPLACE.Add(REPLACE581);


					}
					break;

				}
				} finally { DebugExitSubRule(241); }

				DebugLocation(1196, 49);
				// MySQL51Parser.g3:1196:49: ( AS )?
				int alt242=2;
				try { DebugEnterSubRule(242);
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==AS))
				{
					alt242 = 1;
				}
				} finally { DebugExitDecision(242); }
				switch (alt242)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1196:49: AS
					{
					DebugLocation(1196, 49);
					AS582=(IToken)Match(input,AS,Follow._AS_in_create_table9980); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS582);


					}
					break;

				}
				} finally { DebugExitSubRule(242); }

				DebugLocation(1196, 53);
				PushFollow(Follow._select_in_create_table9983);
				select583=select();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select.Add(select583.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(243); }



			{
			// AST REWRITE
			// elements: TEMPORARY, EXISTS, simple_table_ref_no_alias, create
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: create
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_create=new RewriteRuleSubtreeStream(adaptor,"token create",list_create);
			root_0 = (object)adaptor.Nil();
			// 1197:3: -> ^( CREATE_TABLE ( TEMPORARY )? ( EXISTS )? simple_table_ref_no_alias ^( DEFINITIONS ( $create)+ ) )
			{
				DebugLocation(1197, 6);
				// MySQL51Parser.g3:1197:6: ^( CREATE_TABLE ( TEMPORARY )? ( EXISTS )? simple_table_ref_no_alias ^( DEFINITIONS ( $create)+ ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1197, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CREATE_TABLE, "CREATE_TABLE"), root_1);

				DebugLocation(1198, 5);
				// MySQL51Parser.g3:1198:5: ( TEMPORARY )?
				if (stream_TEMPORARY.HasNext)
				{
					DebugLocation(1198, 5);
					adaptor.AddChild(root_1, stream_TEMPORARY.NextNode());

				}
				stream_TEMPORARY.Reset();
				DebugLocation(1199, 5);
				// MySQL51Parser.g3:1199:5: ( EXISTS )?
				if (stream_EXISTS.HasNext)
				{
					DebugLocation(1199, 5);
					adaptor.AddChild(root_1, stream_EXISTS.NextNode());

				}
				stream_EXISTS.Reset();
				DebugLocation(1200, 5);
				adaptor.AddChild(root_1, stream_simple_table_ref_no_alias.NextTree());
				DebugLocation(1201, 5);
				// MySQL51Parser.g3:1201:5: ^( DEFINITIONS ( $create)+ )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(1201, 7);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DEFINITIONS, "DEFINITIONS"), root_2);

				DebugLocation(1201, 20);
				if (!(stream_create.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_create.HasNext )
				{
					DebugLocation(1201, 20);
					adaptor.AddChild(root_2, stream_create.NextTree());

				}
				stream_create.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_table", 92);
			LeaveRule("create_table", 92);
			LeaveRule_create_table();
		}
		DebugLocation(1204, 1);
		} finally { DebugExitRule(GrammarFileName, "create_table"); }
		return retval;

	}
	// $ANTLR end "create_table"

	private sealed partial class create_table_options_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_table_options_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_table_options();
	partial void LeaveRule_create_table_options();

	// $ANTLR start "create_table_options"
	// MySQL51Parser.g3:1206:1: create_table_options : create_table_option ( COMMA create_table_option )* ;
	[GrammarRule("create_table_options")]
	private MySQL51Parser.create_table_options_return create_table_options()
	{
		EnterRule_create_table_options();
		EnterRule("create_table_options", 93);
		TraceIn("create_table_options", 93);
		MySQL51Parser.create_table_options_return retval = new MySQL51Parser.create_table_options_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA585 = default(IToken);
		MySQL51Parser.create_table_option_return create_table_option584 = default(MySQL51Parser.create_table_option_return);
		MySQL51Parser.create_table_option_return create_table_option586 = default(MySQL51Parser.create_table_option_return);

		object COMMA585_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "create_table_options");
		DebugLocation(1206, 1);
		try
		{
			// MySQL51Parser.g3:1207:2: ( create_table_option ( COMMA create_table_option )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1207:4: create_table_option ( COMMA create_table_option )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1207, 4);
			PushFollow(Follow._create_table_option_in_create_table_options10045);
			create_table_option584=create_table_option();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, create_table_option584.Tree);
			DebugLocation(1207, 24);
			// MySQL51Parser.g3:1207:24: ( COMMA create_table_option )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=2;
				try { DebugEnterDecision(244, false);
				int LA244_0 = input.LA(1);

				if ((LA244_0==COMMA))
				{
					alt244 = 1;
				}


				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1207:26: COMMA create_table_option
					{
					DebugLocation(1207, 26);
					COMMA585=(IToken)Match(input,COMMA,Follow._COMMA_in_create_table_options10049); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA585_tree = (object)adaptor.Create(COMMA585);
					adaptor.AddChild(root_0, COMMA585_tree);
					}
					DebugLocation(1207, 32);
					PushFollow(Follow._create_table_option_in_create_table_options10051);
					create_table_option586=create_table_option();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, create_table_option586.Tree);

					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_table_options", 93);
			LeaveRule("create_table_options", 93);
			LeaveRule_create_table_options();
		}
		DebugLocation(1208, 1);
		} finally { DebugExitRule(GrammarFileName, "create_table_options"); }
		return retval;

	}
	// $ANTLR end "create_table_options"

	private sealed partial class create_table_option_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_table_option_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_table_option();
	partial void LeaveRule_create_table_option();

	// $ANTLR start "create_table_option"
	// MySQL51Parser.g3:1210:1: create_table_option : ( ( ( ENGINE | TYPE ) ( EQUALS )? engine_name ) | ( AUTO_INCREMENT ( EQUALS )? INT_NUMBER ) | ( AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER ) | ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) ) | ( CHECKSUM ( EQUALS )? ( ZERO | ONE ) ) | ( ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) ) | ( COMMENT ( EQUALS )? STRING ) | ( CONNECTION ( EQUALS )? STRING ) | ( DATA DIRECTORY ( EQUALS )? STRING ) | ( DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE ) ) | ( INDEX DIRECTORY ( EQUALS )? STRING ) | ( INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST ) ) | ( MAX_ROWS ( EQUALS )? INT_NUMBER ) | ( MIN_ROWS ( EQUALS )? INT_NUMBER ) | ( PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT ) ) | ( PASSWORD ( EQUALS )? STRING ) | ( ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT ) ) | ( UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* ) ) );
	[GrammarRule("create_table_option")]
	private MySQL51Parser.create_table_option_return create_table_option()
	{
		EnterRule_create_table_option();
		EnterRule("create_table_option", 94);
		TraceIn("create_table_option", 94);
		MySQL51Parser.create_table_option_return retval = new MySQL51Parser.create_table_option_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set587 = default(IToken);
		IToken EQUALS588 = default(IToken);
		IToken AUTO_INCREMENT590 = default(IToken);
		IToken EQUALS591 = default(IToken);
		IToken INT_NUMBER592 = default(IToken);
		IToken AVG_ROW_LENGTH593 = default(IToken);
		IToken EQUALS594 = default(IToken);
		IToken INT_NUMBER595 = default(IToken);
		IToken DEFAULT596 = default(IToken);
		IToken CHARACTER597 = default(IToken);
		IToken SET598 = default(IToken);
		IToken EQUALS599 = default(IToken);
		IToken set600 = default(IToken);
		IToken CHECKSUM601 = default(IToken);
		IToken EQUALS602 = default(IToken);
		IToken set603 = default(IToken);
		IToken DEFAULT604 = default(IToken);
		IToken COLLATE605 = default(IToken);
		IToken EQUALS606 = default(IToken);
		IToken set607 = default(IToken);
		IToken COMMENT608 = default(IToken);
		IToken EQUALS609 = default(IToken);
		IToken STRING610 = default(IToken);
		IToken CONNECTION611 = default(IToken);
		IToken EQUALS612 = default(IToken);
		IToken STRING613 = default(IToken);
		IToken DATA614 = default(IToken);
		IToken DIRECTORY615 = default(IToken);
		IToken EQUALS616 = default(IToken);
		IToken STRING617 = default(IToken);
		IToken DELAY_KEY_WRITE618 = default(IToken);
		IToken EQUALS619 = default(IToken);
		IToken set620 = default(IToken);
		IToken INDEX621 = default(IToken);
		IToken DIRECTORY622 = default(IToken);
		IToken EQUALS623 = default(IToken);
		IToken STRING624 = default(IToken);
		IToken INSERT_METHOD625 = default(IToken);
		IToken EQUALS626 = default(IToken);
		IToken set627 = default(IToken);
		IToken MAX_ROWS628 = default(IToken);
		IToken EQUALS629 = default(IToken);
		IToken INT_NUMBER630 = default(IToken);
		IToken MIN_ROWS631 = default(IToken);
		IToken EQUALS632 = default(IToken);
		IToken INT_NUMBER633 = default(IToken);
		IToken PACK_KEYS634 = default(IToken);
		IToken EQUALS635 = default(IToken);
		IToken set636 = default(IToken);
		IToken PASSWORD637 = default(IToken);
		IToken EQUALS638 = default(IToken);
		IToken STRING639 = default(IToken);
		IToken ROW_FORMAT640 = default(IToken);
		IToken EQUALS641 = default(IToken);
		IToken set642 = default(IToken);
		IToken UNION643 = default(IToken);
		IToken EQUALS644 = default(IToken);
		IToken COMMA646 = default(IToken);
		MySQL51Parser.engine_name_return engine_name589 = default(MySQL51Parser.engine_name_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias645 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias647 = default(MySQL51Parser.simple_table_ref_no_alias_return);

		object set587_tree = default(object);
		object EQUALS588_tree = default(object);
		object AUTO_INCREMENT590_tree = default(object);
		object EQUALS591_tree = default(object);
		object INT_NUMBER592_tree = default(object);
		object AVG_ROW_LENGTH593_tree = default(object);
		object EQUALS594_tree = default(object);
		object INT_NUMBER595_tree = default(object);
		object DEFAULT596_tree = default(object);
		object CHARACTER597_tree = default(object);
		object SET598_tree = default(object);
		object EQUALS599_tree = default(object);
		object set600_tree = default(object);
		object CHECKSUM601_tree = default(object);
		object EQUALS602_tree = default(object);
		object set603_tree = default(object);
		object DEFAULT604_tree = default(object);
		object COLLATE605_tree = default(object);
		object EQUALS606_tree = default(object);
		object set607_tree = default(object);
		object COMMENT608_tree = default(object);
		object EQUALS609_tree = default(object);
		object STRING610_tree = default(object);
		object CONNECTION611_tree = default(object);
		object EQUALS612_tree = default(object);
		object STRING613_tree = default(object);
		object DATA614_tree = default(object);
		object DIRECTORY615_tree = default(object);
		object EQUALS616_tree = default(object);
		object STRING617_tree = default(object);
		object DELAY_KEY_WRITE618_tree = default(object);
		object EQUALS619_tree = default(object);
		object set620_tree = default(object);
		object INDEX621_tree = default(object);
		object DIRECTORY622_tree = default(object);
		object EQUALS623_tree = default(object);
		object STRING624_tree = default(object);
		object INSERT_METHOD625_tree = default(object);
		object EQUALS626_tree = default(object);
		object set627_tree = default(object);
		object MAX_ROWS628_tree = default(object);
		object EQUALS629_tree = default(object);
		object INT_NUMBER630_tree = default(object);
		object MIN_ROWS631_tree = default(object);
		object EQUALS632_tree = default(object);
		object INT_NUMBER633_tree = default(object);
		object PACK_KEYS634_tree = default(object);
		object EQUALS635_tree = default(object);
		object set636_tree = default(object);
		object PASSWORD637_tree = default(object);
		object EQUALS638_tree = default(object);
		object STRING639_tree = default(object);
		object ROW_FORMAT640_tree = default(object);
		object EQUALS641_tree = default(object);
		object set642_tree = default(object);
		object UNION643_tree = default(object);
		object EQUALS644_tree = default(object);
		object COMMA646_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "create_table_option");
		DebugLocation(1210, 1);
		try
		{
			// MySQL51Parser.g3:1211:2: ( ( ( ENGINE | TYPE ) ( EQUALS )? engine_name ) | ( AUTO_INCREMENT ( EQUALS )? INT_NUMBER ) | ( AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER ) | ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) ) | ( CHECKSUM ( EQUALS )? ( ZERO | ONE ) ) | ( ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) ) | ( COMMENT ( EQUALS )? STRING ) | ( CONNECTION ( EQUALS )? STRING ) | ( DATA DIRECTORY ( EQUALS )? STRING ) | ( DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE ) ) | ( INDEX DIRECTORY ( EQUALS )? STRING ) | ( INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST ) ) | ( MAX_ROWS ( EQUALS )? INT_NUMBER ) | ( MIN_ROWS ( EQUALS )? INT_NUMBER ) | ( PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT ) ) | ( PASSWORD ( EQUALS )? STRING ) | ( ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT ) ) | ( UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* ) ) )
			int alt266=18;
			try { DebugEnterDecision(266, false);
			try
			{
				alt266 = dfa266.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(266); }
			switch (alt266)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1211:4: ( ( ENGINE | TYPE ) ( EQUALS )? engine_name )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1211, 4);
				// MySQL51Parser.g3:1211:4: ( ( ENGINE | TYPE ) ( EQUALS )? engine_name )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1211:5: ( ENGINE | TYPE ) ( EQUALS )? engine_name
				{
				DebugLocation(1211, 5);
				set587=(IToken)input.LT(1);
				if (input.LA(1)==ENGINE||input.LA(1)==TYPE)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set587));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1211, 23);
				// MySQL51Parser.g3:1211:23: ( EQUALS )?
				int alt245=2;
				try { DebugEnterSubRule(245);
				try { DebugEnterDecision(245, false);
				int LA245_0 = input.LA(1);

				if ((LA245_0==EQUALS))
				{
					alt245 = 1;
				}
				} finally { DebugExitDecision(245); }
				switch (alt245)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1211:23: EQUALS
					{
					DebugLocation(1211, 23);
					EQUALS588=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10076); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS588_tree = (object)adaptor.Create(EQUALS588);
					adaptor.AddChild(root_0, EQUALS588_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(245); }

				DebugLocation(1211, 31);
				PushFollow(Follow._engine_name_in_create_table_option10079);
				engine_name589=engine_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, engine_name589.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1212:4: ( AUTO_INCREMENT ( EQUALS )? INT_NUMBER )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1212, 4);
				// MySQL51Parser.g3:1212:4: ( AUTO_INCREMENT ( EQUALS )? INT_NUMBER )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1212:6: AUTO_INCREMENT ( EQUALS )? INT_NUMBER
				{
				DebugLocation(1212, 6);
				AUTO_INCREMENT590=(IToken)Match(input,AUTO_INCREMENT,Follow._AUTO_INCREMENT_in_create_table_option10088); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AUTO_INCREMENT590_tree = (object)adaptor.Create(AUTO_INCREMENT590);
				adaptor.AddChild(root_0, AUTO_INCREMENT590_tree);
				}
				DebugLocation(1212, 21);
				// MySQL51Parser.g3:1212:21: ( EQUALS )?
				int alt246=2;
				try { DebugEnterSubRule(246);
				try { DebugEnterDecision(246, false);
				int LA246_0 = input.LA(1);

				if ((LA246_0==EQUALS))
				{
					alt246 = 1;
				}
				} finally { DebugExitDecision(246); }
				switch (alt246)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1212:21: EQUALS
					{
					DebugLocation(1212, 21);
					EQUALS591=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10090); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS591_tree = (object)adaptor.Create(EQUALS591);
					adaptor.AddChild(root_0, EQUALS591_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(246); }

				DebugLocation(1212, 29);
				INT_NUMBER592=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_create_table_option10093); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER592_tree = (object)adaptor.Create(INT_NUMBER592);
				adaptor.AddChild(root_0, INT_NUMBER592_tree);
				}

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1213:4: ( AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1213, 4);
				// MySQL51Parser.g3:1213:4: ( AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1213:6: AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER
				{
				DebugLocation(1213, 6);
				AVG_ROW_LENGTH593=(IToken)Match(input,AVG_ROW_LENGTH,Follow._AVG_ROW_LENGTH_in_create_table_option10102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AVG_ROW_LENGTH593_tree = (object)adaptor.Create(AVG_ROW_LENGTH593);
				adaptor.AddChild(root_0, AVG_ROW_LENGTH593_tree);
				}
				DebugLocation(1213, 21);
				// MySQL51Parser.g3:1213:21: ( EQUALS )?
				int alt247=2;
				try { DebugEnterSubRule(247);
				try { DebugEnterDecision(247, false);
				int LA247_0 = input.LA(1);

				if ((LA247_0==EQUALS))
				{
					alt247 = 1;
				}
				} finally { DebugExitDecision(247); }
				switch (alt247)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1213:21: EQUALS
					{
					DebugLocation(1213, 21);
					EQUALS594=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10104); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS594_tree = (object)adaptor.Create(EQUALS594);
					adaptor.AddChild(root_0, EQUALS594_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(247); }

				DebugLocation(1213, 29);
				INT_NUMBER595=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_create_table_option10107); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER595_tree = (object)adaptor.Create(INT_NUMBER595);
				adaptor.AddChild(root_0, INT_NUMBER595_tree);
				}

				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1214:4: ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1214, 4);
				// MySQL51Parser.g3:1214:4: ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1214:6: ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING )
				{
				DebugLocation(1214, 6);
				// MySQL51Parser.g3:1214:6: ( DEFAULT )?
				int alt248=2;
				try { DebugEnterSubRule(248);
				try { DebugEnterDecision(248, false);
				int LA248_0 = input.LA(1);

				if ((LA248_0==DEFAULT))
				{
					alt248 = 1;
				}
				} finally { DebugExitDecision(248); }
				switch (alt248)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1214:6: DEFAULT
					{
					DebugLocation(1214, 6);
					DEFAULT596=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_create_table_option10116); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DEFAULT596_tree = (object)adaptor.Create(DEFAULT596);
					adaptor.AddChild(root_0, DEFAULT596_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(248); }

				DebugLocation(1214, 15);
				CHARACTER597=(IToken)Match(input,CHARACTER,Follow._CHARACTER_in_create_table_option10119); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARACTER597_tree = (object)adaptor.Create(CHARACTER597);
				adaptor.AddChild(root_0, CHARACTER597_tree);
				}
				DebugLocation(1214, 25);
				SET598=(IToken)Match(input,SET,Follow._SET_in_create_table_option10121); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SET598_tree = (object)adaptor.Create(SET598);
				adaptor.AddChild(root_0, SET598_tree);
				}
				DebugLocation(1214, 29);
				// MySQL51Parser.g3:1214:29: ( EQUALS )?
				int alt249=2;
				try { DebugEnterSubRule(249);
				try { DebugEnterDecision(249, false);
				int LA249_0 = input.LA(1);

				if ((LA249_0==EQUALS))
				{
					alt249 = 1;
				}
				} finally { DebugExitDecision(249); }
				switch (alt249)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1214:29: EQUALS
					{
					DebugLocation(1214, 29);
					EQUALS599=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10123); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS599_tree = (object)adaptor.Create(EQUALS599);
					adaptor.AddChild(root_0, EQUALS599_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(249); }

				DebugLocation(1214, 37);
				set600=(IToken)input.LT(1);
				if (input.LA(1)==ID||input.LA(1)==STRING)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set600));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1215:4: ( CHECKSUM ( EQUALS )? ( ZERO | ONE ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1215, 4);
				// MySQL51Parser.g3:1215:4: ( CHECKSUM ( EQUALS )? ( ZERO | ONE ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1215:6: CHECKSUM ( EQUALS )? ( ZERO | ONE )
				{
				DebugLocation(1215, 6);
				CHECKSUM601=(IToken)Match(input,CHECKSUM,Follow._CHECKSUM_in_create_table_option10143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHECKSUM601_tree = (object)adaptor.Create(CHECKSUM601);
				adaptor.AddChild(root_0, CHECKSUM601_tree);
				}
				DebugLocation(1215, 15);
				// MySQL51Parser.g3:1215:15: ( EQUALS )?
				int alt250=2;
				try { DebugEnterSubRule(250);
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==EQUALS))
				{
					alt250 = 1;
				}
				} finally { DebugExitDecision(250); }
				switch (alt250)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1215:15: EQUALS
					{
					DebugLocation(1215, 15);
					EQUALS602=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10145); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS602_tree = (object)adaptor.Create(EQUALS602);
					adaptor.AddChild(root_0, EQUALS602_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(250); }

				DebugLocation(1215, 23);
				set603=(IToken)input.LT(1);
				if (input.LA(1)==ONE||input.LA(1)==ZERO)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set603));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1216:4: ( ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1216, 4);
				// MySQL51Parser.g3:1216:4: ( ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1216:6: ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING )
				{
				DebugLocation(1216, 6);
				// MySQL51Parser.g3:1216:6: ( DEFAULT )?
				int alt251=2;
				try { DebugEnterSubRule(251);
				try { DebugEnterDecision(251, false);
				int LA251_0 = input.LA(1);

				if ((LA251_0==DEFAULT))
				{
					alt251 = 1;
				}
				} finally { DebugExitDecision(251); }
				switch (alt251)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1216:6: DEFAULT
					{
					DebugLocation(1216, 6);
					DEFAULT604=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_create_table_option10165); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DEFAULT604_tree = (object)adaptor.Create(DEFAULT604);
					adaptor.AddChild(root_0, DEFAULT604_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(251); }

				DebugLocation(1216, 15);
				COLLATE605=(IToken)Match(input,COLLATE,Follow._COLLATE_in_create_table_option10168); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLLATE605_tree = (object)adaptor.Create(COLLATE605);
				adaptor.AddChild(root_0, COLLATE605_tree);
				}
				DebugLocation(1216, 23);
				// MySQL51Parser.g3:1216:23: ( EQUALS )?
				int alt252=2;
				try { DebugEnterSubRule(252);
				try { DebugEnterDecision(252, false);
				int LA252_0 = input.LA(1);

				if ((LA252_0==EQUALS))
				{
					alt252 = 1;
				}
				} finally { DebugExitDecision(252); }
				switch (alt252)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1216:23: EQUALS
					{
					DebugLocation(1216, 23);
					EQUALS606=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10170); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS606_tree = (object)adaptor.Create(EQUALS606);
					adaptor.AddChild(root_0, EQUALS606_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(252); }

				DebugLocation(1216, 31);
				set607=(IToken)input.LT(1);
				if (input.LA(1)==ID||input.LA(1)==STRING)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set607));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1217:4: ( COMMENT ( EQUALS )? STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1217, 4);
				// MySQL51Parser.g3:1217:4: ( COMMENT ( EQUALS )? STRING )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1217:6: COMMENT ( EQUALS )? STRING
				{
				DebugLocation(1217, 6);
				COMMENT608=(IToken)Match(input,COMMENT,Follow._COMMENT_in_create_table_option10190); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMENT608_tree = (object)adaptor.Create(COMMENT608);
				adaptor.AddChild(root_0, COMMENT608_tree);
				}
				DebugLocation(1217, 14);
				// MySQL51Parser.g3:1217:14: ( EQUALS )?
				int alt253=2;
				try { DebugEnterSubRule(253);
				try { DebugEnterDecision(253, false);
				int LA253_0 = input.LA(1);

				if ((LA253_0==EQUALS))
				{
					alt253 = 1;
				}
				} finally { DebugExitDecision(253); }
				switch (alt253)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1217:14: EQUALS
					{
					DebugLocation(1217, 14);
					EQUALS609=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10192); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS609_tree = (object)adaptor.Create(EQUALS609);
					adaptor.AddChild(root_0, EQUALS609_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(253); }

				DebugLocation(1217, 22);
				STRING610=(IToken)Match(input,STRING,Follow._STRING_in_create_table_option10195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING610_tree = (object)adaptor.Create(STRING610);
				adaptor.AddChild(root_0, STRING610_tree);
				}

				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1218:4: ( CONNECTION ( EQUALS )? STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1218, 4);
				// MySQL51Parser.g3:1218:4: ( CONNECTION ( EQUALS )? STRING )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1218:6: CONNECTION ( EQUALS )? STRING
				{
				DebugLocation(1218, 6);
				CONNECTION611=(IToken)Match(input,CONNECTION,Follow._CONNECTION_in_create_table_option10204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CONNECTION611_tree = (object)adaptor.Create(CONNECTION611);
				adaptor.AddChild(root_0, CONNECTION611_tree);
				}
				DebugLocation(1218, 17);
				// MySQL51Parser.g3:1218:17: ( EQUALS )?
				int alt254=2;
				try { DebugEnterSubRule(254);
				try { DebugEnterDecision(254, false);
				int LA254_0 = input.LA(1);

				if ((LA254_0==EQUALS))
				{
					alt254 = 1;
				}
				} finally { DebugExitDecision(254); }
				switch (alt254)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1218:17: EQUALS
					{
					DebugLocation(1218, 17);
					EQUALS612=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10206); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS612_tree = (object)adaptor.Create(EQUALS612);
					adaptor.AddChild(root_0, EQUALS612_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(254); }

				DebugLocation(1218, 25);
				STRING613=(IToken)Match(input,STRING,Follow._STRING_in_create_table_option10209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING613_tree = (object)adaptor.Create(STRING613);
				adaptor.AddChild(root_0, STRING613_tree);
				}

				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:1219:4: ( DATA DIRECTORY ( EQUALS )? STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1219, 4);
				// MySQL51Parser.g3:1219:4: ( DATA DIRECTORY ( EQUALS )? STRING )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1219:6: DATA DIRECTORY ( EQUALS )? STRING
				{
				DebugLocation(1219, 6);
				DATA614=(IToken)Match(input,DATA,Follow._DATA_in_create_table_option10218); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATA614_tree = (object)adaptor.Create(DATA614);
				adaptor.AddChild(root_0, DATA614_tree);
				}
				DebugLocation(1219, 11);
				DIRECTORY615=(IToken)Match(input,DIRECTORY,Follow._DIRECTORY_in_create_table_option10220); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DIRECTORY615_tree = (object)adaptor.Create(DIRECTORY615);
				adaptor.AddChild(root_0, DIRECTORY615_tree);
				}
				DebugLocation(1219, 21);
				// MySQL51Parser.g3:1219:21: ( EQUALS )?
				int alt255=2;
				try { DebugEnterSubRule(255);
				try { DebugEnterDecision(255, false);
				int LA255_0 = input.LA(1);

				if ((LA255_0==EQUALS))
				{
					alt255 = 1;
				}
				} finally { DebugExitDecision(255); }
				switch (alt255)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1219:21: EQUALS
					{
					DebugLocation(1219, 21);
					EQUALS616=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10222); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS616_tree = (object)adaptor.Create(EQUALS616);
					adaptor.AddChild(root_0, EQUALS616_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(255); }

				DebugLocation(1219, 29);
				STRING617=(IToken)Match(input,STRING,Follow._STRING_in_create_table_option10225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING617_tree = (object)adaptor.Create(STRING617);
				adaptor.AddChild(root_0, STRING617_tree);
				}

				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:1220:4: ( DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1220, 4);
				// MySQL51Parser.g3:1220:4: ( DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1220:6: DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE )
				{
				DebugLocation(1220, 6);
				DELAY_KEY_WRITE618=(IToken)Match(input,DELAY_KEY_WRITE,Follow._DELAY_KEY_WRITE_in_create_table_option10234); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DELAY_KEY_WRITE618_tree = (object)adaptor.Create(DELAY_KEY_WRITE618);
				adaptor.AddChild(root_0, DELAY_KEY_WRITE618_tree);
				}
				DebugLocation(1220, 22);
				// MySQL51Parser.g3:1220:22: ( EQUALS )?
				int alt256=2;
				try { DebugEnterSubRule(256);
				try { DebugEnterDecision(256, false);
				int LA256_0 = input.LA(1);

				if ((LA256_0==EQUALS))
				{
					alt256 = 1;
				}
				} finally { DebugExitDecision(256); }
				switch (alt256)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1220:22: EQUALS
					{
					DebugLocation(1220, 22);
					EQUALS619=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10236); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS619_tree = (object)adaptor.Create(EQUALS619);
					adaptor.AddChild(root_0, EQUALS619_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(256); }

				DebugLocation(1220, 30);
				set620=(IToken)input.LT(1);
				if (input.LA(1)==ONE||input.LA(1)==ZERO)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set620));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:1221:4: ( INDEX DIRECTORY ( EQUALS )? STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1221, 4);
				// MySQL51Parser.g3:1221:4: ( INDEX DIRECTORY ( EQUALS )? STRING )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1221:6: INDEX DIRECTORY ( EQUALS )? STRING
				{
				DebugLocation(1221, 6);
				INDEX621=(IToken)Match(input,INDEX,Follow._INDEX_in_create_table_option10256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INDEX621_tree = (object)adaptor.Create(INDEX621);
				adaptor.AddChild(root_0, INDEX621_tree);
				}
				DebugLocation(1221, 12);
				DIRECTORY622=(IToken)Match(input,DIRECTORY,Follow._DIRECTORY_in_create_table_option10258); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DIRECTORY622_tree = (object)adaptor.Create(DIRECTORY622);
				adaptor.AddChild(root_0, DIRECTORY622_tree);
				}
				DebugLocation(1221, 22);
				// MySQL51Parser.g3:1221:22: ( EQUALS )?
				int alt257=2;
				try { DebugEnterSubRule(257);
				try { DebugEnterDecision(257, false);
				int LA257_0 = input.LA(1);

				if ((LA257_0==EQUALS))
				{
					alt257 = 1;
				}
				} finally { DebugExitDecision(257); }
				switch (alt257)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1221:22: EQUALS
					{
					DebugLocation(1221, 22);
					EQUALS623=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10260); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS623_tree = (object)adaptor.Create(EQUALS623);
					adaptor.AddChild(root_0, EQUALS623_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(257); }

				DebugLocation(1221, 30);
				STRING624=(IToken)Match(input,STRING,Follow._STRING_in_create_table_option10263); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING624_tree = (object)adaptor.Create(STRING624);
				adaptor.AddChild(root_0, STRING624_tree);
				}

				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:1222:4: ( INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1222, 4);
				// MySQL51Parser.g3:1222:4: ( INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1222:6: INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST )
				{
				DebugLocation(1222, 6);
				INSERT_METHOD625=(IToken)Match(input,INSERT_METHOD,Follow._INSERT_METHOD_in_create_table_option10272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INSERT_METHOD625_tree = (object)adaptor.Create(INSERT_METHOD625);
				adaptor.AddChild(root_0, INSERT_METHOD625_tree);
				}
				DebugLocation(1222, 20);
				// MySQL51Parser.g3:1222:20: ( EQUALS )?
				int alt258=2;
				try { DebugEnterSubRule(258);
				try { DebugEnterDecision(258, false);
				int LA258_0 = input.LA(1);

				if ((LA258_0==EQUALS))
				{
					alt258 = 1;
				}
				} finally { DebugExitDecision(258); }
				switch (alt258)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1222:20: EQUALS
					{
					DebugLocation(1222, 20);
					EQUALS626=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10274); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS626_tree = (object)adaptor.Create(EQUALS626);
					adaptor.AddChild(root_0, EQUALS626_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(258); }

				DebugLocation(1222, 28);
				set627=(IToken)input.LT(1);
				if (input.LA(1)==FIRST||input.LA(1)==LAST||input.LA(1)==NO)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set627));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:1223:4: ( MAX_ROWS ( EQUALS )? INT_NUMBER )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1223, 4);
				// MySQL51Parser.g3:1223:4: ( MAX_ROWS ( EQUALS )? INT_NUMBER )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1223:6: MAX_ROWS ( EQUALS )? INT_NUMBER
				{
				DebugLocation(1223, 6);
				MAX_ROWS628=(IToken)Match(input,MAX_ROWS,Follow._MAX_ROWS_in_create_table_option10298); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MAX_ROWS628_tree = (object)adaptor.Create(MAX_ROWS628);
				adaptor.AddChild(root_0, MAX_ROWS628_tree);
				}
				DebugLocation(1223, 15);
				// MySQL51Parser.g3:1223:15: ( EQUALS )?
				int alt259=2;
				try { DebugEnterSubRule(259);
				try { DebugEnterDecision(259, false);
				int LA259_0 = input.LA(1);

				if ((LA259_0==EQUALS))
				{
					alt259 = 1;
				}
				} finally { DebugExitDecision(259); }
				switch (alt259)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1223:15: EQUALS
					{
					DebugLocation(1223, 15);
					EQUALS629=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10300); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS629_tree = (object)adaptor.Create(EQUALS629);
					adaptor.AddChild(root_0, EQUALS629_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(259); }

				DebugLocation(1223, 23);
				INT_NUMBER630=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_create_table_option10303); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER630_tree = (object)adaptor.Create(INT_NUMBER630);
				adaptor.AddChild(root_0, INT_NUMBER630_tree);
				}

				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:1224:4: ( MIN_ROWS ( EQUALS )? INT_NUMBER )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1224, 4);
				// MySQL51Parser.g3:1224:4: ( MIN_ROWS ( EQUALS )? INT_NUMBER )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1224:6: MIN_ROWS ( EQUALS )? INT_NUMBER
				{
				DebugLocation(1224, 6);
				MIN_ROWS631=(IToken)Match(input,MIN_ROWS,Follow._MIN_ROWS_in_create_table_option10312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MIN_ROWS631_tree = (object)adaptor.Create(MIN_ROWS631);
				adaptor.AddChild(root_0, MIN_ROWS631_tree);
				}
				DebugLocation(1224, 15);
				// MySQL51Parser.g3:1224:15: ( EQUALS )?
				int alt260=2;
				try { DebugEnterSubRule(260);
				try { DebugEnterDecision(260, false);
				int LA260_0 = input.LA(1);

				if ((LA260_0==EQUALS))
				{
					alt260 = 1;
				}
				} finally { DebugExitDecision(260); }
				switch (alt260)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1224:15: EQUALS
					{
					DebugLocation(1224, 15);
					EQUALS632=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10314); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS632_tree = (object)adaptor.Create(EQUALS632);
					adaptor.AddChild(root_0, EQUALS632_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(260); }

				DebugLocation(1224, 23);
				INT_NUMBER633=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_create_table_option10317); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER633_tree = (object)adaptor.Create(INT_NUMBER633);
				adaptor.AddChild(root_0, INT_NUMBER633_tree);
				}

				}


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:1225:4: ( PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1225, 4);
				// MySQL51Parser.g3:1225:4: ( PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1225:6: PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT )
				{
				DebugLocation(1225, 6);
				PACK_KEYS634=(IToken)Match(input,PACK_KEYS,Follow._PACK_KEYS_in_create_table_option10326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PACK_KEYS634_tree = (object)adaptor.Create(PACK_KEYS634);
				adaptor.AddChild(root_0, PACK_KEYS634_tree);
				}
				DebugLocation(1225, 16);
				// MySQL51Parser.g3:1225:16: ( EQUALS )?
				int alt261=2;
				try { DebugEnterSubRule(261);
				try { DebugEnterDecision(261, false);
				int LA261_0 = input.LA(1);

				if ((LA261_0==EQUALS))
				{
					alt261 = 1;
				}
				} finally { DebugExitDecision(261); }
				switch (alt261)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1225:16: EQUALS
					{
					DebugLocation(1225, 16);
					EQUALS635=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10328); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS635_tree = (object)adaptor.Create(EQUALS635);
					adaptor.AddChild(root_0, EQUALS635_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(261); }

				DebugLocation(1225, 24);
				set636=(IToken)input.LT(1);
				if (input.LA(1)==DEFAULT||input.LA(1)==ONE||input.LA(1)==ZERO)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set636));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:1226:4: ( PASSWORD ( EQUALS )? STRING )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1226, 4);
				// MySQL51Parser.g3:1226:4: ( PASSWORD ( EQUALS )? STRING )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1226:6: PASSWORD ( EQUALS )? STRING
				{
				DebugLocation(1226, 6);
				PASSWORD637=(IToken)Match(input,PASSWORD,Follow._PASSWORD_in_create_table_option10352); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PASSWORD637_tree = (object)adaptor.Create(PASSWORD637);
				adaptor.AddChild(root_0, PASSWORD637_tree);
				}
				DebugLocation(1226, 15);
				// MySQL51Parser.g3:1226:15: ( EQUALS )?
				int alt262=2;
				try { DebugEnterSubRule(262);
				try { DebugEnterDecision(262, false);
				int LA262_0 = input.LA(1);

				if ((LA262_0==EQUALS))
				{
					alt262 = 1;
				}
				} finally { DebugExitDecision(262); }
				switch (alt262)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1226:15: EQUALS
					{
					DebugLocation(1226, 15);
					EQUALS638=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10354); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS638_tree = (object)adaptor.Create(EQUALS638);
					adaptor.AddChild(root_0, EQUALS638_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(262); }

				DebugLocation(1226, 23);
				STRING639=(IToken)Match(input,STRING,Follow._STRING_in_create_table_option10357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING639_tree = (object)adaptor.Create(STRING639);
				adaptor.AddChild(root_0, STRING639_tree);
				}

				}


				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:1227:4: ( ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1227, 4);
				// MySQL51Parser.g3:1227:4: ( ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1227:6: ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT )
				{
				DebugLocation(1227, 6);
				ROW_FORMAT640=(IToken)Match(input,ROW_FORMAT,Follow._ROW_FORMAT_in_create_table_option10366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ROW_FORMAT640_tree = (object)adaptor.Create(ROW_FORMAT640);
				adaptor.AddChild(root_0, ROW_FORMAT640_tree);
				}
				DebugLocation(1227, 17);
				// MySQL51Parser.g3:1227:17: ( EQUALS )?
				int alt263=2;
				try { DebugEnterSubRule(263);
				try { DebugEnterDecision(263, false);
				int LA263_0 = input.LA(1);

				if ((LA263_0==EQUALS))
				{
					alt263 = 1;
				}
				} finally { DebugExitDecision(263); }
				switch (alt263)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1227:17: EQUALS
					{
					DebugLocation(1227, 17);
					EQUALS641=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10368); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS641_tree = (object)adaptor.Create(EQUALS641);
					adaptor.AddChild(root_0, EQUALS641_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(263); }

				DebugLocation(1227, 25);
				set642=(IToken)input.LT(1);
				if (input.LA(1)==COMPACT||input.LA(1)==COMPRESSED||input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC||input.LA(1)==FIXED||input.LA(1)==REDUNDANT)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set642));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}


				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:1228:4: ( UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1228, 4);
				// MySQL51Parser.g3:1228:4: ( UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1228:6: UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* )
				{
				DebugLocation(1228, 6);
				UNION643=(IToken)Match(input,UNION,Follow._UNION_in_create_table_option10404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UNION643_tree = (object)adaptor.Create(UNION643);
				adaptor.AddChild(root_0, UNION643_tree);
				}
				DebugLocation(1228, 12);
				// MySQL51Parser.g3:1228:12: ( EQUALS )?
				int alt264=2;
				try { DebugEnterSubRule(264);
				try { DebugEnterDecision(264, false);
				int LA264_0 = input.LA(1);

				if ((LA264_0==EQUALS))
				{
					alt264 = 1;
				}
				} finally { DebugExitDecision(264); }
				switch (alt264)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1228:12: EQUALS
					{
					DebugLocation(1228, 12);
					EQUALS644=(IToken)Match(input,EQUALS,Follow._EQUALS_in_create_table_option10406); if (state.failed) return retval;
					if (state.backtracking == 0) {
					EQUALS644_tree = (object)adaptor.Create(EQUALS644);
					adaptor.AddChild(root_0, EQUALS644_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(264); }

				DebugLocation(1228, 20);
				// MySQL51Parser.g3:1228:20: ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1228:22: simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )*
				{
				DebugLocation(1228, 22);
				PushFollow(Follow._simple_table_ref_no_alias_in_create_table_option10411);
				simple_table_ref_no_alias645=simple_table_ref_no_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias645.Tree);
				DebugLocation(1228, 48);
				// MySQL51Parser.g3:1228:48: ( COMMA simple_table_ref_no_alias )*
				try { DebugEnterSubRule(265);
				while (true)
				{
					int alt265=2;
					try { DebugEnterDecision(265, false);
					try
					{
						alt265 = dfa265.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(265); }
					switch ( alt265 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1228:50: COMMA simple_table_ref_no_alias
						{
						DebugLocation(1228, 50);
						COMMA646=(IToken)Match(input,COMMA,Follow._COMMA_in_create_table_option10415); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA646_tree = (object)adaptor.Create(COMMA646);
						adaptor.AddChild(root_0, COMMA646_tree);
						}
						DebugLocation(1228, 56);
						PushFollow(Follow._simple_table_ref_no_alias_in_create_table_option10417);
						simple_table_ref_no_alias647=simple_table_ref_no_alias();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias647.Tree);

						}
						break;

					default:
						goto loop265;
					}
				}

				loop265:
					;

				} finally { DebugExitSubRule(265); }


				}


				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_table_option", 94);
			LeaveRule("create_table_option", 94);
			LeaveRule_create_table_option();
		}
		DebugLocation(1230, 1);
		} finally { DebugExitRule(GrammarFileName, "create_table_option"); }
		return retval;

	}
	// $ANTLR end "create_table_option"

	private sealed partial class engine_name_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public engine_name_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_engine_name();
	partial void LeaveRule_engine_name();

	// $ANTLR start "engine_name"
	// MySQL51Parser.g3:1232:1: engine_name : ( MYISAM | INNODB | MERGE | MEMORY | HEAP | BDB | BERKELEYDB | EXAMPLE | FEDERATED | ARCHIVE | CSV | BLACKHOLE ) ;
	[GrammarRule("engine_name")]
	private MySQL51Parser.engine_name_return engine_name()
	{
		EnterRule_engine_name();
		EnterRule("engine_name", 95);
		TraceIn("engine_name", 95);
		MySQL51Parser.engine_name_return retval = new MySQL51Parser.engine_name_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set648 = default(IToken);

		object set648_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "engine_name");
		DebugLocation(1232, 1);
		try
		{
			// MySQL51Parser.g3:1233:2: ( ( MYISAM | INNODB | MERGE | MEMORY | HEAP | BDB | BERKELEYDB | EXAMPLE | FEDERATED | ARCHIVE | CSV | BLACKHOLE ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1233, 2);
			set648=(IToken)input.LT(1);
			if (input.LA(1)==ARCHIVE||input.LA(1)==BDB||input.LA(1)==BERKELEYDB||input.LA(1)==BLACKHOLE||input.LA(1)==CSV||input.LA(1)==EXAMPLE||input.LA(1)==FEDERATED||input.LA(1)==HEAP||input.LA(1)==INNODB||(input.LA(1)>=MEMORY && input.LA(1)<=MERGE)||input.LA(1)==MYISAM)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set648));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("engine_name", 95);
			LeaveRule("engine_name", 95);
			LeaveRule_engine_name();
		}
		DebugLocation(1234, 1);
		} finally { DebugExitRule(GrammarFileName, "engine_name"); }
		return retval;

	}
	// $ANTLR end "engine_name"

	private sealed partial class create_definition_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_definition_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_definition();
	partial void LeaveRule_create_definition();

	// $ANTLR start "create_definition"
	// MySQL51Parser.g3:1236:1: create_definition : colName= ident column_definition -> ^( DEFINITION $colName column_definition ) ;
	[GrammarRule("create_definition")]
	private MySQL51Parser.create_definition_return create_definition()
	{
		EnterRule_create_definition();
		EnterRule("create_definition", 96);
		TraceIn("create_definition", 96);
		MySQL51Parser.create_definition_return retval = new MySQL51Parser.create_definition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		MySQL51Parser.ident_return colName = default(MySQL51Parser.ident_return);
		MySQL51Parser.column_definition_return column_definition649 = default(MySQL51Parser.column_definition_return);

		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_column_definition=new RewriteRuleSubtreeStream(adaptor,"rule column_definition");
		try { DebugEnterRule(GrammarFileName, "create_definition");
		DebugLocation(1236, 1);
		try
		{
			// MySQL51Parser.g3:1237:2: (colName= ident column_definition -> ^( DEFINITION $colName column_definition ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1237:4: colName= ident column_definition
			{
			DebugLocation(1237, 11);
			PushFollow(Follow._ident_in_create_definition10500);
			colName=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(colName.Tree);
			DebugLocation(1237, 18);
			PushFollow(Follow._column_definition_in_create_definition10502);
			column_definition649=column_definition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column_definition.Add(column_definition649.Tree);


			{
			// AST REWRITE
			// elements: colName, column_definition
			// token labels: 
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1237:36: -> ^( DEFINITION $colName column_definition )
			{
				DebugLocation(1237, 39);
				// MySQL51Parser.g3:1237:39: ^( DEFINITION $colName column_definition )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1237, 41);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DEFINITION, "DEFINITION"), root_1);

				DebugLocation(1237, 53);
				adaptor.AddChild(root_1, stream_colName.NextTree());
				DebugLocation(1237, 61);
				adaptor.AddChild(root_1, stream_column_definition.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_definition", 96);
			LeaveRule("create_definition", 96);
			LeaveRule_create_definition();
		}
		DebugLocation(1238, 1);
		} finally { DebugExitRule(GrammarFileName, "create_definition"); }
		return retval;

	}
	// $ANTLR end "create_definition"

	private sealed partial class column_definition_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public column_definition_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_column_definition();
	partial void LeaveRule_column_definition();

	// $ANTLR start "column_definition"
	// MySQL51Parser.g3:1242:1: column_definition : ( ( data_type (notSym= NOT NULL |nullSym= NULL )? ( DEFAULT literal )? (autoInc= AUTO_INCREMENT )? ( COMMENT STRING )? ) -> ^( TYPE data_type ( $notSym)? ( $nullSym)? ( ^( DEFAULT literal ) )? ( $autoInc)? ) | ( ( CONSTRAINT ( ident )? ) ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) ) ) | ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( ( INDEX | KEY ) ( ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( ( FULLTEXT | SPATIAL ) ( INDEX | KEY ) (index_name= ident )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( CHECK LPAREN expr RPAREN )? );
	[GrammarRule("column_definition")]
	private MySQL51Parser.column_definition_return column_definition()
	{
		EnterRule_column_definition();
		EnterRule("column_definition", 97);
		TraceIn("column_definition", 97);
		MySQL51Parser.column_definition_return retval = new MySQL51Parser.column_definition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken notSym = default(IToken);
		IToken nullSym = default(IToken);
		IToken autoInc = default(IToken);
		IToken NULL651 = default(IToken);
		IToken DEFAULT652 = default(IToken);
		IToken COMMENT654 = default(IToken);
		IToken STRING655 = default(IToken);
		IToken CONSTRAINT656 = default(IToken);
		IToken PRIMARY658 = default(IToken);
		IToken KEY659 = default(IToken);
		IToken LPAREN661 = default(IToken);
		IToken COMMA663 = default(IToken);
		IToken RPAREN665 = default(IToken);
		IToken FOREIGN667 = default(IToken);
		IToken KEY668 = default(IToken);
		IToken LPAREN669 = default(IToken);
		IToken COMMA671 = default(IToken);
		IToken RPAREN673 = default(IToken);
		IToken UNIQUE675 = default(IToken);
		IToken set676 = default(IToken);
		IToken LPAREN678 = default(IToken);
		IToken COMMA680 = default(IToken);
		IToken RPAREN682 = default(IToken);
		IToken PRIMARY684 = default(IToken);
		IToken KEY685 = default(IToken);
		IToken LPAREN687 = default(IToken);
		IToken COMMA689 = default(IToken);
		IToken RPAREN691 = default(IToken);
		IToken FOREIGN693 = default(IToken);
		IToken KEY694 = default(IToken);
		IToken LPAREN695 = default(IToken);
		IToken COMMA697 = default(IToken);
		IToken RPAREN699 = default(IToken);
		IToken UNIQUE701 = default(IToken);
		IToken set702 = default(IToken);
		IToken LPAREN704 = default(IToken);
		IToken COMMA706 = default(IToken);
		IToken RPAREN708 = default(IToken);
		IToken set710 = default(IToken);
		IToken LPAREN713 = default(IToken);
		IToken COMMA715 = default(IToken);
		IToken RPAREN717 = default(IToken);
		IToken set719 = default(IToken);
		IToken set720 = default(IToken);
		IToken LPAREN721 = default(IToken);
		IToken COMMA723 = default(IToken);
		IToken RPAREN725 = default(IToken);
		IToken CHECK727 = default(IToken);
		IToken LPAREN728 = default(IToken);
		IToken RPAREN730 = default(IToken);
		MySQL51Parser.ident_return index_name = default(MySQL51Parser.ident_return);
		MySQL51Parser.data_type_return data_type650 = default(MySQL51Parser.data_type_return);
		MySQL51Parser.literal_return literal653 = default(MySQL51Parser.literal_return);
		MySQL51Parser.ident_return ident657 = default(MySQL51Parser.ident_return);
		MySQL51Parser.index_type_return index_type660 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name662 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name664 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type666 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name670 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name672 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.reference_definition_return reference_definition674 = default(MySQL51Parser.reference_definition_return);
		MySQL51Parser.index_type_return index_type677 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name679 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name681 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type683 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_type_return index_type686 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name688 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name690 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type692 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name696 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name698 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.reference_definition_return reference_definition700 = default(MySQL51Parser.reference_definition_return);
		MySQL51Parser.index_type_return index_type703 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name705 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name707 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type709 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.ident_return ident711 = default(MySQL51Parser.ident_return);
		MySQL51Parser.index_type_return index_type712 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name714 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name716 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type718 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.index_col_name_return index_col_name722 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name724 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_type_return index_type726 = default(MySQL51Parser.index_type_return);
		MySQL51Parser.expr_return expr729 = default(MySQL51Parser.expr_return);

		object notSym_tree = default(object);
		object nullSym_tree = default(object);
		object autoInc_tree = default(object);
		object NULL651_tree = default(object);
		object DEFAULT652_tree = default(object);
		object COMMENT654_tree = default(object);
		object STRING655_tree = default(object);
		object CONSTRAINT656_tree = default(object);
		object PRIMARY658_tree = default(object);
		object KEY659_tree = default(object);
		object LPAREN661_tree = default(object);
		object COMMA663_tree = default(object);
		object RPAREN665_tree = default(object);
		object FOREIGN667_tree = default(object);
		object KEY668_tree = default(object);
		object LPAREN669_tree = default(object);
		object COMMA671_tree = default(object);
		object RPAREN673_tree = default(object);
		object UNIQUE675_tree = default(object);
		object set676_tree = default(object);
		object LPAREN678_tree = default(object);
		object COMMA680_tree = default(object);
		object RPAREN682_tree = default(object);
		object PRIMARY684_tree = default(object);
		object KEY685_tree = default(object);
		object LPAREN687_tree = default(object);
		object COMMA689_tree = default(object);
		object RPAREN691_tree = default(object);
		object FOREIGN693_tree = default(object);
		object KEY694_tree = default(object);
		object LPAREN695_tree = default(object);
		object COMMA697_tree = default(object);
		object RPAREN699_tree = default(object);
		object UNIQUE701_tree = default(object);
		object set702_tree = default(object);
		object LPAREN704_tree = default(object);
		object COMMA706_tree = default(object);
		object RPAREN708_tree = default(object);
		object set710_tree = default(object);
		object LPAREN713_tree = default(object);
		object COMMA715_tree = default(object);
		object RPAREN717_tree = default(object);
		object set719_tree = default(object);
		object set720_tree = default(object);
		object LPAREN721_tree = default(object);
		object COMMA723_tree = default(object);
		object RPAREN725_tree = default(object);
		object CHECK727_tree = default(object);
		object LPAREN728_tree = default(object);
		object RPAREN730_tree = default(object);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_NULL=new RewriteRuleITokenStream(adaptor,"token NULL");
		RewriteRuleITokenStream stream_DEFAULT=new RewriteRuleITokenStream(adaptor,"token DEFAULT");
		RewriteRuleITokenStream stream_AUTO_INCREMENT=new RewriteRuleITokenStream(adaptor,"token AUTO_INCREMENT");
		RewriteRuleITokenStream stream_COMMENT=new RewriteRuleITokenStream(adaptor,"token COMMENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "column_definition");
		DebugLocation(1242, 1);
		try
		{
			// MySQL51Parser.g3:1244:2: ( ( data_type (notSym= NOT NULL |nullSym= NULL )? ( DEFAULT literal )? (autoInc= AUTO_INCREMENT )? ( COMMENT STRING )? ) -> ^( TYPE data_type ( $notSym)? ( $nullSym)? ( ^( DEFAULT literal ) )? ( $autoInc)? ) | ( ( CONSTRAINT ( ident )? ) ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) ) ) | ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( ( INDEX | KEY ) ( ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( ( FULLTEXT | SPATIAL ) ( INDEX | KEY ) (index_name= ident )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( CHECK LPAREN expr RPAREN )? )
			int alt299=8;
			try { DebugEnterDecision(299, false);
			switch (input.LA(1))
			{
			case BIGINT:
			case BINARY:
			case BIT:
			case BLOB:
			case CHAR:
			case DATE:
			case DATETIME:
			case DECIMAL:
			case DOUBLE:
			case ENUM:
			case FLOAT:
			case INT:
			case INTEGER:
			case LONGBLOB:
			case LONGTEXT:
			case MEDIUMBLOB:
			case MEDIUMINT:
			case MEDIUMTEXT:
			case NUMERIC:
			case REAL:
			case SET:
			case SMALLINT:
			case TEXT:
			case TIME:
			case TIMESTAMP:
			case TINYBLOB:
			case TINYINT:
			case TINYTEXT:
			case VARBINARY:
			case VARCHAR:
			case YEAR:
				{
				alt299 = 1;
				}
				break;
			case CONSTRAINT:
				{
				alt299 = 2;
				}
				break;
			case PRIMARY:
				{
				alt299 = 3;
				}
				break;
			case FOREIGN:
				{
				alt299 = 4;
				}
				break;
			case UNIQUE:
				{
				alt299 = 5;
				}
				break;
			case INDEX:
			case KEY:
				{
				alt299 = 6;
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				{
				alt299 = 7;
				}
				break;
			case CHECK:
			case COMMA:
			case RPAREN:
				{
				alt299 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 299, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(299); }
			switch (alt299)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1244:4: ( data_type (notSym= NOT NULL |nullSym= NULL )? ( DEFAULT literal )? (autoInc= AUTO_INCREMENT )? ( COMMENT STRING )? )
				{
				DebugLocation(1244, 4);
				// MySQL51Parser.g3:1244:4: ( data_type (notSym= NOT NULL |nullSym= NULL )? ( DEFAULT literal )? (autoInc= AUTO_INCREMENT )? ( COMMENT STRING )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1244:5: data_type (notSym= NOT NULL |nullSym= NULL )? ( DEFAULT literal )? (autoInc= AUTO_INCREMENT )? ( COMMENT STRING )?
				{
				DebugLocation(1244, 5);
				PushFollow(Follow._data_type_in_column_definition10529);
				data_type650=data_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_data_type.Add(data_type650.Tree);
				DebugLocation(1245, 3);
				// MySQL51Parser.g3:1245:3: (notSym= NOT NULL |nullSym= NULL )?
				int alt267=3;
				try { DebugEnterSubRule(267);
				try { DebugEnterDecision(267, false);
				int LA267_0 = input.LA(1);

				if ((LA267_0==NOT))
				{
					alt267 = 1;
				}
				else if ((LA267_0==NULL))
				{
					alt267 = 2;
				}
				} finally { DebugExitDecision(267); }
				switch (alt267)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1245:4: notSym= NOT NULL
					{
					DebugLocation(1245, 10);
					notSym=(IToken)Match(input,NOT,Follow._NOT_in_column_definition10536); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NOT.Add(notSym);

					DebugLocation(1245, 15);
					NULL651=(IToken)Match(input,NULL,Follow._NULL_in_column_definition10538); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NULL.Add(NULL651);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1245:22: nullSym= NULL
					{
					DebugLocation(1245, 29);
					nullSym=(IToken)Match(input,NULL,Follow._NULL_in_column_definition10544); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NULL.Add(nullSym);


					}
					break;

				}
				} finally { DebugExitSubRule(267); }

				DebugLocation(1246, 3);
				// MySQL51Parser.g3:1246:3: ( DEFAULT literal )?
				int alt268=2;
				try { DebugEnterSubRule(268);
				try { DebugEnterDecision(268, false);
				int LA268_0 = input.LA(1);

				if ((LA268_0==DEFAULT))
				{
					alt268 = 1;
				}
				} finally { DebugExitDecision(268); }
				switch (alt268)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1246:4: DEFAULT literal
					{
					DebugLocation(1246, 4);
					DEFAULT652=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_column_definition10551); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEFAULT.Add(DEFAULT652);

					DebugLocation(1246, 12);
					PushFollow(Follow._literal_in_column_definition10553);
					literal653=literal();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_literal.Add(literal653.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(268); }

				DebugLocation(1247, 10);
				// MySQL51Parser.g3:1247:10: (autoInc= AUTO_INCREMENT )?
				int alt269=2;
				try { DebugEnterSubRule(269);
				try { DebugEnterDecision(269, false);
				int LA269_0 = input.LA(1);

				if ((LA269_0==AUTO_INCREMENT))
				{
					alt269 = 1;
				}
				} finally { DebugExitDecision(269); }
				switch (alt269)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1247:10: autoInc= AUTO_INCREMENT
					{
					DebugLocation(1247, 10);
					autoInc=(IToken)Match(input,AUTO_INCREMENT,Follow._AUTO_INCREMENT_in_column_definition10563); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AUTO_INCREMENT.Add(autoInc);


					}
					break;

				}
				} finally { DebugExitSubRule(269); }

				DebugLocation(1249, 3);
				// MySQL51Parser.g3:1249:3: ( COMMENT STRING )?
				int alt270=2;
				try { DebugEnterSubRule(270);
				try { DebugEnterDecision(270, false);
				int LA270_0 = input.LA(1);

				if ((LA270_0==COMMENT))
				{
					alt270 = 1;
				}
				} finally { DebugExitDecision(270); }
				switch (alt270)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1249:4: COMMENT STRING
					{
					DebugLocation(1249, 4);
					COMMENT654=(IToken)Match(input,COMMENT,Follow._COMMENT_in_column_definition10572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMENT.Add(COMMENT654);

					DebugLocation(1249, 12);
					STRING655=(IToken)Match(input,STRING,Follow._STRING_in_column_definition10574); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING655);


					}
					break;

				}
				} finally { DebugExitSubRule(270); }


				}



				{
				// AST REWRITE
				// elements: data_type, notSym, nullSym, DEFAULT, literal, autoInc
				// token labels: notSym, nullSym, autoInc
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_notSym=new RewriteRuleITokenStream(adaptor,"token notSym",notSym);
				RewriteRuleITokenStream stream_nullSym=new RewriteRuleITokenStream(adaptor,"token nullSym",nullSym);
				RewriteRuleITokenStream stream_autoInc=new RewriteRuleITokenStream(adaptor,"token autoInc",autoInc);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1250:4: -> ^( TYPE data_type ( $notSym)? ( $nullSym)? ( ^( DEFAULT literal ) )? ( $autoInc)? )
				{
					DebugLocation(1250, 7);
					// MySQL51Parser.g3:1250:7: ^( TYPE data_type ( $notSym)? ( $nullSym)? ( ^( DEFAULT literal ) )? ( $autoInc)? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1250, 9);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TYPE, "TYPE"), root_1);

					DebugLocation(1250, 14);
					adaptor.AddChild(root_1, stream_data_type.NextTree());
					DebugLocation(1251, 7);
					// MySQL51Parser.g3:1251:7: ( $notSym)?
					if (stream_notSym.HasNext)
					{
						DebugLocation(1251, 7);
						adaptor.AddChild(root_1, stream_notSym.NextNode());

					}
					stream_notSym.Reset();
					DebugLocation(1252, 6);
					// MySQL51Parser.g3:1252:6: ( $nullSym)?
					if (stream_nullSym.HasNext)
					{
						DebugLocation(1252, 8);
						adaptor.AddChild(root_1, stream_nullSym.NextNode());

					}
					stream_nullSym.Reset();
					DebugLocation(1253, 6);
					// MySQL51Parser.g3:1253:6: ( ^( DEFAULT literal ) )?
					if (stream_DEFAULT.HasNext||stream_literal.HasNext)
					{
						DebugLocation(1253, 6);
						// MySQL51Parser.g3:1253:6: ^( DEFAULT literal )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1253, 8);
						root_2 = (object)adaptor.BecomeRoot(stream_DEFAULT.NextNode(), root_2);

						DebugLocation(1253, 16);
						adaptor.AddChild(root_2, stream_literal.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_DEFAULT.Reset();
					stream_literal.Reset();
					DebugLocation(1254, 6);
					// MySQL51Parser.g3:1254:6: ( $autoInc)?
					if (stream_autoInc.HasNext)
					{
						DebugLocation(1254, 8);
						adaptor.AddChild(root_1, stream_autoInc.NextNode());

					}
					stream_autoInc.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1256:4: ( ( CONSTRAINT ( ident )? ) ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) ) )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1256, 4);
				// MySQL51Parser.g3:1256:4: ( ( CONSTRAINT ( ident )? ) ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) ) )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1256:5: ( CONSTRAINT ( ident )? ) ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) )
				{
				DebugLocation(1256, 5);
				// MySQL51Parser.g3:1256:5: ( CONSTRAINT ( ident )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1256:6: CONSTRAINT ( ident )?
				{
				DebugLocation(1256, 6);
				CONSTRAINT656=(IToken)Match(input,CONSTRAINT,Follow._CONSTRAINT_in_column_definition10649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CONSTRAINT656_tree = (object)adaptor.Create(CONSTRAINT656);
				adaptor.AddChild(root_0, CONSTRAINT656_tree);
				}
				DebugLocation(1256, 17);
				// MySQL51Parser.g3:1256:17: ( ident )?
				int alt271=2;
				try { DebugEnterSubRule(271);
				try { DebugEnterDecision(271, false);
				int LA271_0 = input.LA(1);

				if ((LA271_0==ACTION||(LA271_0>=ADDDATE && LA271_0<=ALGORITHM)||LA271_0==ANY||LA271_0==ASCII||(LA271_0>=AT && LA271_0<=BACKUP)||LA271_0==BEGIN||(LA271_0>=BINLOG && LA271_0<=BIT)||(LA271_0>=BLOCK && LA271_0<=BOOLEAN)||LA271_0==BTREE||(LA271_0>=BYTE && LA271_0<=CACHE)||LA271_0==CASCADED||LA271_0==CHAIN||LA271_0==CHANGED||LA271_0==CHARSET||(LA271_0>=CHECKSUM && LA271_0<=CODE)||LA271_0==COLLATION||LA271_0==COLUMNS||LA271_0==COMMENT||(LA271_0>=COMMIT && LA271_0<=CONCURRENT)||(LA271_0>=CONNECTION && LA271_0<=CONSISTENT)||(LA271_0>=CONTAINS && LA271_0<=CONTEXT)||LA271_0==CONTRIBUTORS||LA271_0==CPU||LA271_0==CUBE||LA271_0==DATA||(LA271_0>=DATAFILE && LA271_0<=DATETIME)||LA271_0==DAY||LA271_0==DEALLOCATE||LA271_0==DEFINER||LA271_0==DELAY_KEY_WRITE||LA271_0==DES_KEY_FILE||(LA271_0>=DIRECTORY && LA271_0<=DISK)||LA271_0==DO||(LA271_0>=DUMPFILE && LA271_0<=DYNAMIC)||LA271_0==ENABLE||(LA271_0>=END && LA271_0<=ENUM)||(LA271_0>=ERRORS && LA271_0<=ESCAPE)||(LA271_0>=EVENT && LA271_0<=EVERY)||LA271_0==EXECUTE||LA271_0==EXPANSION||(LA271_0>=EXTENDED && LA271_0<=EXTENT_SIZE)||(LA271_0>=FAST && LA271_0<=FAULTS)||(LA271_0>=FIELDS && LA271_0<=FIXED)||LA271_0==FLUSH||(LA271_0>=FOUND && LA271_0<=FRAC_SECOND)||LA271_0==FULL||(LA271_0>=FUNCTION && LA271_0<=GLOBAL)||LA271_0==GRANTS||LA271_0==GROUP||(LA271_0>=HANDLER && LA271_0<=HASH)||LA271_0==HELP||(LA271_0>=HOST && LA271_0<=HOUR)||(LA271_0>=ID && LA271_0<=IDENTIFIED)||LA271_0==IMPORT||LA271_0==INDEXES||LA271_0==INITIAL_SIZE||LA271_0==INNOBASE||(LA271_0>=INSERT_METHOD && LA271_0<=INSTALL)||(LA271_0>=INVOKER && LA271_0<=IPC)||(LA271_0>=ISOLATION && LA271_0<=ISSUER)||LA271_0==KEY_BLOCK_SIZE||(LA271_0>=LABEL && LA271_0<=LAST)||LA271_0==LEAVES||LA271_0==LESS||LA271_0==LEVEL||(LA271_0>=LINESTRING && LA271_0<=LIST)||LA271_0==LOCAL||(LA271_0>=LOCKS && LA271_0<=LOGFILE)||LA271_0==LOGS||(LA271_0>=MASTER && LA271_0<=MASTER_SSL_KEY)||LA271_0==MASTER_USER||(LA271_0>=MAX_CONNECTIONS_PER_HOUR && LA271_0<=MEDIUM)||(LA271_0>=MEMORY && LA271_0<=MICROSECOND)||LA271_0==MIGRATE||LA271_0==MINUTE||LA271_0==MIN_ROWS||LA271_0==MODE||LA271_0==MODIFY||LA271_0==MONTH||(LA271_0>=MULTILINESTRING && LA271_0<=MUTEX)||(LA271_0>=NAME && LA271_0<=NATIONAL)||(LA271_0>=NCHAR && LA271_0<=NONE)||LA271_0==NO_WAIT||(LA271_0>=NVARCHAR && LA271_0<=OLD_PASSWORD)||LA271_0==ONE||(LA271_0>=ONE_SHOT && LA271_0<=OPEN)||LA271_0==OPTIONS||(LA271_0>=OWNER && LA271_0<=PLUGINS)||(LA271_0>=POINT && LA271_0<=PORT)||(LA271_0>=PREPARE && LA271_0<=PREV)||LA271_0==PRIVILEGES||(LA271_0>=PROCESS && LA271_0<=PROFILES)||(LA271_0>=QUARTER && LA271_0<=QUICK)||(LA271_0>=REBUILD && LA271_0<=REDUNDANT)||(LA271_0>=RELAY_LOG_FILE && LA271_0<=RELAY_THREAD)||(LA271_0>=RELOAD && LA271_0<=REMOVE)||(LA271_0>=REORGANIZE && LA271_0<=REPAIR)||LA271_0==REPEATABLE||LA271_0==REPLICATION||(LA271_0>=RESET && LA271_0<=RESTORE)||LA271_0==RESUME||LA271_0==RETURNS||(LA271_0>=ROLLBACK && LA271_0<=ROW_FORMAT)||(LA271_0>=RTREE && LA271_0<=SCHEDULE)||LA271_0==SECOND||LA271_0==SECURITY||(LA271_0>=SERIAL && LA271_0<=SESSION)||LA271_0==SHARE||(LA271_0>=SHUTDOWN && LA271_0<=SLAVE)||(LA271_0>=SNAPSHOT && LA271_0<=SOCKET)||(LA271_0>=SONAME && LA271_0<=SOURCE)||(LA271_0>=SQL_BUFFER_RESULT && LA271_0<=SQL_CACHE)||LA271_0==SQL_NO_CACHE||LA271_0==SQL_THREAD||LA271_0==START||(LA271_0>=STARTS && LA271_0<=STATUS)||(LA271_0>=STOP && LA271_0<=STORAGE)||(LA271_0>=STRING_KEYWORD && LA271_0<=SUBPARTITIONS)||(LA271_0>=SUPER && LA271_0<=SWITCHES)||(LA271_0>=TABLES && LA271_0<=TEMPTABLE)||(LA271_0>=TEXT && LA271_0<=THAN)||(LA271_0>=TIME && LA271_0<=TIMESTAMP_DIFF)||(LA271_0>=TRANSACTION && LA271_0<=TRANSACTIONAL)||LA271_0==TRIGGERS||(LA271_0>=TRUNCATE && LA271_0<=UNDEFINED)||(LA271_0>=UNDOFILE && LA271_0<=UNINSTALL)||LA271_0==UNKNOWN||LA271_0==UNTIL||LA271_0==UPGRADE||LA271_0==USER||LA271_0==USE_FRM||LA271_0==VALUE||LA271_0==VARIABLES||(LA271_0>=VIEW && LA271_0<=WEEK)||(LA271_0>=WORK && LA271_0<=WRAPPER)||(LA271_0>=X509 && LA271_0<=XA)||LA271_0==YEAR))
				{
					alt271 = 1;
				}
				} finally { DebugExitDecision(271); }
				switch (alt271)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1256:17: ident
					{
					DebugLocation(1256, 17);
					PushFollow(Follow._ident_in_column_definition10651);
					ident657=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident657.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(271); }


				}

				DebugLocation(1257, 4);
				// MySQL51Parser.g3:1257:4: ( ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) | ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition ) | ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? ) )
				int alt281=3;
				try { DebugEnterSubRule(281);
				try { DebugEnterDecision(281, false);
				switch (input.LA(1))
				{
				case PRIMARY:
					{
					alt281 = 1;
					}
					break;
				case FOREIGN:
					{
					alt281 = 2;
					}
					break;
				case UNIQUE:
					{
					alt281 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 281, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(281); }
				switch (alt281)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1257:5: ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
					{
					DebugLocation(1257, 5);
					// MySQL51Parser.g3:1257:5: ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1257:7: PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
					{
					DebugLocation(1257, 7);
					PRIMARY658=(IToken)Match(input,PRIMARY,Follow._PRIMARY_in_column_definition10663); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PRIMARY658_tree = (object)adaptor.Create(PRIMARY658);
					adaptor.AddChild(root_0, PRIMARY658_tree);
					}
					DebugLocation(1257, 15);
					KEY659=(IToken)Match(input,KEY,Follow._KEY_in_column_definition10665); if (state.failed) return retval;
					if (state.backtracking == 0) {
					KEY659_tree = (object)adaptor.Create(KEY659);
					adaptor.AddChild(root_0, KEY659_tree);
					}
					DebugLocation(1257, 19);
					// MySQL51Parser.g3:1257:19: ( index_type )?
					int alt272=2;
					try { DebugEnterSubRule(272);
					try { DebugEnterDecision(272, false);
					int LA272_0 = input.LA(1);

					if ((LA272_0==USING))
					{
						alt272 = 1;
					}
					} finally { DebugExitDecision(272); }
					switch (alt272)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1257:19: index_type
						{
						DebugLocation(1257, 19);
						PushFollow(Follow._index_type_in_column_definition10667);
						index_type660=index_type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_type660.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(272); }

					DebugLocation(1257, 31);
					LPAREN661=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10670); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN661_tree = (object)adaptor.Create(LPAREN661);
					adaptor.AddChild(root_0, LPAREN661_tree);
					}
					DebugLocation(1257, 38);
					PushFollow(Follow._index_col_name_in_column_definition10672);
					index_col_name662=index_col_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name662.Tree);
					DebugLocation(1257, 53);
					// MySQL51Parser.g3:1257:53: ( COMMA index_col_name )*
					try { DebugEnterSubRule(273);
					while (true)
					{
						int alt273=2;
						try { DebugEnterDecision(273, false);
						int LA273_0 = input.LA(1);

						if ((LA273_0==COMMA))
						{
							alt273 = 1;
						}


						} finally { DebugExitDecision(273); }
						switch ( alt273 )
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:1257:55: COMMA index_col_name
							{
							DebugLocation(1257, 55);
							COMMA663=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10676); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA663_tree = (object)adaptor.Create(COMMA663);
							adaptor.AddChild(root_0, COMMA663_tree);
							}
							DebugLocation(1257, 61);
							PushFollow(Follow._index_col_name_in_column_definition10678);
							index_col_name664=index_col_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name664.Tree);

							}
							break;

						default:
							goto loop273;
						}
					}

					loop273:
						;

					} finally { DebugExitSubRule(273); }

					DebugLocation(1257, 79);
					RPAREN665=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10683); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN665_tree = (object)adaptor.Create(RPAREN665);
					adaptor.AddChild(root_0, RPAREN665_tree);
					}
					DebugLocation(1257, 86);
					// MySQL51Parser.g3:1257:86: ( index_type )?
					int alt274=2;
					try { DebugEnterSubRule(274);
					try { DebugEnterDecision(274, false);
					int LA274_0 = input.LA(1);

					if ((LA274_0==USING))
					{
						alt274 = 1;
					}
					} finally { DebugExitDecision(274); }
					switch (alt274)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1257:86: index_type
						{
						DebugLocation(1257, 86);
						PushFollow(Follow._index_type_in_column_definition10685);
						index_type666=index_type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_type666.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(274); }


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1258:6: ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition )
					{
					DebugLocation(1258, 6);
					// MySQL51Parser.g3:1258:6: ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition )
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1258:8: FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition
					{
					DebugLocation(1258, 8);
					FOREIGN667=(IToken)Match(input,FOREIGN,Follow._FOREIGN_in_column_definition10697); if (state.failed) return retval;
					if (state.backtracking == 0) {
					FOREIGN667_tree = (object)adaptor.Create(FOREIGN667);
					adaptor.AddChild(root_0, FOREIGN667_tree);
					}
					DebugLocation(1258, 16);
					KEY668=(IToken)Match(input,KEY,Follow._KEY_in_column_definition10699); if (state.failed) return retval;
					if (state.backtracking == 0) {
					KEY668_tree = (object)adaptor.Create(KEY668);
					adaptor.AddChild(root_0, KEY668_tree);
					}
					DebugLocation(1258, 20);
					// MySQL51Parser.g3:1258:20: ( (index_name= ident )? )
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1258:22: (index_name= ident )?
					{
					DebugLocation(1258, 32);
					// MySQL51Parser.g3:1258:32: (index_name= ident )?
					int alt275=2;
					try { DebugEnterSubRule(275);
					try { DebugEnterDecision(275, false);
					int LA275_0 = input.LA(1);

					if ((LA275_0==ACTION||(LA275_0>=ADDDATE && LA275_0<=ALGORITHM)||LA275_0==ANY||LA275_0==ASCII||(LA275_0>=AT && LA275_0<=BACKUP)||LA275_0==BEGIN||(LA275_0>=BINLOG && LA275_0<=BIT)||(LA275_0>=BLOCK && LA275_0<=BOOLEAN)||LA275_0==BTREE||(LA275_0>=BYTE && LA275_0<=CACHE)||LA275_0==CASCADED||LA275_0==CHAIN||LA275_0==CHANGED||LA275_0==CHARSET||(LA275_0>=CHECKSUM && LA275_0<=CODE)||LA275_0==COLLATION||LA275_0==COLUMNS||LA275_0==COMMENT||(LA275_0>=COMMIT && LA275_0<=CONCURRENT)||(LA275_0>=CONNECTION && LA275_0<=CONSISTENT)||(LA275_0>=CONTAINS && LA275_0<=CONTEXT)||LA275_0==CONTRIBUTORS||LA275_0==CPU||LA275_0==CUBE||LA275_0==DATA||(LA275_0>=DATAFILE && LA275_0<=DATETIME)||LA275_0==DAY||LA275_0==DEALLOCATE||LA275_0==DEFINER||LA275_0==DELAY_KEY_WRITE||LA275_0==DES_KEY_FILE||(LA275_0>=DIRECTORY && LA275_0<=DISK)||LA275_0==DO||(LA275_0>=DUMPFILE && LA275_0<=DYNAMIC)||LA275_0==ENABLE||(LA275_0>=END && LA275_0<=ENUM)||(LA275_0>=ERRORS && LA275_0<=ESCAPE)||(LA275_0>=EVENT && LA275_0<=EVERY)||LA275_0==EXECUTE||LA275_0==EXPANSION||(LA275_0>=EXTENDED && LA275_0<=EXTENT_SIZE)||(LA275_0>=FAST && LA275_0<=FAULTS)||(LA275_0>=FIELDS && LA275_0<=FIXED)||LA275_0==FLUSH||(LA275_0>=FOUND && LA275_0<=FRAC_SECOND)||LA275_0==FULL||(LA275_0>=FUNCTION && LA275_0<=GLOBAL)||LA275_0==GRANTS||LA275_0==GROUP||(LA275_0>=HANDLER && LA275_0<=HASH)||LA275_0==HELP||(LA275_0>=HOST && LA275_0<=HOUR)||(LA275_0>=ID && LA275_0<=IDENTIFIED)||LA275_0==IMPORT||LA275_0==INDEXES||LA275_0==INITIAL_SIZE||LA275_0==INNOBASE||(LA275_0>=INSERT_METHOD && LA275_0<=INSTALL)||(LA275_0>=INVOKER && LA275_0<=IPC)||(LA275_0>=ISOLATION && LA275_0<=ISSUER)||LA275_0==KEY_BLOCK_SIZE||(LA275_0>=LABEL && LA275_0<=LAST)||LA275_0==LEAVES||LA275_0==LESS||LA275_0==LEVEL||(LA275_0>=LINESTRING && LA275_0<=LIST)||LA275_0==LOCAL||(LA275_0>=LOCKS && LA275_0<=LOGFILE)||LA275_0==LOGS||(LA275_0>=MASTER && LA275_0<=MASTER_SSL_KEY)||LA275_0==MASTER_USER||(LA275_0>=MAX_CONNECTIONS_PER_HOUR && LA275_0<=MEDIUM)||(LA275_0>=MEMORY && LA275_0<=MICROSECOND)||LA275_0==MIGRATE||LA275_0==MINUTE||LA275_0==MIN_ROWS||LA275_0==MODE||LA275_0==MODIFY||LA275_0==MONTH||(LA275_0>=MULTILINESTRING && LA275_0<=MUTEX)||(LA275_0>=NAME && LA275_0<=NATIONAL)||(LA275_0>=NCHAR && LA275_0<=NONE)||LA275_0==NO_WAIT||(LA275_0>=NVARCHAR && LA275_0<=OLD_PASSWORD)||LA275_0==ONE||(LA275_0>=ONE_SHOT && LA275_0<=OPEN)||LA275_0==OPTIONS||(LA275_0>=OWNER && LA275_0<=PLUGINS)||(LA275_0>=POINT && LA275_0<=PORT)||(LA275_0>=PREPARE && LA275_0<=PREV)||LA275_0==PRIVILEGES||(LA275_0>=PROCESS && LA275_0<=PROFILES)||(LA275_0>=QUARTER && LA275_0<=QUICK)||(LA275_0>=REBUILD && LA275_0<=REDUNDANT)||(LA275_0>=RELAY_LOG_FILE && LA275_0<=RELAY_THREAD)||(LA275_0>=RELOAD && LA275_0<=REMOVE)||(LA275_0>=REORGANIZE && LA275_0<=REPAIR)||LA275_0==REPEATABLE||LA275_0==REPLICATION||(LA275_0>=RESET && LA275_0<=RESTORE)||LA275_0==RESUME||LA275_0==RETURNS||(LA275_0>=ROLLBACK && LA275_0<=ROW_FORMAT)||(LA275_0>=RTREE && LA275_0<=SCHEDULE)||LA275_0==SECOND||LA275_0==SECURITY||(LA275_0>=SERIAL && LA275_0<=SESSION)||LA275_0==SHARE||(LA275_0>=SHUTDOWN && LA275_0<=SLAVE)||(LA275_0>=SNAPSHOT && LA275_0<=SOCKET)||(LA275_0>=SONAME && LA275_0<=SOURCE)||(LA275_0>=SQL_BUFFER_RESULT && LA275_0<=SQL_CACHE)||LA275_0==SQL_NO_CACHE||LA275_0==SQL_THREAD||LA275_0==START||(LA275_0>=STARTS && LA275_0<=STATUS)||(LA275_0>=STOP && LA275_0<=STORAGE)||(LA275_0>=STRING_KEYWORD && LA275_0<=SUBPARTITIONS)||(LA275_0>=SUPER && LA275_0<=SWITCHES)||(LA275_0>=TABLES && LA275_0<=TEMPTABLE)||(LA275_0>=TEXT && LA275_0<=THAN)||(LA275_0>=TIME && LA275_0<=TIMESTAMP_DIFF)||(LA275_0>=TRANSACTION && LA275_0<=TRANSACTIONAL)||LA275_0==TRIGGERS||(LA275_0>=TRUNCATE && LA275_0<=UNDEFINED)||(LA275_0>=UNDOFILE && LA275_0<=UNINSTALL)||LA275_0==UNKNOWN||LA275_0==UNTIL||LA275_0==UPGRADE||LA275_0==USER||LA275_0==USE_FRM||LA275_0==VALUE||LA275_0==VARIABLES||(LA275_0>=VIEW && LA275_0<=WEEK)||(LA275_0>=WORK && LA275_0<=WRAPPER)||(LA275_0>=X509 && LA275_0<=XA)||LA275_0==YEAR))
					{
						alt275 = 1;
					}
					} finally { DebugExitDecision(275); }
					switch (alt275)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1258:32: index_name= ident
						{
						DebugLocation(1258, 32);
						PushFollow(Follow._ident_in_column_definition10705);
						index_name=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_name.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(275); }


					}

					DebugLocation(1258, 42);
					LPAREN669=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10710); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN669_tree = (object)adaptor.Create(LPAREN669);
					adaptor.AddChild(root_0, LPAREN669_tree);
					}
					DebugLocation(1258, 49);
					PushFollow(Follow._index_col_name_in_column_definition10712);
					index_col_name670=index_col_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name670.Tree);
					DebugLocation(1259, 5);
					// MySQL51Parser.g3:1259:5: ( COMMA index_col_name )*
					try { DebugEnterSubRule(276);
					while (true)
					{
						int alt276=2;
						try { DebugEnterDecision(276, false);
						int LA276_0 = input.LA(1);

						if ((LA276_0==COMMA))
						{
							alt276 = 1;
						}


						} finally { DebugExitDecision(276); }
						switch ( alt276 )
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:1259:7: COMMA index_col_name
							{
							DebugLocation(1259, 7);
							COMMA671=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10721); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA671_tree = (object)adaptor.Create(COMMA671);
							adaptor.AddChild(root_0, COMMA671_tree);
							}
							DebugLocation(1259, 13);
							PushFollow(Follow._index_col_name_in_column_definition10723);
							index_col_name672=index_col_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name672.Tree);

							}
							break;

						default:
							goto loop276;
						}
					}

					loop276:
						;

					} finally { DebugExitSubRule(276); }

					DebugLocation(1259, 31);
					RPAREN673=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10728); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN673_tree = (object)adaptor.Create(RPAREN673);
					adaptor.AddChild(root_0, RPAREN673_tree);
					}
					DebugLocation(1259, 38);
					PushFollow(Follow._reference_definition_in_column_definition10730);
					reference_definition674=reference_definition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, reference_definition674.Tree);

					}


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:1260:6: ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
					{
					DebugLocation(1260, 6);
					// MySQL51Parser.g3:1260:6: ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1260:8: UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
					{
					DebugLocation(1260, 8);
					UNIQUE675=(IToken)Match(input,UNIQUE,Follow._UNIQUE_in_column_definition10741); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UNIQUE675_tree = (object)adaptor.Create(UNIQUE675);
					adaptor.AddChild(root_0, UNIQUE675_tree);
					}
					DebugLocation(1260, 15);
					set676=(IToken)input.LT(1);
					if (input.LA(1)==INDEX||input.LA(1)==KEY)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set676));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1260, 41);
					// MySQL51Parser.g3:1260:41: (index_name= ident )?
					int alt277=2;
					try { DebugEnterSubRule(277);
					try { DebugEnterDecision(277, false);
					int LA277_0 = input.LA(1);

					if ((LA277_0==ACTION||(LA277_0>=ADDDATE && LA277_0<=ALGORITHM)||LA277_0==ANY||LA277_0==ASCII||(LA277_0>=AT && LA277_0<=BACKUP)||LA277_0==BEGIN||(LA277_0>=BINLOG && LA277_0<=BIT)||(LA277_0>=BLOCK && LA277_0<=BOOLEAN)||LA277_0==BTREE||(LA277_0>=BYTE && LA277_0<=CACHE)||LA277_0==CASCADED||LA277_0==CHAIN||LA277_0==CHANGED||LA277_0==CHARSET||(LA277_0>=CHECKSUM && LA277_0<=CODE)||LA277_0==COLLATION||LA277_0==COLUMNS||LA277_0==COMMENT||(LA277_0>=COMMIT && LA277_0<=CONCURRENT)||(LA277_0>=CONNECTION && LA277_0<=CONSISTENT)||(LA277_0>=CONTAINS && LA277_0<=CONTEXT)||LA277_0==CONTRIBUTORS||LA277_0==CPU||LA277_0==CUBE||LA277_0==DATA||(LA277_0>=DATAFILE && LA277_0<=DATETIME)||LA277_0==DAY||LA277_0==DEALLOCATE||LA277_0==DEFINER||LA277_0==DELAY_KEY_WRITE||LA277_0==DES_KEY_FILE||(LA277_0>=DIRECTORY && LA277_0<=DISK)||LA277_0==DO||(LA277_0>=DUMPFILE && LA277_0<=DYNAMIC)||LA277_0==ENABLE||(LA277_0>=END && LA277_0<=ENUM)||(LA277_0>=ERRORS && LA277_0<=ESCAPE)||(LA277_0>=EVENT && LA277_0<=EVERY)||LA277_0==EXECUTE||LA277_0==EXPANSION||(LA277_0>=EXTENDED && LA277_0<=EXTENT_SIZE)||(LA277_0>=FAST && LA277_0<=FAULTS)||(LA277_0>=FIELDS && LA277_0<=FIXED)||LA277_0==FLUSH||(LA277_0>=FOUND && LA277_0<=FRAC_SECOND)||LA277_0==FULL||(LA277_0>=FUNCTION && LA277_0<=GLOBAL)||LA277_0==GRANTS||LA277_0==GROUP||(LA277_0>=HANDLER && LA277_0<=HASH)||LA277_0==HELP||(LA277_0>=HOST && LA277_0<=HOUR)||(LA277_0>=ID && LA277_0<=IDENTIFIED)||LA277_0==IMPORT||LA277_0==INDEXES||LA277_0==INITIAL_SIZE||LA277_0==INNOBASE||(LA277_0>=INSERT_METHOD && LA277_0<=INSTALL)||(LA277_0>=INVOKER && LA277_0<=IPC)||(LA277_0>=ISOLATION && LA277_0<=ISSUER)||LA277_0==KEY_BLOCK_SIZE||(LA277_0>=LABEL && LA277_0<=LAST)||LA277_0==LEAVES||LA277_0==LESS||LA277_0==LEVEL||(LA277_0>=LINESTRING && LA277_0<=LIST)||LA277_0==LOCAL||(LA277_0>=LOCKS && LA277_0<=LOGFILE)||LA277_0==LOGS||(LA277_0>=MASTER && LA277_0<=MASTER_SSL_KEY)||LA277_0==MASTER_USER||(LA277_0>=MAX_CONNECTIONS_PER_HOUR && LA277_0<=MEDIUM)||(LA277_0>=MEMORY && LA277_0<=MICROSECOND)||LA277_0==MIGRATE||LA277_0==MINUTE||LA277_0==MIN_ROWS||LA277_0==MODE||LA277_0==MODIFY||LA277_0==MONTH||(LA277_0>=MULTILINESTRING && LA277_0<=MUTEX)||(LA277_0>=NAME && LA277_0<=NATIONAL)||(LA277_0>=NCHAR && LA277_0<=NONE)||LA277_0==NO_WAIT||(LA277_0>=NVARCHAR && LA277_0<=OLD_PASSWORD)||LA277_0==ONE||(LA277_0>=ONE_SHOT && LA277_0<=OPEN)||LA277_0==OPTIONS||(LA277_0>=OWNER && LA277_0<=PLUGINS)||(LA277_0>=POINT && LA277_0<=PORT)||(LA277_0>=PREPARE && LA277_0<=PREV)||LA277_0==PRIVILEGES||(LA277_0>=PROCESS && LA277_0<=PROFILES)||(LA277_0>=QUARTER && LA277_0<=QUICK)||(LA277_0>=REBUILD && LA277_0<=REDUNDANT)||(LA277_0>=RELAY_LOG_FILE && LA277_0<=RELAY_THREAD)||(LA277_0>=RELOAD && LA277_0<=REMOVE)||(LA277_0>=REORGANIZE && LA277_0<=REPAIR)||LA277_0==REPEATABLE||LA277_0==REPLICATION||(LA277_0>=RESET && LA277_0<=RESTORE)||LA277_0==RESUME||LA277_0==RETURNS||(LA277_0>=ROLLBACK && LA277_0<=ROW_FORMAT)||(LA277_0>=RTREE && LA277_0<=SCHEDULE)||LA277_0==SECOND||LA277_0==SECURITY||(LA277_0>=SERIAL && LA277_0<=SESSION)||LA277_0==SHARE||(LA277_0>=SHUTDOWN && LA277_0<=SLAVE)||(LA277_0>=SNAPSHOT && LA277_0<=SOCKET)||(LA277_0>=SONAME && LA277_0<=SOURCE)||(LA277_0>=SQL_BUFFER_RESULT && LA277_0<=SQL_CACHE)||LA277_0==SQL_NO_CACHE||LA277_0==SQL_THREAD||LA277_0==START||(LA277_0>=STARTS && LA277_0<=STATUS)||(LA277_0>=STOP && LA277_0<=STORAGE)||(LA277_0>=STRING_KEYWORD && LA277_0<=SUBPARTITIONS)||(LA277_0>=SUPER && LA277_0<=SWITCHES)||(LA277_0>=TABLES && LA277_0<=TEMPTABLE)||(LA277_0>=TEXT && LA277_0<=THAN)||(LA277_0>=TIME && LA277_0<=TIMESTAMP_DIFF)||(LA277_0>=TRANSACTION && LA277_0<=TRANSACTIONAL)||LA277_0==TRIGGERS||(LA277_0>=TRUNCATE && LA277_0<=UNDEFINED)||(LA277_0>=UNDOFILE && LA277_0<=UNINSTALL)||LA277_0==UNKNOWN||LA277_0==UNTIL||LA277_0==UPGRADE||LA277_0==USER||LA277_0==USE_FRM||LA277_0==VALUE||LA277_0==VARIABLES||(LA277_0>=VIEW && LA277_0<=WEEK)||(LA277_0>=WORK && LA277_0<=WRAPPER)||(LA277_0>=X509 && LA277_0<=XA)||LA277_0==YEAR))
					{
						alt277 = 1;
					}
					} finally { DebugExitDecision(277); }
					switch (alt277)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1260:41: index_name= ident
						{
						DebugLocation(1260, 41);
						PushFollow(Follow._ident_in_column_definition10755);
						index_name=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_name.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(277); }

					DebugLocation(1260, 49);
					// MySQL51Parser.g3:1260:49: ( index_type )?
					int alt278=2;
					try { DebugEnterSubRule(278);
					try { DebugEnterDecision(278, false);
					int LA278_0 = input.LA(1);

					if ((LA278_0==USING))
					{
						alt278 = 1;
					}
					} finally { DebugExitDecision(278); }
					switch (alt278)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1260:49: index_type
						{
						DebugLocation(1260, 49);
						PushFollow(Follow._index_type_in_column_definition10758);
						index_type677=index_type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_type677.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(278); }

					DebugLocation(1261, 9);
					LPAREN678=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10770); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN678_tree = (object)adaptor.Create(LPAREN678);
					adaptor.AddChild(root_0, LPAREN678_tree);
					}
					DebugLocation(1261, 16);
					PushFollow(Follow._index_col_name_in_column_definition10772);
					index_col_name679=index_col_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name679.Tree);
					DebugLocation(1261, 31);
					// MySQL51Parser.g3:1261:31: ( COMMA index_col_name )*
					try { DebugEnterSubRule(279);
					while (true)
					{
						int alt279=2;
						try { DebugEnterDecision(279, false);
						int LA279_0 = input.LA(1);

						if ((LA279_0==COMMA))
						{
							alt279 = 1;
						}


						} finally { DebugExitDecision(279); }
						switch ( alt279 )
						{
						case 1:
							DebugEnterAlt(1);
							// MySQL51Parser.g3:1261:33: COMMA index_col_name
							{
							DebugLocation(1261, 33);
							COMMA680=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10776); if (state.failed) return retval;
							if (state.backtracking == 0) {
							COMMA680_tree = (object)adaptor.Create(COMMA680);
							adaptor.AddChild(root_0, COMMA680_tree);
							}
							DebugLocation(1261, 39);
							PushFollow(Follow._index_col_name_in_column_definition10778);
							index_col_name681=index_col_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name681.Tree);

							}
							break;

						default:
							goto loop279;
						}
					}

					loop279:
						;

					} finally { DebugExitSubRule(279); }

					DebugLocation(1261, 57);
					RPAREN682=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10783); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN682_tree = (object)adaptor.Create(RPAREN682);
					adaptor.AddChild(root_0, RPAREN682_tree);
					}
					DebugLocation(1261, 64);
					// MySQL51Parser.g3:1261:64: ( index_type )?
					int alt280=2;
					try { DebugEnterSubRule(280);
					try { DebugEnterDecision(280, false);
					int LA280_0 = input.LA(1);

					if ((LA280_0==USING))
					{
						alt280 = 1;
					}
					} finally { DebugExitDecision(280); }
					switch (alt280)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1261:64: index_type
						{
						DebugLocation(1261, 64);
						PushFollow(Follow._index_type_in_column_definition10785);
						index_type683=index_type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_type683.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(280); }


					}


					}
					break;

				}
				} finally { DebugExitSubRule(281); }


				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1262:4: ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1262, 4);
				// MySQL51Parser.g3:1262:4: ( PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1262:6: PRIMARY KEY ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
				{
				DebugLocation(1262, 6);
				PRIMARY684=(IToken)Match(input,PRIMARY,Follow._PRIMARY_in_column_definition10797); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIMARY684_tree = (object)adaptor.Create(PRIMARY684);
				adaptor.AddChild(root_0, PRIMARY684_tree);
				}
				DebugLocation(1262, 14);
				KEY685=(IToken)Match(input,KEY,Follow._KEY_in_column_definition10799); if (state.failed) return retval;
				if (state.backtracking == 0) {
				KEY685_tree = (object)adaptor.Create(KEY685);
				adaptor.AddChild(root_0, KEY685_tree);
				}
				DebugLocation(1262, 18);
				// MySQL51Parser.g3:1262:18: ( index_type )?
				int alt282=2;
				try { DebugEnterSubRule(282);
				try { DebugEnterDecision(282, false);
				int LA282_0 = input.LA(1);

				if ((LA282_0==USING))
				{
					alt282 = 1;
				}
				} finally { DebugExitDecision(282); }
				switch (alt282)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1262:18: index_type
					{
					DebugLocation(1262, 18);
					PushFollow(Follow._index_type_in_column_definition10801);
					index_type686=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type686.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(282); }

				DebugLocation(1262, 30);
				LPAREN687=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10804); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN687_tree = (object)adaptor.Create(LPAREN687);
				adaptor.AddChild(root_0, LPAREN687_tree);
				}
				DebugLocation(1262, 37);
				PushFollow(Follow._index_col_name_in_column_definition10806);
				index_col_name688=index_col_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name688.Tree);
				DebugLocation(1262, 52);
				// MySQL51Parser.g3:1262:52: ( COMMA index_col_name )*
				try { DebugEnterSubRule(283);
				while (true)
				{
					int alt283=2;
					try { DebugEnterDecision(283, false);
					int LA283_0 = input.LA(1);

					if ((LA283_0==COMMA))
					{
						alt283 = 1;
					}


					} finally { DebugExitDecision(283); }
					switch ( alt283 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1262:54: COMMA index_col_name
						{
						DebugLocation(1262, 54);
						COMMA689=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10810); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA689_tree = (object)adaptor.Create(COMMA689);
						adaptor.AddChild(root_0, COMMA689_tree);
						}
						DebugLocation(1262, 60);
						PushFollow(Follow._index_col_name_in_column_definition10812);
						index_col_name690=index_col_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name690.Tree);

						}
						break;

					default:
						goto loop283;
					}
				}

				loop283:
					;

				} finally { DebugExitSubRule(283); }

				DebugLocation(1262, 78);
				RPAREN691=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN691_tree = (object)adaptor.Create(RPAREN691);
				adaptor.AddChild(root_0, RPAREN691_tree);
				}
				DebugLocation(1262, 85);
				// MySQL51Parser.g3:1262:85: ( index_type )?
				int alt284=2;
				try { DebugEnterSubRule(284);
				try { DebugEnterDecision(284, false);
				int LA284_0 = input.LA(1);

				if ((LA284_0==USING))
				{
					alt284 = 1;
				}
				} finally { DebugExitDecision(284); }
				switch (alt284)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1262:85: index_type
					{
					DebugLocation(1262, 85);
					PushFollow(Follow._index_type_in_column_definition10819);
					index_type692=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type692.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(284); }


				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1263:4: ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1263, 4);
				// MySQL51Parser.g3:1263:4: ( FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1263:6: FOREIGN KEY ( (index_name= ident )? ) LPAREN index_col_name ( COMMA index_col_name )* RPAREN reference_definition
				{
				DebugLocation(1263, 6);
				FOREIGN693=(IToken)Match(input,FOREIGN,Follow._FOREIGN_in_column_definition10829); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FOREIGN693_tree = (object)adaptor.Create(FOREIGN693);
				adaptor.AddChild(root_0, FOREIGN693_tree);
				}
				DebugLocation(1263, 14);
				KEY694=(IToken)Match(input,KEY,Follow._KEY_in_column_definition10831); if (state.failed) return retval;
				if (state.backtracking == 0) {
				KEY694_tree = (object)adaptor.Create(KEY694);
				adaptor.AddChild(root_0, KEY694_tree);
				}
				DebugLocation(1263, 18);
				// MySQL51Parser.g3:1263:18: ( (index_name= ident )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1263:20: (index_name= ident )?
				{
				DebugLocation(1263, 30);
				// MySQL51Parser.g3:1263:30: (index_name= ident )?
				int alt285=2;
				try { DebugEnterSubRule(285);
				try { DebugEnterDecision(285, false);
				int LA285_0 = input.LA(1);

				if ((LA285_0==ACTION||(LA285_0>=ADDDATE && LA285_0<=ALGORITHM)||LA285_0==ANY||LA285_0==ASCII||(LA285_0>=AT && LA285_0<=BACKUP)||LA285_0==BEGIN||(LA285_0>=BINLOG && LA285_0<=BIT)||(LA285_0>=BLOCK && LA285_0<=BOOLEAN)||LA285_0==BTREE||(LA285_0>=BYTE && LA285_0<=CACHE)||LA285_0==CASCADED||LA285_0==CHAIN||LA285_0==CHANGED||LA285_0==CHARSET||(LA285_0>=CHECKSUM && LA285_0<=CODE)||LA285_0==COLLATION||LA285_0==COLUMNS||LA285_0==COMMENT||(LA285_0>=COMMIT && LA285_0<=CONCURRENT)||(LA285_0>=CONNECTION && LA285_0<=CONSISTENT)||(LA285_0>=CONTAINS && LA285_0<=CONTEXT)||LA285_0==CONTRIBUTORS||LA285_0==CPU||LA285_0==CUBE||LA285_0==DATA||(LA285_0>=DATAFILE && LA285_0<=DATETIME)||LA285_0==DAY||LA285_0==DEALLOCATE||LA285_0==DEFINER||LA285_0==DELAY_KEY_WRITE||LA285_0==DES_KEY_FILE||(LA285_0>=DIRECTORY && LA285_0<=DISK)||LA285_0==DO||(LA285_0>=DUMPFILE && LA285_0<=DYNAMIC)||LA285_0==ENABLE||(LA285_0>=END && LA285_0<=ENUM)||(LA285_0>=ERRORS && LA285_0<=ESCAPE)||(LA285_0>=EVENT && LA285_0<=EVERY)||LA285_0==EXECUTE||LA285_0==EXPANSION||(LA285_0>=EXTENDED && LA285_0<=EXTENT_SIZE)||(LA285_0>=FAST && LA285_0<=FAULTS)||(LA285_0>=FIELDS && LA285_0<=FIXED)||LA285_0==FLUSH||(LA285_0>=FOUND && LA285_0<=FRAC_SECOND)||LA285_0==FULL||(LA285_0>=FUNCTION && LA285_0<=GLOBAL)||LA285_0==GRANTS||LA285_0==GROUP||(LA285_0>=HANDLER && LA285_0<=HASH)||LA285_0==HELP||(LA285_0>=HOST && LA285_0<=HOUR)||(LA285_0>=ID && LA285_0<=IDENTIFIED)||LA285_0==IMPORT||LA285_0==INDEXES||LA285_0==INITIAL_SIZE||LA285_0==INNOBASE||(LA285_0>=INSERT_METHOD && LA285_0<=INSTALL)||(LA285_0>=INVOKER && LA285_0<=IPC)||(LA285_0>=ISOLATION && LA285_0<=ISSUER)||LA285_0==KEY_BLOCK_SIZE||(LA285_0>=LABEL && LA285_0<=LAST)||LA285_0==LEAVES||LA285_0==LESS||LA285_0==LEVEL||(LA285_0>=LINESTRING && LA285_0<=LIST)||LA285_0==LOCAL||(LA285_0>=LOCKS && LA285_0<=LOGFILE)||LA285_0==LOGS||(LA285_0>=MASTER && LA285_0<=MASTER_SSL_KEY)||LA285_0==MASTER_USER||(LA285_0>=MAX_CONNECTIONS_PER_HOUR && LA285_0<=MEDIUM)||(LA285_0>=MEMORY && LA285_0<=MICROSECOND)||LA285_0==MIGRATE||LA285_0==MINUTE||LA285_0==MIN_ROWS||LA285_0==MODE||LA285_0==MODIFY||LA285_0==MONTH||(LA285_0>=MULTILINESTRING && LA285_0<=MUTEX)||(LA285_0>=NAME && LA285_0<=NATIONAL)||(LA285_0>=NCHAR && LA285_0<=NONE)||LA285_0==NO_WAIT||(LA285_0>=NVARCHAR && LA285_0<=OLD_PASSWORD)||LA285_0==ONE||(LA285_0>=ONE_SHOT && LA285_0<=OPEN)||LA285_0==OPTIONS||(LA285_0>=OWNER && LA285_0<=PLUGINS)||(LA285_0>=POINT && LA285_0<=PORT)||(LA285_0>=PREPARE && LA285_0<=PREV)||LA285_0==PRIVILEGES||(LA285_0>=PROCESS && LA285_0<=PROFILES)||(LA285_0>=QUARTER && LA285_0<=QUICK)||(LA285_0>=REBUILD && LA285_0<=REDUNDANT)||(LA285_0>=RELAY_LOG_FILE && LA285_0<=RELAY_THREAD)||(LA285_0>=RELOAD && LA285_0<=REMOVE)||(LA285_0>=REORGANIZE && LA285_0<=REPAIR)||LA285_0==REPEATABLE||LA285_0==REPLICATION||(LA285_0>=RESET && LA285_0<=RESTORE)||LA285_0==RESUME||LA285_0==RETURNS||(LA285_0>=ROLLBACK && LA285_0<=ROW_FORMAT)||(LA285_0>=RTREE && LA285_0<=SCHEDULE)||LA285_0==SECOND||LA285_0==SECURITY||(LA285_0>=SERIAL && LA285_0<=SESSION)||LA285_0==SHARE||(LA285_0>=SHUTDOWN && LA285_0<=SLAVE)||(LA285_0>=SNAPSHOT && LA285_0<=SOCKET)||(LA285_0>=SONAME && LA285_0<=SOURCE)||(LA285_0>=SQL_BUFFER_RESULT && LA285_0<=SQL_CACHE)||LA285_0==SQL_NO_CACHE||LA285_0==SQL_THREAD||LA285_0==START||(LA285_0>=STARTS && LA285_0<=STATUS)||(LA285_0>=STOP && LA285_0<=STORAGE)||(LA285_0>=STRING_KEYWORD && LA285_0<=SUBPARTITIONS)||(LA285_0>=SUPER && LA285_0<=SWITCHES)||(LA285_0>=TABLES && LA285_0<=TEMPTABLE)||(LA285_0>=TEXT && LA285_0<=THAN)||(LA285_0>=TIME && LA285_0<=TIMESTAMP_DIFF)||(LA285_0>=TRANSACTION && LA285_0<=TRANSACTIONAL)||LA285_0==TRIGGERS||(LA285_0>=TRUNCATE && LA285_0<=UNDEFINED)||(LA285_0>=UNDOFILE && LA285_0<=UNINSTALL)||LA285_0==UNKNOWN||LA285_0==UNTIL||LA285_0==UPGRADE||LA285_0==USER||LA285_0==USE_FRM||LA285_0==VALUE||LA285_0==VARIABLES||(LA285_0>=VIEW && LA285_0<=WEEK)||(LA285_0>=WORK && LA285_0<=WRAPPER)||(LA285_0>=X509 && LA285_0<=XA)||LA285_0==YEAR))
				{
					alt285 = 1;
				}
				} finally { DebugExitDecision(285); }
				switch (alt285)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1263:30: index_name= ident
					{
					DebugLocation(1263, 30);
					PushFollow(Follow._ident_in_column_definition10837);
					index_name=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_name.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(285); }


				}

				DebugLocation(1263, 40);
				LPAREN695=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10842); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN695_tree = (object)adaptor.Create(LPAREN695);
				adaptor.AddChild(root_0, LPAREN695_tree);
				}
				DebugLocation(1263, 47);
				PushFollow(Follow._index_col_name_in_column_definition10844);
				index_col_name696=index_col_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name696.Tree);
				DebugLocation(1264, 5);
				// MySQL51Parser.g3:1264:5: ( COMMA index_col_name )*
				try { DebugEnterSubRule(286);
				while (true)
				{
					int alt286=2;
					try { DebugEnterDecision(286, false);
					int LA286_0 = input.LA(1);

					if ((LA286_0==COMMA))
					{
						alt286 = 1;
					}


					} finally { DebugExitDecision(286); }
					switch ( alt286 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1264:7: COMMA index_col_name
						{
						DebugLocation(1264, 7);
						COMMA697=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10853); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA697_tree = (object)adaptor.Create(COMMA697);
						adaptor.AddChild(root_0, COMMA697_tree);
						}
						DebugLocation(1264, 13);
						PushFollow(Follow._index_col_name_in_column_definition10855);
						index_col_name698=index_col_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name698.Tree);

						}
						break;

					default:
						goto loop286;
					}
				}

				loop286:
					;

				} finally { DebugExitSubRule(286); }

				DebugLocation(1264, 31);
				RPAREN699=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10860); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN699_tree = (object)adaptor.Create(RPAREN699);
				adaptor.AddChild(root_0, RPAREN699_tree);
				}
				DebugLocation(1264, 38);
				PushFollow(Follow._reference_definition_in_column_definition10862);
				reference_definition700=reference_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference_definition700.Tree);

				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1265:4: ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1265, 4);
				// MySQL51Parser.g3:1265:4: ( UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1265:6: UNIQUE ( INDEX | KEY ) (index_name= ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
				{
				DebugLocation(1265, 6);
				UNIQUE701=(IToken)Match(input,UNIQUE,Follow._UNIQUE_in_column_definition10871); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UNIQUE701_tree = (object)adaptor.Create(UNIQUE701);
				adaptor.AddChild(root_0, UNIQUE701_tree);
				}
				DebugLocation(1265, 13);
				set702=(IToken)input.LT(1);
				if (input.LA(1)==INDEX||input.LA(1)==KEY)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set702));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1265, 39);
				// MySQL51Parser.g3:1265:39: (index_name= ident )?
				int alt287=2;
				try { DebugEnterSubRule(287);
				try { DebugEnterDecision(287, false);
				int LA287_0 = input.LA(1);

				if ((LA287_0==ACTION||(LA287_0>=ADDDATE && LA287_0<=ALGORITHM)||LA287_0==ANY||LA287_0==ASCII||(LA287_0>=AT && LA287_0<=BACKUP)||LA287_0==BEGIN||(LA287_0>=BINLOG && LA287_0<=BIT)||(LA287_0>=BLOCK && LA287_0<=BOOLEAN)||LA287_0==BTREE||(LA287_0>=BYTE && LA287_0<=CACHE)||LA287_0==CASCADED||LA287_0==CHAIN||LA287_0==CHANGED||LA287_0==CHARSET||(LA287_0>=CHECKSUM && LA287_0<=CODE)||LA287_0==COLLATION||LA287_0==COLUMNS||LA287_0==COMMENT||(LA287_0>=COMMIT && LA287_0<=CONCURRENT)||(LA287_0>=CONNECTION && LA287_0<=CONSISTENT)||(LA287_0>=CONTAINS && LA287_0<=CONTEXT)||LA287_0==CONTRIBUTORS||LA287_0==CPU||LA287_0==CUBE||LA287_0==DATA||(LA287_0>=DATAFILE && LA287_0<=DATETIME)||LA287_0==DAY||LA287_0==DEALLOCATE||LA287_0==DEFINER||LA287_0==DELAY_KEY_WRITE||LA287_0==DES_KEY_FILE||(LA287_0>=DIRECTORY && LA287_0<=DISK)||LA287_0==DO||(LA287_0>=DUMPFILE && LA287_0<=DYNAMIC)||LA287_0==ENABLE||(LA287_0>=END && LA287_0<=ENUM)||(LA287_0>=ERRORS && LA287_0<=ESCAPE)||(LA287_0>=EVENT && LA287_0<=EVERY)||LA287_0==EXECUTE||LA287_0==EXPANSION||(LA287_0>=EXTENDED && LA287_0<=EXTENT_SIZE)||(LA287_0>=FAST && LA287_0<=FAULTS)||(LA287_0>=FIELDS && LA287_0<=FIXED)||LA287_0==FLUSH||(LA287_0>=FOUND && LA287_0<=FRAC_SECOND)||LA287_0==FULL||(LA287_0>=FUNCTION && LA287_0<=GLOBAL)||LA287_0==GRANTS||LA287_0==GROUP||(LA287_0>=HANDLER && LA287_0<=HASH)||LA287_0==HELP||(LA287_0>=HOST && LA287_0<=HOUR)||(LA287_0>=ID && LA287_0<=IDENTIFIED)||LA287_0==IMPORT||LA287_0==INDEXES||LA287_0==INITIAL_SIZE||LA287_0==INNOBASE||(LA287_0>=INSERT_METHOD && LA287_0<=INSTALL)||(LA287_0>=INVOKER && LA287_0<=IPC)||(LA287_0>=ISOLATION && LA287_0<=ISSUER)||LA287_0==KEY_BLOCK_SIZE||(LA287_0>=LABEL && LA287_0<=LAST)||LA287_0==LEAVES||LA287_0==LESS||LA287_0==LEVEL||(LA287_0>=LINESTRING && LA287_0<=LIST)||LA287_0==LOCAL||(LA287_0>=LOCKS && LA287_0<=LOGFILE)||LA287_0==LOGS||(LA287_0>=MASTER && LA287_0<=MASTER_SSL_KEY)||LA287_0==MASTER_USER||(LA287_0>=MAX_CONNECTIONS_PER_HOUR && LA287_0<=MEDIUM)||(LA287_0>=MEMORY && LA287_0<=MICROSECOND)||LA287_0==MIGRATE||LA287_0==MINUTE||LA287_0==MIN_ROWS||LA287_0==MODE||LA287_0==MODIFY||LA287_0==MONTH||(LA287_0>=MULTILINESTRING && LA287_0<=MUTEX)||(LA287_0>=NAME && LA287_0<=NATIONAL)||(LA287_0>=NCHAR && LA287_0<=NONE)||LA287_0==NO_WAIT||(LA287_0>=NVARCHAR && LA287_0<=OLD_PASSWORD)||LA287_0==ONE||(LA287_0>=ONE_SHOT && LA287_0<=OPEN)||LA287_0==OPTIONS||(LA287_0>=OWNER && LA287_0<=PLUGINS)||(LA287_0>=POINT && LA287_0<=PORT)||(LA287_0>=PREPARE && LA287_0<=PREV)||LA287_0==PRIVILEGES||(LA287_0>=PROCESS && LA287_0<=PROFILES)||(LA287_0>=QUARTER && LA287_0<=QUICK)||(LA287_0>=REBUILD && LA287_0<=REDUNDANT)||(LA287_0>=RELAY_LOG_FILE && LA287_0<=RELAY_THREAD)||(LA287_0>=RELOAD && LA287_0<=REMOVE)||(LA287_0>=REORGANIZE && LA287_0<=REPAIR)||LA287_0==REPEATABLE||LA287_0==REPLICATION||(LA287_0>=RESET && LA287_0<=RESTORE)||LA287_0==RESUME||LA287_0==RETURNS||(LA287_0>=ROLLBACK && LA287_0<=ROW_FORMAT)||(LA287_0>=RTREE && LA287_0<=SCHEDULE)||LA287_0==SECOND||LA287_0==SECURITY||(LA287_0>=SERIAL && LA287_0<=SESSION)||LA287_0==SHARE||(LA287_0>=SHUTDOWN && LA287_0<=SLAVE)||(LA287_0>=SNAPSHOT && LA287_0<=SOCKET)||(LA287_0>=SONAME && LA287_0<=SOURCE)||(LA287_0>=SQL_BUFFER_RESULT && LA287_0<=SQL_CACHE)||LA287_0==SQL_NO_CACHE||LA287_0==SQL_THREAD||LA287_0==START||(LA287_0>=STARTS && LA287_0<=STATUS)||(LA287_0>=STOP && LA287_0<=STORAGE)||(LA287_0>=STRING_KEYWORD && LA287_0<=SUBPARTITIONS)||(LA287_0>=SUPER && LA287_0<=SWITCHES)||(LA287_0>=TABLES && LA287_0<=TEMPTABLE)||(LA287_0>=TEXT && LA287_0<=THAN)||(LA287_0>=TIME && LA287_0<=TIMESTAMP_DIFF)||(LA287_0>=TRANSACTION && LA287_0<=TRANSACTIONAL)||LA287_0==TRIGGERS||(LA287_0>=TRUNCATE && LA287_0<=UNDEFINED)||(LA287_0>=UNDOFILE && LA287_0<=UNINSTALL)||LA287_0==UNKNOWN||LA287_0==UNTIL||LA287_0==UPGRADE||LA287_0==USER||LA287_0==USE_FRM||LA287_0==VALUE||LA287_0==VARIABLES||(LA287_0>=VIEW && LA287_0<=WEEK)||(LA287_0>=WORK && LA287_0<=WRAPPER)||(LA287_0>=X509 && LA287_0<=XA)||LA287_0==YEAR))
				{
					alt287 = 1;
				}
				} finally { DebugExitDecision(287); }
				switch (alt287)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1265:39: index_name= ident
					{
					DebugLocation(1265, 39);
					PushFollow(Follow._ident_in_column_definition10885);
					index_name=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_name.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(287); }

				DebugLocation(1265, 47);
				// MySQL51Parser.g3:1265:47: ( index_type )?
				int alt288=2;
				try { DebugEnterSubRule(288);
				try { DebugEnterDecision(288, false);
				int LA288_0 = input.LA(1);

				if ((LA288_0==USING))
				{
					alt288 = 1;
				}
				} finally { DebugExitDecision(288); }
				switch (alt288)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1265:47: index_type
					{
					DebugLocation(1265, 47);
					PushFollow(Follow._index_type_in_column_definition10888);
					index_type703=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type703.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(288); }

				DebugLocation(1266, 9);
				LPAREN704=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN704_tree = (object)adaptor.Create(LPAREN704);
				adaptor.AddChild(root_0, LPAREN704_tree);
				}
				DebugLocation(1266, 16);
				PushFollow(Follow._index_col_name_in_column_definition10902);
				index_col_name705=index_col_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name705.Tree);
				DebugLocation(1266, 31);
				// MySQL51Parser.g3:1266:31: ( COMMA index_col_name )*
				try { DebugEnterSubRule(289);
				while (true)
				{
					int alt289=2;
					try { DebugEnterDecision(289, false);
					int LA289_0 = input.LA(1);

					if ((LA289_0==COMMA))
					{
						alt289 = 1;
					}


					} finally { DebugExitDecision(289); }
					switch ( alt289 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1266:33: COMMA index_col_name
						{
						DebugLocation(1266, 33);
						COMMA706=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10906); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA706_tree = (object)adaptor.Create(COMMA706);
						adaptor.AddChild(root_0, COMMA706_tree);
						}
						DebugLocation(1266, 39);
						PushFollow(Follow._index_col_name_in_column_definition10908);
						index_col_name707=index_col_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name707.Tree);

						}
						break;

					default:
						goto loop289;
					}
				}

				loop289:
					;

				} finally { DebugExitSubRule(289); }

				DebugLocation(1266, 57);
				RPAREN708=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10913); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN708_tree = (object)adaptor.Create(RPAREN708);
				adaptor.AddChild(root_0, RPAREN708_tree);
				}
				DebugLocation(1266, 64);
				// MySQL51Parser.g3:1266:64: ( index_type )?
				int alt290=2;
				try { DebugEnterSubRule(290);
				try { DebugEnterDecision(290, false);
				int LA290_0 = input.LA(1);

				if ((LA290_0==USING))
				{
					alt290 = 1;
				}
				} finally { DebugExitDecision(290); }
				switch (alt290)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1266:64: index_type
					{
					DebugLocation(1266, 64);
					PushFollow(Follow._index_type_in_column_definition10915);
					index_type709=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type709.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(290); }


				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1267:4: ( ( INDEX | KEY ) ( ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1267, 4);
				// MySQL51Parser.g3:1267:4: ( ( INDEX | KEY ) ( ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1267:6: ( INDEX | KEY ) ( ident )? ( index_type )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
				{
				DebugLocation(1267, 6);
				set710=(IToken)input.LT(1);
				if (input.LA(1)==INDEX||input.LA(1)==KEY)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set710));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1267, 22);
				// MySQL51Parser.g3:1267:22: ( ident )?
				int alt291=2;
				try { DebugEnterSubRule(291);
				try { DebugEnterDecision(291, false);
				int LA291_0 = input.LA(1);

				if ((LA291_0==ACTION||(LA291_0>=ADDDATE && LA291_0<=ALGORITHM)||LA291_0==ANY||LA291_0==ASCII||(LA291_0>=AT && LA291_0<=BACKUP)||LA291_0==BEGIN||(LA291_0>=BINLOG && LA291_0<=BIT)||(LA291_0>=BLOCK && LA291_0<=BOOLEAN)||LA291_0==BTREE||(LA291_0>=BYTE && LA291_0<=CACHE)||LA291_0==CASCADED||LA291_0==CHAIN||LA291_0==CHANGED||LA291_0==CHARSET||(LA291_0>=CHECKSUM && LA291_0<=CODE)||LA291_0==COLLATION||LA291_0==COLUMNS||LA291_0==COMMENT||(LA291_0>=COMMIT && LA291_0<=CONCURRENT)||(LA291_0>=CONNECTION && LA291_0<=CONSISTENT)||(LA291_0>=CONTAINS && LA291_0<=CONTEXT)||LA291_0==CONTRIBUTORS||LA291_0==CPU||LA291_0==CUBE||LA291_0==DATA||(LA291_0>=DATAFILE && LA291_0<=DATETIME)||LA291_0==DAY||LA291_0==DEALLOCATE||LA291_0==DEFINER||LA291_0==DELAY_KEY_WRITE||LA291_0==DES_KEY_FILE||(LA291_0>=DIRECTORY && LA291_0<=DISK)||LA291_0==DO||(LA291_0>=DUMPFILE && LA291_0<=DYNAMIC)||LA291_0==ENABLE||(LA291_0>=END && LA291_0<=ENUM)||(LA291_0>=ERRORS && LA291_0<=ESCAPE)||(LA291_0>=EVENT && LA291_0<=EVERY)||LA291_0==EXECUTE||LA291_0==EXPANSION||(LA291_0>=EXTENDED && LA291_0<=EXTENT_SIZE)||(LA291_0>=FAST && LA291_0<=FAULTS)||(LA291_0>=FIELDS && LA291_0<=FIXED)||LA291_0==FLUSH||(LA291_0>=FOUND && LA291_0<=FRAC_SECOND)||LA291_0==FULL||(LA291_0>=FUNCTION && LA291_0<=GLOBAL)||LA291_0==GRANTS||LA291_0==GROUP||(LA291_0>=HANDLER && LA291_0<=HASH)||LA291_0==HELP||(LA291_0>=HOST && LA291_0<=HOUR)||(LA291_0>=ID && LA291_0<=IDENTIFIED)||LA291_0==IMPORT||LA291_0==INDEXES||LA291_0==INITIAL_SIZE||LA291_0==INNOBASE||(LA291_0>=INSERT_METHOD && LA291_0<=INSTALL)||(LA291_0>=INVOKER && LA291_0<=IPC)||(LA291_0>=ISOLATION && LA291_0<=ISSUER)||LA291_0==KEY_BLOCK_SIZE||(LA291_0>=LABEL && LA291_0<=LAST)||LA291_0==LEAVES||LA291_0==LESS||LA291_0==LEVEL||(LA291_0>=LINESTRING && LA291_0<=LIST)||LA291_0==LOCAL||(LA291_0>=LOCKS && LA291_0<=LOGFILE)||LA291_0==LOGS||(LA291_0>=MASTER && LA291_0<=MASTER_SSL_KEY)||LA291_0==MASTER_USER||(LA291_0>=MAX_CONNECTIONS_PER_HOUR && LA291_0<=MEDIUM)||(LA291_0>=MEMORY && LA291_0<=MICROSECOND)||LA291_0==MIGRATE||LA291_0==MINUTE||LA291_0==MIN_ROWS||LA291_0==MODE||LA291_0==MODIFY||LA291_0==MONTH||(LA291_0>=MULTILINESTRING && LA291_0<=MUTEX)||(LA291_0>=NAME && LA291_0<=NATIONAL)||(LA291_0>=NCHAR && LA291_0<=NONE)||LA291_0==NO_WAIT||(LA291_0>=NVARCHAR && LA291_0<=OLD_PASSWORD)||LA291_0==ONE||(LA291_0>=ONE_SHOT && LA291_0<=OPEN)||LA291_0==OPTIONS||(LA291_0>=OWNER && LA291_0<=PLUGINS)||(LA291_0>=POINT && LA291_0<=PORT)||(LA291_0>=PREPARE && LA291_0<=PREV)||LA291_0==PRIVILEGES||(LA291_0>=PROCESS && LA291_0<=PROFILES)||(LA291_0>=QUARTER && LA291_0<=QUICK)||(LA291_0>=REBUILD && LA291_0<=REDUNDANT)||(LA291_0>=RELAY_LOG_FILE && LA291_0<=RELAY_THREAD)||(LA291_0>=RELOAD && LA291_0<=REMOVE)||(LA291_0>=REORGANIZE && LA291_0<=REPAIR)||LA291_0==REPEATABLE||LA291_0==REPLICATION||(LA291_0>=RESET && LA291_0<=RESTORE)||LA291_0==RESUME||LA291_0==RETURNS||(LA291_0>=ROLLBACK && LA291_0<=ROW_FORMAT)||(LA291_0>=RTREE && LA291_0<=SCHEDULE)||LA291_0==SECOND||LA291_0==SECURITY||(LA291_0>=SERIAL && LA291_0<=SESSION)||LA291_0==SHARE||(LA291_0>=SHUTDOWN && LA291_0<=SLAVE)||(LA291_0>=SNAPSHOT && LA291_0<=SOCKET)||(LA291_0>=SONAME && LA291_0<=SOURCE)||(LA291_0>=SQL_BUFFER_RESULT && LA291_0<=SQL_CACHE)||LA291_0==SQL_NO_CACHE||LA291_0==SQL_THREAD||LA291_0==START||(LA291_0>=STARTS && LA291_0<=STATUS)||(LA291_0>=STOP && LA291_0<=STORAGE)||(LA291_0>=STRING_KEYWORD && LA291_0<=SUBPARTITIONS)||(LA291_0>=SUPER && LA291_0<=SWITCHES)||(LA291_0>=TABLES && LA291_0<=TEMPTABLE)||(LA291_0>=TEXT && LA291_0<=THAN)||(LA291_0>=TIME && LA291_0<=TIMESTAMP_DIFF)||(LA291_0>=TRANSACTION && LA291_0<=TRANSACTIONAL)||LA291_0==TRIGGERS||(LA291_0>=TRUNCATE && LA291_0<=UNDEFINED)||(LA291_0>=UNDOFILE && LA291_0<=UNINSTALL)||LA291_0==UNKNOWN||LA291_0==UNTIL||LA291_0==UPGRADE||LA291_0==USER||LA291_0==USE_FRM||LA291_0==VALUE||LA291_0==VARIABLES||(LA291_0>=VIEW && LA291_0<=WEEK)||(LA291_0>=WORK && LA291_0<=WRAPPER)||(LA291_0>=X509 && LA291_0<=XA)||LA291_0==YEAR))
				{
					alt291 = 1;
				}
				} finally { DebugExitDecision(291); }
				switch (alt291)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1267:22: ident
					{
					DebugLocation(1267, 22);
					PushFollow(Follow._ident_in_column_definition10935);
					ident711=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident711.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(291); }

				DebugLocation(1267, 29);
				// MySQL51Parser.g3:1267:29: ( index_type )?
				int alt292=2;
				try { DebugEnterSubRule(292);
				try { DebugEnterDecision(292, false);
				int LA292_0 = input.LA(1);

				if ((LA292_0==USING))
				{
					alt292 = 1;
				}
				} finally { DebugExitDecision(292); }
				switch (alt292)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1267:29: index_type
					{
					DebugLocation(1267, 29);
					PushFollow(Follow._index_type_in_column_definition10938);
					index_type712=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type712.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(292); }

				DebugLocation(1267, 41);
				LPAREN713=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10941); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN713_tree = (object)adaptor.Create(LPAREN713);
				adaptor.AddChild(root_0, LPAREN713_tree);
				}
				DebugLocation(1267, 48);
				PushFollow(Follow._index_col_name_in_column_definition10943);
				index_col_name714=index_col_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name714.Tree);
				DebugLocation(1267, 63);
				// MySQL51Parser.g3:1267:63: ( COMMA index_col_name )*
				try { DebugEnterSubRule(293);
				while (true)
				{
					int alt293=2;
					try { DebugEnterDecision(293, false);
					int LA293_0 = input.LA(1);

					if ((LA293_0==COMMA))
					{
						alt293 = 1;
					}


					} finally { DebugExitDecision(293); }
					switch ( alt293 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1267:65: COMMA index_col_name
						{
						DebugLocation(1267, 65);
						COMMA715=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10947); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA715_tree = (object)adaptor.Create(COMMA715);
						adaptor.AddChild(root_0, COMMA715_tree);
						}
						DebugLocation(1267, 71);
						PushFollow(Follow._index_col_name_in_column_definition10949);
						index_col_name716=index_col_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name716.Tree);

						}
						break;

					default:
						goto loop293;
					}
				}

				loop293:
					;

				} finally { DebugExitSubRule(293); }

				DebugLocation(1267, 89);
				RPAREN717=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition10954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN717_tree = (object)adaptor.Create(RPAREN717);
				adaptor.AddChild(root_0, RPAREN717_tree);
				}
				DebugLocation(1267, 96);
				// MySQL51Parser.g3:1267:96: ( index_type )?
				int alt294=2;
				try { DebugEnterSubRule(294);
				try { DebugEnterDecision(294, false);
				int LA294_0 = input.LA(1);

				if ((LA294_0==USING))
				{
					alt294 = 1;
				}
				} finally { DebugExitDecision(294); }
				switch (alt294)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1267:96: index_type
					{
					DebugLocation(1267, 96);
					PushFollow(Follow._index_type_in_column_definition10956);
					index_type718=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type718.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(294); }


				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1268:4: ( ( FULLTEXT | SPATIAL ) ( INDEX | KEY ) (index_name= ident )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1268, 4);
				// MySQL51Parser.g3:1268:4: ( ( FULLTEXT | SPATIAL ) ( INDEX | KEY ) (index_name= ident )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )? )
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1268:6: ( FULLTEXT | SPATIAL ) ( INDEX | KEY ) (index_name= ident )? LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( index_type )?
				{
				DebugLocation(1268, 6);
				set719=(IToken)input.LT(1);
				if (input.LA(1)==FULLTEXT||input.LA(1)==SPATIAL)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set719));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1268, 29);
				set720=(IToken)input.LT(1);
				if (input.LA(1)==INDEX||input.LA(1)==KEY)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set720));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1268, 55);
				// MySQL51Parser.g3:1268:55: (index_name= ident )?
				int alt295=2;
				try { DebugEnterSubRule(295);
				try { DebugEnterDecision(295, false);
				int LA295_0 = input.LA(1);

				if ((LA295_0==ACTION||(LA295_0>=ADDDATE && LA295_0<=ALGORITHM)||LA295_0==ANY||LA295_0==ASCII||(LA295_0>=AT && LA295_0<=BACKUP)||LA295_0==BEGIN||(LA295_0>=BINLOG && LA295_0<=BIT)||(LA295_0>=BLOCK && LA295_0<=BOOLEAN)||LA295_0==BTREE||(LA295_0>=BYTE && LA295_0<=CACHE)||LA295_0==CASCADED||LA295_0==CHAIN||LA295_0==CHANGED||LA295_0==CHARSET||(LA295_0>=CHECKSUM && LA295_0<=CODE)||LA295_0==COLLATION||LA295_0==COLUMNS||LA295_0==COMMENT||(LA295_0>=COMMIT && LA295_0<=CONCURRENT)||(LA295_0>=CONNECTION && LA295_0<=CONSISTENT)||(LA295_0>=CONTAINS && LA295_0<=CONTEXT)||LA295_0==CONTRIBUTORS||LA295_0==CPU||LA295_0==CUBE||LA295_0==DATA||(LA295_0>=DATAFILE && LA295_0<=DATETIME)||LA295_0==DAY||LA295_0==DEALLOCATE||LA295_0==DEFINER||LA295_0==DELAY_KEY_WRITE||LA295_0==DES_KEY_FILE||(LA295_0>=DIRECTORY && LA295_0<=DISK)||LA295_0==DO||(LA295_0>=DUMPFILE && LA295_0<=DYNAMIC)||LA295_0==ENABLE||(LA295_0>=END && LA295_0<=ENUM)||(LA295_0>=ERRORS && LA295_0<=ESCAPE)||(LA295_0>=EVENT && LA295_0<=EVERY)||LA295_0==EXECUTE||LA295_0==EXPANSION||(LA295_0>=EXTENDED && LA295_0<=EXTENT_SIZE)||(LA295_0>=FAST && LA295_0<=FAULTS)||(LA295_0>=FIELDS && LA295_0<=FIXED)||LA295_0==FLUSH||(LA295_0>=FOUND && LA295_0<=FRAC_SECOND)||LA295_0==FULL||(LA295_0>=FUNCTION && LA295_0<=GLOBAL)||LA295_0==GRANTS||LA295_0==GROUP||(LA295_0>=HANDLER && LA295_0<=HASH)||LA295_0==HELP||(LA295_0>=HOST && LA295_0<=HOUR)||(LA295_0>=ID && LA295_0<=IDENTIFIED)||LA295_0==IMPORT||LA295_0==INDEXES||LA295_0==INITIAL_SIZE||LA295_0==INNOBASE||(LA295_0>=INSERT_METHOD && LA295_0<=INSTALL)||(LA295_0>=INVOKER && LA295_0<=IPC)||(LA295_0>=ISOLATION && LA295_0<=ISSUER)||LA295_0==KEY_BLOCK_SIZE||(LA295_0>=LABEL && LA295_0<=LAST)||LA295_0==LEAVES||LA295_0==LESS||LA295_0==LEVEL||(LA295_0>=LINESTRING && LA295_0<=LIST)||LA295_0==LOCAL||(LA295_0>=LOCKS && LA295_0<=LOGFILE)||LA295_0==LOGS||(LA295_0>=MASTER && LA295_0<=MASTER_SSL_KEY)||LA295_0==MASTER_USER||(LA295_0>=MAX_CONNECTIONS_PER_HOUR && LA295_0<=MEDIUM)||(LA295_0>=MEMORY && LA295_0<=MICROSECOND)||LA295_0==MIGRATE||LA295_0==MINUTE||LA295_0==MIN_ROWS||LA295_0==MODE||LA295_0==MODIFY||LA295_0==MONTH||(LA295_0>=MULTILINESTRING && LA295_0<=MUTEX)||(LA295_0>=NAME && LA295_0<=NATIONAL)||(LA295_0>=NCHAR && LA295_0<=NONE)||LA295_0==NO_WAIT||(LA295_0>=NVARCHAR && LA295_0<=OLD_PASSWORD)||LA295_0==ONE||(LA295_0>=ONE_SHOT && LA295_0<=OPEN)||LA295_0==OPTIONS||(LA295_0>=OWNER && LA295_0<=PLUGINS)||(LA295_0>=POINT && LA295_0<=PORT)||(LA295_0>=PREPARE && LA295_0<=PREV)||LA295_0==PRIVILEGES||(LA295_0>=PROCESS && LA295_0<=PROFILES)||(LA295_0>=QUARTER && LA295_0<=QUICK)||(LA295_0>=REBUILD && LA295_0<=REDUNDANT)||(LA295_0>=RELAY_LOG_FILE && LA295_0<=RELAY_THREAD)||(LA295_0>=RELOAD && LA295_0<=REMOVE)||(LA295_0>=REORGANIZE && LA295_0<=REPAIR)||LA295_0==REPEATABLE||LA295_0==REPLICATION||(LA295_0>=RESET && LA295_0<=RESTORE)||LA295_0==RESUME||LA295_0==RETURNS||(LA295_0>=ROLLBACK && LA295_0<=ROW_FORMAT)||(LA295_0>=RTREE && LA295_0<=SCHEDULE)||LA295_0==SECOND||LA295_0==SECURITY||(LA295_0>=SERIAL && LA295_0<=SESSION)||LA295_0==SHARE||(LA295_0>=SHUTDOWN && LA295_0<=SLAVE)||(LA295_0>=SNAPSHOT && LA295_0<=SOCKET)||(LA295_0>=SONAME && LA295_0<=SOURCE)||(LA295_0>=SQL_BUFFER_RESULT && LA295_0<=SQL_CACHE)||LA295_0==SQL_NO_CACHE||LA295_0==SQL_THREAD||LA295_0==START||(LA295_0>=STARTS && LA295_0<=STATUS)||(LA295_0>=STOP && LA295_0<=STORAGE)||(LA295_0>=STRING_KEYWORD && LA295_0<=SUBPARTITIONS)||(LA295_0>=SUPER && LA295_0<=SWITCHES)||(LA295_0>=TABLES && LA295_0<=TEMPTABLE)||(LA295_0>=TEXT && LA295_0<=THAN)||(LA295_0>=TIME && LA295_0<=TIMESTAMP_DIFF)||(LA295_0>=TRANSACTION && LA295_0<=TRANSACTIONAL)||LA295_0==TRIGGERS||(LA295_0>=TRUNCATE && LA295_0<=UNDEFINED)||(LA295_0>=UNDOFILE && LA295_0<=UNINSTALL)||LA295_0==UNKNOWN||LA295_0==UNTIL||LA295_0==UPGRADE||LA295_0==USER||LA295_0==USE_FRM||LA295_0==VALUE||LA295_0==VARIABLES||(LA295_0>=VIEW && LA295_0<=WEEK)||(LA295_0>=WORK && LA295_0<=WRAPPER)||(LA295_0>=X509 && LA295_0<=XA)||LA295_0==YEAR))
				{
					alt295 = 1;
				}
				} finally { DebugExitDecision(295); }
				switch (alt295)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1268:55: index_name= ident
					{
					DebugLocation(1268, 55);
					PushFollow(Follow._ident_in_column_definition10988);
					index_name=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_name.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(295); }

				DebugLocation(1268, 63);
				LPAREN721=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition10991); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN721_tree = (object)adaptor.Create(LPAREN721);
				adaptor.AddChild(root_0, LPAREN721_tree);
				}
				DebugLocation(1268, 70);
				PushFollow(Follow._index_col_name_in_column_definition10993);
				index_col_name722=index_col_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name722.Tree);
				DebugLocation(1268, 85);
				// MySQL51Parser.g3:1268:85: ( COMMA index_col_name )*
				try { DebugEnterSubRule(296);
				while (true)
				{
					int alt296=2;
					try { DebugEnterDecision(296, false);
					int LA296_0 = input.LA(1);

					if ((LA296_0==COMMA))
					{
						alt296 = 1;
					}


					} finally { DebugExitDecision(296); }
					switch ( alt296 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1268:87: COMMA index_col_name
						{
						DebugLocation(1268, 87);
						COMMA723=(IToken)Match(input,COMMA,Follow._COMMA_in_column_definition10997); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA723_tree = (object)adaptor.Create(COMMA723);
						adaptor.AddChild(root_0, COMMA723_tree);
						}
						DebugLocation(1268, 93);
						PushFollow(Follow._index_col_name_in_column_definition10999);
						index_col_name724=index_col_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name724.Tree);

						}
						break;

					default:
						goto loop296;
					}
				}

				loop296:
					;

				} finally { DebugExitSubRule(296); }

				DebugLocation(1268, 111);
				RPAREN725=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition11004); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN725_tree = (object)adaptor.Create(RPAREN725);
				adaptor.AddChild(root_0, RPAREN725_tree);
				}
				DebugLocation(1269, 3);
				// MySQL51Parser.g3:1269:3: ( index_type )?
				int alt297=2;
				try { DebugEnterSubRule(297);
				try { DebugEnterDecision(297, false);
				int LA297_0 = input.LA(1);

				if ((LA297_0==USING))
				{
					alt297 = 1;
				}
				} finally { DebugExitDecision(297); }
				switch (alt297)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1269:3: index_type
					{
					DebugLocation(1269, 3);
					PushFollow(Follow._index_type_in_column_definition11008);
					index_type726=index_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_type726.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(297); }


				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1270:4: ( CHECK LPAREN expr RPAREN )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1270, 4);
				// MySQL51Parser.g3:1270:4: ( CHECK LPAREN expr RPAREN )?
				int alt298=2;
				try { DebugEnterSubRule(298);
				try { DebugEnterDecision(298, false);
				int LA298_0 = input.LA(1);

				if ((LA298_0==CHECK))
				{
					alt298 = 1;
				}
				} finally { DebugExitDecision(298); }
				switch (alt298)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1270:6: CHECK LPAREN expr RPAREN
					{
					DebugLocation(1270, 6);
					CHECK727=(IToken)Match(input,CHECK,Follow._CHECK_in_column_definition11018); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CHECK727_tree = (object)adaptor.Create(CHECK727);
					adaptor.AddChild(root_0, CHECK727_tree);
					}
					DebugLocation(1270, 12);
					LPAREN728=(IToken)Match(input,LPAREN,Follow._LPAREN_in_column_definition11020); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN728_tree = (object)adaptor.Create(LPAREN728);
					adaptor.AddChild(root_0, LPAREN728_tree);
					}
					DebugLocation(1270, 19);
					PushFollow(Follow._expr_in_column_definition11022);
					expr729=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr729.Tree);
					DebugLocation(1270, 24);
					RPAREN730=(IToken)Match(input,RPAREN,Follow._RPAREN_in_column_definition11024); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN730_tree = (object)adaptor.Create(RPAREN730);
					adaptor.AddChild(root_0, RPAREN730_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(298); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_definition", 97);
			LeaveRule("column_definition", 97);
			LeaveRule_column_definition();
		}
		DebugLocation(1275, 1);
		} finally { DebugExitRule(GrammarFileName, "column_definition"); }
		return retval;

	}
	// $ANTLR end "column_definition"

	private sealed partial class data_type_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public data_type_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_data_type();
	partial void LeaveRule_data_type();

	// $ANTLR start "data_type"
	// MySQL51Parser.g3:1277:1: data_type : ( BIT ( LPAREN INT_NUMBER RPAREN )? | ( TINYINT | SMALLINT | MEDIUMINT | INT | INTEGER | BIGINT ) ( LPAREN INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )? | ( REAL | DOUBLE | FLOAT | DECIMAL | NUMERIC ) ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )? | DATE | TIME | TIMESTAMP | DATETIME | YEAR | TINYBLOB | BLOB | MEDIUMBLOB | LONGBLOB | ( CHAR | VARCHAR ) LPAREN INT_NUMBER RPAREN ( charset )? ( collate )? | ( BINARY | VARBINARY ) LPAREN INT_NUMBER RPAREN | ( TINYTEXT | TEXT | MEDIUMTEXT | LONGTEXT ) ( BINARY )? ( charset )? ( collate )? | ( ENUM | SET ) LPAREN values+= STRING ( COMMA values+= STRING )* RPAREN ( charset )? ( collate )? );
	[GrammarRule("data_type")]
	private MySQL51Parser.data_type_return data_type()
	{
		EnterRule_data_type();
		EnterRule("data_type", 98);
		TraceIn("data_type", 98);
		MySQL51Parser.data_type_return retval = new MySQL51Parser.data_type_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken num1 = default(IToken);
		IToken num2 = default(IToken);
		IToken BIT731 = default(IToken);
		IToken LPAREN732 = default(IToken);
		IToken INT_NUMBER733 = default(IToken);
		IToken RPAREN734 = default(IToken);
		IToken set735 = default(IToken);
		IToken LPAREN736 = default(IToken);
		IToken INT_NUMBER737 = default(IToken);
		IToken RPAREN738 = default(IToken);
		IToken set739 = default(IToken);
		IToken ZEROFILL740 = default(IToken);
		IToken set741 = default(IToken);
		IToken LPAREN742 = default(IToken);
		IToken COMMA743 = default(IToken);
		IToken RPAREN744 = default(IToken);
		IToken set745 = default(IToken);
		IToken ZEROFILL746 = default(IToken);
		IToken DATE747 = default(IToken);
		IToken TIME748 = default(IToken);
		IToken TIMESTAMP749 = default(IToken);
		IToken DATETIME750 = default(IToken);
		IToken YEAR751 = default(IToken);
		IToken TINYBLOB752 = default(IToken);
		IToken BLOB753 = default(IToken);
		IToken MEDIUMBLOB754 = default(IToken);
		IToken LONGBLOB755 = default(IToken);
		IToken set756 = default(IToken);
		IToken LPAREN757 = default(IToken);
		IToken INT_NUMBER758 = default(IToken);
		IToken RPAREN759 = default(IToken);
		IToken set762 = default(IToken);
		IToken LPAREN763 = default(IToken);
		IToken INT_NUMBER764 = default(IToken);
		IToken RPAREN765 = default(IToken);
		IToken set766 = default(IToken);
		IToken BINARY767 = default(IToken);
		IToken set770 = default(IToken);
		IToken LPAREN771 = default(IToken);
		IToken COMMA772 = default(IToken);
		IToken RPAREN773 = default(IToken);
		IToken values = default(IToken);
		List<IToken> list_values = null;
		MySQL51Parser.charset_return charset760 = default(MySQL51Parser.charset_return);
		MySQL51Parser.collate_return collate761 = default(MySQL51Parser.collate_return);
		MySQL51Parser.charset_return charset768 = default(MySQL51Parser.charset_return);
		MySQL51Parser.collate_return collate769 = default(MySQL51Parser.collate_return);
		MySQL51Parser.charset_return charset774 = default(MySQL51Parser.charset_return);
		MySQL51Parser.collate_return collate775 = default(MySQL51Parser.collate_return);

		object num1_tree = default(object);
		object num2_tree = default(object);
		object BIT731_tree = default(object);
		object LPAREN732_tree = default(object);
		object INT_NUMBER733_tree = default(object);
		object RPAREN734_tree = default(object);
		object set735_tree = default(object);
		object LPAREN736_tree = default(object);
		object INT_NUMBER737_tree = default(object);
		object RPAREN738_tree = default(object);
		object set739_tree = default(object);
		object ZEROFILL740_tree = default(object);
		object set741_tree = default(object);
		object LPAREN742_tree = default(object);
		object COMMA743_tree = default(object);
		object RPAREN744_tree = default(object);
		object set745_tree = default(object);
		object ZEROFILL746_tree = default(object);
		object DATE747_tree = default(object);
		object TIME748_tree = default(object);
		object TIMESTAMP749_tree = default(object);
		object DATETIME750_tree = default(object);
		object YEAR751_tree = default(object);
		object TINYBLOB752_tree = default(object);
		object BLOB753_tree = default(object);
		object MEDIUMBLOB754_tree = default(object);
		object LONGBLOB755_tree = default(object);
		object set756_tree = default(object);
		object LPAREN757_tree = default(object);
		object INT_NUMBER758_tree = default(object);
		object RPAREN759_tree = default(object);
		object set762_tree = default(object);
		object LPAREN763_tree = default(object);
		object INT_NUMBER764_tree = default(object);
		object RPAREN765_tree = default(object);
		object set766_tree = default(object);
		object BINARY767_tree = default(object);
		object set770_tree = default(object);
		object LPAREN771_tree = default(object);
		object COMMA772_tree = default(object);
		object RPAREN773_tree = default(object);
		object values_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "data_type");
		DebugLocation(1277, 1);
		try
		{
			// MySQL51Parser.g3:1278:2: ( BIT ( LPAREN INT_NUMBER RPAREN )? | ( TINYINT | SMALLINT | MEDIUMINT | INT | INTEGER | BIGINT ) ( LPAREN INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )? | ( REAL | DOUBLE | FLOAT | DECIMAL | NUMERIC ) ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )? | DATE | TIME | TIMESTAMP | DATETIME | YEAR | TINYBLOB | BLOB | MEDIUMBLOB | LONGBLOB | ( CHAR | VARCHAR ) LPAREN INT_NUMBER RPAREN ( charset )? ( collate )? | ( BINARY | VARBINARY ) LPAREN INT_NUMBER RPAREN | ( TINYTEXT | TEXT | MEDIUMTEXT | LONGTEXT ) ( BINARY )? ( charset )? ( collate )? | ( ENUM | SET ) LPAREN values+= STRING ( COMMA values+= STRING )* RPAREN ( charset )? ( collate )? )
			int alt315=16;
			try { DebugEnterDecision(315, false);
			switch (input.LA(1))
			{
			case BIT:
				{
				alt315 = 1;
				}
				break;
			case BIGINT:
			case INT:
			case INTEGER:
			case MEDIUMINT:
			case SMALLINT:
			case TINYINT:
				{
				alt315 = 2;
				}
				break;
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case NUMERIC:
			case REAL:
				{
				alt315 = 3;
				}
				break;
			case DATE:
				{
				alt315 = 4;
				}
				break;
			case TIME:
				{
				alt315 = 5;
				}
				break;
			case TIMESTAMP:
				{
				alt315 = 6;
				}
				break;
			case DATETIME:
				{
				alt315 = 7;
				}
				break;
			case YEAR:
				{
				alt315 = 8;
				}
				break;
			case TINYBLOB:
				{
				alt315 = 9;
				}
				break;
			case BLOB:
				{
				alt315 = 10;
				}
				break;
			case MEDIUMBLOB:
				{
				alt315 = 11;
				}
				break;
			case LONGBLOB:
				{
				alt315 = 12;
				}
				break;
			case CHAR:
			case VARCHAR:
				{
				alt315 = 13;
				}
				break;
			case BINARY:
			case VARBINARY:
				{
				alt315 = 14;
				}
				break;
			case LONGTEXT:
			case MEDIUMTEXT:
			case TEXT:
			case TINYTEXT:
				{
				alt315 = 15;
				}
				break;
			case ENUM:
			case SET:
				{
				alt315 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 315, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(315); }
			switch (alt315)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1278:4: BIT ( LPAREN INT_NUMBER RPAREN )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1278, 4);
				BIT731=(IToken)Match(input,BIT,Follow._BIT_in_data_type11046); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BIT731_tree = (object)adaptor.Create(BIT731);
				adaptor.AddChild(root_0, BIT731_tree);
				}
				DebugLocation(1279, 3);
				// MySQL51Parser.g3:1279:3: ( LPAREN INT_NUMBER RPAREN )?
				int alt300=2;
				try { DebugEnterSubRule(300);
				try { DebugEnterDecision(300, false);
				int LA300_0 = input.LA(1);

				if ((LA300_0==LPAREN))
				{
					int LA300_1 = input.LA(2);

					if ((LA300_1==INT_NUMBER))
					{
						alt300 = 1;
					}
				}
				} finally { DebugExitDecision(300); }
				switch (alt300)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1279:5: LPAREN INT_NUMBER RPAREN
					{
					DebugLocation(1279, 5);
					LPAREN732=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11053); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN732_tree = (object)adaptor.Create(LPAREN732);
					adaptor.AddChild(root_0, LPAREN732_tree);
					}
					DebugLocation(1279, 12);
					INT_NUMBER733=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11055); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INT_NUMBER733_tree = (object)adaptor.Create(INT_NUMBER733);
					adaptor.AddChild(root_0, INT_NUMBER733_tree);
					}
					DebugLocation(1279, 24);
					RPAREN734=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11058); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN734_tree = (object)adaptor.Create(RPAREN734);
					adaptor.AddChild(root_0, RPAREN734_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(300); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1280:4: ( TINYINT | SMALLINT | MEDIUMINT | INT | INTEGER | BIGINT ) ( LPAREN INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1280, 4);
				set735=(IToken)input.LT(1);
				if (input.LA(1)==BIGINT||input.LA(1)==INT||input.LA(1)==INTEGER||input.LA(1)==MEDIUMINT||input.LA(1)==SMALLINT||input.LA(1)==TINYINT)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set735));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1287, 3);
				// MySQL51Parser.g3:1287:3: ( LPAREN INT_NUMBER RPAREN )?
				int alt301=2;
				try { DebugEnterSubRule(301);
				try { DebugEnterDecision(301, false);
				int LA301_0 = input.LA(1);

				if ((LA301_0==LPAREN))
				{
					int LA301_1 = input.LA(2);

					if ((LA301_1==INT_NUMBER))
					{
						alt301 = 1;
					}
				}
				} finally { DebugExitDecision(301); }
				switch (alt301)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1287:4: LPAREN INT_NUMBER RPAREN
					{
					DebugLocation(1287, 4);
					LPAREN736=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11118); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN736_tree = (object)adaptor.Create(LPAREN736);
					adaptor.AddChild(root_0, LPAREN736_tree);
					}
					DebugLocation(1287, 11);
					INT_NUMBER737=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11120); if (state.failed) return retval;
					if (state.backtracking == 0) {
					INT_NUMBER737_tree = (object)adaptor.Create(INT_NUMBER737);
					adaptor.AddChild(root_0, INT_NUMBER737_tree);
					}
					DebugLocation(1287, 23);
					RPAREN738=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11123); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN738_tree = (object)adaptor.Create(RPAREN738);
					adaptor.AddChild(root_0, RPAREN738_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(301); }

				DebugLocation(1288, 3);
				// MySQL51Parser.g3:1288:3: ( SIGNED | UNSIGNED )?
				int alt302=2;
				try { DebugEnterSubRule(302);
				try { DebugEnterDecision(302, false);
				int LA302_0 = input.LA(1);

				if ((LA302_0==SIGNED))
				{
					int LA302_1 = input.LA(2);

					if ((LA302_1==ACTION||(LA302_1>=ADDDATE && LA302_1<=ALGORITHM)||LA302_1==ANY||LA302_1==ASCII||(LA302_1>=AT && LA302_1<=BACKUP)||LA302_1==BEGIN||(LA302_1>=BINLOG && LA302_1<=BIT)||(LA302_1>=BLOCK && LA302_1<=BOOLEAN)||LA302_1==BTREE||(LA302_1>=BYTE && LA302_1<=CACHE)||LA302_1==CASCADED||LA302_1==CHAIN||LA302_1==CHANGED||LA302_1==CHARSET||(LA302_1>=CHECKSUM && LA302_1<=CODE)||LA302_1==COLLATION||(LA302_1>=COLUMNS && LA302_1<=CONCURRENT)||(LA302_1>=CONNECTION && LA302_1<=CONSISTENT)||(LA302_1>=CONTAINS && LA302_1<=CONTEXT)||LA302_1==CONTRIBUTORS||(LA302_1>=CPU && LA302_1<=CREATE)||LA302_1==CUBE||LA302_1==DATA||(LA302_1>=DATAFILE && LA302_1<=DATETIME)||LA302_1==DAY||LA302_1==DEALLOCATE||(LA302_1>=DECLARE && LA302_1<=DEFINER)||(LA302_1>=DELAY_KEY_WRITE && LA302_1<=DELETE)||LA302_1==DES_KEY_FILE||(LA302_1>=DIRECTORY && LA302_1<=DISK)||LA302_1==DO||LA302_1==DROP||(LA302_1>=DUMPFILE && LA302_1<=DYNAMIC)||LA302_1==ENABLE||(LA302_1>=END && LA302_1<=ENUM)||(LA302_1>=ERRORS && LA302_1<=ESCAPE)||(LA302_1>=EVENT && LA302_1<=EVERY)||LA302_1==EXECUTE||(LA302_1>=EXPANSION && LA302_1<=EXTENT_SIZE)||(LA302_1>=FAST && LA302_1<=FAULTS)||(LA302_1>=FIELDS && LA302_1<=FIXED)||LA302_1==FLUSH||(LA302_1>=FOUND && LA302_1<=FRAC_SECOND)||LA302_1==FULL||(LA302_1>=FUNCTION && LA302_1<=GLOBAL)||LA302_1==GRANTS||LA302_1==GROUP||(LA302_1>=HANDLER && LA302_1<=HASH)||LA302_1==HELP||(LA302_1>=HOST && LA302_1<=HOUR)||(LA302_1>=ID && LA302_1<=IDENTIFIED)||LA302_1==IMPORT||LA302_1==INDEXES||LA302_1==INITIAL_SIZE||LA302_1==INNOBASE||(LA302_1>=INSERT && LA302_1<=INSTALL)||(LA302_1>=INVOKER && LA302_1<=IPC)||(LA302_1>=ISOLATION && LA302_1<=ISSUER)||LA302_1==KEY_BLOCK_SIZE||(LA302_1>=LABEL && LA302_1<=LAST)||LA302_1==LEAVES||LA302_1==LESS||LA302_1==LEVEL||(LA302_1>=LINESTRING && LA302_1<=LIST)||LA302_1==LOCAL||(LA302_1>=LOCK && LA302_1<=LOGFILE)||LA302_1==LOGS||(LA302_1>=LPAREN && LA302_1<=MASTER_SSL_KEY)||LA302_1==MASTER_USER||(LA302_1>=MAX_CONNECTIONS_PER_HOUR && LA302_1<=MEDIUM)||(LA302_1>=MEMORY && LA302_1<=MICROSECOND)||LA302_1==MIGRATE||LA302_1==MINUTE||LA302_1==MIN_ROWS||LA302_1==MODE||LA302_1==MODIFY||LA302_1==MONTH||(LA302_1>=MULTILINESTRING && LA302_1<=MUTEX)||(LA302_1>=NAME && LA302_1<=NATIONAL)||(LA302_1>=NCHAR && LA302_1<=NOT)||LA302_1==NO_WAIT||LA302_1==NULL||(LA302_1>=NVARCHAR && LA302_1<=OLD_PASSWORD)||LA302_1==ONE||(LA302_1>=ONE_SHOT && LA302_1<=OPEN)||LA302_1==OPTIONS||(LA302_1>=OWNER && LA302_1<=PLUGINS)||(LA302_1>=POINT && LA302_1<=PORT)||(LA302_1>=PREPARE && LA302_1<=PREV)||LA302_1==PRIVILEGES||(LA302_1>=PROCESS && LA302_1<=PROFILES)||(LA302_1>=QUARTER && LA302_1<=QUICK)||(LA302_1>=REBUILD && LA302_1<=REDUNDANT)||(LA302_1>=RELAY_LOG_FILE && LA302_1<=REPAIR)||LA302_1==REPEATABLE||LA302_1==REPLICATION||(LA302_1>=RESET && LA302_1<=RESTORE)||LA302_1==RESUME||LA302_1==RETURNS||(LA302_1>=ROLLBACK && LA302_1<=SCHEDULE)||LA302_1==SECOND||(LA302_1>=SECURITY && LA302_1<=SELECT)||(LA302_1>=SERIAL && LA302_1<=SESSION)||(LA302_1>=SET && LA302_1<=SLAVE)||(LA302_1>=SNAPSHOT && LA302_1<=SOCKET)||(LA302_1>=SONAME && LA302_1<=SOURCE)||(LA302_1>=SQL_BUFFER_RESULT && LA302_1<=SQL_CACHE)||LA302_1==SQL_NO_CACHE||LA302_1==SQL_THREAD||LA302_1==START||(LA302_1>=STARTS && LA302_1<=STATUS)||(LA302_1>=STOP && LA302_1<=STORAGE)||(LA302_1>=STRING_KEYWORD && LA302_1<=SUBPARTITIONS)||(LA302_1>=SUPER && LA302_1<=SWITCHES)||(LA302_1>=TABLES && LA302_1<=TEMPTABLE)||(LA302_1>=TEXT && LA302_1<=THAN)||(LA302_1>=TIME && LA302_1<=TIMESTAMP_DIFF)||(LA302_1>=TRANSACTION && LA302_1<=TRANSACTIONAL)||LA302_1==TRIGGERS||(LA302_1>=TRUNCATE && LA302_1<=UNDEFINED)||(LA302_1>=UNDOFILE && LA302_1<=UNINSTALL)||(LA302_1>=UNKNOWN && LA302_1<=UNLOCK)||(LA302_1>=UNTIL && LA302_1<=UPGRADE)||LA302_1==USER||LA302_1==USE_FRM||LA302_1==VALUE||LA302_1==VARIABLES||(LA302_1>=VIEW && LA302_1<=WEEK)||(LA302_1>=WORK && LA302_1<=WRAPPER)||(LA302_1>=X509 && LA302_1<=XA)||LA302_1==YEAR||LA302_1==ZEROFILL))
					{
						alt302 = 1;
					}
				}
				else if ((LA302_0==UNSIGNED))
				{
					alt302 = 1;
				}
				} finally { DebugExitDecision(302); }
				switch (alt302)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:
					{
					DebugLocation(1288, 3);
					set739=(IToken)input.LT(1);
					if (input.LA(1)==SIGNED||input.LA(1)==UNSIGNED)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set739));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(302); }

				DebugLocation(1289, 3);
				// MySQL51Parser.g3:1289:3: ( ZEROFILL )?
				int alt303=2;
				try { DebugEnterSubRule(303);
				try { DebugEnterDecision(303, false);
				int LA303_0 = input.LA(1);

				if ((LA303_0==ZEROFILL))
				{
					alt303 = 1;
				}
				} finally { DebugExitDecision(303); }
				switch (alt303)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1289:4: ZEROFILL
					{
					DebugLocation(1289, 4);
					ZEROFILL740=(IToken)Match(input,ZEROFILL,Follow._ZEROFILL_in_data_type11142); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ZEROFILL740_tree = (object)adaptor.Create(ZEROFILL740);
					adaptor.AddChild(root_0, ZEROFILL740_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(303); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1290:4: ( REAL | DOUBLE | FLOAT | DECIMAL | NUMERIC ) ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )? ( SIGNED | UNSIGNED )? ( ZEROFILL )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1290, 4);
				set741=(IToken)input.LT(1);
				if (input.LA(1)==DECIMAL||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==NUMERIC||input.LA(1)==REAL)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set741));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1296, 3);
				// MySQL51Parser.g3:1296:3: ( LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN )?
				int alt304=2;
				try { DebugEnterSubRule(304);
				try { DebugEnterDecision(304, false);
				int LA304_0 = input.LA(1);

				if ((LA304_0==LPAREN))
				{
					int LA304_1 = input.LA(2);

					if ((LA304_1==INT_NUMBER))
					{
						alt304 = 1;
					}
				}
				} finally { DebugExitDecision(304); }
				switch (alt304)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1296:4: LPAREN num1= INT_NUMBER COMMA num2= INT_NUMBER RPAREN
					{
					DebugLocation(1296, 4);
					LPAREN742=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11196); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN742_tree = (object)adaptor.Create(LPAREN742);
					adaptor.AddChild(root_0, LPAREN742_tree);
					}
					DebugLocation(1296, 15);
					num1=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11200); if (state.failed) return retval;
					if (state.backtracking == 0) {
					num1_tree = (object)adaptor.Create(num1);
					adaptor.AddChild(root_0, num1_tree);
					}
					DebugLocation(1296, 27);
					COMMA743=(IToken)Match(input,COMMA,Follow._COMMA_in_data_type11202); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA743_tree = (object)adaptor.Create(COMMA743);
					adaptor.AddChild(root_0, COMMA743_tree);
					}
					DebugLocation(1296, 37);
					num2=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11206); if (state.failed) return retval;
					if (state.backtracking == 0) {
					num2_tree = (object)adaptor.Create(num2);
					adaptor.AddChild(root_0, num2_tree);
					}
					DebugLocation(1296, 49);
					RPAREN744=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11208); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN744_tree = (object)adaptor.Create(RPAREN744);
					adaptor.AddChild(root_0, RPAREN744_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(304); }

				DebugLocation(1297, 3);
				// MySQL51Parser.g3:1297:3: ( SIGNED | UNSIGNED )?
				int alt305=2;
				try { DebugEnterSubRule(305);
				try { DebugEnterDecision(305, false);
				int LA305_0 = input.LA(1);

				if ((LA305_0==SIGNED))
				{
					int LA305_1 = input.LA(2);

					if ((LA305_1==ACTION||(LA305_1>=ADDDATE && LA305_1<=ALGORITHM)||LA305_1==ANY||LA305_1==ASCII||(LA305_1>=AT && LA305_1<=BACKUP)||LA305_1==BEGIN||(LA305_1>=BINLOG && LA305_1<=BIT)||(LA305_1>=BLOCK && LA305_1<=BOOLEAN)||LA305_1==BTREE||(LA305_1>=BYTE && LA305_1<=CACHE)||LA305_1==CASCADED||LA305_1==CHAIN||LA305_1==CHANGED||LA305_1==CHARSET||(LA305_1>=CHECKSUM && LA305_1<=CODE)||LA305_1==COLLATION||(LA305_1>=COLUMNS && LA305_1<=CONCURRENT)||(LA305_1>=CONNECTION && LA305_1<=CONSISTENT)||(LA305_1>=CONTAINS && LA305_1<=CONTEXT)||LA305_1==CONTRIBUTORS||(LA305_1>=CPU && LA305_1<=CREATE)||LA305_1==CUBE||LA305_1==DATA||(LA305_1>=DATAFILE && LA305_1<=DATETIME)||LA305_1==DAY||LA305_1==DEALLOCATE||(LA305_1>=DECLARE && LA305_1<=DEFINER)||(LA305_1>=DELAY_KEY_WRITE && LA305_1<=DELETE)||LA305_1==DES_KEY_FILE||(LA305_1>=DIRECTORY && LA305_1<=DISK)||LA305_1==DO||LA305_1==DROP||(LA305_1>=DUMPFILE && LA305_1<=DYNAMIC)||LA305_1==ENABLE||(LA305_1>=END && LA305_1<=ENUM)||(LA305_1>=ERRORS && LA305_1<=ESCAPE)||(LA305_1>=EVENT && LA305_1<=EVERY)||LA305_1==EXECUTE||(LA305_1>=EXPANSION && LA305_1<=EXTENT_SIZE)||(LA305_1>=FAST && LA305_1<=FAULTS)||(LA305_1>=FIELDS && LA305_1<=FIXED)||LA305_1==FLUSH||(LA305_1>=FOUND && LA305_1<=FRAC_SECOND)||LA305_1==FULL||(LA305_1>=FUNCTION && LA305_1<=GLOBAL)||LA305_1==GRANTS||LA305_1==GROUP||(LA305_1>=HANDLER && LA305_1<=HASH)||LA305_1==HELP||(LA305_1>=HOST && LA305_1<=HOUR)||(LA305_1>=ID && LA305_1<=IDENTIFIED)||LA305_1==IMPORT||LA305_1==INDEXES||LA305_1==INITIAL_SIZE||LA305_1==INNOBASE||(LA305_1>=INSERT && LA305_1<=INSTALL)||(LA305_1>=INVOKER && LA305_1<=IPC)||(LA305_1>=ISOLATION && LA305_1<=ISSUER)||LA305_1==KEY_BLOCK_SIZE||(LA305_1>=LABEL && LA305_1<=LAST)||LA305_1==LEAVES||LA305_1==LESS||LA305_1==LEVEL||(LA305_1>=LINESTRING && LA305_1<=LIST)||LA305_1==LOCAL||(LA305_1>=LOCK && LA305_1<=LOGFILE)||LA305_1==LOGS||(LA305_1>=LPAREN && LA305_1<=MASTER_SSL_KEY)||LA305_1==MASTER_USER||(LA305_1>=MAX_CONNECTIONS_PER_HOUR && LA305_1<=MEDIUM)||(LA305_1>=MEMORY && LA305_1<=MICROSECOND)||LA305_1==MIGRATE||LA305_1==MINUTE||LA305_1==MIN_ROWS||LA305_1==MODE||LA305_1==MODIFY||LA305_1==MONTH||(LA305_1>=MULTILINESTRING && LA305_1<=MUTEX)||(LA305_1>=NAME && LA305_1<=NATIONAL)||(LA305_1>=NCHAR && LA305_1<=NOT)||LA305_1==NO_WAIT||LA305_1==NULL||(LA305_1>=NVARCHAR && LA305_1<=OLD_PASSWORD)||LA305_1==ONE||(LA305_1>=ONE_SHOT && LA305_1<=OPEN)||LA305_1==OPTIONS||(LA305_1>=OWNER && LA305_1<=PLUGINS)||(LA305_1>=POINT && LA305_1<=PORT)||(LA305_1>=PREPARE && LA305_1<=PREV)||LA305_1==PRIVILEGES||(LA305_1>=PROCESS && LA305_1<=PROFILES)||(LA305_1>=QUARTER && LA305_1<=QUICK)||(LA305_1>=REBUILD && LA305_1<=REDUNDANT)||(LA305_1>=RELAY_LOG_FILE && LA305_1<=REPAIR)||LA305_1==REPEATABLE||LA305_1==REPLICATION||(LA305_1>=RESET && LA305_1<=RESTORE)||LA305_1==RESUME||LA305_1==RETURNS||(LA305_1>=ROLLBACK && LA305_1<=SCHEDULE)||LA305_1==SECOND||(LA305_1>=SECURITY && LA305_1<=SELECT)||(LA305_1>=SERIAL && LA305_1<=SESSION)||(LA305_1>=SET && LA305_1<=SLAVE)||(LA305_1>=SNAPSHOT && LA305_1<=SOCKET)||(LA305_1>=SONAME && LA305_1<=SOURCE)||(LA305_1>=SQL_BUFFER_RESULT && LA305_1<=SQL_CACHE)||LA305_1==SQL_NO_CACHE||LA305_1==SQL_THREAD||LA305_1==START||(LA305_1>=STARTS && LA305_1<=STATUS)||(LA305_1>=STOP && LA305_1<=STORAGE)||(LA305_1>=STRING_KEYWORD && LA305_1<=SUBPARTITIONS)||(LA305_1>=SUPER && LA305_1<=SWITCHES)||(LA305_1>=TABLES && LA305_1<=TEMPTABLE)||(LA305_1>=TEXT && LA305_1<=THAN)||(LA305_1>=TIME && LA305_1<=TIMESTAMP_DIFF)||(LA305_1>=TRANSACTION && LA305_1<=TRANSACTIONAL)||LA305_1==TRIGGERS||(LA305_1>=TRUNCATE && LA305_1<=UNDEFINED)||(LA305_1>=UNDOFILE && LA305_1<=UNINSTALL)||(LA305_1>=UNKNOWN && LA305_1<=UNLOCK)||(LA305_1>=UNTIL && LA305_1<=UPGRADE)||LA305_1==USER||LA305_1==USE_FRM||LA305_1==VALUE||LA305_1==VARIABLES||(LA305_1>=VIEW && LA305_1<=WEEK)||(LA305_1>=WORK && LA305_1<=WRAPPER)||(LA305_1>=X509 && LA305_1<=XA)||LA305_1==YEAR||LA305_1==ZEROFILL))
					{
						alt305 = 1;
					}
				}
				else if ((LA305_0==UNSIGNED))
				{
					alt305 = 1;
				}
				} finally { DebugExitDecision(305); }
				switch (alt305)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:
					{
					DebugLocation(1297, 3);
					set745=(IToken)input.LT(1);
					if (input.LA(1)==SIGNED||input.LA(1)==UNSIGNED)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set745));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(305); }

				DebugLocation(1298, 3);
				// MySQL51Parser.g3:1298:3: ( ZEROFILL )?
				int alt306=2;
				try { DebugEnterSubRule(306);
				try { DebugEnterDecision(306, false);
				int LA306_0 = input.LA(1);

				if ((LA306_0==ZEROFILL))
				{
					alt306 = 1;
				}
				} finally { DebugExitDecision(306); }
				switch (alt306)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1298:4: ZEROFILL
					{
					DebugLocation(1298, 4);
					ZEROFILL746=(IToken)Match(input,ZEROFILL,Follow._ZEROFILL_in_data_type11228); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ZEROFILL746_tree = (object)adaptor.Create(ZEROFILL746);
					adaptor.AddChild(root_0, ZEROFILL746_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(306); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1299:4: DATE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1299, 4);
				DATE747=(IToken)Match(input,DATE,Follow._DATE_in_data_type11236); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATE747_tree = (object)adaptor.Create(DATE747);
				adaptor.AddChild(root_0, DATE747_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1300:4: TIME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1300, 4);
				TIME748=(IToken)Match(input,TIME,Follow._TIME_in_data_type11243); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TIME748_tree = (object)adaptor.Create(TIME748);
				adaptor.AddChild(root_0, TIME748_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1301:4: TIMESTAMP
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1301, 4);
				TIMESTAMP749=(IToken)Match(input,TIMESTAMP,Follow._TIMESTAMP_in_data_type11250); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TIMESTAMP749_tree = (object)adaptor.Create(TIMESTAMP749);
				adaptor.AddChild(root_0, TIMESTAMP749_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1302:4: DATETIME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1302, 4);
				DATETIME750=(IToken)Match(input,DATETIME,Follow._DATETIME_in_data_type11256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATETIME750_tree = (object)adaptor.Create(DATETIME750);
				adaptor.AddChild(root_0, DATETIME750_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1303:4: YEAR
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1303, 4);
				YEAR751=(IToken)Match(input,YEAR,Follow._YEAR_in_data_type11262); if (state.failed) return retval;
				if (state.backtracking == 0) {
				YEAR751_tree = (object)adaptor.Create(YEAR751);
				adaptor.AddChild(root_0, YEAR751_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:1304:4: TINYBLOB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1304, 4);
				TINYBLOB752=(IToken)Match(input,TINYBLOB,Follow._TINYBLOB_in_data_type11269); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TINYBLOB752_tree = (object)adaptor.Create(TINYBLOB752);
				adaptor.AddChild(root_0, TINYBLOB752_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:1305:4: BLOB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1305, 4);
				BLOB753=(IToken)Match(input,BLOB,Follow._BLOB_in_data_type11275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BLOB753_tree = (object)adaptor.Create(BLOB753);
				adaptor.AddChild(root_0, BLOB753_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:1306:4: MEDIUMBLOB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1306, 4);
				MEDIUMBLOB754=(IToken)Match(input,MEDIUMBLOB,Follow._MEDIUMBLOB_in_data_type11282); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MEDIUMBLOB754_tree = (object)adaptor.Create(MEDIUMBLOB754);
				adaptor.AddChild(root_0, MEDIUMBLOB754_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:1307:4: LONGBLOB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1307, 4);
				LONGBLOB755=(IToken)Match(input,LONGBLOB,Follow._LONGBLOB_in_data_type11288); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LONGBLOB755_tree = (object)adaptor.Create(LONGBLOB755);
				adaptor.AddChild(root_0, LONGBLOB755_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:1308:4: ( CHAR | VARCHAR ) LPAREN INT_NUMBER RPAREN ( charset )? ( collate )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1308, 4);
				set756=(IToken)input.LT(1);
				if (input.LA(1)==CHAR||input.LA(1)==VARCHAR)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set756));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1311, 3);
				LPAREN757=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN757_tree = (object)adaptor.Create(LPAREN757);
				adaptor.AddChild(root_0, LPAREN757_tree);
				}
				DebugLocation(1311, 10);
				INT_NUMBER758=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11314); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER758_tree = (object)adaptor.Create(INT_NUMBER758);
				adaptor.AddChild(root_0, INT_NUMBER758_tree);
				}
				DebugLocation(1311, 21);
				RPAREN759=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11316); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN759_tree = (object)adaptor.Create(RPAREN759);
				adaptor.AddChild(root_0, RPAREN759_tree);
				}
				DebugLocation(1312, 3);
				// MySQL51Parser.g3:1312:3: ( charset )?
				int alt307=2;
				try { DebugEnterSubRule(307);
				try { DebugEnterDecision(307, false);
				int LA307_0 = input.LA(1);

				if ((LA307_0==CHARACTER))
				{
					alt307 = 1;
				}
				} finally { DebugExitDecision(307); }
				switch (alt307)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1312:4: charset
					{
					DebugLocation(1312, 4);
					PushFollow(Follow._charset_in_data_type11321);
					charset760=charset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, charset760.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(307); }

				DebugLocation(1313, 3);
				// MySQL51Parser.g3:1313:3: ( collate )?
				int alt308=2;
				try { DebugEnterSubRule(308);
				try { DebugEnterDecision(308, false);
				int LA308_0 = input.LA(1);

				if ((LA308_0==COLLATE))
				{
					alt308 = 1;
				}
				} finally { DebugExitDecision(308); }
				switch (alt308)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1313:4: collate
					{
					DebugLocation(1313, 4);
					PushFollow(Follow._collate_in_data_type11329);
					collate761=collate();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collate761.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(308); }


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:1314:4: ( BINARY | VARBINARY ) LPAREN INT_NUMBER RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1314, 4);
				set762=(IToken)input.LT(1);
				if (input.LA(1)==BINARY||input.LA(1)==VARBINARY)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set762));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1317, 3);
				LPAREN763=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN763_tree = (object)adaptor.Create(LPAREN763);
				adaptor.AddChild(root_0, LPAREN763_tree);
				}
				DebugLocation(1317, 10);
				INT_NUMBER764=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_data_type11358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT_NUMBER764_tree = (object)adaptor.Create(INT_NUMBER764);
				adaptor.AddChild(root_0, INT_NUMBER764_tree);
				}
				DebugLocation(1317, 21);
				RPAREN765=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11360); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN765_tree = (object)adaptor.Create(RPAREN765);
				adaptor.AddChild(root_0, RPAREN765_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:1318:4: ( TINYTEXT | TEXT | MEDIUMTEXT | LONGTEXT ) ( BINARY )? ( charset )? ( collate )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1318, 4);
				set766=(IToken)input.LT(1);
				if (input.LA(1)==LONGTEXT||input.LA(1)==MEDIUMTEXT||input.LA(1)==TEXT||input.LA(1)==TINYTEXT)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set766));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1323, 3);
				// MySQL51Parser.g3:1323:3: ( BINARY )?
				int alt309=2;
				try { DebugEnterSubRule(309);
				try { DebugEnterDecision(309, false);
				int LA309_0 = input.LA(1);

				if ((LA309_0==BINARY))
				{
					alt309 = 1;
				}
				} finally { DebugExitDecision(309); }
				switch (alt309)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1323:4: BINARY
					{
					DebugLocation(1323, 4);
					BINARY767=(IToken)Match(input,BINARY,Follow._BINARY_in_data_type11399); if (state.failed) return retval;
					if (state.backtracking == 0) {
					BINARY767_tree = (object)adaptor.Create(BINARY767);
					adaptor.AddChild(root_0, BINARY767_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(309); }

				DebugLocation(1324, 3);
				// MySQL51Parser.g3:1324:3: ( charset )?
				int alt310=2;
				try { DebugEnterSubRule(310);
				try { DebugEnterDecision(310, false);
				int LA310_0 = input.LA(1);

				if ((LA310_0==CHARACTER))
				{
					alt310 = 1;
				}
				} finally { DebugExitDecision(310); }
				switch (alt310)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1324:4: charset
					{
					DebugLocation(1324, 4);
					PushFollow(Follow._charset_in_data_type11407);
					charset768=charset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, charset768.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(310); }

				DebugLocation(1325, 3);
				// MySQL51Parser.g3:1325:3: ( collate )?
				int alt311=2;
				try { DebugEnterSubRule(311);
				try { DebugEnterDecision(311, false);
				int LA311_0 = input.LA(1);

				if ((LA311_0==COLLATE))
				{
					alt311 = 1;
				}
				} finally { DebugExitDecision(311); }
				switch (alt311)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1325:4: collate
					{
					DebugLocation(1325, 4);
					PushFollow(Follow._collate_in_data_type11415);
					collate769=collate();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collate769.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(311); }


				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:1326:4: ( ENUM | SET ) LPAREN values+= STRING ( COMMA values+= STRING )* RPAREN ( charset )? ( collate )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1326, 4);
				set770=(IToken)input.LT(1);
				if (input.LA(1)==ENUM||input.LA(1)==SET)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set770));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(1329, 3);
				LPAREN771=(IToken)Match(input,LPAREN,Follow._LPAREN_in_data_type11442); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN771_tree = (object)adaptor.Create(LPAREN771);
				adaptor.AddChild(root_0, LPAREN771_tree);
				}
				DebugLocation(1329, 16);
				values=(IToken)Match(input,STRING,Follow._STRING_in_data_type11446); if (state.failed) return retval;
				if (state.backtracking == 0) {
				values_tree = (object)adaptor.Create(values);
				adaptor.AddChild(root_0, values_tree);
				}
				if (list_values==null) list_values=new List<IToken>();
				list_values.Add(values);

				DebugLocation(1329, 25);
				// MySQL51Parser.g3:1329:25: ( COMMA values+= STRING )*
				try { DebugEnterSubRule(312);
				while (true)
				{
					int alt312=2;
					try { DebugEnterDecision(312, false);
					int LA312_0 = input.LA(1);

					if ((LA312_0==COMMA))
					{
						alt312 = 1;
					}


					} finally { DebugExitDecision(312); }
					switch ( alt312 )
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1329:26: COMMA values+= STRING
						{
						DebugLocation(1329, 26);
						COMMA772=(IToken)Match(input,COMMA,Follow._COMMA_in_data_type11449); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA772_tree = (object)adaptor.Create(COMMA772);
						adaptor.AddChild(root_0, COMMA772_tree);
						}
						DebugLocation(1329, 38);
						values=(IToken)Match(input,STRING,Follow._STRING_in_data_type11453); if (state.failed) return retval;
						if (state.backtracking == 0) {
						values_tree = (object)adaptor.Create(values);
						adaptor.AddChild(root_0, values_tree);
						}
						if (list_values==null) list_values=new List<IToken>();
						list_values.Add(values);


						}
						break;

					default:
						goto loop312;
					}
				}

				loop312:
					;

				} finally { DebugExitSubRule(312); }

				DebugLocation(1329, 49);
				RPAREN773=(IToken)Match(input,RPAREN,Follow._RPAREN_in_data_type11457); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN773_tree = (object)adaptor.Create(RPAREN773);
				adaptor.AddChild(root_0, RPAREN773_tree);
				}
				DebugLocation(1330, 3);
				// MySQL51Parser.g3:1330:3: ( charset )?
				int alt313=2;
				try { DebugEnterSubRule(313);
				try { DebugEnterDecision(313, false);
				int LA313_0 = input.LA(1);

				if ((LA313_0==CHARACTER))
				{
					alt313 = 1;
				}
				} finally { DebugExitDecision(313); }
				switch (alt313)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1330:4: charset
					{
					DebugLocation(1330, 4);
					PushFollow(Follow._charset_in_data_type11463);
					charset774=charset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, charset774.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(313); }

				DebugLocation(1331, 3);
				// MySQL51Parser.g3:1331:3: ( collate )?
				int alt314=2;
				try { DebugEnterSubRule(314);
				try { DebugEnterDecision(314, false);
				int LA314_0 = input.LA(1);

				if ((LA314_0==COLLATE))
				{
					alt314 = 1;
				}
				} finally { DebugExitDecision(314); }
				switch (alt314)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1331:4: collate
					{
					DebugLocation(1331, 4);
					PushFollow(Follow._collate_in_data_type11471);
					collate775=collate();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collate775.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(314); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_type", 98);
			LeaveRule("data_type", 98);
			LeaveRule_data_type();
		}
		DebugLocation(1332, 1);
		} finally { DebugExitRule(GrammarFileName, "data_type"); }
		return retval;

	}
	// $ANTLR end "data_type"

	private sealed partial class charset_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public charset_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_charset();
	partial void LeaveRule_charset();

	// $ANTLR start "charset"
	// MySQL51Parser.g3:1334:1: charset : CHARACTER SET ( ID | STRING ) ;
	[GrammarRule("charset")]
	private MySQL51Parser.charset_return charset()
	{
		EnterRule_charset();
		EnterRule("charset", 99);
		TraceIn("charset", 99);
		MySQL51Parser.charset_return retval = new MySQL51Parser.charset_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CHARACTER776 = default(IToken);
		IToken SET777 = default(IToken);
		IToken set778 = default(IToken);

		object CHARACTER776_tree = default(object);
		object SET777_tree = default(object);
		object set778_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "charset");
		DebugLocation(1334, 1);
		try
		{
			// MySQL51Parser.g3:1335:2: ( CHARACTER SET ( ID | STRING ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1335:4: CHARACTER SET ( ID | STRING )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1335, 4);
			CHARACTER776=(IToken)Match(input,CHARACTER,Follow._CHARACTER_in_charset11485); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER776_tree = (object)adaptor.Create(CHARACTER776);
			adaptor.AddChild(root_0, CHARACTER776_tree);
			}
			DebugLocation(1335, 14);
			SET777=(IToken)Match(input,SET,Follow._SET_in_charset11487); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SET777_tree = (object)adaptor.Create(SET777);
			adaptor.AddChild(root_0, SET777_tree);
			}
			DebugLocation(1336, 3);
			set778=(IToken)input.LT(1);
			if (input.LA(1)==ID||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set778));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("charset", 99);
			LeaveRule("charset", 99);
			LeaveRule_charset();
		}
		DebugLocation(1339, 1);
		} finally { DebugExitRule(GrammarFileName, "charset"); }
		return retval;

	}
	// $ANTLR end "charset"

	private sealed partial class collate_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collate_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_collate();
	partial void LeaveRule_collate();

	// $ANTLR start "collate"
	// MySQL51Parser.g3:1341:1: collate : COLLATE ( ID | STRING ) ;
	[GrammarRule("collate")]
	private MySQL51Parser.collate_return collate()
	{
		EnterRule_collate();
		EnterRule("collate", 100);
		TraceIn("collate", 100);
		MySQL51Parser.collate_return retval = new MySQL51Parser.collate_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COLLATE779 = default(IToken);
		IToken set780 = default(IToken);

		object COLLATE779_tree = default(object);
		object set780_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collate");
		DebugLocation(1341, 1);
		try
		{
			// MySQL51Parser.g3:1342:2: ( COLLATE ( ID | STRING ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1342:4: COLLATE ( ID | STRING )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1342, 4);
			COLLATE779=(IToken)Match(input,COLLATE,Follow._COLLATE_in_collate11516); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLLATE779_tree = (object)adaptor.Create(COLLATE779);
			adaptor.AddChild(root_0, COLLATE779_tree);
			}
			DebugLocation(1343, 3);
			set780=(IToken)input.LT(1);
			if (input.LA(1)==ID||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set780));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collate", 100);
			LeaveRule("collate", 100);
			LeaveRule_collate();
		}
		DebugLocation(1346, 1);
		} finally { DebugExitRule(GrammarFileName, "collate"); }
		return retval;

	}
	// $ANTLR end "collate"

	private sealed partial class reference_definition_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public reference_definition_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_reference_definition();
	partial void LeaveRule_reference_definition();

	// $ANTLR start "reference_definition"
	// MySQL51Parser.g3:1348:1: reference_definition : REFERENCES simple_table_ref_no_alias LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( MATCH FULL | MATCH PARTIAL | MATCH SIMPLE )? ( ON DELETE reference_option )? ( ON UPDATE reference_option )? ;
	[GrammarRule("reference_definition")]
	private MySQL51Parser.reference_definition_return reference_definition()
	{
		EnterRule_reference_definition();
		EnterRule("reference_definition", 101);
		TraceIn("reference_definition", 101);
		MySQL51Parser.reference_definition_return retval = new MySQL51Parser.reference_definition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken REFERENCES781 = default(IToken);
		IToken LPAREN783 = default(IToken);
		IToken COMMA785 = default(IToken);
		IToken RPAREN787 = default(IToken);
		IToken MATCH788 = default(IToken);
		IToken FULL789 = default(IToken);
		IToken MATCH790 = default(IToken);
		IToken PARTIAL791 = default(IToken);
		IToken MATCH792 = default(IToken);
		IToken SIMPLE793 = default(IToken);
		IToken ON794 = default(IToken);
		IToken DELETE795 = default(IToken);
		IToken ON797 = default(IToken);
		IToken UPDATE798 = default(IToken);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias782 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.index_col_name_return index_col_name784 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.index_col_name_return index_col_name786 = default(MySQL51Parser.index_col_name_return);
		MySQL51Parser.reference_option_return reference_option796 = default(MySQL51Parser.reference_option_return);
		MySQL51Parser.reference_option_return reference_option799 = default(MySQL51Parser.reference_option_return);

		object REFERENCES781_tree = default(object);
		object LPAREN783_tree = default(object);
		object COMMA785_tree = default(object);
		object RPAREN787_tree = default(object);
		object MATCH788_tree = default(object);
		object FULL789_tree = default(object);
		object MATCH790_tree = default(object);
		object PARTIAL791_tree = default(object);
		object MATCH792_tree = default(object);
		object SIMPLE793_tree = default(object);
		object ON794_tree = default(object);
		object DELETE795_tree = default(object);
		object ON797_tree = default(object);
		object UPDATE798_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "reference_definition");
		DebugLocation(1348, 1);
		try
		{
			// MySQL51Parser.g3:1349:2: ( REFERENCES simple_table_ref_no_alias LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( MATCH FULL | MATCH PARTIAL | MATCH SIMPLE )? ( ON DELETE reference_option )? ( ON UPDATE reference_option )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1349:4: REFERENCES simple_table_ref_no_alias LPAREN index_col_name ( COMMA index_col_name )* RPAREN ( MATCH FULL | MATCH PARTIAL | MATCH SIMPLE )? ( ON DELETE reference_option )? ( ON UPDATE reference_option )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1349, 4);
			REFERENCES781=(IToken)Match(input,REFERENCES,Follow._REFERENCES_in_reference_definition11547); if (state.failed) return retval;
			if (state.backtracking == 0) {
			REFERENCES781_tree = (object)adaptor.Create(REFERENCES781);
			adaptor.AddChild(root_0, REFERENCES781_tree);
			}
			DebugLocation(1349, 15);
			PushFollow(Follow._simple_table_ref_no_alias_in_reference_definition11549);
			simple_table_ref_no_alias782=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias782.Tree);
			DebugLocation(1349, 41);
			LPAREN783=(IToken)Match(input,LPAREN,Follow._LPAREN_in_reference_definition11551); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN783_tree = (object)adaptor.Create(LPAREN783);
			adaptor.AddChild(root_0, LPAREN783_tree);
			}
			DebugLocation(1349, 48);
			PushFollow(Follow._index_col_name_in_reference_definition11553);
			index_col_name784=index_col_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name784.Tree);
			DebugLocation(1349, 63);
			// MySQL51Parser.g3:1349:63: ( COMMA index_col_name )*
			try { DebugEnterSubRule(316);
			while (true)
			{
				int alt316=2;
				try { DebugEnterDecision(316, false);
				int LA316_0 = input.LA(1);

				if ((LA316_0==COMMA))
				{
					alt316 = 1;
				}


				} finally { DebugExitDecision(316); }
				switch ( alt316 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1349:65: COMMA index_col_name
					{
					DebugLocation(1349, 65);
					COMMA785=(IToken)Match(input,COMMA,Follow._COMMA_in_reference_definition11557); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA785_tree = (object)adaptor.Create(COMMA785);
					adaptor.AddChild(root_0, COMMA785_tree);
					}
					DebugLocation(1349, 71);
					PushFollow(Follow._index_col_name_in_reference_definition11559);
					index_col_name786=index_col_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, index_col_name786.Tree);

					}
					break;

				default:
					goto loop316;
				}
			}

			loop316:
				;

			} finally { DebugExitSubRule(316); }

			DebugLocation(1349, 89);
			RPAREN787=(IToken)Match(input,RPAREN,Follow._RPAREN_in_reference_definition11564); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN787_tree = (object)adaptor.Create(RPAREN787);
			adaptor.AddChild(root_0, RPAREN787_tree);
			}
			DebugLocation(1350, 3);
			// MySQL51Parser.g3:1350:3: ( MATCH FULL | MATCH PARTIAL | MATCH SIMPLE )?
			int alt317=4;
			try { DebugEnterSubRule(317);
			try { DebugEnterDecision(317, false);
			int LA317_0 = input.LA(1);

			if ((LA317_0==MATCH))
			{
				switch (input.LA(2))
				{
				case FULL:
					{
					alt317 = 1;
					}
					break;
				case PARTIAL:
					{
					alt317 = 2;
					}
					break;
				case SIMPLE:
					{
					alt317 = 3;
					}
					break;
				}

			}
			} finally { DebugExitDecision(317); }
			switch (alt317)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1350:5: MATCH FULL
				{
				DebugLocation(1350, 5);
				MATCH788=(IToken)Match(input,MATCH,Follow._MATCH_in_reference_definition11570); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MATCH788_tree = (object)adaptor.Create(MATCH788);
				adaptor.AddChild(root_0, MATCH788_tree);
				}
				DebugLocation(1350, 11);
				FULL789=(IToken)Match(input,FULL,Follow._FULL_in_reference_definition11572); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FULL789_tree = (object)adaptor.Create(FULL789);
				adaptor.AddChild(root_0, FULL789_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1350:18: MATCH PARTIAL
				{
				DebugLocation(1350, 18);
				MATCH790=(IToken)Match(input,MATCH,Follow._MATCH_in_reference_definition11576); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MATCH790_tree = (object)adaptor.Create(MATCH790);
				adaptor.AddChild(root_0, MATCH790_tree);
				}
				DebugLocation(1350, 24);
				PARTIAL791=(IToken)Match(input,PARTIAL,Follow._PARTIAL_in_reference_definition11578); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PARTIAL791_tree = (object)adaptor.Create(PARTIAL791);
				adaptor.AddChild(root_0, PARTIAL791_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1350:34: MATCH SIMPLE
				{
				DebugLocation(1350, 34);
				MATCH792=(IToken)Match(input,MATCH,Follow._MATCH_in_reference_definition11582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MATCH792_tree = (object)adaptor.Create(MATCH792);
				adaptor.AddChild(root_0, MATCH792_tree);
				}
				DebugLocation(1350, 40);
				SIMPLE793=(IToken)Match(input,SIMPLE,Follow._SIMPLE_in_reference_definition11584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SIMPLE793_tree = (object)adaptor.Create(SIMPLE793);
				adaptor.AddChild(root_0, SIMPLE793_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(317); }

			DebugLocation(1351, 3);
			// MySQL51Parser.g3:1351:3: ( ON DELETE reference_option )?
			int alt318=2;
			try { DebugEnterSubRule(318);
			try { DebugEnterDecision(318, false);
			int LA318_0 = input.LA(1);

			if ((LA318_0==ON))
			{
				int LA318_1 = input.LA(2);

				if ((LA318_1==DELETE))
				{
					alt318 = 1;
				}
			}
			} finally { DebugExitDecision(318); }
			switch (alt318)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1351:5: ON DELETE reference_option
				{
				DebugLocation(1351, 5);
				ON794=(IToken)Match(input,ON,Follow._ON_in_reference_definition11593); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ON794_tree = (object)adaptor.Create(ON794);
				adaptor.AddChild(root_0, ON794_tree);
				}
				DebugLocation(1351, 8);
				DELETE795=(IToken)Match(input,DELETE,Follow._DELETE_in_reference_definition11595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DELETE795_tree = (object)adaptor.Create(DELETE795);
				adaptor.AddChild(root_0, DELETE795_tree);
				}
				DebugLocation(1351, 15);
				PushFollow(Follow._reference_option_in_reference_definition11597);
				reference_option796=reference_option();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference_option796.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(318); }

			DebugLocation(1352, 3);
			// MySQL51Parser.g3:1352:3: ( ON UPDATE reference_option )?
			int alt319=2;
			try { DebugEnterSubRule(319);
			try { DebugEnterDecision(319, false);
			int LA319_0 = input.LA(1);

			if ((LA319_0==ON))
			{
				alt319 = 1;
			}
			} finally { DebugExitDecision(319); }
			switch (alt319)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1352:5: ON UPDATE reference_option
				{
				DebugLocation(1352, 5);
				ON797=(IToken)Match(input,ON,Follow._ON_in_reference_definition11606); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ON797_tree = (object)adaptor.Create(ON797);
				adaptor.AddChild(root_0, ON797_tree);
				}
				DebugLocation(1352, 8);
				UPDATE798=(IToken)Match(input,UPDATE,Follow._UPDATE_in_reference_definition11608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UPDATE798_tree = (object)adaptor.Create(UPDATE798);
				adaptor.AddChild(root_0, UPDATE798_tree);
				}
				DebugLocation(1352, 15);
				PushFollow(Follow._reference_option_in_reference_definition11610);
				reference_option799=reference_option();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference_option799.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(319); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference_definition", 101);
			LeaveRule("reference_definition", 101);
			LeaveRule_reference_definition();
		}
		DebugLocation(1353, 1);
		} finally { DebugExitRule(GrammarFileName, "reference_definition"); }
		return retval;

	}
	// $ANTLR end "reference_definition"

	private sealed partial class reference_option_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public reference_option_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_reference_option();
	partial void LeaveRule_reference_option();

	// $ANTLR start "reference_option"
	// MySQL51Parser.g3:1355:1: reference_option : ( RESTRICT | CASCADE | SET NULL | NO ACTION );
	[GrammarRule("reference_option")]
	private MySQL51Parser.reference_option_return reference_option()
	{
		EnterRule_reference_option();
		EnterRule("reference_option", 102);
		TraceIn("reference_option", 102);
		MySQL51Parser.reference_option_return retval = new MySQL51Parser.reference_option_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RESTRICT800 = default(IToken);
		IToken CASCADE801 = default(IToken);
		IToken SET802 = default(IToken);
		IToken NULL803 = default(IToken);
		IToken NO804 = default(IToken);
		IToken ACTION805 = default(IToken);

		object RESTRICT800_tree = default(object);
		object CASCADE801_tree = default(object);
		object SET802_tree = default(object);
		object NULL803_tree = default(object);
		object NO804_tree = default(object);
		object ACTION805_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "reference_option");
		DebugLocation(1355, 1);
		try
		{
			// MySQL51Parser.g3:1356:2: ( RESTRICT | CASCADE | SET NULL | NO ACTION )
			int alt320=4;
			try { DebugEnterDecision(320, false);
			switch (input.LA(1))
			{
			case RESTRICT:
				{
				alt320 = 1;
				}
				break;
			case CASCADE:
				{
				alt320 = 2;
				}
				break;
			case SET:
				{
				alt320 = 3;
				}
				break;
			case NO:
				{
				alt320 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 320, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(320); }
			switch (alt320)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1356:4: RESTRICT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1356, 4);
				RESTRICT800=(IToken)Match(input,RESTRICT,Follow._RESTRICT_in_reference_option11624); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RESTRICT800_tree = (object)adaptor.Create(RESTRICT800);
				adaptor.AddChild(root_0, RESTRICT800_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1357:4: CASCADE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1357, 4);
				CASCADE801=(IToken)Match(input,CASCADE,Follow._CASCADE_in_reference_option11629); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CASCADE801_tree = (object)adaptor.Create(CASCADE801);
				adaptor.AddChild(root_0, CASCADE801_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1358:4: SET NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1358, 4);
				SET802=(IToken)Match(input,SET,Follow._SET_in_reference_option11634); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SET802_tree = (object)adaptor.Create(SET802);
				adaptor.AddChild(root_0, SET802_tree);
				}
				DebugLocation(1358, 8);
				NULL803=(IToken)Match(input,NULL,Follow._NULL_in_reference_option11636); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NULL803_tree = (object)adaptor.Create(NULL803);
				adaptor.AddChild(root_0, NULL803_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1359:4: NO ACTION
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1359, 4);
				NO804=(IToken)Match(input,NO,Follow._NO_in_reference_option11641); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NO804_tree = (object)adaptor.Create(NO804);
				adaptor.AddChild(root_0, NO804_tree);
				}
				DebugLocation(1359, 7);
				ACTION805=(IToken)Match(input,ACTION,Follow._ACTION_in_reference_option11643); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ACTION805_tree = (object)adaptor.Create(ACTION805);
				adaptor.AddChild(root_0, ACTION805_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference_option", 102);
			LeaveRule("reference_option", 102);
			LeaveRule_reference_option();
		}
		DebugLocation(1360, 1);
		} finally { DebugExitRule(GrammarFileName, "reference_option"); }
		return retval;

	}
	// $ANTLR end "reference_option"

	private sealed partial class index_col_name_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public index_col_name_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_index_col_name();
	partial void LeaveRule_index_col_name();

	// $ANTLR start "index_col_name"
	// MySQL51Parser.g3:1362:1: index_col_name : ident ( LPAREN length= INT_NUMBER RPAREN )? ( ASC | DESC )? ;
	[GrammarRule("index_col_name")]
	private MySQL51Parser.index_col_name_return index_col_name()
	{
		EnterRule_index_col_name();
		EnterRule("index_col_name", 103);
		TraceIn("index_col_name", 103);
		MySQL51Parser.index_col_name_return retval = new MySQL51Parser.index_col_name_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken length = default(IToken);
		IToken LPAREN807 = default(IToken);
		IToken RPAREN808 = default(IToken);
		IToken set809 = default(IToken);
		MySQL51Parser.ident_return ident806 = default(MySQL51Parser.ident_return);

		object length_tree = default(object);
		object LPAREN807_tree = default(object);
		object RPAREN808_tree = default(object);
		object set809_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "index_col_name");
		DebugLocation(1362, 1);
		try
		{
			// MySQL51Parser.g3:1363:2: ( ident ( LPAREN length= INT_NUMBER RPAREN )? ( ASC | DESC )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1363:4: ident ( LPAREN length= INT_NUMBER RPAREN )? ( ASC | DESC )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1363, 4);
			PushFollow(Follow._ident_in_index_col_name11654);
			ident806=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident806.Tree);
			DebugLocation(1363, 10);
			// MySQL51Parser.g3:1363:10: ( LPAREN length= INT_NUMBER RPAREN )?
			int alt321=2;
			try { DebugEnterSubRule(321);
			try { DebugEnterDecision(321, false);
			int LA321_0 = input.LA(1);

			if ((LA321_0==LPAREN))
			{
				alt321 = 1;
			}
			} finally { DebugExitDecision(321); }
			switch (alt321)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1363:12: LPAREN length= INT_NUMBER RPAREN
				{
				DebugLocation(1363, 12);
				LPAREN807=(IToken)Match(input,LPAREN,Follow._LPAREN_in_index_col_name11658); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN807_tree = (object)adaptor.Create(LPAREN807);
				adaptor.AddChild(root_0, LPAREN807_tree);
				}
				DebugLocation(1363, 25);
				length=(IToken)Match(input,INT_NUMBER,Follow._INT_NUMBER_in_index_col_name11662); if (state.failed) return retval;
				if (state.backtracking == 0) {
				length_tree = (object)adaptor.Create(length);
				adaptor.AddChild(root_0, length_tree);
				}
				DebugLocation(1363, 37);
				RPAREN808=(IToken)Match(input,RPAREN,Follow._RPAREN_in_index_col_name11664); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN808_tree = (object)adaptor.Create(RPAREN808);
				adaptor.AddChild(root_0, RPAREN808_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(321); }

			DebugLocation(1363, 47);
			// MySQL51Parser.g3:1363:47: ( ASC | DESC )?
			int alt322=2;
			try { DebugEnterSubRule(322);
			try { DebugEnterDecision(322, false);
			int LA322_0 = input.LA(1);

			if ((LA322_0==ASC||LA322_0==DESC))
			{
				alt322 = 1;
			}
			} finally { DebugExitDecision(322); }
			switch (alt322)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:
				{
				DebugLocation(1363, 47);
				set809=(IToken)input.LT(1);
				if (input.LA(1)==ASC||input.LA(1)==DESC)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set809));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(322); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("index_col_name", 103);
			LeaveRule("index_col_name", 103);
			LeaveRule_index_col_name();
		}
		DebugLocation(1364, 1);
		} finally { DebugExitRule(GrammarFileName, "index_col_name"); }
		return retval;

	}
	// $ANTLR end "index_col_name"

	private sealed partial class index_type_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public index_type_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_index_type();
	partial void LeaveRule_index_type();

	// $ANTLR start "index_type"
	// MySQL51Parser.g3:1366:1: index_type : ( USING ( BTREE | HASH ) ) ;
	[GrammarRule("index_type")]
	private MySQL51Parser.index_type_return index_type()
	{
		EnterRule_index_type();
		EnterRule("index_type", 104);
		TraceIn("index_type", 104);
		MySQL51Parser.index_type_return retval = new MySQL51Parser.index_type_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken USING810 = default(IToken);
		IToken set811 = default(IToken);

		object USING810_tree = default(object);
		object set811_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "index_type");
		DebugLocation(1366, 1);
		try
		{
			// MySQL51Parser.g3:1367:2: ( ( USING ( BTREE | HASH ) ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1367:4: ( USING ( BTREE | HASH ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1367, 4);
			// MySQL51Parser.g3:1367:4: ( USING ( BTREE | HASH ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1367:6: USING ( BTREE | HASH )
			{
			DebugLocation(1367, 6);
			USING810=(IToken)Match(input,USING,Follow._USING_in_index_type11691); if (state.failed) return retval;
			if (state.backtracking == 0) {
			USING810_tree = (object)adaptor.Create(USING810);
			adaptor.AddChild(root_0, USING810_tree);
			}
			DebugLocation(1367, 12);
			set811=(IToken)input.LT(1);
			if (input.LA(1)==BTREE||input.LA(1)==HASH)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set811));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("index_type", 104);
			LeaveRule("index_type", 104);
			LeaveRule_index_type();
		}
		DebugLocation(1368, 1);
		} finally { DebugExitRule(GrammarFileName, "index_type"); }
		return retval;

	}
	// $ANTLR end "index_type"

	private sealed partial class ifnull_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ifnull_expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_ifnull_expr();
	partial void LeaveRule_ifnull_expr();

	// $ANTLR start "ifnull_expr"
	// MySQL51Parser.g3:1372:1: ifnull_expr : IFNULL LPAREN expr COMMA expr RPAREN ;
	[GrammarRule("ifnull_expr")]
	private MySQL51Parser.ifnull_expr_return ifnull_expr()
	{
		EnterRule_ifnull_expr();
		EnterRule("ifnull_expr", 105);
		TraceIn("ifnull_expr", 105);
		MySQL51Parser.ifnull_expr_return retval = new MySQL51Parser.ifnull_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IFNULL812 = default(IToken);
		IToken LPAREN813 = default(IToken);
		IToken COMMA815 = default(IToken);
		IToken RPAREN817 = default(IToken);
		MySQL51Parser.expr_return expr814 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr816 = default(MySQL51Parser.expr_return);

		object IFNULL812_tree = default(object);
		object LPAREN813_tree = default(object);
		object COMMA815_tree = default(object);
		object RPAREN817_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "ifnull_expr");
		DebugLocation(1372, 1);
		try
		{
			// MySQL51Parser.g3:1373:2: ( IFNULL LPAREN expr COMMA expr RPAREN )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1373:4: IFNULL LPAREN expr COMMA expr RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1373, 4);
			IFNULL812=(IToken)Match(input,IFNULL,Follow._IFNULL_in_ifnull_expr11716); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IFNULL812_tree = (object)adaptor.Create(IFNULL812);
			adaptor.AddChild(root_0, IFNULL812_tree);
			}
			DebugLocation(1373, 11);
			LPAREN813=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifnull_expr11718); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN813_tree = (object)adaptor.Create(LPAREN813);
			adaptor.AddChild(root_0, LPAREN813_tree);
			}
			DebugLocation(1373, 18);
			PushFollow(Follow._expr_in_ifnull_expr11720);
			expr814=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr814.Tree);
			DebugLocation(1373, 23);
			COMMA815=(IToken)Match(input,COMMA,Follow._COMMA_in_ifnull_expr11722); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA815_tree = (object)adaptor.Create(COMMA815);
			adaptor.AddChild(root_0, COMMA815_tree);
			}
			DebugLocation(1373, 29);
			PushFollow(Follow._expr_in_ifnull_expr11724);
			expr816=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr816.Tree);
			DebugLocation(1373, 34);
			RPAREN817=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifnull_expr11726); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN817_tree = (object)adaptor.Create(RPAREN817);
			adaptor.AddChild(root_0, RPAREN817_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifnull_expr", 105);
			LeaveRule("ifnull_expr", 105);
			LeaveRule_ifnull_expr();
		}
		DebugLocation(1374, 1);
		} finally { DebugExitRule(GrammarFileName, "ifnull_expr"); }
		return retval;

	}
	// $ANTLR end "ifnull_expr"

	private sealed partial class nullif_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public nullif_expr_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_nullif_expr();
	partial void LeaveRule_nullif_expr();

	// $ANTLR start "nullif_expr"
	// MySQL51Parser.g3:1376:1: nullif_expr : NULLIF LPAREN expr COMMA expr RPAREN ;
	[GrammarRule("nullif_expr")]
	private MySQL51Parser.nullif_expr_return nullif_expr()
	{
		EnterRule_nullif_expr();
		EnterRule("nullif_expr", 106);
		TraceIn("nullif_expr", 106);
		MySQL51Parser.nullif_expr_return retval = new MySQL51Parser.nullif_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NULLIF818 = default(IToken);
		IToken LPAREN819 = default(IToken);
		IToken COMMA821 = default(IToken);
		IToken RPAREN823 = default(IToken);
		MySQL51Parser.expr_return expr820 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr822 = default(MySQL51Parser.expr_return);

		object NULLIF818_tree = default(object);
		object LPAREN819_tree = default(object);
		object COMMA821_tree = default(object);
		object RPAREN823_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "nullif_expr");
		DebugLocation(1376, 1);
		try
		{
			// MySQL51Parser.g3:1377:2: ( NULLIF LPAREN expr COMMA expr RPAREN )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1377:4: NULLIF LPAREN expr COMMA expr RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1377, 4);
			NULLIF818=(IToken)Match(input,NULLIF,Follow._NULLIF_in_nullif_expr11737); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULLIF818_tree = (object)adaptor.Create(NULLIF818);
			adaptor.AddChild(root_0, NULLIF818_tree);
			}
			DebugLocation(1377, 11);
			LPAREN819=(IToken)Match(input,LPAREN,Follow._LPAREN_in_nullif_expr11739); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN819_tree = (object)adaptor.Create(LPAREN819);
			adaptor.AddChild(root_0, LPAREN819_tree);
			}
			DebugLocation(1377, 18);
			PushFollow(Follow._expr_in_nullif_expr11741);
			expr820=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr820.Tree);
			DebugLocation(1377, 23);
			COMMA821=(IToken)Match(input,COMMA,Follow._COMMA_in_nullif_expr11743); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMA821_tree = (object)adaptor.Create(COMMA821);
			adaptor.AddChild(root_0, COMMA821_tree);
			}
			DebugLocation(1377, 29);
			PushFollow(Follow._expr_in_nullif_expr11745);
			expr822=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr822.Tree);
			DebugLocation(1377, 34);
			RPAREN823=(IToken)Match(input,RPAREN,Follow._RPAREN_in_nullif_expr11747); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN823_tree = (object)adaptor.Create(RPAREN823);
			adaptor.AddChild(root_0, RPAREN823_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullif_expr", 106);
			LeaveRule("nullif_expr", 106);
			LeaveRule_nullif_expr();
		}
		DebugLocation(1378, 1);
		} finally { DebugExitRule(GrammarFileName, "nullif_expr"); }
		return retval;

	}
	// $ANTLR end "nullif_expr"

	private sealed partial class functionCall_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionCall_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();

	// $ANTLR start "functionCall"
	// MySQL51Parser.g3:1381:1: functionCall : ( AVG LPAREN expr RPAREN -> ^( FUNC ^( AVG expr ) ) | BIT_AND LPAREN expr RPAREN -> ^( FUNC ^( BIT_AND expr ) ) | BIT_OR LPAREN expr RPAREN -> ^( FUNC ^( BIT_OR expr ) ) | BIT_XOR LPAREN expr RPAREN -> ^( FUNC ^( BIT_XOR expr ) ) | CAST LPAREN expr AS cast_data_type RPAREN -> ^( FUNC ^( CAST expr cast_data_type ) ) | CONCAT LPAREN exprList RPAREN -> ^( FUNC ^( CONCAT exprList ) ) | COUNT LPAREN MULT RPAREN -> ^( FUNC ^( COUNT_STAR[$MULT] ) ) | COUNT LPAREN expr RPAREN -> ^( FUNC ^( COUNT expr ) ) | COUNT LPAREN DISTINCT exprList RPAREN -> ^( FUNC ^( COUNT exprList DISTINCT ) ) | DATE_ADD LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_ADD $date $interval timeUnit ) ) | DATE_SUB LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_SUB $date $interval timeUnit ) ) | IFNULL LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( IFNULL $expr1 $expr2) ) | GROUP_CONCAT LPAREN ( DISTINCT )? exprList ( order_by )? ( SEPARATOR text_string )? RPAREN -> ^( FUNC ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? ) ) | MAX LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MAX expr ( DISTINCT )? ) ) | MID LPAREN expr COMMA expr COMMA expr RPAREN -> ^( FUNC ^( MID ( expr )+ ) ) | MIN LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MIN expr ( DISTINCT )? ) ) | NULLIF LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( NULLIF $expr1 $expr2) ) | SESSION_USER LPAREN RPAREN -> ^( FUNC ^( SESSION_USER LPAREN ) ) | STD LPAREN expr RPAREN -> ^( FUNC ^( STD expr ) ) | STDDEV LPAREN expr RPAREN -> ^( FUNC ^( STDDEV expr ) ) | STDDEV_POP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_POP expr ) ) | STDDEV_SAMP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_SAMP expr ) ) | SUM LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( SUM expr ( DISTINCT )? ) ) | SYSTEM_USER LPAREN RPAREN -> ^( FUNC ^( SYSTEM_USER LPAREN ) ) | TRIM LPAREN ( (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) ) |str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) ) ) RPAREN | VARIANCE LPAREN expr RPAREN -> ^( FUNC ^( VARIANCE expr ) ) | VAR_POP LPAREN expr RPAREN -> ^( FUNC ^( VAR_POP expr ) ) | VAR_SAMP LPAREN expr RPAREN -> ^( FUNC ^( VAR_SAMP expr ) ) | ADDDATE LPAREN date= expr COMMA ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) ) | CURDATE LPAREN RPAREN -> ^( FUNC ^( CURDATE LPAREN ) ) | CURRENT_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_DATE ( LPAREN )? ) ) | CURTIME LPAREN RPAREN -> ^( FUNC ^( CURTIME LPAREN ) ) | CURRENT_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIME ( LPAREN )? ) ) | EXTRACT LPAREN timeUnit FROM expr RPAREN -> ^( FUNC ^( EXTRACT timeUnit expr ) ) | GET_FORMAT LPAREN (type= DATE |type= TIME |type= DATETIME ) locale= expr RPAREN -> ^( FUNC ^( GET_FORMAT $type $locale) ) | NOW LPAREN RPAREN -> ^( FUNC ^( NOW LPAREN ) ) | CURRENT_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIMESTAMP ( LPAREN )? ) ) | POSITION LPAREN substr= expr IN str= expr RPAREN -> ^( FUNC ^( POSITION $substr $str) ) | SUBDATE LPAREN date= expr COMMA (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) ) RPAREN | (funcName= SUBSTR |funcName= SUBSTRING ) LPAREN str= expr ( COMMA position= expr COMMA (len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ) ) | FROM position= expr ( FOR len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) ) ) RPAREN | SYSDATE LPAREN RPAREN -> ^( FUNC ^( SYSDATE LPAREN ) ) | TIMESTAMP_ADD LPAREN timestampUnit interval= expr date= expr RPAREN -> ^( FUNC ^( TIMESTAMP_ADD $date $interval timestampUnit ) ) | TIMESTAMP_DIFF LPAREN timestampUnit date1= expr date2= expr RPAREN -> ^( FUNC ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit ) ) | UTC_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_DATE ( LPAREN )? ) ) | UTC_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIMESTAMP ( LPAREN )? ) ) | UTC_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIME ( LPAREN )? ) ) | functionCall_conflicts | functionCall_reserved |name= ID args= parenOptExprList -> ^( FUNC ^( $name $args) ) );
	[GrammarRule("functionCall")]
	private MySQL51Parser.functionCall_return functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 107);
		TraceIn("functionCall", 107);
		MySQL51Parser.functionCall_return retval = new MySQL51Parser.functionCall_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken pos = default(IToken);
		IToken type = default(IToken);
		IToken funcName = default(IToken);
		IToken name = default(IToken);
		IToken AVG824 = default(IToken);
		IToken LPAREN825 = default(IToken);
		IToken RPAREN827 = default(IToken);
		IToken BIT_AND828 = default(IToken);
		IToken LPAREN829 = default(IToken);
		IToken RPAREN831 = default(IToken);
		IToken BIT_OR832 = default(IToken);
		IToken LPAREN833 = default(IToken);
		IToken RPAREN835 = default(IToken);
		IToken BIT_XOR836 = default(IToken);
		IToken LPAREN837 = default(IToken);
		IToken RPAREN839 = default(IToken);
		IToken CAST840 = default(IToken);
		IToken LPAREN841 = default(IToken);
		IToken AS843 = default(IToken);
		IToken RPAREN845 = default(IToken);
		IToken CONCAT846 = default(IToken);
		IToken LPAREN847 = default(IToken);
		IToken RPAREN849 = default(IToken);
		IToken COUNT850 = default(IToken);
		IToken LPAREN851 = default(IToken);
		IToken MULT852 = default(IToken);
		IToken RPAREN853 = default(IToken);
		IToken COUNT854 = default(IToken);
		IToken LPAREN855 = default(IToken);
		IToken RPAREN857 = default(IToken);
		IToken COUNT858 = default(IToken);
		IToken LPAREN859 = default(IToken);
		IToken DISTINCT860 = default(IToken);
		IToken RPAREN862 = default(IToken);
		IToken DATE_ADD863 = default(IToken);
		IToken LPAREN864 = default(IToken);
		IToken COMMA865 = default(IToken);
		IToken INTERVAL866 = default(IToken);
		IToken RPAREN868 = default(IToken);
		IToken DATE_SUB869 = default(IToken);
		IToken LPAREN870 = default(IToken);
		IToken COMMA871 = default(IToken);
		IToken INTERVAL872 = default(IToken);
		IToken RPAREN874 = default(IToken);
		IToken IFNULL875 = default(IToken);
		IToken LPAREN876 = default(IToken);
		IToken COMMA877 = default(IToken);
		IToken RPAREN878 = default(IToken);
		IToken GROUP_CONCAT879 = default(IToken);
		IToken LPAREN880 = default(IToken);
		IToken DISTINCT881 = default(IToken);
		IToken SEPARATOR884 = default(IToken);
		IToken RPAREN886 = default(IToken);
		IToken MAX887 = default(IToken);
		IToken LPAREN888 = default(IToken);
		IToken DISTINCT889 = default(IToken);
		IToken RPAREN891 = default(IToken);
		IToken MID892 = default(IToken);
		IToken LPAREN893 = default(IToken);
		IToken COMMA895 = default(IToken);
		IToken COMMA897 = default(IToken);
		IToken RPAREN899 = default(IToken);
		IToken MIN900 = default(IToken);
		IToken LPAREN901 = default(IToken);
		IToken DISTINCT902 = default(IToken);
		IToken RPAREN904 = default(IToken);
		IToken NULLIF905 = default(IToken);
		IToken LPAREN906 = default(IToken);
		IToken COMMA907 = default(IToken);
		IToken RPAREN908 = default(IToken);
		IToken SESSION_USER909 = default(IToken);
		IToken LPAREN910 = default(IToken);
		IToken RPAREN911 = default(IToken);
		IToken STD912 = default(IToken);
		IToken LPAREN913 = default(IToken);
		IToken RPAREN915 = default(IToken);
		IToken STDDEV916 = default(IToken);
		IToken LPAREN917 = default(IToken);
		IToken RPAREN919 = default(IToken);
		IToken STDDEV_POP920 = default(IToken);
		IToken LPAREN921 = default(IToken);
		IToken RPAREN923 = default(IToken);
		IToken STDDEV_SAMP924 = default(IToken);
		IToken LPAREN925 = default(IToken);
		IToken RPAREN927 = default(IToken);
		IToken SUM928 = default(IToken);
		IToken LPAREN929 = default(IToken);
		IToken DISTINCT930 = default(IToken);
		IToken RPAREN932 = default(IToken);
		IToken SYSTEM_USER933 = default(IToken);
		IToken LPAREN934 = default(IToken);
		IToken RPAREN935 = default(IToken);
		IToken TRIM936 = default(IToken);
		IToken LPAREN937 = default(IToken);
		IToken FROM938 = default(IToken);
		IToken FROM939 = default(IToken);
		IToken RPAREN940 = default(IToken);
		IToken VARIANCE941 = default(IToken);
		IToken LPAREN942 = default(IToken);
		IToken RPAREN944 = default(IToken);
		IToken VAR_POP945 = default(IToken);
		IToken LPAREN946 = default(IToken);
		IToken RPAREN948 = default(IToken);
		IToken VAR_SAMP949 = default(IToken);
		IToken LPAREN950 = default(IToken);
		IToken RPAREN952 = default(IToken);
		IToken ADDDATE953 = default(IToken);
		IToken LPAREN954 = default(IToken);
		IToken COMMA955 = default(IToken);
		IToken INTERVAL956 = default(IToken);
		IToken RPAREN958 = default(IToken);
		IToken RPAREN959 = default(IToken);
		IToken CURDATE960 = default(IToken);
		IToken LPAREN961 = default(IToken);
		IToken RPAREN962 = default(IToken);
		IToken CURRENT_DATE963 = default(IToken);
		IToken LPAREN964 = default(IToken);
		IToken RPAREN965 = default(IToken);
		IToken CURTIME966 = default(IToken);
		IToken LPAREN967 = default(IToken);
		IToken RPAREN968 = default(IToken);
		IToken CURRENT_TIME969 = default(IToken);
		IToken LPAREN970 = default(IToken);
		IToken RPAREN971 = default(IToken);
		IToken EXTRACT972 = default(IToken);
		IToken LPAREN973 = default(IToken);
		IToken FROM975 = default(IToken);
		IToken RPAREN977 = default(IToken);
		IToken GET_FORMAT978 = default(IToken);
		IToken LPAREN979 = default(IToken);
		IToken RPAREN980 = default(IToken);
		IToken NOW981 = default(IToken);
		IToken LPAREN982 = default(IToken);
		IToken RPAREN983 = default(IToken);
		IToken CURRENT_TIMESTAMP984 = default(IToken);
		IToken LPAREN985 = default(IToken);
		IToken RPAREN986 = default(IToken);
		IToken POSITION987 = default(IToken);
		IToken LPAREN988 = default(IToken);
		IToken IN989 = default(IToken);
		IToken RPAREN990 = default(IToken);
		IToken SUBDATE991 = default(IToken);
		IToken LPAREN992 = default(IToken);
		IToken COMMA993 = default(IToken);
		IToken INTERVAL994 = default(IToken);
		IToken RPAREN996 = default(IToken);
		IToken LPAREN997 = default(IToken);
		IToken COMMA998 = default(IToken);
		IToken COMMA999 = default(IToken);
		IToken FROM1000 = default(IToken);
		IToken FOR1001 = default(IToken);
		IToken RPAREN1002 = default(IToken);
		IToken SYSDATE1003 = default(IToken);
		IToken LPAREN1004 = default(IToken);
		IToken RPAREN1005 = default(IToken);
		IToken TIMESTAMP_ADD1006 = default(IToken);
		IToken LPAREN1007 = default(IToken);
		IToken RPAREN1009 = default(IToken);
		IToken TIMESTAMP_DIFF1010 = default(IToken);
		IToken LPAREN1011 = default(IToken);
		IToken RPAREN1013 = default(IToken);
		IToken UTC_DATE1014 = default(IToken);
		IToken LPAREN1015 = default(IToken);
		IToken RPAREN1016 = default(IToken);
		IToken UTC_TIMESTAMP1017 = default(IToken);
		IToken LPAREN1018 = default(IToken);
		IToken RPAREN1019 = default(IToken);
		IToken UTC_TIME1020 = default(IToken);
		IToken LPAREN1021 = default(IToken);
		IToken RPAREN1022 = default(IToken);
		MySQL51Parser.expr_return date = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return interval = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr2 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return remstr = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return str = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return str1 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return str2 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return days = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return locale = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return substr = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return position = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return len = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return date1 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return date2 = default(MySQL51Parser.expr_return);
		MySQL51Parser.parenOptExprList_return args = default(MySQL51Parser.parenOptExprList_return);
		MySQL51Parser.expr_return expr826 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr830 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr834 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr838 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr842 = default(MySQL51Parser.expr_return);
		MySQL51Parser.cast_data_type_return cast_data_type844 = default(MySQL51Parser.cast_data_type_return);
		MySQL51Parser.exprList_return exprList848 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr856 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList861 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.timeUnit_return timeUnit867 = default(MySQL51Parser.timeUnit_return);
		MySQL51Parser.timeUnit_return timeUnit873 = default(MySQL51Parser.timeUnit_return);
		MySQL51Parser.exprList_return exprList882 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.order_by_return order_by883 = default(MySQL51Parser.order_by_return);
		MySQL51Parser.text_string_return text_string885 = default(MySQL51Parser.text_string_return);
		MySQL51Parser.expr_return expr890 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr894 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr896 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr898 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr903 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr914 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr918 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr922 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr926 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr931 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr943 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr947 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr951 = default(MySQL51Parser.expr_return);
		MySQL51Parser.timeUnit_return timeUnit957 = default(MySQL51Parser.timeUnit_return);
		MySQL51Parser.timeUnit_return timeUnit974 = default(MySQL51Parser.timeUnit_return);
		MySQL51Parser.expr_return expr976 = default(MySQL51Parser.expr_return);
		MySQL51Parser.timeUnit_return timeUnit995 = default(MySQL51Parser.timeUnit_return);
		MySQL51Parser.timestampUnit_return timestampUnit1008 = default(MySQL51Parser.timestampUnit_return);
		MySQL51Parser.timestampUnit_return timestampUnit1012 = default(MySQL51Parser.timestampUnit_return);
		MySQL51Parser.functionCall_conflicts_return functionCall_conflicts1023 = default(MySQL51Parser.functionCall_conflicts_return);
		MySQL51Parser.functionCall_reserved_return functionCall_reserved1024 = default(MySQL51Parser.functionCall_reserved_return);

		object pos_tree = default(object);
		object type_tree = default(object);
		object funcName_tree = default(object);
		object name_tree = default(object);
		object AVG824_tree = default(object);
		object LPAREN825_tree = default(object);
		object RPAREN827_tree = default(object);
		object BIT_AND828_tree = default(object);
		object LPAREN829_tree = default(object);
		object RPAREN831_tree = default(object);
		object BIT_OR832_tree = default(object);
		object LPAREN833_tree = default(object);
		object RPAREN835_tree = default(object);
		object BIT_XOR836_tree = default(object);
		object LPAREN837_tree = default(object);
		object RPAREN839_tree = default(object);
		object CAST840_tree = default(object);
		object LPAREN841_tree = default(object);
		object AS843_tree = default(object);
		object RPAREN845_tree = default(object);
		object CONCAT846_tree = default(object);
		object LPAREN847_tree = default(object);
		object RPAREN849_tree = default(object);
		object COUNT850_tree = default(object);
		object LPAREN851_tree = default(object);
		object MULT852_tree = default(object);
		object RPAREN853_tree = default(object);
		object COUNT854_tree = default(object);
		object LPAREN855_tree = default(object);
		object RPAREN857_tree = default(object);
		object COUNT858_tree = default(object);
		object LPAREN859_tree = default(object);
		object DISTINCT860_tree = default(object);
		object RPAREN862_tree = default(object);
		object DATE_ADD863_tree = default(object);
		object LPAREN864_tree = default(object);
		object COMMA865_tree = default(object);
		object INTERVAL866_tree = default(object);
		object RPAREN868_tree = default(object);
		object DATE_SUB869_tree = default(object);
		object LPAREN870_tree = default(object);
		object COMMA871_tree = default(object);
		object INTERVAL872_tree = default(object);
		object RPAREN874_tree = default(object);
		object IFNULL875_tree = default(object);
		object LPAREN876_tree = default(object);
		object COMMA877_tree = default(object);
		object RPAREN878_tree = default(object);
		object GROUP_CONCAT879_tree = default(object);
		object LPAREN880_tree = default(object);
		object DISTINCT881_tree = default(object);
		object SEPARATOR884_tree = default(object);
		object RPAREN886_tree = default(object);
		object MAX887_tree = default(object);
		object LPAREN888_tree = default(object);
		object DISTINCT889_tree = default(object);
		object RPAREN891_tree = default(object);
		object MID892_tree = default(object);
		object LPAREN893_tree = default(object);
		object COMMA895_tree = default(object);
		object COMMA897_tree = default(object);
		object RPAREN899_tree = default(object);
		object MIN900_tree = default(object);
		object LPAREN901_tree = default(object);
		object DISTINCT902_tree = default(object);
		object RPAREN904_tree = default(object);
		object NULLIF905_tree = default(object);
		object LPAREN906_tree = default(object);
		object COMMA907_tree = default(object);
		object RPAREN908_tree = default(object);
		object SESSION_USER909_tree = default(object);
		object LPAREN910_tree = default(object);
		object RPAREN911_tree = default(object);
		object STD912_tree = default(object);
		object LPAREN913_tree = default(object);
		object RPAREN915_tree = default(object);
		object STDDEV916_tree = default(object);
		object LPAREN917_tree = default(object);
		object RPAREN919_tree = default(object);
		object STDDEV_POP920_tree = default(object);
		object LPAREN921_tree = default(object);
		object RPAREN923_tree = default(object);
		object STDDEV_SAMP924_tree = default(object);
		object LPAREN925_tree = default(object);
		object RPAREN927_tree = default(object);
		object SUM928_tree = default(object);
		object LPAREN929_tree = default(object);
		object DISTINCT930_tree = default(object);
		object RPAREN932_tree = default(object);
		object SYSTEM_USER933_tree = default(object);
		object LPAREN934_tree = default(object);
		object RPAREN935_tree = default(object);
		object TRIM936_tree = default(object);
		object LPAREN937_tree = default(object);
		object FROM938_tree = default(object);
		object FROM939_tree = default(object);
		object RPAREN940_tree = default(object);
		object VARIANCE941_tree = default(object);
		object LPAREN942_tree = default(object);
		object RPAREN944_tree = default(object);
		object VAR_POP945_tree = default(object);
		object LPAREN946_tree = default(object);
		object RPAREN948_tree = default(object);
		object VAR_SAMP949_tree = default(object);
		object LPAREN950_tree = default(object);
		object RPAREN952_tree = default(object);
		object ADDDATE953_tree = default(object);
		object LPAREN954_tree = default(object);
		object COMMA955_tree = default(object);
		object INTERVAL956_tree = default(object);
		object RPAREN958_tree = default(object);
		object RPAREN959_tree = default(object);
		object CURDATE960_tree = default(object);
		object LPAREN961_tree = default(object);
		object RPAREN962_tree = default(object);
		object CURRENT_DATE963_tree = default(object);
		object LPAREN964_tree = default(object);
		object RPAREN965_tree = default(object);
		object CURTIME966_tree = default(object);
		object LPAREN967_tree = default(object);
		object RPAREN968_tree = default(object);
		object CURRENT_TIME969_tree = default(object);
		object LPAREN970_tree = default(object);
		object RPAREN971_tree = default(object);
		object EXTRACT972_tree = default(object);
		object LPAREN973_tree = default(object);
		object FROM975_tree = default(object);
		object RPAREN977_tree = default(object);
		object GET_FORMAT978_tree = default(object);
		object LPAREN979_tree = default(object);
		object RPAREN980_tree = default(object);
		object NOW981_tree = default(object);
		object LPAREN982_tree = default(object);
		object RPAREN983_tree = default(object);
		object CURRENT_TIMESTAMP984_tree = default(object);
		object LPAREN985_tree = default(object);
		object RPAREN986_tree = default(object);
		object POSITION987_tree = default(object);
		object LPAREN988_tree = default(object);
		object IN989_tree = default(object);
		object RPAREN990_tree = default(object);
		object SUBDATE991_tree = default(object);
		object LPAREN992_tree = default(object);
		object COMMA993_tree = default(object);
		object INTERVAL994_tree = default(object);
		object RPAREN996_tree = default(object);
		object LPAREN997_tree = default(object);
		object COMMA998_tree = default(object);
		object COMMA999_tree = default(object);
		object FROM1000_tree = default(object);
		object FOR1001_tree = default(object);
		object RPAREN1002_tree = default(object);
		object SYSDATE1003_tree = default(object);
		object LPAREN1004_tree = default(object);
		object RPAREN1005_tree = default(object);
		object TIMESTAMP_ADD1006_tree = default(object);
		object LPAREN1007_tree = default(object);
		object RPAREN1009_tree = default(object);
		object TIMESTAMP_DIFF1010_tree = default(object);
		object LPAREN1011_tree = default(object);
		object RPAREN1013_tree = default(object);
		object UTC_DATE1014_tree = default(object);
		object LPAREN1015_tree = default(object);
		object RPAREN1016_tree = default(object);
		object UTC_TIMESTAMP1017_tree = default(object);
		object LPAREN1018_tree = default(object);
		object RPAREN1019_tree = default(object);
		object UTC_TIME1020_tree = default(object);
		object LPAREN1021_tree = default(object);
		object RPAREN1022_tree = default(object);
		RewriteRuleITokenStream stream_AVG=new RewriteRuleITokenStream(adaptor,"token AVG");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_BIT_AND=new RewriteRuleITokenStream(adaptor,"token BIT_AND");
		RewriteRuleITokenStream stream_BIT_OR=new RewriteRuleITokenStream(adaptor,"token BIT_OR");
		RewriteRuleITokenStream stream_BIT_XOR=new RewriteRuleITokenStream(adaptor,"token BIT_XOR");
		RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleITokenStream stream_CONCAT=new RewriteRuleITokenStream(adaptor,"token CONCAT");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_MULT=new RewriteRuleITokenStream(adaptor,"token MULT");
		RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
		RewriteRuleITokenStream stream_DATE_ADD=new RewriteRuleITokenStream(adaptor,"token DATE_ADD");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_INTERVAL=new RewriteRuleITokenStream(adaptor,"token INTERVAL");
		RewriteRuleITokenStream stream_DATE_SUB=new RewriteRuleITokenStream(adaptor,"token DATE_SUB");
		RewriteRuleITokenStream stream_IFNULL=new RewriteRuleITokenStream(adaptor,"token IFNULL");
		RewriteRuleITokenStream stream_GROUP_CONCAT=new RewriteRuleITokenStream(adaptor,"token GROUP_CONCAT");
		RewriteRuleITokenStream stream_SEPARATOR=new RewriteRuleITokenStream(adaptor,"token SEPARATOR");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MID=new RewriteRuleITokenStream(adaptor,"token MID");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_NULLIF=new RewriteRuleITokenStream(adaptor,"token NULLIF");
		RewriteRuleITokenStream stream_SESSION_USER=new RewriteRuleITokenStream(adaptor,"token SESSION_USER");
		RewriteRuleITokenStream stream_STD=new RewriteRuleITokenStream(adaptor,"token STD");
		RewriteRuleITokenStream stream_STDDEV=new RewriteRuleITokenStream(adaptor,"token STDDEV");
		RewriteRuleITokenStream stream_STDDEV_POP=new RewriteRuleITokenStream(adaptor,"token STDDEV_POP");
		RewriteRuleITokenStream stream_STDDEV_SAMP=new RewriteRuleITokenStream(adaptor,"token STDDEV_SAMP");
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_SYSTEM_USER=new RewriteRuleITokenStream(adaptor,"token SYSTEM_USER");
		RewriteRuleITokenStream stream_TRIM=new RewriteRuleITokenStream(adaptor,"token TRIM");
		RewriteRuleITokenStream stream_BOTH=new RewriteRuleITokenStream(adaptor,"token BOTH");
		RewriteRuleITokenStream stream_LEADING=new RewriteRuleITokenStream(adaptor,"token LEADING");
		RewriteRuleITokenStream stream_TRAILING=new RewriteRuleITokenStream(adaptor,"token TRAILING");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_VARIANCE=new RewriteRuleITokenStream(adaptor,"token VARIANCE");
		RewriteRuleITokenStream stream_VAR_POP=new RewriteRuleITokenStream(adaptor,"token VAR_POP");
		RewriteRuleITokenStream stream_VAR_SAMP=new RewriteRuleITokenStream(adaptor,"token VAR_SAMP");
		RewriteRuleITokenStream stream_ADDDATE=new RewriteRuleITokenStream(adaptor,"token ADDDATE");
		RewriteRuleITokenStream stream_CURDATE=new RewriteRuleITokenStream(adaptor,"token CURDATE");
		RewriteRuleITokenStream stream_CURRENT_DATE=new RewriteRuleITokenStream(adaptor,"token CURRENT_DATE");
		RewriteRuleITokenStream stream_CURTIME=new RewriteRuleITokenStream(adaptor,"token CURTIME");
		RewriteRuleITokenStream stream_CURRENT_TIME=new RewriteRuleITokenStream(adaptor,"token CURRENT_TIME");
		RewriteRuleITokenStream stream_EXTRACT=new RewriteRuleITokenStream(adaptor,"token EXTRACT");
		RewriteRuleITokenStream stream_GET_FORMAT=new RewriteRuleITokenStream(adaptor,"token GET_FORMAT");
		RewriteRuleITokenStream stream_DATE=new RewriteRuleITokenStream(adaptor,"token DATE");
		RewriteRuleITokenStream stream_TIME=new RewriteRuleITokenStream(adaptor,"token TIME");
		RewriteRuleITokenStream stream_DATETIME=new RewriteRuleITokenStream(adaptor,"token DATETIME");
		RewriteRuleITokenStream stream_NOW=new RewriteRuleITokenStream(adaptor,"token NOW");
		RewriteRuleITokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleITokenStream(adaptor,"token CURRENT_TIMESTAMP");
		RewriteRuleITokenStream stream_POSITION=new RewriteRuleITokenStream(adaptor,"token POSITION");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_SUBDATE=new RewriteRuleITokenStream(adaptor,"token SUBDATE");
		RewriteRuleITokenStream stream_SUBSTR=new RewriteRuleITokenStream(adaptor,"token SUBSTR");
		RewriteRuleITokenStream stream_SUBSTRING=new RewriteRuleITokenStream(adaptor,"token SUBSTRING");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_SYSDATE=new RewriteRuleITokenStream(adaptor,"token SYSDATE");
		RewriteRuleITokenStream stream_TIMESTAMP_ADD=new RewriteRuleITokenStream(adaptor,"token TIMESTAMP_ADD");
		RewriteRuleITokenStream stream_TIMESTAMP_DIFF=new RewriteRuleITokenStream(adaptor,"token TIMESTAMP_DIFF");
		RewriteRuleITokenStream stream_UTC_DATE=new RewriteRuleITokenStream(adaptor,"token UTC_DATE");
		RewriteRuleITokenStream stream_UTC_TIMESTAMP=new RewriteRuleITokenStream(adaptor,"token UTC_TIMESTAMP");
		RewriteRuleITokenStream stream_UTC_TIME=new RewriteRuleITokenStream(adaptor,"token UTC_TIME");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_cast_data_type=new RewriteRuleSubtreeStream(adaptor,"rule cast_data_type");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		RewriteRuleSubtreeStream stream_timeUnit=new RewriteRuleSubtreeStream(adaptor,"rule timeUnit");
		RewriteRuleSubtreeStream stream_order_by=new RewriteRuleSubtreeStream(adaptor,"rule order_by");
		RewriteRuleSubtreeStream stream_text_string=new RewriteRuleSubtreeStream(adaptor,"rule text_string");
		RewriteRuleSubtreeStream stream_timestampUnit=new RewriteRuleSubtreeStream(adaptor,"rule timestampUnit");
		RewriteRuleSubtreeStream stream_parenOptExprList=new RewriteRuleSubtreeStream(adaptor,"rule parenOptExprList");
		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(1381, 1);
		try
		{
			// MySQL51Parser.g3:1382:2: ( AVG LPAREN expr RPAREN -> ^( FUNC ^( AVG expr ) ) | BIT_AND LPAREN expr RPAREN -> ^( FUNC ^( BIT_AND expr ) ) | BIT_OR LPAREN expr RPAREN -> ^( FUNC ^( BIT_OR expr ) ) | BIT_XOR LPAREN expr RPAREN -> ^( FUNC ^( BIT_XOR expr ) ) | CAST LPAREN expr AS cast_data_type RPAREN -> ^( FUNC ^( CAST expr cast_data_type ) ) | CONCAT LPAREN exprList RPAREN -> ^( FUNC ^( CONCAT exprList ) ) | COUNT LPAREN MULT RPAREN -> ^( FUNC ^( COUNT_STAR[$MULT] ) ) | COUNT LPAREN expr RPAREN -> ^( FUNC ^( COUNT expr ) ) | COUNT LPAREN DISTINCT exprList RPAREN -> ^( FUNC ^( COUNT exprList DISTINCT ) ) | DATE_ADD LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_ADD $date $interval timeUnit ) ) | DATE_SUB LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_SUB $date $interval timeUnit ) ) | IFNULL LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( IFNULL $expr1 $expr2) ) | GROUP_CONCAT LPAREN ( DISTINCT )? exprList ( order_by )? ( SEPARATOR text_string )? RPAREN -> ^( FUNC ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? ) ) | MAX LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MAX expr ( DISTINCT )? ) ) | MID LPAREN expr COMMA expr COMMA expr RPAREN -> ^( FUNC ^( MID ( expr )+ ) ) | MIN LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MIN expr ( DISTINCT )? ) ) | NULLIF LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( NULLIF $expr1 $expr2) ) | SESSION_USER LPAREN RPAREN -> ^( FUNC ^( SESSION_USER LPAREN ) ) | STD LPAREN expr RPAREN -> ^( FUNC ^( STD expr ) ) | STDDEV LPAREN expr RPAREN -> ^( FUNC ^( STDDEV expr ) ) | STDDEV_POP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_POP expr ) ) | STDDEV_SAMP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_SAMP expr ) ) | SUM LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( SUM expr ( DISTINCT )? ) ) | SYSTEM_USER LPAREN RPAREN -> ^( FUNC ^( SYSTEM_USER LPAREN ) ) | TRIM LPAREN ( (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) ) |str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) ) ) RPAREN | VARIANCE LPAREN expr RPAREN -> ^( FUNC ^( VARIANCE expr ) ) | VAR_POP LPAREN expr RPAREN -> ^( FUNC ^( VAR_POP expr ) ) | VAR_SAMP LPAREN expr RPAREN -> ^( FUNC ^( VAR_SAMP expr ) ) | ADDDATE LPAREN date= expr COMMA ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) ) | CURDATE LPAREN RPAREN -> ^( FUNC ^( CURDATE LPAREN ) ) | CURRENT_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_DATE ( LPAREN )? ) ) | CURTIME LPAREN RPAREN -> ^( FUNC ^( CURTIME LPAREN ) ) | CURRENT_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIME ( LPAREN )? ) ) | EXTRACT LPAREN timeUnit FROM expr RPAREN -> ^( FUNC ^( EXTRACT timeUnit expr ) ) | GET_FORMAT LPAREN (type= DATE |type= TIME |type= DATETIME ) locale= expr RPAREN -> ^( FUNC ^( GET_FORMAT $type $locale) ) | NOW LPAREN RPAREN -> ^( FUNC ^( NOW LPAREN ) ) | CURRENT_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIMESTAMP ( LPAREN )? ) ) | POSITION LPAREN substr= expr IN str= expr RPAREN -> ^( FUNC ^( POSITION $substr $str) ) | SUBDATE LPAREN date= expr COMMA (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) ) RPAREN | (funcName= SUBSTR |funcName= SUBSTRING ) LPAREN str= expr ( COMMA position= expr COMMA (len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ) ) | FROM position= expr ( FOR len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) ) ) RPAREN | SYSDATE LPAREN RPAREN -> ^( FUNC ^( SYSDATE LPAREN ) ) | TIMESTAMP_ADD LPAREN timestampUnit interval= expr date= expr RPAREN -> ^( FUNC ^( TIMESTAMP_ADD $date $interval timestampUnit ) ) | TIMESTAMP_DIFF LPAREN timestampUnit date1= expr date2= expr RPAREN -> ^( FUNC ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit ) ) | UTC_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_DATE ( LPAREN )? ) ) | UTC_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIMESTAMP ( LPAREN )? ) ) | UTC_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIME ( LPAREN )? ) ) | functionCall_conflicts | functionCall_reserved |name= ID args= parenOptExprList -> ^( FUNC ^( $name $args) ) )
			int alt346=49;
			try { DebugEnterDecision(346, false);
			try
			{
				alt346 = dfa346.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(346); }
			switch (alt346)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1383:4: AVG LPAREN expr RPAREN
				{
				DebugLocation(1383, 4);
				AVG824=(IToken)Match(input,AVG,Follow._AVG_in_functionCall11764); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AVG.Add(AVG824);

				DebugLocation(1383, 8);
				LPAREN825=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11766); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN825);

				DebugLocation(1383, 15);
				PushFollow(Follow._expr_in_functionCall11768);
				expr826=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr826.Tree);
				DebugLocation(1383, 20);
				RPAREN827=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11770); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN827);



				{
				// AST REWRITE
				// elements: AVG, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1383:31: -> ^( FUNC ^( AVG expr ) )
				{
					DebugLocation(1383, 34);
					// MySQL51Parser.g3:1383:34: ^( FUNC ^( AVG expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1383, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1383, 41);
					// MySQL51Parser.g3:1383:41: ^( AVG expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1383, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_AVG.NextNode(), root_2);

					DebugLocation(1383, 47);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1384:4: BIT_AND LPAREN expr RPAREN
				{
				DebugLocation(1384, 4);
				BIT_AND828=(IToken)Match(input,BIT_AND,Follow._BIT_AND_in_functionCall11791); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BIT_AND.Add(BIT_AND828);

				DebugLocation(1384, 12);
				LPAREN829=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11793); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN829);

				DebugLocation(1384, 19);
				PushFollow(Follow._expr_in_functionCall11795);
				expr830=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr830.Tree);
				DebugLocation(1384, 24);
				RPAREN831=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11797); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN831);



				{
				// AST REWRITE
				// elements: BIT_AND, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1384:32: -> ^( FUNC ^( BIT_AND expr ) )
				{
					DebugLocation(1384, 35);
					// MySQL51Parser.g3:1384:35: ^( FUNC ^( BIT_AND expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1384, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1384, 42);
					// MySQL51Parser.g3:1384:42: ^( BIT_AND expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1384, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_BIT_AND.NextNode(), root_2);

					DebugLocation(1384, 52);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1385:4: BIT_OR LPAREN expr RPAREN
				{
				DebugLocation(1385, 4);
				BIT_OR832=(IToken)Match(input,BIT_OR,Follow._BIT_OR_in_functionCall11815); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BIT_OR.Add(BIT_OR832);

				DebugLocation(1385, 11);
				LPAREN833=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11817); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN833);

				DebugLocation(1385, 18);
				PushFollow(Follow._expr_in_functionCall11819);
				expr834=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr834.Tree);
				DebugLocation(1385, 23);
				RPAREN835=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN835);



				{
				// AST REWRITE
				// elements: BIT_OR, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1385:31: -> ^( FUNC ^( BIT_OR expr ) )
				{
					DebugLocation(1385, 34);
					// MySQL51Parser.g3:1385:34: ^( FUNC ^( BIT_OR expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1385, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1385, 41);
					// MySQL51Parser.g3:1385:41: ^( BIT_OR expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1385, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_BIT_OR.NextNode(), root_2);

					DebugLocation(1385, 50);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1386:4: BIT_XOR LPAREN expr RPAREN
				{
				DebugLocation(1386, 4);
				BIT_XOR836=(IToken)Match(input,BIT_XOR,Follow._BIT_XOR_in_functionCall11839); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BIT_XOR.Add(BIT_XOR836);

				DebugLocation(1386, 12);
				LPAREN837=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11841); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN837);

				DebugLocation(1386, 19);
				PushFollow(Follow._expr_in_functionCall11843);
				expr838=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr838.Tree);
				DebugLocation(1386, 24);
				RPAREN839=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11845); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN839);



				{
				// AST REWRITE
				// elements: BIT_XOR, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1386:32: -> ^( FUNC ^( BIT_XOR expr ) )
				{
					DebugLocation(1386, 35);
					// MySQL51Parser.g3:1386:35: ^( FUNC ^( BIT_XOR expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1386, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1386, 42);
					// MySQL51Parser.g3:1386:42: ^( BIT_XOR expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1386, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_BIT_XOR.NextNode(), root_2);

					DebugLocation(1386, 52);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1387:4: CAST LPAREN expr AS cast_data_type RPAREN
				{
				DebugLocation(1387, 4);
				CAST840=(IToken)Match(input,CAST,Follow._CAST_in_functionCall11863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST840);

				DebugLocation(1387, 9);
				LPAREN841=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11865); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN841);

				DebugLocation(1387, 16);
				PushFollow(Follow._expr_in_functionCall11867);
				expr842=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr842.Tree);
				DebugLocation(1387, 21);
				AS843=(IToken)Match(input,AS,Follow._AS_in_functionCall11869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS843);

				DebugLocation(1387, 24);
				PushFollow(Follow._cast_data_type_in_functionCall11871);
				cast_data_type844=cast_data_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cast_data_type.Add(cast_data_type844.Tree);
				DebugLocation(1387, 39);
				RPAREN845=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11873); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN845);



				{
				// AST REWRITE
				// elements: CAST, expr, cast_data_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1387:49: -> ^( FUNC ^( CAST expr cast_data_type ) )
				{
					DebugLocation(1387, 52);
					// MySQL51Parser.g3:1387:52: ^( FUNC ^( CAST expr cast_data_type ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1387, 54);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1387, 59);
					// MySQL51Parser.g3:1387:59: ^( CAST expr cast_data_type )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1387, 61);
					root_2 = (object)adaptor.BecomeRoot(stream_CAST.NextNode(), root_2);

					DebugLocation(1387, 66);
					adaptor.AddChild(root_2, stream_expr.NextTree());
					DebugLocation(1387, 71);
					adaptor.AddChild(root_2, stream_cast_data_type.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1388:4: CONCAT LPAREN exprList RPAREN
				{
				DebugLocation(1388, 4);
				CONCAT846=(IToken)Match(input,CONCAT,Follow._CONCAT_in_functionCall11895); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONCAT.Add(CONCAT846);

				DebugLocation(1388, 11);
				LPAREN847=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11897); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN847);

				DebugLocation(1388, 18);
				PushFollow(Follow._exprList_in_functionCall11899);
				exprList848=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList848.Tree);
				DebugLocation(1388, 27);
				RPAREN849=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11901); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN849);



				{
				// AST REWRITE
				// elements: CONCAT, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1388:35: -> ^( FUNC ^( CONCAT exprList ) )
				{
					DebugLocation(1388, 38);
					// MySQL51Parser.g3:1388:38: ^( FUNC ^( CONCAT exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1388, 40);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1388, 45);
					// MySQL51Parser.g3:1388:45: ^( CONCAT exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1388, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_CONCAT.NextNode(), root_2);

					DebugLocation(1388, 54);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1389:4: COUNT LPAREN MULT RPAREN
				{
				DebugLocation(1389, 4);
				COUNT850=(IToken)Match(input,COUNT,Follow._COUNT_in_functionCall11919); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT850);

				DebugLocation(1389, 10);
				LPAREN851=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11921); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN851);

				DebugLocation(1389, 17);
				MULT852=(IToken)Match(input,MULT,Follow._MULT_in_functionCall11923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MULT.Add(MULT852);

				DebugLocation(1389, 22);
				RPAREN853=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11925); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN853);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1389:30: -> ^( FUNC ^( COUNT_STAR[$MULT] ) )
				{
					DebugLocation(1389, 33);
					// MySQL51Parser.g3:1389:33: ^( FUNC ^( COUNT_STAR[$MULT] ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1389, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1389, 40);
					// MySQL51Parser.g3:1389:40: ^( COUNT_STAR[$MULT] )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1389, 42);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(COUNT_STAR, MULT852), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1390:4: COUNT LPAREN expr RPAREN
				{
				DebugLocation(1390, 4);
				COUNT854=(IToken)Match(input,COUNT,Follow._COUNT_in_functionCall11943); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT854);

				DebugLocation(1390, 10);
				LPAREN855=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN855);

				DebugLocation(1390, 17);
				PushFollow(Follow._expr_in_functionCall11947);
				expr856=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr856.Tree);
				DebugLocation(1390, 22);
				RPAREN857=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11949); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN857);



				{
				// AST REWRITE
				// elements: COUNT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1390:30: -> ^( FUNC ^( COUNT expr ) )
				{
					DebugLocation(1390, 33);
					// MySQL51Parser.g3:1390:33: ^( FUNC ^( COUNT expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1390, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1390, 40);
					// MySQL51Parser.g3:1390:40: ^( COUNT expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1390, 42);
					root_2 = (object)adaptor.BecomeRoot(stream_COUNT.NextNode(), root_2);

					DebugLocation(1390, 48);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:1391:4: COUNT LPAREN DISTINCT exprList RPAREN
				{
				DebugLocation(1391, 4);
				COUNT858=(IToken)Match(input,COUNT,Follow._COUNT_in_functionCall11968); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT858);

				DebugLocation(1391, 10);
				LPAREN859=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11970); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN859);

				DebugLocation(1391, 17);
				DISTINCT860=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functionCall11972); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT860);

				DebugLocation(1391, 26);
				PushFollow(Follow._exprList_in_functionCall11974);
				exprList861=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList861.Tree);
				DebugLocation(1391, 35);
				RPAREN862=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall11976); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN862);



				{
				// AST REWRITE
				// elements: COUNT, exprList, DISTINCT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1391:43: -> ^( FUNC ^( COUNT exprList DISTINCT ) )
				{
					DebugLocation(1391, 46);
					// MySQL51Parser.g3:1391:46: ^( FUNC ^( COUNT exprList DISTINCT ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1391, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1391, 53);
					// MySQL51Parser.g3:1391:53: ^( COUNT exprList DISTINCT )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1391, 55);
					root_2 = (object)adaptor.BecomeRoot(stream_COUNT.NextNode(), root_2);

					DebugLocation(1391, 61);
					adaptor.AddChild(root_2, stream_exprList.NextTree());
					DebugLocation(1391, 70);
					adaptor.AddChild(root_2, stream_DISTINCT.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:1392:4: DATE_ADD LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN
				{
				DebugLocation(1392, 4);
				DATE_ADD863=(IToken)Match(input,DATE_ADD,Follow._DATE_ADD_in_functionCall11996); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATE_ADD.Add(DATE_ADD863);

				DebugLocation(1392, 13);
				LPAREN864=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall11998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN864);

				DebugLocation(1392, 24);
				PushFollow(Follow._expr_in_functionCall12002);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1392, 30);
				COMMA865=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12004); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA865);

				DebugLocation(1392, 36);
				INTERVAL866=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_functionCall12006); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL866);

				DebugLocation(1392, 53);
				PushFollow(Follow._expr_in_functionCall12010);
				interval=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(interval.Tree);
				DebugLocation(1392, 59);
				PushFollow(Follow._timeUnit_in_functionCall12012);
				timeUnit867=timeUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timeUnit.Add(timeUnit867.Tree);
				DebugLocation(1392, 68);
				RPAREN868=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12014); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN868);



				{
				// AST REWRITE
				// elements: DATE_ADD, date, interval, timeUnit
				// token labels: 
				// rule labels: date, interval, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
				RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval",interval!=null?interval.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1392:78: -> ^( FUNC ^( DATE_ADD $date $interval timeUnit ) )
				{
					DebugLocation(1392, 81);
					// MySQL51Parser.g3:1392:81: ^( FUNC ^( DATE_ADD $date $interval timeUnit ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1392, 83);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1392, 88);
					// MySQL51Parser.g3:1392:88: ^( DATE_ADD $date $interval timeUnit )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1392, 90);
					root_2 = (object)adaptor.BecomeRoot(stream_DATE_ADD.NextNode(), root_2);

					DebugLocation(1392, 100);
					adaptor.AddChild(root_2, stream_date.NextTree());
					DebugLocation(1392, 106);
					adaptor.AddChild(root_2, stream_interval.NextTree());
					DebugLocation(1392, 115);
					adaptor.AddChild(root_2, stream_timeUnit.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:1393:4: DATE_SUB LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN
				{
				DebugLocation(1393, 4);
				DATE_SUB869=(IToken)Match(input,DATE_SUB,Follow._DATE_SUB_in_functionCall12040); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATE_SUB.Add(DATE_SUB869);

				DebugLocation(1393, 13);
				LPAREN870=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12042); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN870);

				DebugLocation(1393, 24);
				PushFollow(Follow._expr_in_functionCall12046);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1393, 30);
				COMMA871=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12048); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA871);

				DebugLocation(1393, 36);
				INTERVAL872=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_functionCall12050); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL872);

				DebugLocation(1393, 53);
				PushFollow(Follow._expr_in_functionCall12054);
				interval=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(interval.Tree);
				DebugLocation(1393, 59);
				PushFollow(Follow._timeUnit_in_functionCall12056);
				timeUnit873=timeUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timeUnit.Add(timeUnit873.Tree);
				DebugLocation(1393, 68);
				RPAREN874=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12058); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN874);



				{
				// AST REWRITE
				// elements: DATE_SUB, date, interval, timeUnit
				// token labels: 
				// rule labels: date, interval, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
				RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval",interval!=null?interval.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1393:76: -> ^( FUNC ^( DATE_SUB $date $interval timeUnit ) )
				{
					DebugLocation(1393, 79);
					// MySQL51Parser.g3:1393:79: ^( FUNC ^( DATE_SUB $date $interval timeUnit ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1393, 81);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1393, 86);
					// MySQL51Parser.g3:1393:86: ^( DATE_SUB $date $interval timeUnit )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1393, 88);
					root_2 = (object)adaptor.BecomeRoot(stream_DATE_SUB.NextNode(), root_2);

					DebugLocation(1393, 98);
					adaptor.AddChild(root_2, stream_date.NextTree());
					DebugLocation(1393, 104);
					adaptor.AddChild(root_2, stream_interval.NextTree());
					DebugLocation(1393, 113);
					adaptor.AddChild(root_2, stream_timeUnit.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:1394:4: IFNULL LPAREN expr1= expr COMMA expr2= expr RPAREN
				{
				DebugLocation(1394, 4);
				IFNULL875=(IToken)Match(input,IFNULL,Follow._IFNULL_in_functionCall12082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IFNULL.Add(IFNULL875);

				DebugLocation(1394, 11);
				LPAREN876=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12084); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN876);

				DebugLocation(1394, 23);
				PushFollow(Follow._expr_in_functionCall12088);
				expr1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1.Tree);
				DebugLocation(1394, 29);
				COMMA877=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12090); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA877);

				DebugLocation(1394, 40);
				PushFollow(Follow._expr_in_functionCall12094);
				expr2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr2.Tree);
				DebugLocation(1394, 46);
				RPAREN878=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12096); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN878);



				{
				// AST REWRITE
				// elements: IFNULL, expr1, expr2
				// token labels: 
				// rule labels: expr1, expr2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
				RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1394:53: -> ^( FUNC ^( IFNULL $expr1 $expr2) )
				{
					DebugLocation(1394, 56);
					// MySQL51Parser.g3:1394:56: ^( FUNC ^( IFNULL $expr1 $expr2) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1394, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1394, 64);
					// MySQL51Parser.g3:1394:64: ^( IFNULL $expr1 $expr2)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1394, 67);
					root_2 = (object)adaptor.BecomeRoot(stream_IFNULL.NextNode(), root_2);

					DebugLocation(1394, 75);
					adaptor.AddChild(root_2, stream_expr1.NextTree());
					DebugLocation(1394, 82);
					adaptor.AddChild(root_2, stream_expr2.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:1395:4: GROUP_CONCAT LPAREN ( DISTINCT )? exprList ( order_by )? ( SEPARATOR text_string )? RPAREN
				{
				DebugLocation(1395, 4);
				GROUP_CONCAT879=(IToken)Match(input,GROUP_CONCAT,Follow._GROUP_CONCAT_in_functionCall12120); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_GROUP_CONCAT.Add(GROUP_CONCAT879);

				DebugLocation(1395, 17);
				LPAREN880=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12122); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN880);

				DebugLocation(1396, 4);
				// MySQL51Parser.g3:1396:4: ( DISTINCT )?
				int alt323=2;
				try { DebugEnterSubRule(323);
				try { DebugEnterDecision(323, false);
				int LA323_0 = input.LA(1);

				if ((LA323_0==DISTINCT))
				{
					alt323 = 1;
				}
				} finally { DebugExitDecision(323); }
				switch (alt323)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1396:4: DISTINCT
					{
					DebugLocation(1396, 4);
					DISTINCT881=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functionCall12128); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT881);


					}
					break;

				}
				} finally { DebugExitSubRule(323); }

				DebugLocation(1396, 14);
				PushFollow(Follow._exprList_in_functionCall12131);
				exprList882=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList882.Tree);
				DebugLocation(1397, 4);
				// MySQL51Parser.g3:1397:4: ( order_by )?
				int alt324=2;
				try { DebugEnterSubRule(324);
				try { DebugEnterDecision(324, false);
				int LA324_0 = input.LA(1);

				if ((LA324_0==ORDER))
				{
					alt324 = 1;
				}
				} finally { DebugExitDecision(324); }
				switch (alt324)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1397:4: order_by
					{
					DebugLocation(1397, 4);
					PushFollow(Follow._order_by_in_functionCall12136);
					order_by883=order_by();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_order_by.Add(order_by883.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(324); }

				DebugLocation(1398, 4);
				// MySQL51Parser.g3:1398:4: ( SEPARATOR text_string )?
				int alt325=2;
				try { DebugEnterSubRule(325);
				try { DebugEnterDecision(325, false);
				int LA325_0 = input.LA(1);

				if ((LA325_0==SEPARATOR))
				{
					alt325 = 1;
				}
				} finally { DebugExitDecision(325); }
				switch (alt325)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1398:5: SEPARATOR text_string
					{
					DebugLocation(1398, 5);
					SEPARATOR884=(IToken)Match(input,SEPARATOR,Follow._SEPARATOR_in_functionCall12143); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEPARATOR.Add(SEPARATOR884);

					DebugLocation(1398, 15);
					PushFollow(Follow._text_string_in_functionCall12145);
					text_string885=text_string();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_text_string.Add(text_string885.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(325); }

				DebugLocation(1399, 3);
				RPAREN886=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12151); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN886);



				{
				// AST REWRITE
				// elements: GROUP_CONCAT, exprList, DISTINCT, order_by, text_string
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1399:18: -> ^( FUNC ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? ) )
				{
					DebugLocation(1399, 21);
					// MySQL51Parser.g3:1399:21: ^( FUNC ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1399, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1399, 28);
					// MySQL51Parser.g3:1399:28: ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1399, 30);
					root_2 = (object)adaptor.BecomeRoot(stream_GROUP_CONCAT.NextNode(), root_2);

					DebugLocation(1399, 43);
					adaptor.AddChild(root_2, stream_exprList.NextTree());
					DebugLocation(1399, 52);
					// MySQL51Parser.g3:1399:52: ( DISTINCT )?
					if (stream_DISTINCT.HasNext)
					{
						DebugLocation(1399, 52);
						adaptor.AddChild(root_2, stream_DISTINCT.NextNode());

					}
					stream_DISTINCT.Reset();
					DebugLocation(1399, 62);
					// MySQL51Parser.g3:1399:62: ( order_by )?
					if (stream_order_by.HasNext)
					{
						DebugLocation(1399, 62);
						adaptor.AddChild(root_2, stream_order_by.NextTree());

					}
					stream_order_by.Reset();
					DebugLocation(1399, 72);
					// MySQL51Parser.g3:1399:72: ( text_string )?
					if (stream_text_string.HasNext)
					{
						DebugLocation(1399, 72);
						adaptor.AddChild(root_2, stream_text_string.NextTree());

					}
					stream_text_string.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:1400:4: MAX LPAREN ( DISTINCT )? expr RPAREN
				{
				DebugLocation(1400, 4);
				MAX887=(IToken)Match(input,MAX,Follow._MAX_in_functionCall12185); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MAX.Add(MAX887);

				DebugLocation(1400, 8);
				LPAREN888=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12187); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN888);

				DebugLocation(1400, 15);
				// MySQL51Parser.g3:1400:15: ( DISTINCT )?
				int alt326=2;
				try { DebugEnterSubRule(326);
				try { DebugEnterDecision(326, false);
				int LA326_0 = input.LA(1);

				if ((LA326_0==DISTINCT))
				{
					alt326 = 1;
				}
				} finally { DebugExitDecision(326); }
				switch (alt326)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1400:15: DISTINCT
					{
					DebugLocation(1400, 15);
					DISTINCT889=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functionCall12189); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT889);


					}
					break;

				}
				} finally { DebugExitSubRule(326); }

				DebugLocation(1400, 25);
				PushFollow(Follow._expr_in_functionCall12192);
				expr890=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr890.Tree);
				DebugLocation(1400, 30);
				RPAREN891=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12194); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN891);



				{
				// AST REWRITE
				// elements: MAX, expr, DISTINCT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1400:38: -> ^( FUNC ^( MAX expr ( DISTINCT )? ) )
				{
					DebugLocation(1400, 41);
					// MySQL51Parser.g3:1400:41: ^( FUNC ^( MAX expr ( DISTINCT )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1400, 43);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1400, 48);
					// MySQL51Parser.g3:1400:48: ^( MAX expr ( DISTINCT )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1400, 50);
					root_2 = (object)adaptor.BecomeRoot(stream_MAX.NextNode(), root_2);

					DebugLocation(1400, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());
					DebugLocation(1400, 59);
					// MySQL51Parser.g3:1400:59: ( DISTINCT )?
					if (stream_DISTINCT.HasNext)
					{
						DebugLocation(1400, 59);
						adaptor.AddChild(root_2, stream_DISTINCT.NextNode());

					}
					stream_DISTINCT.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:1402:4: MID LPAREN expr COMMA expr COMMA expr RPAREN
				{
				DebugLocation(1402, 4);
				MID892=(IToken)Match(input,MID,Follow._MID_in_functionCall12218); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MID.Add(MID892);

				DebugLocation(1402, 8);
				LPAREN893=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12220); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN893);

				DebugLocation(1402, 15);
				PushFollow(Follow._expr_in_functionCall12222);
				expr894=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr894.Tree);
				DebugLocation(1402, 20);
				COMMA895=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12224); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA895);

				DebugLocation(1402, 26);
				PushFollow(Follow._expr_in_functionCall12226);
				expr896=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr896.Tree);
				DebugLocation(1402, 31);
				COMMA897=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12228); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA897);

				DebugLocation(1402, 37);
				PushFollow(Follow._expr_in_functionCall12230);
				expr898=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr898.Tree);
				DebugLocation(1402, 42);
				RPAREN899=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12232); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN899);



				{
				// AST REWRITE
				// elements: MID, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1402:50: -> ^( FUNC ^( MID ( expr )+ ) )
				{
					DebugLocation(1402, 53);
					// MySQL51Parser.g3:1402:53: ^( FUNC ^( MID ( expr )+ ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1402, 55);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1402, 60);
					// MySQL51Parser.g3:1402:60: ^( MID ( expr )+ )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1402, 62);
					root_2 = (object)adaptor.BecomeRoot(stream_MID.NextNode(), root_2);

					DebugLocation(1402, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(1402, 66);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:1403:4: MIN LPAREN ( DISTINCT )? expr RPAREN
				{
				DebugLocation(1403, 4);
				MIN900=(IToken)Match(input,MIN,Follow._MIN_in_functionCall12251); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MIN.Add(MIN900);

				DebugLocation(1403, 8);
				LPAREN901=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12253); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN901);

				DebugLocation(1403, 15);
				// MySQL51Parser.g3:1403:15: ( DISTINCT )?
				int alt327=2;
				try { DebugEnterSubRule(327);
				try { DebugEnterDecision(327, false);
				int LA327_0 = input.LA(1);

				if ((LA327_0==DISTINCT))
				{
					alt327 = 1;
				}
				} finally { DebugExitDecision(327); }
				switch (alt327)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1403:15: DISTINCT
					{
					DebugLocation(1403, 15);
					DISTINCT902=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functionCall12255); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT902);


					}
					break;

				}
				} finally { DebugExitSubRule(327); }

				DebugLocation(1403, 25);
				PushFollow(Follow._expr_in_functionCall12258);
				expr903=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr903.Tree);
				DebugLocation(1403, 30);
				RPAREN904=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12260); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN904);



				{
				// AST REWRITE
				// elements: MIN, expr, DISTINCT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1403:38: -> ^( FUNC ^( MIN expr ( DISTINCT )? ) )
				{
					DebugLocation(1403, 41);
					// MySQL51Parser.g3:1403:41: ^( FUNC ^( MIN expr ( DISTINCT )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1403, 43);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1403, 48);
					// MySQL51Parser.g3:1403:48: ^( MIN expr ( DISTINCT )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1403, 50);
					root_2 = (object)adaptor.BecomeRoot(stream_MIN.NextNode(), root_2);

					DebugLocation(1403, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());
					DebugLocation(1403, 59);
					// MySQL51Parser.g3:1403:59: ( DISTINCT )?
					if (stream_DISTINCT.HasNext)
					{
						DebugLocation(1403, 59);
						adaptor.AddChild(root_2, stream_DISTINCT.NextNode());

					}
					stream_DISTINCT.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:1404:4: NULLIF LPAREN expr1= expr COMMA expr2= expr RPAREN
				{
				DebugLocation(1404, 4);
				NULLIF905=(IToken)Match(input,NULLIF,Follow._NULLIF_in_functionCall12282); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NULLIF.Add(NULLIF905);

				DebugLocation(1404, 11);
				LPAREN906=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12284); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN906);

				DebugLocation(1404, 23);
				PushFollow(Follow._expr_in_functionCall12288);
				expr1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1.Tree);
				DebugLocation(1404, 29);
				COMMA907=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12290); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA907);

				DebugLocation(1404, 40);
				PushFollow(Follow._expr_in_functionCall12294);
				expr2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr2.Tree);
				DebugLocation(1404, 46);
				RPAREN908=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12296); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN908);



				{
				// AST REWRITE
				// elements: NULLIF, expr1, expr2
				// token labels: 
				// rule labels: expr1, expr2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.Tree:null);
				RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1404:53: -> ^( FUNC ^( NULLIF $expr1 $expr2) )
				{
					DebugLocation(1404, 56);
					// MySQL51Parser.g3:1404:56: ^( FUNC ^( NULLIF $expr1 $expr2) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1404, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1404, 63);
					// MySQL51Parser.g3:1404:63: ^( NULLIF $expr1 $expr2)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1404, 65);
					root_2 = (object)adaptor.BecomeRoot(stream_NULLIF.NextNode(), root_2);

					DebugLocation(1404, 73);
					adaptor.AddChild(root_2, stream_expr1.NextTree());
					DebugLocation(1404, 80);
					adaptor.AddChild(root_2, stream_expr2.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:1406:4: SESSION_USER LPAREN RPAREN
				{
				DebugLocation(1406, 4);
				SESSION_USER909=(IToken)Match(input,SESSION_USER,Follow._SESSION_USER_in_functionCall12320); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SESSION_USER.Add(SESSION_USER909);

				DebugLocation(1406, 17);
				LPAREN910=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12322); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN910);

				DebugLocation(1406, 24);
				RPAREN911=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12324); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN911);



				{
				// AST REWRITE
				// elements: SESSION_USER, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1406:32: -> ^( FUNC ^( SESSION_USER LPAREN ) )
				{
					DebugLocation(1406, 35);
					// MySQL51Parser.g3:1406:35: ^( FUNC ^( SESSION_USER LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1406, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1406, 42);
					// MySQL51Parser.g3:1406:42: ^( SESSION_USER LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1406, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_SESSION_USER.NextNode(), root_2);

					DebugLocation(1406, 57);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// MySQL51Parser.g3:1407:4: STD LPAREN expr RPAREN
				{
				DebugLocation(1407, 4);
				STD912=(IToken)Match(input,STD,Follow._STD_in_functionCall12342); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STD.Add(STD912);

				DebugLocation(1407, 8);
				LPAREN913=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12344); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN913);

				DebugLocation(1407, 15);
				PushFollow(Follow._expr_in_functionCall12346);
				expr914=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr914.Tree);
				DebugLocation(1407, 20);
				RPAREN915=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12348); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN915);



				{
				// AST REWRITE
				// elements: STD, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1407:28: -> ^( FUNC ^( STD expr ) )
				{
					DebugLocation(1407, 31);
					// MySQL51Parser.g3:1407:31: ^( FUNC ^( STD expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1407, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1407, 38);
					// MySQL51Parser.g3:1407:38: ^( STD expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1407, 40);
					root_2 = (object)adaptor.BecomeRoot(stream_STD.NextNode(), root_2);

					DebugLocation(1407, 44);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// MySQL51Parser.g3:1408:4: STDDEV LPAREN expr RPAREN
				{
				DebugLocation(1408, 4);
				STDDEV916=(IToken)Match(input,STDDEV,Follow._STDDEV_in_functionCall12366); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STDDEV.Add(STDDEV916);

				DebugLocation(1408, 11);
				LPAREN917=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12368); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN917);

				DebugLocation(1408, 18);
				PushFollow(Follow._expr_in_functionCall12370);
				expr918=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr918.Tree);
				DebugLocation(1408, 23);
				RPAREN919=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12372); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN919);



				{
				// AST REWRITE
				// elements: STDDEV, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1408:31: -> ^( FUNC ^( STDDEV expr ) )
				{
					DebugLocation(1408, 34);
					// MySQL51Parser.g3:1408:34: ^( FUNC ^( STDDEV expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1408, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1408, 41);
					// MySQL51Parser.g3:1408:41: ^( STDDEV expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1408, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_STDDEV.NextNode(), root_2);

					DebugLocation(1408, 50);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// MySQL51Parser.g3:1409:4: STDDEV_POP LPAREN expr RPAREN
				{
				DebugLocation(1409, 4);
				STDDEV_POP920=(IToken)Match(input,STDDEV_POP,Follow._STDDEV_POP_in_functionCall12390); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STDDEV_POP.Add(STDDEV_POP920);

				DebugLocation(1409, 15);
				LPAREN921=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12392); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN921);

				DebugLocation(1409, 22);
				PushFollow(Follow._expr_in_functionCall12394);
				expr922=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr922.Tree);
				DebugLocation(1409, 27);
				RPAREN923=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12396); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN923);



				{
				// AST REWRITE
				// elements: STDDEV_POP, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1409:35: -> ^( FUNC ^( STDDEV_POP expr ) )
				{
					DebugLocation(1409, 38);
					// MySQL51Parser.g3:1409:38: ^( FUNC ^( STDDEV_POP expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1409, 40);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1409, 45);
					// MySQL51Parser.g3:1409:45: ^( STDDEV_POP expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1409, 47);
					root_2 = (object)adaptor.BecomeRoot(stream_STDDEV_POP.NextNode(), root_2);

					DebugLocation(1409, 58);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// MySQL51Parser.g3:1410:4: STDDEV_SAMP LPAREN expr RPAREN
				{
				DebugLocation(1410, 4);
				STDDEV_SAMP924=(IToken)Match(input,STDDEV_SAMP,Follow._STDDEV_SAMP_in_functionCall12414); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STDDEV_SAMP.Add(STDDEV_SAMP924);

				DebugLocation(1410, 16);
				LPAREN925=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12416); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN925);

				DebugLocation(1410, 23);
				PushFollow(Follow._expr_in_functionCall12418);
				expr926=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr926.Tree);
				DebugLocation(1410, 28);
				RPAREN927=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12420); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN927);



				{
				// AST REWRITE
				// elements: STDDEV_SAMP, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1410:36: -> ^( FUNC ^( STDDEV_SAMP expr ) )
				{
					DebugLocation(1410, 39);
					// MySQL51Parser.g3:1410:39: ^( FUNC ^( STDDEV_SAMP expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1410, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1410, 46);
					// MySQL51Parser.g3:1410:46: ^( STDDEV_SAMP expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1410, 48);
					root_2 = (object)adaptor.BecomeRoot(stream_STDDEV_SAMP.NextNode(), root_2);

					DebugLocation(1410, 60);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// MySQL51Parser.g3:1411:4: SUM LPAREN ( DISTINCT )? expr RPAREN
				{
				DebugLocation(1411, 4);
				SUM928=(IToken)Match(input,SUM,Follow._SUM_in_functionCall12438); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUM.Add(SUM928);

				DebugLocation(1411, 8);
				LPAREN929=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12440); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN929);

				DebugLocation(1411, 15);
				// MySQL51Parser.g3:1411:15: ( DISTINCT )?
				int alt328=2;
				try { DebugEnterSubRule(328);
				try { DebugEnterDecision(328, false);
				int LA328_0 = input.LA(1);

				if ((LA328_0==DISTINCT))
				{
					alt328 = 1;
				}
				} finally { DebugExitDecision(328); }
				switch (alt328)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1411:15: DISTINCT
					{
					DebugLocation(1411, 15);
					DISTINCT930=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functionCall12442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT930);


					}
					break;

				}
				} finally { DebugExitSubRule(328); }

				DebugLocation(1411, 25);
				PushFollow(Follow._expr_in_functionCall12445);
				expr931=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr931.Tree);
				DebugLocation(1411, 30);
				RPAREN932=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN932);



				{
				// AST REWRITE
				// elements: SUM, expr, DISTINCT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1411:38: -> ^( FUNC ^( SUM expr ( DISTINCT )? ) )
				{
					DebugLocation(1411, 41);
					// MySQL51Parser.g3:1411:41: ^( FUNC ^( SUM expr ( DISTINCT )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1411, 43);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1411, 48);
					// MySQL51Parser.g3:1411:48: ^( SUM expr ( DISTINCT )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1411, 50);
					root_2 = (object)adaptor.BecomeRoot(stream_SUM.NextNode(), root_2);

					DebugLocation(1411, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());
					DebugLocation(1411, 59);
					// MySQL51Parser.g3:1411:59: ( DISTINCT )?
					if (stream_DISTINCT.HasNext)
					{
						DebugLocation(1411, 59);
						adaptor.AddChild(root_2, stream_DISTINCT.NextNode());

					}
					stream_DISTINCT.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// MySQL51Parser.g3:1413:4: SYSTEM_USER LPAREN RPAREN
				{
				DebugLocation(1413, 4);
				SYSTEM_USER933=(IToken)Match(input,SYSTEM_USER,Follow._SYSTEM_USER_in_functionCall12471); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEM_USER.Add(SYSTEM_USER933);

				DebugLocation(1413, 16);
				LPAREN934=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12473); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN934);

				DebugLocation(1413, 23);
				RPAREN935=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12475); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN935);



				{
				// AST REWRITE
				// elements: SYSTEM_USER, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1413:31: -> ^( FUNC ^( SYSTEM_USER LPAREN ) )
				{
					DebugLocation(1413, 34);
					// MySQL51Parser.g3:1413:34: ^( FUNC ^( SYSTEM_USER LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1413, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1413, 41);
					// MySQL51Parser.g3:1413:41: ^( SYSTEM_USER LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1413, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_SYSTEM_USER.NextNode(), root_2);

					DebugLocation(1413, 55);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// MySQL51Parser.g3:1414:4: TRIM LPAREN ( (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) ) |str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) ) ) RPAREN
				{
				DebugLocation(1414, 4);
				TRIM936=(IToken)Match(input,TRIM,Follow._TRIM_in_functionCall12493); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRIM.Add(TRIM936);

				DebugLocation(1414, 9);
				LPAREN937=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12495); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN937);

				DebugLocation(1415, 4);
				// MySQL51Parser.g3:1415:4: ( (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) ) |str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) ) )
				int alt332=2;
				try { DebugEnterSubRule(332);
				try { DebugEnterDecision(332, false);
				int LA332_0 = input.LA(1);

				if ((LA332_0==BOTH||LA332_0==LEADING||LA332_0==TRAILING))
				{
					alt332 = 1;
				}
				else if ((LA332_0==ACTION||(LA332_0>=ADDDATE && LA332_0<=ALGORITHM)||LA332_0==ANY||LA332_0==ASCII||(LA332_0>=AT && LA332_0<=BACKUP)||LA332_0==BEGIN||(LA332_0>=BINARY && LA332_0<=BIT)||LA332_0==BITWISE_INVERSION||(LA332_0>=BIT_AND && LA332_0<=BIT_XOR)||(LA332_0>=BLOCK && LA332_0<=BOOLEAN)||LA332_0==BTREE||(LA332_0>=BYTE && LA332_0<=CACHE)||(LA332_0>=CASCADED && LA332_0<=CHAIN)||(LA332_0>=CHANGED && LA332_0<=CHAR)||LA332_0==CHARSET||(LA332_0>=CHECKSUM && LA332_0<=COLLATION)||LA332_0==COLUMNS||LA332_0==COMMENT||(LA332_0>=COMMIT && LA332_0<=CONCURRENT)||(LA332_0>=CONNECTION && LA332_0<=CONSISTENT)||(LA332_0>=CONTAINS && LA332_0<=CONTEXT)||LA332_0==CONTRIBUTORS||(LA332_0>=COUNT && LA332_0<=CPU)||(LA332_0>=CUBE && LA332_0<=CURRENT_USER)||LA332_0==CURTIME||(LA332_0>=DATA && LA332_0<=DATABASE)||(LA332_0>=DATAFILE && LA332_0<=DATE_ADD)||LA332_0==DATE_SUB||LA332_0==DAY||LA332_0==DEALLOCATE||LA332_0==DEFINER||LA332_0==DELAY_KEY_WRITE||LA332_0==DES_KEY_FILE||(LA332_0>=DIRECTORY && LA332_0<=DISK)||LA332_0==DO||(LA332_0>=DUMPFILE && LA332_0<=DYNAMIC)||LA332_0==ENABLE||(LA332_0>=END && LA332_0<=ENUM)||(LA332_0>=ERRORS && LA332_0<=ESCAPE)||(LA332_0>=EVENT && LA332_0<=EVERY)||(LA332_0>=EXECUTE && LA332_0<=EXISTS)||LA332_0==EXPANSION||(LA332_0>=EXTENDED && LA332_0<=FAULTS)||(LA332_0>=FIELDS && LA332_0<=FIXED)||LA332_0==FLUSH||(LA332_0>=FOUND && LA332_0<=FRAC_SECOND)||LA332_0==FULL||(LA332_0>=FUNCTION && LA332_0<=GLOBAL_VARIABLE)||LA332_0==GRANTS||(LA332_0>=GROUP && LA332_0<=HASH)||(LA332_0>=HELP && LA332_0<=HEXA_VALUE)||(LA332_0>=HOST && LA332_0<=HOUR)||(LA332_0>=ID && LA332_0<=IFNULL)||LA332_0==IMPORT||LA332_0==INDEXES||LA332_0==INITIAL_SIZE||LA332_0==INNOBASE||(LA332_0>=INSERT && LA332_0<=INSTALL)||LA332_0==INTERVAL||(LA332_0>=INT_NUMBER && LA332_0<=IPC)||(LA332_0>=ISOLATION && LA332_0<=ISSUER)||LA332_0==KEY_BLOCK_SIZE||(LA332_0>=LABEL && LA332_0<=LCURLY)||(LA332_0>=LEAVES && LA332_0<=LEFT)||LA332_0==LESS||LA332_0==LEVEL||(LA332_0>=LINESTRING && LA332_0<=LIST)||LA332_0==LOCAL||(LA332_0>=LOCKS && LA332_0<=LOGFILE)||LA332_0==LOGS||(LA332_0>=LPAREN && LA332_0<=MASTER_SSL_KEY)||(LA332_0>=MASTER_USER && LA332_0<=MEDIUM)||(LA332_0>=MEMORY && LA332_0<=MID)||(LA332_0>=MIGRATE && LA332_0<=MINUTE)||(LA332_0>=MIN_ROWS && LA332_0<=MODE)||LA332_0==MODIFY||LA332_0==MONTH||(LA332_0>=MULTILINESTRING && LA332_0<=MUTEX)||(LA332_0>=NAME && LA332_0<=NATIONAL)||(LA332_0>=NCHAR && LA332_0<=NOT)||(LA332_0>=NOT_OP && LA332_0<=NO_WAIT)||(LA332_0>=NULL && LA332_0<=NULLIF)||LA332_0==NUMBER||(LA332_0>=NVARCHAR && LA332_0<=OLD_PASSWORD)||LA332_0==ONE||(LA332_0>=ONE_SHOT && LA332_0<=OPEN)||LA332_0==OPTIONS||(LA332_0>=OWNER && LA332_0<=POSITION)||(LA332_0>=PREPARE && LA332_0<=PREV)||LA332_0==PRIVILEGES||(LA332_0>=PROCESS && LA332_0<=PROFILES)||(LA332_0>=QUARTER && LA332_0<=QUICK)||(LA332_0>=REBUILD && LA332_0<=REDUNDANT)||(LA332_0>=RELAY_LOG_FILE && LA332_0<=RELAY_THREAD)||(LA332_0>=RELOAD && LA332_0<=REMOVE)||(LA332_0>=REORGANIZE && LA332_0<=REPLICATION)||(LA332_0>=RESET && LA332_0<=RESTORE)||LA332_0==RESUME||LA332_0==RETURNS||LA332_0==RIGHT||(LA332_0>=ROLLBACK && LA332_0<=ROW_FORMAT)||(LA332_0>=RTREE && LA332_0<=SCHEDULE)||LA332_0==SECOND||LA332_0==SECURITY||(LA332_0>=SERIAL && LA332_0<=SESSION_VARIABLE)||LA332_0==SHARE||(LA332_0>=SHUTDOWN && LA332_0<=SLAVE)||(LA332_0>=SNAPSHOT && LA332_0<=SOCKET)||(LA332_0>=SONAME && LA332_0<=SOURCE)||(LA332_0>=SQL_BUFFER_RESULT && LA332_0<=SQL_CACHE)||LA332_0==SQL_NO_CACHE||LA332_0==SQL_THREAD||LA332_0==START||(LA332_0>=STARTS && LA332_0<=STORAGE)||(LA332_0>=STRING && LA332_0<=SYSTEM_USER)||(LA332_0>=TABLES && LA332_0<=TEMPTABLE)||(LA332_0>=TEXT && LA332_0<=THAN)||(LA332_0>=TIME && LA332_0<=TIMESTAMP_DIFF)||(LA332_0>=TRANSACTION && LA332_0<=TRANSACTIONAL)||(LA332_0>=TRIGGERS && LA332_0<=UNDEFINED)||(LA332_0>=UNDOFILE && LA332_0<=UNINSTALL)||LA332_0==UNKNOWN||LA332_0==UNTIL||LA332_0==UPGRADE||LA332_0==USER||LA332_0==USE_FRM||(LA332_0>=UTC_DATE && LA332_0<=VALUE)||LA332_0==VALUE_PLACEHOLDER||(LA332_0>=VARIABLES && LA332_0<=VARIANCE)||(LA332_0>=VAR_POP && LA332_0<=WEEK)||(LA332_0>=WORK && LA332_0<=WRAPPER)||(LA332_0>=X509 && LA332_0<=XA)||LA332_0==YEAR||LA332_0==CONCAT))
				{
					alt332 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 332, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(332); }
				switch (alt332)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1415:6: (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr
					{
					DebugLocation(1415, 6);
					// MySQL51Parser.g3:1415:6: (pos= BOTH |pos= LEADING |pos= TRAILING )
					int alt329=3;
					try { DebugEnterSubRule(329);
					try { DebugEnterDecision(329, false);
					switch (input.LA(1))
					{
					case BOTH:
						{
						alt329 = 1;
						}
						break;
					case LEADING:
						{
						alt329 = 2;
						}
						break;
					case TRAILING:
						{
						alt329 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 329, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(329); }
					switch (alt329)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1415:7: pos= BOTH
						{
						DebugLocation(1415, 10);
						pos=(IToken)Match(input,BOTH,Follow._BOTH_in_functionCall12505); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_BOTH.Add(pos);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:1415:18: pos= LEADING
						{
						DebugLocation(1415, 21);
						pos=(IToken)Match(input,LEADING,Follow._LEADING_in_functionCall12511); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_LEADING.Add(pos);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// MySQL51Parser.g3:1415:32: pos= TRAILING
						{
						DebugLocation(1415, 35);
						pos=(IToken)Match(input,TRAILING,Follow._TRAILING_in_functionCall12517); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_TRAILING.Add(pos);


						}
						break;

					}
					} finally { DebugExitSubRule(329); }

					DebugLocation(1416, 11);
					// MySQL51Parser.g3:1416:11: (remstr= expr )?
					int alt330=2;
					try { DebugEnterSubRule(330);
					try { DebugEnterDecision(330, false);
					int LA330_0 = input.LA(1);

					if ((LA330_0==ACTION||(LA330_0>=ADDDATE && LA330_0<=ALGORITHM)||LA330_0==ANY||LA330_0==ASCII||(LA330_0>=AT && LA330_0<=BACKUP)||LA330_0==BEGIN||(LA330_0>=BINARY && LA330_0<=BIT)||LA330_0==BITWISE_INVERSION||(LA330_0>=BIT_AND && LA330_0<=BIT_XOR)||(LA330_0>=BLOCK && LA330_0<=BOOLEAN)||LA330_0==BTREE||(LA330_0>=BYTE && LA330_0<=CACHE)||(LA330_0>=CASCADED && LA330_0<=CHAIN)||(LA330_0>=CHANGED && LA330_0<=CHAR)||LA330_0==CHARSET||(LA330_0>=CHECKSUM && LA330_0<=COLLATION)||LA330_0==COLUMNS||LA330_0==COMMENT||(LA330_0>=COMMIT && LA330_0<=CONCURRENT)||(LA330_0>=CONNECTION && LA330_0<=CONSISTENT)||(LA330_0>=CONTAINS && LA330_0<=CONTEXT)||LA330_0==CONTRIBUTORS||(LA330_0>=COUNT && LA330_0<=CPU)||(LA330_0>=CUBE && LA330_0<=CURRENT_USER)||LA330_0==CURTIME||(LA330_0>=DATA && LA330_0<=DATABASE)||(LA330_0>=DATAFILE && LA330_0<=DATE_ADD)||LA330_0==DATE_SUB||LA330_0==DAY||LA330_0==DEALLOCATE||LA330_0==DEFINER||LA330_0==DELAY_KEY_WRITE||LA330_0==DES_KEY_FILE||(LA330_0>=DIRECTORY && LA330_0<=DISK)||LA330_0==DO||(LA330_0>=DUMPFILE && LA330_0<=DYNAMIC)||LA330_0==ENABLE||(LA330_0>=END && LA330_0<=ENUM)||(LA330_0>=ERRORS && LA330_0<=ESCAPE)||(LA330_0>=EVENT && LA330_0<=EVERY)||(LA330_0>=EXECUTE && LA330_0<=EXISTS)||LA330_0==EXPANSION||(LA330_0>=EXTENDED && LA330_0<=FAULTS)||(LA330_0>=FIELDS && LA330_0<=FIXED)||LA330_0==FLUSH||(LA330_0>=FOUND && LA330_0<=FRAC_SECOND)||LA330_0==FULL||(LA330_0>=FUNCTION && LA330_0<=GLOBAL_VARIABLE)||LA330_0==GRANTS||(LA330_0>=GROUP && LA330_0<=HASH)||(LA330_0>=HELP && LA330_0<=HEXA_VALUE)||(LA330_0>=HOST && LA330_0<=HOUR)||(LA330_0>=ID && LA330_0<=IFNULL)||LA330_0==IMPORT||LA330_0==INDEXES||LA330_0==INITIAL_SIZE||LA330_0==INNOBASE||(LA330_0>=INSERT && LA330_0<=INSTALL)||LA330_0==INTERVAL||(LA330_0>=INT_NUMBER && LA330_0<=IPC)||(LA330_0>=ISOLATION && LA330_0<=ISSUER)||LA330_0==KEY_BLOCK_SIZE||(LA330_0>=LABEL && LA330_0<=LCURLY)||(LA330_0>=LEAVES && LA330_0<=LEFT)||LA330_0==LESS||LA330_0==LEVEL||(LA330_0>=LINESTRING && LA330_0<=LIST)||LA330_0==LOCAL||(LA330_0>=LOCKS && LA330_0<=LOGFILE)||LA330_0==LOGS||(LA330_0>=LPAREN && LA330_0<=MASTER_SSL_KEY)||(LA330_0>=MASTER_USER && LA330_0<=MEDIUM)||(LA330_0>=MEMORY && LA330_0<=MID)||(LA330_0>=MIGRATE && LA330_0<=MINUTE)||(LA330_0>=MIN_ROWS && LA330_0<=MODE)||LA330_0==MODIFY||LA330_0==MONTH||(LA330_0>=MULTILINESTRING && LA330_0<=MUTEX)||(LA330_0>=NAME && LA330_0<=NATIONAL)||(LA330_0>=NCHAR && LA330_0<=NOT)||(LA330_0>=NOT_OP && LA330_0<=NO_WAIT)||(LA330_0>=NULL && LA330_0<=NULLIF)||LA330_0==NUMBER||(LA330_0>=NVARCHAR && LA330_0<=OLD_PASSWORD)||LA330_0==ONE||(LA330_0>=ONE_SHOT && LA330_0<=OPEN)||LA330_0==OPTIONS||(LA330_0>=OWNER && LA330_0<=POSITION)||(LA330_0>=PREPARE && LA330_0<=PREV)||LA330_0==PRIVILEGES||(LA330_0>=PROCESS && LA330_0<=PROFILES)||(LA330_0>=QUARTER && LA330_0<=QUICK)||(LA330_0>=REBUILD && LA330_0<=REDUNDANT)||(LA330_0>=RELAY_LOG_FILE && LA330_0<=RELAY_THREAD)||(LA330_0>=RELOAD && LA330_0<=REMOVE)||(LA330_0>=REORGANIZE && LA330_0<=REPLICATION)||(LA330_0>=RESET && LA330_0<=RESTORE)||LA330_0==RESUME||LA330_0==RETURNS||LA330_0==RIGHT||(LA330_0>=ROLLBACK && LA330_0<=ROW_FORMAT)||(LA330_0>=RTREE && LA330_0<=SCHEDULE)||LA330_0==SECOND||LA330_0==SECURITY||(LA330_0>=SERIAL && LA330_0<=SESSION_VARIABLE)||LA330_0==SHARE||(LA330_0>=SHUTDOWN && LA330_0<=SLAVE)||(LA330_0>=SNAPSHOT && LA330_0<=SOCKET)||(LA330_0>=SONAME && LA330_0<=SOURCE)||(LA330_0>=SQL_BUFFER_RESULT && LA330_0<=SQL_CACHE)||LA330_0==SQL_NO_CACHE||LA330_0==SQL_THREAD||LA330_0==START||(LA330_0>=STARTS && LA330_0<=STORAGE)||(LA330_0>=STRING && LA330_0<=SYSTEM_USER)||(LA330_0>=TABLES && LA330_0<=TEMPTABLE)||(LA330_0>=TEXT && LA330_0<=THAN)||(LA330_0>=TIME && LA330_0<=TIMESTAMP_DIFF)||(LA330_0>=TRANSACTION && LA330_0<=TRANSACTIONAL)||(LA330_0>=TRIGGERS && LA330_0<=UNDEFINED)||(LA330_0>=UNDOFILE && LA330_0<=UNINSTALL)||LA330_0==UNKNOWN||LA330_0==UNTIL||LA330_0==UPGRADE||LA330_0==USER||LA330_0==USE_FRM||(LA330_0>=UTC_DATE && LA330_0<=VALUE)||LA330_0==VALUE_PLACEHOLDER||(LA330_0>=VARIABLES && LA330_0<=VARIANCE)||(LA330_0>=VAR_POP && LA330_0<=WEEK)||(LA330_0>=WORK && LA330_0<=WRAPPER)||(LA330_0>=X509 && LA330_0<=XA)||LA330_0==YEAR||LA330_0==CONCAT))
					{
						alt330 = 1;
					}
					} finally { DebugExitDecision(330); }
					switch (alt330)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1416:11: remstr= expr
						{
						DebugLocation(1416, 11);
						PushFollow(Follow._expr_in_functionCall12526);
						remstr=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(remstr.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(330); }

					DebugLocation(1416, 18);
					FROM938=(IToken)Match(input,FROM,Follow._FROM_in_functionCall12529); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FROM.Add(FROM938);

					DebugLocation(1416, 26);
					PushFollow(Follow._expr_in_functionCall12533);
					str=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(str.Tree);


					{
					// AST REWRITE
					// elements: TRIM, str, pos, remstr
					// token labels: pos
					// rule labels: str, remstr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_pos=new RewriteRuleITokenStream(adaptor,"token pos",pos);
					RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
					RewriteRuleSubtreeStream stream_remstr=new RewriteRuleSubtreeStream(adaptor,"rule remstr",remstr!=null?remstr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1416:33: -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) )
					{
						DebugLocation(1416, 36);
						// MySQL51Parser.g3:1416:36: ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1416, 38);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1416, 43);
						// MySQL51Parser.g3:1416:43: ^( TRIM $str ( $pos)? ( $remstr)? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1416, 45);
						root_2 = (object)adaptor.BecomeRoot(stream_TRIM.NextNode(), root_2);

						DebugLocation(1416, 51);
						adaptor.AddChild(root_2, stream_str.NextTree());
						DebugLocation(1416, 56);
						// MySQL51Parser.g3:1416:56: ( $pos)?
						if (stream_pos.HasNext)
						{
							DebugLocation(1416, 56);
							adaptor.AddChild(root_2, stream_pos.NextNode());

						}
						stream_pos.Reset();
						DebugLocation(1416, 62);
						// MySQL51Parser.g3:1416:62: ( $remstr)?
						if (stream_remstr.HasNext)
						{
							DebugLocation(1416, 62);
							adaptor.AddChild(root_2, stream_remstr.NextTree());

						}
						stream_remstr.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1417:6: str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) )
					{
					DebugLocation(1417, 10);
					PushFollow(Follow._expr_in_functionCall12564);
					str1=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(str1.Tree);
					DebugLocation(1418, 5);
					// MySQL51Parser.g3:1418:5: ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) )
					int alt331=2;
					try { DebugEnterSubRule(331);
					try { DebugEnterDecision(331, false);
					int LA331_0 = input.LA(1);

					if ((LA331_0==FROM))
					{
						alt331 = 1;
					}
					else if ((LA331_0==RPAREN))
					{
						alt331 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 331, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(331); }
					switch (alt331)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1418:7: FROM str2= expr
						{
						DebugLocation(1418, 7);
						FROM939=(IToken)Match(input,FROM,Follow._FROM_in_functionCall12572); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FROM.Add(FROM939);

						DebugLocation(1418, 16);
						PushFollow(Follow._expr_in_functionCall12576);
						str2=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(str2.Tree);


						{
						// AST REWRITE
						// elements: TRIM, str2, str1
						// token labels: 
						// rule labels: str2, str1, retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_str2=new RewriteRuleSubtreeStream(adaptor,"rule str2",str2!=null?str2.Tree:null);
						RewriteRuleSubtreeStream stream_str1=new RewriteRuleSubtreeStream(adaptor,"rule str1",str1!=null?str1.Tree:null);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 1418:25: -> ^( FUNC ^( TRIM $str2 $str1) )
						{
							DebugLocation(1418, 28);
							// MySQL51Parser.g3:1418:28: ^( FUNC ^( TRIM $str2 $str1) )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(1418, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

							DebugLocation(1418, 35);
							// MySQL51Parser.g3:1418:35: ^( TRIM $str2 $str1)
							{
							object root_2 = (object)adaptor.Nil();
							DebugLocation(1418, 37);
							root_2 = (object)adaptor.BecomeRoot(stream_TRIM.NextNode(), root_2);

							DebugLocation(1418, 43);
							adaptor.AddChild(root_2, stream_str2.NextTree());
							DebugLocation(1418, 49);
							adaptor.AddChild(root_2, stream_str1.NextTree());

							adaptor.AddChild(root_1, root_2);
							}

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:1419:23: 
						{

						{
						// AST REWRITE
						// elements: TRIM, str1
						// token labels: 
						// rule labels: str1, retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_str1=new RewriteRuleSubtreeStream(adaptor,"rule str1",str1!=null?str1.Tree:null);
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 1419:23: -> ^( FUNC ^( TRIM $str1) )
						{
							DebugLocation(1419, 26);
							// MySQL51Parser.g3:1419:26: ^( FUNC ^( TRIM $str1) )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(1419, 28);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

							DebugLocation(1419, 33);
							// MySQL51Parser.g3:1419:33: ^( TRIM $str1)
							{
							object root_2 = (object)adaptor.Nil();
							DebugLocation(1419, 35);
							root_2 = (object)adaptor.BecomeRoot(stream_TRIM.NextNode(), root_2);

							DebugLocation(1419, 41);
							adaptor.AddChild(root_2, stream_str1.NextTree());

							adaptor.AddChild(root_1, root_2);
							}

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(331); }


					}
					break;

				}
				} finally { DebugExitSubRule(332); }

				DebugLocation(1422, 4);
				RPAREN940=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12636); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN940);


				}
				break;
			case 26:
				DebugEnterAlt(26);
				// MySQL51Parser.g3:1423:4: VARIANCE LPAREN expr RPAREN
				{
				DebugLocation(1423, 4);
				VARIANCE941=(IToken)Match(input,VARIANCE,Follow._VARIANCE_in_functionCall12641); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VARIANCE.Add(VARIANCE941);

				DebugLocation(1423, 13);
				LPAREN942=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12643); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN942);

				DebugLocation(1423, 20);
				PushFollow(Follow._expr_in_functionCall12645);
				expr943=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr943.Tree);
				DebugLocation(1423, 25);
				RPAREN944=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12647); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN944);



				{
				// AST REWRITE
				// elements: VARIANCE, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1423:33: -> ^( FUNC ^( VARIANCE expr ) )
				{
					DebugLocation(1423, 36);
					// MySQL51Parser.g3:1423:36: ^( FUNC ^( VARIANCE expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1423, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1423, 43);
					// MySQL51Parser.g3:1423:43: ^( VARIANCE expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1423, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_VARIANCE.NextNode(), root_2);

					DebugLocation(1423, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// MySQL51Parser.g3:1424:4: VAR_POP LPAREN expr RPAREN
				{
				DebugLocation(1424, 4);
				VAR_POP945=(IToken)Match(input,VAR_POP,Follow._VAR_POP_in_functionCall12665); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VAR_POP.Add(VAR_POP945);

				DebugLocation(1424, 12);
				LPAREN946=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12667); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN946);

				DebugLocation(1424, 19);
				PushFollow(Follow._expr_in_functionCall12669);
				expr947=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr947.Tree);
				DebugLocation(1424, 24);
				RPAREN948=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12671); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN948);



				{
				// AST REWRITE
				// elements: VAR_POP, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1424:32: -> ^( FUNC ^( VAR_POP expr ) )
				{
					DebugLocation(1424, 35);
					// MySQL51Parser.g3:1424:35: ^( FUNC ^( VAR_POP expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1424, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1424, 42);
					// MySQL51Parser.g3:1424:42: ^( VAR_POP expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1424, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_VAR_POP.NextNode(), root_2);

					DebugLocation(1424, 52);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// MySQL51Parser.g3:1425:4: VAR_SAMP LPAREN expr RPAREN
				{
				DebugLocation(1425, 4);
				VAR_SAMP949=(IToken)Match(input,VAR_SAMP,Follow._VAR_SAMP_in_functionCall12689); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VAR_SAMP.Add(VAR_SAMP949);

				DebugLocation(1425, 13);
				LPAREN950=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12691); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN950);

				DebugLocation(1425, 20);
				PushFollow(Follow._expr_in_functionCall12693);
				expr951=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr951.Tree);
				DebugLocation(1425, 25);
				RPAREN952=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12695); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN952);



				{
				// AST REWRITE
				// elements: VAR_SAMP, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1425:33: -> ^( FUNC ^( VAR_SAMP expr ) )
				{
					DebugLocation(1425, 36);
					// MySQL51Parser.g3:1425:36: ^( FUNC ^( VAR_SAMP expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1425, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1425, 43);
					// MySQL51Parser.g3:1425:43: ^( VAR_SAMP expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1425, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_VAR_SAMP.NextNode(), root_2);

					DebugLocation(1425, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// MySQL51Parser.g3:1428:4: ADDDATE LPAREN date= expr COMMA ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) )
				{
				DebugLocation(1428, 4);
				ADDDATE953=(IToken)Match(input,ADDDATE,Follow._ADDDATE_in_functionCall12716); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ADDDATE.Add(ADDDATE953);

				DebugLocation(1428, 12);
				LPAREN954=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN954);

				DebugLocation(1428, 23);
				PushFollow(Follow._expr_in_functionCall12722);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1428, 29);
				COMMA955=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall12724); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA955);

				DebugLocation(1429, 3);
				// MySQL51Parser.g3:1429:3: ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) )
				int alt333=2;
				try { DebugEnterSubRule(333);
				try { DebugEnterDecision(333, false);
				try
				{
					alt333 = dfa333.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(333); }
				switch (alt333)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1429:5: ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN
					{
					DebugLocation(1429, 18);
					INTERVAL956=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_functionCall12736); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL956);

					DebugLocation(1429, 35);
					PushFollow(Follow._expr_in_functionCall12740);
					interval=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(interval.Tree);
					DebugLocation(1429, 41);
					PushFollow(Follow._timeUnit_in_functionCall12742);
					timeUnit957=timeUnit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_timeUnit.Add(timeUnit957.Tree);
					DebugLocation(1429, 50);
					RPAREN958=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN958);



					{
					// AST REWRITE
					// elements: ADDDATE, date, interval, timeUnit
					// token labels: 
					// rule labels: date, interval, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
					RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval",interval!=null?interval.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1429:58: -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) )
					{
						DebugLocation(1429, 61);
						// MySQL51Parser.g3:1429:61: ^( FUNC ^( ADDDATE $date $interval timeUnit ) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1429, 63);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1429, 68);
						// MySQL51Parser.g3:1429:68: ^( ADDDATE $date $interval timeUnit )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1429, 70);
						root_2 = (object)adaptor.BecomeRoot(stream_ADDDATE.NextNode(), root_2);

						DebugLocation(1429, 79);
						adaptor.AddChild(root_2, stream_date.NextTree());
						DebugLocation(1429, 85);
						adaptor.AddChild(root_2, stream_interval.NextTree());
						DebugLocation(1429, 94);
						adaptor.AddChild(root_2, stream_timeUnit.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1430:5: days= expr RPAREN
					{
					DebugLocation(1430, 9);
					PushFollow(Follow._expr_in_functionCall12771);
					days=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(days.Tree);
					DebugLocation(1430, 15);
					RPAREN959=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12773); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN959);



					{
					// AST REWRITE
					// elements: ADDDATE, date, days
					// token labels: 
					// rule labels: date, days, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
					RewriteRuleSubtreeStream stream_days=new RewriteRuleSubtreeStream(adaptor,"rule days",days!=null?days.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1430:23: -> ^( FUNC ^( ADDDATE $date $days) )
					{
						DebugLocation(1430, 26);
						// MySQL51Parser.g3:1430:26: ^( FUNC ^( ADDDATE $date $days) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1430, 28);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1430, 33);
						// MySQL51Parser.g3:1430:33: ^( ADDDATE $date $days)
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1430, 35);
						root_2 = (object)adaptor.BecomeRoot(stream_ADDDATE.NextNode(), root_2);

						DebugLocation(1430, 44);
						adaptor.AddChild(root_2, stream_date.NextTree());
						DebugLocation(1430, 50);
						adaptor.AddChild(root_2, stream_days.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(333); }


				}
				break;
			case 30:
				DebugEnterAlt(30);
				// MySQL51Parser.g3:1432:4: CURDATE LPAREN RPAREN
				{
				DebugLocation(1432, 4);
				CURDATE960=(IToken)Match(input,CURDATE,Follow._CURDATE_in_functionCall12799); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURDATE.Add(CURDATE960);

				DebugLocation(1432, 12);
				LPAREN961=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN961);

				DebugLocation(1432, 19);
				RPAREN962=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12803); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN962);



				{
				// AST REWRITE
				// elements: CURDATE, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1432:27: -> ^( FUNC ^( CURDATE LPAREN ) )
				{
					DebugLocation(1432, 30);
					// MySQL51Parser.g3:1432:30: ^( FUNC ^( CURDATE LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1432, 32);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1432, 37);
					// MySQL51Parser.g3:1432:37: ^( CURDATE LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1432, 39);
					root_2 = (object)adaptor.BecomeRoot(stream_CURDATE.NextNode(), root_2);

					DebugLocation(1432, 47);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// MySQL51Parser.g3:1433:4: CURRENT_DATE ( LPAREN RPAREN )?
				{
				DebugLocation(1433, 4);
				CURRENT_DATE963=(IToken)Match(input,CURRENT_DATE,Follow._CURRENT_DATE_in_functionCall12821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURRENT_DATE.Add(CURRENT_DATE963);

				DebugLocation(1433, 17);
				// MySQL51Parser.g3:1433:17: ( LPAREN RPAREN )?
				int alt334=2;
				try { DebugEnterSubRule(334);
				try { DebugEnterDecision(334, false);
				int LA334_0 = input.LA(1);

				if ((LA334_0==LPAREN))
				{
					int LA334_1 = input.LA(2);

					if ((LA334_1==RPAREN))
					{
						alt334 = 1;
					}
				}
				} finally { DebugExitDecision(334); }
				switch (alt334)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1433:18: LPAREN RPAREN
					{
					DebugLocation(1433, 18);
					LPAREN964=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12824); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN964);

					DebugLocation(1433, 25);
					RPAREN965=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12826); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN965);


					}
					break;

				}
				} finally { DebugExitSubRule(334); }



				{
				// AST REWRITE
				// elements: CURRENT_DATE, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1433:34: -> ^( FUNC ^( CURRENT_DATE ( LPAREN )? ) )
				{
					DebugLocation(1433, 37);
					// MySQL51Parser.g3:1433:37: ^( FUNC ^( CURRENT_DATE ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1433, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1433, 44);
					// MySQL51Parser.g3:1433:44: ^( CURRENT_DATE ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1433, 46);
					root_2 = (object)adaptor.BecomeRoot(stream_CURRENT_DATE.NextNode(), root_2);

					DebugLocation(1433, 59);
					// MySQL51Parser.g3:1433:59: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1433, 59);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// MySQL51Parser.g3:1434:4: CURTIME LPAREN RPAREN
				{
				DebugLocation(1434, 4);
				CURTIME966=(IToken)Match(input,CURTIME,Follow._CURTIME_in_functionCall12846); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURTIME.Add(CURTIME966);

				DebugLocation(1434, 12);
				LPAREN967=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12848); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN967);

				DebugLocation(1434, 19);
				RPAREN968=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12850); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN968);



				{
				// AST REWRITE
				// elements: CURTIME, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1434:28: -> ^( FUNC ^( CURTIME LPAREN ) )
				{
					DebugLocation(1434, 31);
					// MySQL51Parser.g3:1434:31: ^( FUNC ^( CURTIME LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1434, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1434, 38);
					// MySQL51Parser.g3:1434:38: ^( CURTIME LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1434, 40);
					root_2 = (object)adaptor.BecomeRoot(stream_CURTIME.NextNode(), root_2);

					DebugLocation(1434, 48);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// MySQL51Parser.g3:1435:4: CURRENT_TIME ( LPAREN RPAREN )?
				{
				DebugLocation(1435, 4);
				CURRENT_TIME969=(IToken)Match(input,CURRENT_TIME,Follow._CURRENT_TIME_in_functionCall12869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURRENT_TIME.Add(CURRENT_TIME969);

				DebugLocation(1435, 17);
				// MySQL51Parser.g3:1435:17: ( LPAREN RPAREN )?
				int alt335=2;
				try { DebugEnterSubRule(335);
				try { DebugEnterDecision(335, false);
				int LA335_0 = input.LA(1);

				if ((LA335_0==LPAREN))
				{
					int LA335_1 = input.LA(2);

					if ((LA335_1==RPAREN))
					{
						alt335 = 1;
					}
				}
				} finally { DebugExitDecision(335); }
				switch (alt335)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1435:18: LPAREN RPAREN
					{
					DebugLocation(1435, 18);
					LPAREN970=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12872); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN970);

					DebugLocation(1435, 25);
					RPAREN971=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12874); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN971);


					}
					break;

				}
				} finally { DebugExitSubRule(335); }



				{
				// AST REWRITE
				// elements: CURRENT_TIME, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1435:34: -> ^( FUNC ^( CURRENT_TIME ( LPAREN )? ) )
				{
					DebugLocation(1435, 37);
					// MySQL51Parser.g3:1435:37: ^( FUNC ^( CURRENT_TIME ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1435, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1435, 44);
					// MySQL51Parser.g3:1435:44: ^( CURRENT_TIME ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1435, 46);
					root_2 = (object)adaptor.BecomeRoot(stream_CURRENT_TIME.NextNode(), root_2);

					DebugLocation(1435, 59);
					// MySQL51Parser.g3:1435:59: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1435, 59);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// MySQL51Parser.g3:1436:4: EXTRACT LPAREN timeUnit FROM expr RPAREN
				{
				DebugLocation(1436, 4);
				EXTRACT972=(IToken)Match(input,EXTRACT,Follow._EXTRACT_in_functionCall12894); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXTRACT.Add(EXTRACT972);

				DebugLocation(1436, 12);
				LPAREN973=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12896); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN973);

				DebugLocation(1436, 19);
				PushFollow(Follow._timeUnit_in_functionCall12898);
				timeUnit974=timeUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timeUnit.Add(timeUnit974.Tree);
				DebugLocation(1436, 28);
				FROM975=(IToken)Match(input,FROM,Follow._FROM_in_functionCall12900); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM975);

				DebugLocation(1436, 33);
				PushFollow(Follow._expr_in_functionCall12902);
				expr976=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr976.Tree);
				DebugLocation(1436, 38);
				RPAREN977=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN977);



				{
				// AST REWRITE
				// elements: EXTRACT, timeUnit, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1436:46: -> ^( FUNC ^( EXTRACT timeUnit expr ) )
				{
					DebugLocation(1436, 49);
					// MySQL51Parser.g3:1436:49: ^( FUNC ^( EXTRACT timeUnit expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1436, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1436, 56);
					// MySQL51Parser.g3:1436:56: ^( EXTRACT timeUnit expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1436, 58);
					root_2 = (object)adaptor.BecomeRoot(stream_EXTRACT.NextNode(), root_2);

					DebugLocation(1436, 66);
					adaptor.AddChild(root_2, stream_timeUnit.NextTree());
					DebugLocation(1436, 75);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// MySQL51Parser.g3:1437:4: GET_FORMAT LPAREN (type= DATE |type= TIME |type= DATETIME ) locale= expr RPAREN
				{
				DebugLocation(1437, 4);
				GET_FORMAT978=(IToken)Match(input,GET_FORMAT,Follow._GET_FORMAT_in_functionCall12924); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_GET_FORMAT.Add(GET_FORMAT978);

				DebugLocation(1437, 15);
				LPAREN979=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12926); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN979);

				DebugLocation(1438, 4);
				// MySQL51Parser.g3:1438:4: (type= DATE |type= TIME |type= DATETIME )
				int alt336=3;
				try { DebugEnterSubRule(336);
				try { DebugEnterDecision(336, false);
				switch (input.LA(1))
				{
				case DATE:
					{
					alt336 = 1;
					}
					break;
				case TIME:
					{
					alt336 = 2;
					}
					break;
				case DATETIME:
					{
					alt336 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 336, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(336); }
				switch (alt336)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1438:5: type= DATE
					{
					DebugLocation(1438, 9);
					type=(IToken)Match(input,DATE,Follow._DATE_in_functionCall12935); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DATE.Add(type);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1438:17: type= TIME
					{
					DebugLocation(1438, 21);
					type=(IToken)Match(input,TIME,Follow._TIME_in_functionCall12941); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_TIME.Add(type);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// MySQL51Parser.g3:1438:29: type= DATETIME
					{
					DebugLocation(1438, 33);
					type=(IToken)Match(input,DATETIME,Follow._DATETIME_in_functionCall12947); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DATETIME.Add(type);


					}
					break;

				}
				} finally { DebugExitSubRule(336); }

				DebugLocation(1439, 10);
				PushFollow(Follow._expr_in_functionCall12955);
				locale=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(locale.Tree);
				DebugLocation(1440, 3);
				RPAREN980=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12959); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN980);



				{
				// AST REWRITE
				// elements: GET_FORMAT, type, locale
				// token labels: type
				// rule labels: locale, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_type=new RewriteRuleITokenStream(adaptor,"token type",type);
				RewriteRuleSubtreeStream stream_locale=new RewriteRuleSubtreeStream(adaptor,"rule locale",locale!=null?locale.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1440:17: -> ^( FUNC ^( GET_FORMAT $type $locale) )
				{
					DebugLocation(1440, 20);
					// MySQL51Parser.g3:1440:20: ^( FUNC ^( GET_FORMAT $type $locale) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1440, 22);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1440, 27);
					// MySQL51Parser.g3:1440:27: ^( GET_FORMAT $type $locale)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1440, 29);
					root_2 = (object)adaptor.BecomeRoot(stream_GET_FORMAT.NextNode(), root_2);

					DebugLocation(1440, 41);
					adaptor.AddChild(root_2, stream_type.NextNode());
					DebugLocation(1440, 47);
					adaptor.AddChild(root_2, stream_locale.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// MySQL51Parser.g3:1441:4: NOW LPAREN RPAREN
				{
				DebugLocation(1441, 4);
				NOW981=(IToken)Match(input,NOW,Follow._NOW_in_functionCall12987); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOW.Add(NOW981);

				DebugLocation(1441, 8);
				LPAREN982=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall12989); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN982);

				DebugLocation(1441, 15);
				RPAREN983=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall12991); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN983);



				{
				// AST REWRITE
				// elements: NOW, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1441:26: -> ^( FUNC ^( NOW LPAREN ) )
				{
					DebugLocation(1441, 29);
					// MySQL51Parser.g3:1441:29: ^( FUNC ^( NOW LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1441, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1441, 36);
					// MySQL51Parser.g3:1441:36: ^( NOW LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1441, 38);
					root_2 = (object)adaptor.BecomeRoot(stream_NOW.NextNode(), root_2);

					DebugLocation(1441, 42);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// MySQL51Parser.g3:1442:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
				{
				DebugLocation(1442, 4);
				CURRENT_TIMESTAMP984=(IToken)Match(input,CURRENT_TIMESTAMP,Follow._CURRENT_TIMESTAMP_in_functionCall13012); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURRENT_TIMESTAMP.Add(CURRENT_TIMESTAMP984);

				DebugLocation(1442, 22);
				// MySQL51Parser.g3:1442:22: ( LPAREN RPAREN )?
				int alt337=2;
				try { DebugEnterSubRule(337);
				try { DebugEnterDecision(337, false);
				int LA337_0 = input.LA(1);

				if ((LA337_0==LPAREN))
				{
					int LA337_1 = input.LA(2);

					if ((LA337_1==RPAREN))
					{
						alt337 = 1;
					}
				}
				} finally { DebugExitDecision(337); }
				switch (alt337)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1442:23: LPAREN RPAREN
					{
					DebugLocation(1442, 23);
					LPAREN985=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13015); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN985);

					DebugLocation(1442, 30);
					RPAREN986=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13017); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN986);


					}
					break;

				}
				} finally { DebugExitSubRule(337); }



				{
				// AST REWRITE
				// elements: CURRENT_TIMESTAMP, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1442:39: -> ^( FUNC ^( CURRENT_TIMESTAMP ( LPAREN )? ) )
				{
					DebugLocation(1442, 42);
					// MySQL51Parser.g3:1442:42: ^( FUNC ^( CURRENT_TIMESTAMP ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1442, 44);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1442, 49);
					// MySQL51Parser.g3:1442:49: ^( CURRENT_TIMESTAMP ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1442, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_CURRENT_TIMESTAMP.NextNode(), root_2);

					DebugLocation(1442, 69);
					// MySQL51Parser.g3:1442:69: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1442, 69);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// MySQL51Parser.g3:1443:4: POSITION LPAREN substr= expr IN str= expr RPAREN
				{
				DebugLocation(1443, 4);
				POSITION987=(IToken)Match(input,POSITION,Follow._POSITION_in_functionCall13037); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POSITION.Add(POSITION987);

				DebugLocation(1443, 13);
				LPAREN988=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13039); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN988);

				DebugLocation(1443, 26);
				PushFollow(Follow._expr_in_functionCall13043);
				substr=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(substr.Tree);
				DebugLocation(1443, 32);
				IN989=(IToken)Match(input,IN,Follow._IN_in_functionCall13045); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IN.Add(IN989);

				DebugLocation(1443, 38);
				PushFollow(Follow._expr_in_functionCall13049);
				str=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(str.Tree);
				DebugLocation(1443, 44);
				RPAREN990=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN990);



				{
				// AST REWRITE
				// elements: POSITION, substr, str
				// token labels: 
				// rule labels: substr, str, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_substr=new RewriteRuleSubtreeStream(adaptor,"rule substr",substr!=null?substr.Tree:null);
				RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1443:52: -> ^( FUNC ^( POSITION $substr $str) )
				{
					DebugLocation(1443, 55);
					// MySQL51Parser.g3:1443:55: ^( FUNC ^( POSITION $substr $str) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1443, 57);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1443, 62);
					// MySQL51Parser.g3:1443:62: ^( POSITION $substr $str)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1443, 64);
					root_2 = (object)adaptor.BecomeRoot(stream_POSITION.NextNode(), root_2);

					DebugLocation(1443, 74);
					adaptor.AddChild(root_2, stream_substr.NextTree());
					DebugLocation(1443, 82);
					adaptor.AddChild(root_2, stream_str.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// MySQL51Parser.g3:1444:4: SUBDATE LPAREN date= expr COMMA (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) ) RPAREN
				{
				DebugLocation(1444, 4);
				SUBDATE991=(IToken)Match(input,SUBDATE,Follow._SUBDATE_in_functionCall13075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SUBDATE.Add(SUBDATE991);

				DebugLocation(1444, 12);
				LPAREN992=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13077); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN992);

				DebugLocation(1444, 23);
				PushFollow(Follow._expr_in_functionCall13081);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1444, 29);
				COMMA993=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall13083); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA993);

				DebugLocation(1445, 4);
				// MySQL51Parser.g3:1445:4: (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) )
				int alt338=2;
				try { DebugEnterSubRule(338);
				try { DebugEnterDecision(338, false);
				try
				{
					alt338 = dfa338.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(338); }
				switch (alt338)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1445:6: days= expr
					{
					DebugLocation(1445, 10);
					PushFollow(Follow._expr_in_functionCall13092);
					days=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(days.Tree);


					{
					// AST REWRITE
					// elements: SUBDATE, date, days
					// token labels: 
					// rule labels: date, days, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
					RewriteRuleSubtreeStream stream_days=new RewriteRuleSubtreeStream(adaptor,"rule days",days!=null?days.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1445:18: -> ^( FUNC ^( SUBDATE $date $days) )
					{
						DebugLocation(1445, 21);
						// MySQL51Parser.g3:1445:21: ^( FUNC ^( SUBDATE $date $days) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1445, 23);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1445, 28);
						// MySQL51Parser.g3:1445:28: ^( SUBDATE $date $days)
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1445, 30);
						root_2 = (object)adaptor.BecomeRoot(stream_SUBDATE.NextNode(), root_2);

						DebugLocation(1445, 39);
						adaptor.AddChild(root_2, stream_date.NextTree());
						DebugLocation(1445, 45);
						adaptor.AddChild(root_2, stream_days.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1446:6: ( INTERVAL )=> INTERVAL interval= expr timeUnit
					{
					DebugLocation(1446, 18);
					INTERVAL994=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_functionCall13121); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL994);

					DebugLocation(1446, 35);
					PushFollow(Follow._expr_in_functionCall13125);
					interval=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(interval.Tree);
					DebugLocation(1446, 41);
					PushFollow(Follow._timeUnit_in_functionCall13127);
					timeUnit995=timeUnit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_timeUnit.Add(timeUnit995.Tree);


					{
					// AST REWRITE
					// elements: SUBDATE, date, interval, timeUnit
					// token labels: 
					// rule labels: date, interval, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
					RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval",interval!=null?interval.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1446:50: -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) )
					{
						DebugLocation(1446, 53);
						// MySQL51Parser.g3:1446:53: ^( FUNC ^( SUBDATE $date $interval timeUnit ) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1446, 55);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1446, 60);
						// MySQL51Parser.g3:1446:60: ^( SUBDATE $date $interval timeUnit )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1446, 62);
						root_2 = (object)adaptor.BecomeRoot(stream_SUBDATE.NextNode(), root_2);

						DebugLocation(1446, 71);
						adaptor.AddChild(root_2, stream_date.NextTree());
						DebugLocation(1446, 77);
						adaptor.AddChild(root_2, stream_interval.NextTree());
						DebugLocation(1446, 86);
						adaptor.AddChild(root_2, stream_timeUnit.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(338); }

				DebugLocation(1448, 3);
				RPAREN996=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13154); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN996);


				}
				break;
			case 40:
				DebugEnterAlt(40);
				// MySQL51Parser.g3:1450:4: (funcName= SUBSTR |funcName= SUBSTRING ) LPAREN str= expr ( COMMA position= expr COMMA (len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ) ) | FROM position= expr ( FOR len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) ) ) RPAREN
				{
				DebugLocation(1450, 4);
				// MySQL51Parser.g3:1450:4: (funcName= SUBSTR |funcName= SUBSTRING )
				int alt339=2;
				try { DebugEnterSubRule(339);
				try { DebugEnterDecision(339, false);
				int LA339_0 = input.LA(1);

				if ((LA339_0==SUBSTR))
				{
					alt339 = 1;
				}
				else if ((LA339_0==SUBSTRING))
				{
					alt339 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 339, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(339); }
				switch (alt339)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1450:5: funcName= SUBSTR
					{
					DebugLocation(1450, 13);
					funcName=(IToken)Match(input,SUBSTR,Follow._SUBSTR_in_functionCall13164); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUBSTR.Add(funcName);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1450:23: funcName= SUBSTRING
					{
					DebugLocation(1450, 31);
					funcName=(IToken)Match(input,SUBSTRING,Follow._SUBSTRING_in_functionCall13170); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUBSTRING.Add(funcName);


					}
					break;

				}
				} finally { DebugExitSubRule(339); }

				DebugLocation(1450, 43);
				LPAREN997=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13173); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN997);

				DebugLocation(1451, 7);
				PushFollow(Follow._expr_in_functionCall13181);
				str=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(str.Tree);
				DebugLocation(1452, 4);
				// MySQL51Parser.g3:1452:4: ( COMMA position= expr COMMA (len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ) ) | FROM position= expr ( FOR len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) ) )
				int alt342=2;
				try { DebugEnterSubRule(342);
				try { DebugEnterDecision(342, false);
				int LA342_0 = input.LA(1);

				if ((LA342_0==COMMA))
				{
					alt342 = 1;
				}
				else if ((LA342_0==FROM))
				{
					alt342 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 342, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(342); }
				switch (alt342)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1452:6: COMMA position= expr COMMA (len= expr )?
					{
					DebugLocation(1452, 6);
					COMMA998=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall13189); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA998);

					DebugLocation(1452, 20);
					PushFollow(Follow._expr_in_functionCall13193);
					position=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(position.Tree);
					DebugLocation(1452, 26);
					COMMA999=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall13195); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA999);

					DebugLocation(1452, 35);
					// MySQL51Parser.g3:1452:35: (len= expr )?
					int alt340=2;
					try { DebugEnterSubRule(340);
					try { DebugEnterDecision(340, false);
					int LA340_0 = input.LA(1);

					if ((LA340_0==ACTION||(LA340_0>=ADDDATE && LA340_0<=ALGORITHM)||LA340_0==ANY||LA340_0==ASCII||(LA340_0>=AT && LA340_0<=BACKUP)||LA340_0==BEGIN||(LA340_0>=BINARY && LA340_0<=BIT)||LA340_0==BITWISE_INVERSION||(LA340_0>=BIT_AND && LA340_0<=BIT_XOR)||(LA340_0>=BLOCK && LA340_0<=BOOLEAN)||LA340_0==BTREE||(LA340_0>=BYTE && LA340_0<=CACHE)||(LA340_0>=CASCADED && LA340_0<=CHAIN)||(LA340_0>=CHANGED && LA340_0<=CHAR)||LA340_0==CHARSET||(LA340_0>=CHECKSUM && LA340_0<=COLLATION)||LA340_0==COLUMNS||LA340_0==COMMENT||(LA340_0>=COMMIT && LA340_0<=CONCURRENT)||(LA340_0>=CONNECTION && LA340_0<=CONSISTENT)||(LA340_0>=CONTAINS && LA340_0<=CONTEXT)||LA340_0==CONTRIBUTORS||(LA340_0>=COUNT && LA340_0<=CPU)||(LA340_0>=CUBE && LA340_0<=CURRENT_USER)||LA340_0==CURTIME||(LA340_0>=DATA && LA340_0<=DATABASE)||(LA340_0>=DATAFILE && LA340_0<=DATE_ADD)||LA340_0==DATE_SUB||LA340_0==DAY||LA340_0==DEALLOCATE||LA340_0==DEFINER||LA340_0==DELAY_KEY_WRITE||LA340_0==DES_KEY_FILE||(LA340_0>=DIRECTORY && LA340_0<=DISK)||LA340_0==DO||(LA340_0>=DUMPFILE && LA340_0<=DYNAMIC)||LA340_0==ENABLE||(LA340_0>=END && LA340_0<=ENUM)||(LA340_0>=ERRORS && LA340_0<=ESCAPE)||(LA340_0>=EVENT && LA340_0<=EVERY)||(LA340_0>=EXECUTE && LA340_0<=EXISTS)||LA340_0==EXPANSION||(LA340_0>=EXTENDED && LA340_0<=FAULTS)||(LA340_0>=FIELDS && LA340_0<=FIXED)||LA340_0==FLUSH||(LA340_0>=FOUND && LA340_0<=FRAC_SECOND)||LA340_0==FULL||(LA340_0>=FUNCTION && LA340_0<=GLOBAL_VARIABLE)||LA340_0==GRANTS||(LA340_0>=GROUP && LA340_0<=HASH)||(LA340_0>=HELP && LA340_0<=HEXA_VALUE)||(LA340_0>=HOST && LA340_0<=HOUR)||(LA340_0>=ID && LA340_0<=IFNULL)||LA340_0==IMPORT||LA340_0==INDEXES||LA340_0==INITIAL_SIZE||LA340_0==INNOBASE||(LA340_0>=INSERT && LA340_0<=INSTALL)||LA340_0==INTERVAL||(LA340_0>=INT_NUMBER && LA340_0<=IPC)||(LA340_0>=ISOLATION && LA340_0<=ISSUER)||LA340_0==KEY_BLOCK_SIZE||(LA340_0>=LABEL && LA340_0<=LCURLY)||(LA340_0>=LEAVES && LA340_0<=LEFT)||LA340_0==LESS||LA340_0==LEVEL||(LA340_0>=LINESTRING && LA340_0<=LIST)||LA340_0==LOCAL||(LA340_0>=LOCKS && LA340_0<=LOGFILE)||LA340_0==LOGS||(LA340_0>=LPAREN && LA340_0<=MASTER_SSL_KEY)||(LA340_0>=MASTER_USER && LA340_0<=MEDIUM)||(LA340_0>=MEMORY && LA340_0<=MID)||(LA340_0>=MIGRATE && LA340_0<=MINUTE)||(LA340_0>=MIN_ROWS && LA340_0<=MODE)||LA340_0==MODIFY||LA340_0==MONTH||(LA340_0>=MULTILINESTRING && LA340_0<=MUTEX)||(LA340_0>=NAME && LA340_0<=NATIONAL)||(LA340_0>=NCHAR && LA340_0<=NOT)||(LA340_0>=NOT_OP && LA340_0<=NO_WAIT)||(LA340_0>=NULL && LA340_0<=NULLIF)||LA340_0==NUMBER||(LA340_0>=NVARCHAR && LA340_0<=OLD_PASSWORD)||LA340_0==ONE||(LA340_0>=ONE_SHOT && LA340_0<=OPEN)||LA340_0==OPTIONS||(LA340_0>=OWNER && LA340_0<=POSITION)||(LA340_0>=PREPARE && LA340_0<=PREV)||LA340_0==PRIVILEGES||(LA340_0>=PROCESS && LA340_0<=PROFILES)||(LA340_0>=QUARTER && LA340_0<=QUICK)||(LA340_0>=REBUILD && LA340_0<=REDUNDANT)||(LA340_0>=RELAY_LOG_FILE && LA340_0<=RELAY_THREAD)||(LA340_0>=RELOAD && LA340_0<=REMOVE)||(LA340_0>=REORGANIZE && LA340_0<=REPLICATION)||(LA340_0>=RESET && LA340_0<=RESTORE)||LA340_0==RESUME||LA340_0==RETURNS||LA340_0==RIGHT||(LA340_0>=ROLLBACK && LA340_0<=ROW_FORMAT)||(LA340_0>=RTREE && LA340_0<=SCHEDULE)||LA340_0==SECOND||LA340_0==SECURITY||(LA340_0>=SERIAL && LA340_0<=SESSION_VARIABLE)||LA340_0==SHARE||(LA340_0>=SHUTDOWN && LA340_0<=SLAVE)||(LA340_0>=SNAPSHOT && LA340_0<=SOCKET)||(LA340_0>=SONAME && LA340_0<=SOURCE)||(LA340_0>=SQL_BUFFER_RESULT && LA340_0<=SQL_CACHE)||LA340_0==SQL_NO_CACHE||LA340_0==SQL_THREAD||LA340_0==START||(LA340_0>=STARTS && LA340_0<=STORAGE)||(LA340_0>=STRING && LA340_0<=SYSTEM_USER)||(LA340_0>=TABLES && LA340_0<=TEMPTABLE)||(LA340_0>=TEXT && LA340_0<=THAN)||(LA340_0>=TIME && LA340_0<=TIMESTAMP_DIFF)||(LA340_0>=TRANSACTION && LA340_0<=TRANSACTIONAL)||(LA340_0>=TRIGGERS && LA340_0<=UNDEFINED)||(LA340_0>=UNDOFILE && LA340_0<=UNINSTALL)||LA340_0==UNKNOWN||LA340_0==UNTIL||LA340_0==UPGRADE||LA340_0==USER||LA340_0==USE_FRM||(LA340_0>=UTC_DATE && LA340_0<=VALUE)||LA340_0==VALUE_PLACEHOLDER||(LA340_0>=VARIABLES && LA340_0<=VARIANCE)||(LA340_0>=VAR_POP && LA340_0<=WEEK)||(LA340_0>=WORK && LA340_0<=WRAPPER)||(LA340_0>=X509 && LA340_0<=XA)||LA340_0==YEAR||LA340_0==CONCAT))
					{
						alt340 = 1;
					}
					} finally { DebugExitDecision(340); }
					switch (alt340)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1452:35: len= expr
						{
						DebugLocation(1452, 35);
						PushFollow(Follow._expr_in_functionCall13199);
						len=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(len.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(340); }



					{
					// AST REWRITE
					// elements: funcName, str, position, len
					// token labels: funcName
					// rule labels: str, position, len, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_funcName=new RewriteRuleITokenStream(adaptor,"token funcName",funcName);
					RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
					RewriteRuleSubtreeStream stream_position=new RewriteRuleSubtreeStream(adaptor,"rule position",position!=null?position.Tree:null);
					RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1452:46: -> ^( FUNC ^( $funcName $str $position ( $len)? ) )
					{
						DebugLocation(1452, 49);
						// MySQL51Parser.g3:1452:49: ^( FUNC ^( $funcName $str $position ( $len)? ) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1452, 51);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1452, 56);
						// MySQL51Parser.g3:1452:56: ^( $funcName $str $position ( $len)? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1452, 59);
						root_2 = (object)adaptor.BecomeRoot(stream_funcName.NextNode(), root_2);

						DebugLocation(1452, 69);
						adaptor.AddChild(root_2, stream_str.NextTree());
						DebugLocation(1452, 74);
						adaptor.AddChild(root_2, stream_position.NextTree());
						DebugLocation(1452, 84);
						// MySQL51Parser.g3:1452:84: ( $len)?
						if (stream_len.HasNext)
						{
							DebugLocation(1452, 84);
							adaptor.AddChild(root_2, stream_len.NextTree());

						}
						stream_len.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// MySQL51Parser.g3:1453:6: FROM position= expr ( FOR len= expr )?
					{
					DebugLocation(1453, 6);
					FROM1000=(IToken)Match(input,FROM,Follow._FROM_in_functionCall13232); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FROM.Add(FROM1000);

					DebugLocation(1453, 19);
					PushFollow(Follow._expr_in_functionCall13236);
					position=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(position.Tree);
					DebugLocation(1453, 25);
					// MySQL51Parser.g3:1453:25: ( FOR len= expr )?
					int alt341=2;
					try { DebugEnterSubRule(341);
					try { DebugEnterDecision(341, false);
					int LA341_0 = input.LA(1);

					if ((LA341_0==FOR))
					{
						alt341 = 1;
					}
					} finally { DebugExitDecision(341); }
					switch (alt341)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1453:26: FOR len= expr
						{
						DebugLocation(1453, 26);
						FOR1001=(IToken)Match(input,FOR,Follow._FOR_in_functionCall13239); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_FOR.Add(FOR1001);

						DebugLocation(1453, 33);
						PushFollow(Follow._expr_in_functionCall13243);
						len=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(len.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(341); }



					{
					// AST REWRITE
					// elements: funcName, str, position, len, FROM
					// token labels: funcName
					// rule labels: str, position, len, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_funcName=new RewriteRuleITokenStream(adaptor,"token funcName",funcName);
					RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
					RewriteRuleSubtreeStream stream_position=new RewriteRuleSubtreeStream(adaptor,"rule position",position!=null?position.Tree:null);
					RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 1453:43: -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) )
					{
						DebugLocation(1453, 46);
						// MySQL51Parser.g3:1453:46: ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(1453, 48);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

						DebugLocation(1453, 53);
						// MySQL51Parser.g3:1453:53: ^( $funcName $str $position ( $len)? ( FROM )? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(1453, 56);
						root_2 = (object)adaptor.BecomeRoot(stream_funcName.NextNode(), root_2);

						DebugLocation(1453, 66);
						adaptor.AddChild(root_2, stream_str.NextTree());
						DebugLocation(1453, 71);
						adaptor.AddChild(root_2, stream_position.NextTree());
						DebugLocation(1453, 81);
						// MySQL51Parser.g3:1453:81: ( $len)?
						if (stream_len.HasNext)
						{
							DebugLocation(1453, 81);
							adaptor.AddChild(root_2, stream_len.NextTree());

						}
						stream_len.Reset();
						DebugLocation(1453, 86);
						// MySQL51Parser.g3:1453:86: ( FROM )?
						if (stream_FROM.HasNext)
						{
							DebugLocation(1453, 86);
							adaptor.AddChild(root_2, stream_FROM.NextNode());

						}
						stream_FROM.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(342); }

				DebugLocation(1455, 4);
				RPAREN1002=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13281); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1002);


				}
				break;
			case 41:
				DebugEnterAlt(41);
				// MySQL51Parser.g3:1456:4: SYSDATE LPAREN RPAREN
				{
				DebugLocation(1456, 4);
				SYSDATE1003=(IToken)Match(input,SYSDATE,Follow._SYSDATE_in_functionCall13286); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSDATE.Add(SYSDATE1003);

				DebugLocation(1456, 12);
				LPAREN1004=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13288); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1004);

				DebugLocation(1456, 19);
				RPAREN1005=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13290); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1005);



				{
				// AST REWRITE
				// elements: SYSDATE, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1456:29: -> ^( FUNC ^( SYSDATE LPAREN ) )
				{
					DebugLocation(1456, 32);
					// MySQL51Parser.g3:1456:32: ^( FUNC ^( SYSDATE LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1456, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1456, 39);
					// MySQL51Parser.g3:1456:39: ^( SYSDATE LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1456, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_SYSDATE.NextNode(), root_2);

					DebugLocation(1456, 49);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// MySQL51Parser.g3:1457:4: TIMESTAMP_ADD LPAREN timestampUnit interval= expr date= expr RPAREN
				{
				DebugLocation(1457, 4);
				TIMESTAMP_ADD1006=(IToken)Match(input,TIMESTAMP_ADD,Follow._TIMESTAMP_ADD_in_functionCall13310); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TIMESTAMP_ADD.Add(TIMESTAMP_ADD1006);

				DebugLocation(1457, 18);
				LPAREN1007=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13312); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1007);

				DebugLocation(1458, 4);
				PushFollow(Follow._timestampUnit_in_functionCall13317);
				timestampUnit1008=timestampUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timestampUnit.Add(timestampUnit1008.Tree);
				DebugLocation(1459, 12);
				PushFollow(Follow._expr_in_functionCall13324);
				interval=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(interval.Tree);
				DebugLocation(1460, 8);
				PushFollow(Follow._expr_in_functionCall13331);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1461, 4);
				RPAREN1009=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13336); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1009);



				{
				// AST REWRITE
				// elements: TIMESTAMP_ADD, date, interval, timestampUnit
				// token labels: 
				// rule labels: date, interval, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
				RewriteRuleSubtreeStream stream_interval=new RewriteRuleSubtreeStream(adaptor,"rule interval",interval!=null?interval.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1461:18: -> ^( FUNC ^( TIMESTAMP_ADD $date $interval timestampUnit ) )
				{
					DebugLocation(1461, 21);
					// MySQL51Parser.g3:1461:21: ^( FUNC ^( TIMESTAMP_ADD $date $interval timestampUnit ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1461, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1461, 28);
					// MySQL51Parser.g3:1461:28: ^( TIMESTAMP_ADD $date $interval timestampUnit )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1461, 30);
					root_2 = (object)adaptor.BecomeRoot(stream_TIMESTAMP_ADD.NextNode(), root_2);

					DebugLocation(1461, 45);
					adaptor.AddChild(root_2, stream_date.NextTree());
					DebugLocation(1461, 51);
					adaptor.AddChild(root_2, stream_interval.NextTree());
					DebugLocation(1461, 60);
					adaptor.AddChild(root_2, stream_timestampUnit.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// MySQL51Parser.g3:1462:4: TIMESTAMP_DIFF LPAREN timestampUnit date1= expr date2= expr RPAREN
				{
				DebugLocation(1462, 4);
				TIMESTAMP_DIFF1010=(IToken)Match(input,TIMESTAMP_DIFF,Follow._TIMESTAMP_DIFF_in_functionCall13366); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TIMESTAMP_DIFF.Add(TIMESTAMP_DIFF1010);

				DebugLocation(1462, 19);
				LPAREN1011=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13368); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1011);

				DebugLocation(1463, 4);
				PushFollow(Follow._timestampUnit_in_functionCall13373);
				timestampUnit1012=timestampUnit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_timestampUnit.Add(timestampUnit1012.Tree);
				DebugLocation(1464, 9);
				PushFollow(Follow._expr_in_functionCall13380);
				date1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date1.Tree);
				DebugLocation(1465, 9);
				PushFollow(Follow._expr_in_functionCall13387);
				date2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date2.Tree);
				DebugLocation(1466, 4);
				RPAREN1013=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13392); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1013);



				{
				// AST REWRITE
				// elements: TIMESTAMP_DIFF, date1, date2, timestampUnit
				// token labels: 
				// rule labels: date1, date2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_date1=new RewriteRuleSubtreeStream(adaptor,"rule date1",date1!=null?date1.Tree:null);
				RewriteRuleSubtreeStream stream_date2=new RewriteRuleSubtreeStream(adaptor,"rule date2",date2!=null?date2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1466:18: -> ^( FUNC ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit ) )
				{
					DebugLocation(1466, 21);
					// MySQL51Parser.g3:1466:21: ^( FUNC ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1466, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1466, 28);
					// MySQL51Parser.g3:1466:28: ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1466, 30);
					root_2 = (object)adaptor.BecomeRoot(stream_TIMESTAMP_DIFF.NextNode(), root_2);

					DebugLocation(1466, 46);
					adaptor.AddChild(root_2, stream_date1.NextTree());
					DebugLocation(1466, 53);
					adaptor.AddChild(root_2, stream_date2.NextTree());
					DebugLocation(1466, 59);
					adaptor.AddChild(root_2, stream_timestampUnit.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// MySQL51Parser.g3:1467:4: UTC_DATE ( LPAREN RPAREN )?
				{
				DebugLocation(1467, 4);
				UTC_DATE1014=(IToken)Match(input,UTC_DATE,Follow._UTC_DATE_in_functionCall13422); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UTC_DATE.Add(UTC_DATE1014);

				DebugLocation(1467, 13);
				// MySQL51Parser.g3:1467:13: ( LPAREN RPAREN )?
				int alt343=2;
				try { DebugEnterSubRule(343);
				try { DebugEnterDecision(343, false);
				int LA343_0 = input.LA(1);

				if ((LA343_0==LPAREN))
				{
					int LA343_1 = input.LA(2);

					if ((LA343_1==RPAREN))
					{
						alt343 = 1;
					}
				}
				} finally { DebugExitDecision(343); }
				switch (alt343)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1467:14: LPAREN RPAREN
					{
					DebugLocation(1467, 14);
					LPAREN1015=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13425); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1015);

					DebugLocation(1467, 21);
					RPAREN1016=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13427); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1016);


					}
					break;

				}
				} finally { DebugExitSubRule(343); }



				{
				// AST REWRITE
				// elements: UTC_DATE, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1467:33: -> ^( FUNC ^( UTC_DATE ( LPAREN )? ) )
				{
					DebugLocation(1467, 36);
					// MySQL51Parser.g3:1467:36: ^( FUNC ^( UTC_DATE ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1467, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1467, 43);
					// MySQL51Parser.g3:1467:43: ^( UTC_DATE ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1467, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_UTC_DATE.NextNode(), root_2);

					DebugLocation(1467, 54);
					// MySQL51Parser.g3:1467:54: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1467, 54);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// MySQL51Parser.g3:1468:4: UTC_TIMESTAMP ( LPAREN RPAREN )?
				{
				DebugLocation(1468, 4);
				UTC_TIMESTAMP1017=(IToken)Match(input,UTC_TIMESTAMP,Follow._UTC_TIMESTAMP_in_functionCall13450); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UTC_TIMESTAMP.Add(UTC_TIMESTAMP1017);

				DebugLocation(1468, 18);
				// MySQL51Parser.g3:1468:18: ( LPAREN RPAREN )?
				int alt344=2;
				try { DebugEnterSubRule(344);
				try { DebugEnterDecision(344, false);
				int LA344_0 = input.LA(1);

				if ((LA344_0==LPAREN))
				{
					int LA344_1 = input.LA(2);

					if ((LA344_1==RPAREN))
					{
						alt344 = 1;
					}
				}
				} finally { DebugExitDecision(344); }
				switch (alt344)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1468:19: LPAREN RPAREN
					{
					DebugLocation(1468, 19);
					LPAREN1018=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13453); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1018);

					DebugLocation(1468, 26);
					RPAREN1019=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13455); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1019);


					}
					break;

				}
				} finally { DebugExitSubRule(344); }



				{
				// AST REWRITE
				// elements: UTC_TIMESTAMP, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1468:37: -> ^( FUNC ^( UTC_TIMESTAMP ( LPAREN )? ) )
				{
					DebugLocation(1468, 40);
					// MySQL51Parser.g3:1468:40: ^( FUNC ^( UTC_TIMESTAMP ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1468, 42);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1468, 47);
					// MySQL51Parser.g3:1468:47: ^( UTC_TIMESTAMP ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1468, 49);
					root_2 = (object)adaptor.BecomeRoot(stream_UTC_TIMESTAMP.NextNode(), root_2);

					DebugLocation(1468, 63);
					// MySQL51Parser.g3:1468:63: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1468, 63);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// MySQL51Parser.g3:1469:4: UTC_TIME ( LPAREN RPAREN )?
				{
				DebugLocation(1469, 4);
				UTC_TIME1020=(IToken)Match(input,UTC_TIME,Follow._UTC_TIME_in_functionCall13477); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UTC_TIME.Add(UTC_TIME1020);

				DebugLocation(1469, 13);
				// MySQL51Parser.g3:1469:13: ( LPAREN RPAREN )?
				int alt345=2;
				try { DebugEnterSubRule(345);
				try { DebugEnterDecision(345, false);
				int LA345_0 = input.LA(1);

				if ((LA345_0==LPAREN))
				{
					int LA345_1 = input.LA(2);

					if ((LA345_1==RPAREN))
					{
						alt345 = 1;
					}
				}
				} finally { DebugExitDecision(345); }
				switch (alt345)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1469:14: LPAREN RPAREN
					{
					DebugLocation(1469, 14);
					LPAREN1021=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall13480); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1021);

					DebugLocation(1469, 21);
					RPAREN1022=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall13482); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1022);


					}
					break;

				}
				} finally { DebugExitSubRule(345); }



				{
				// AST REWRITE
				// elements: UTC_TIME, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1469:33: -> ^( FUNC ^( UTC_TIME ( LPAREN )? ) )
				{
					DebugLocation(1469, 36);
					// MySQL51Parser.g3:1469:36: ^( FUNC ^( UTC_TIME ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1469, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1469, 43);
					// MySQL51Parser.g3:1469:43: ^( UTC_TIME ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1469, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_UTC_TIME.NextNode(), root_2);

					DebugLocation(1469, 54);
					// MySQL51Parser.g3:1469:54: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1469, 54);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// MySQL51Parser.g3:1471:4: functionCall_conflicts
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1471, 4);
				PushFollow(Follow._functionCall_conflicts_in_functionCall13506);
				functionCall_conflicts1023=functionCall_conflicts();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionCall_conflicts1023.Tree);

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// MySQL51Parser.g3:1472:4: functionCall_reserved
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1472, 4);
				PushFollow(Follow._functionCall_reserved_in_functionCall13511);
				functionCall_reserved1024=functionCall_reserved();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionCall_reserved1024.Tree);

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// MySQL51Parser.g3:1475:4: name= ID args= parenOptExprList
				{
				DebugLocation(1475, 8);
				name=(IToken)Match(input,ID,Follow._ID_in_functionCall13522); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(name);

				DebugLocation(1475, 16);
				PushFollow(Follow._parenOptExprList_in_functionCall13526);
				args=parenOptExprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parenOptExprList.Add(args.Tree);


				{
				// AST REWRITE
				// elements: name, args
				// token labels: name
				// rule labels: args, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
				RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args",args!=null?args.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1475:39: -> ^( FUNC ^( $name $args) )
				{
					DebugLocation(1475, 42);
					// MySQL51Parser.g3:1475:42: ^( FUNC ^( $name $args) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1475, 44);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1475, 49);
					// MySQL51Parser.g3:1475:49: ^( $name $args)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1475, 52);
					root_2 = (object)adaptor.BecomeRoot(stream_name.NextNode(), root_2);

					DebugLocation(1475, 58);
					adaptor.AddChild(root_2, stream_args.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall", 107);
			LeaveRule("functionCall", 107);
			LeaveRule_functionCall();
		}
		DebugLocation(1476, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"

	private sealed partial class functionCall_conflicts_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionCall_conflicts_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_functionCall_conflicts();
	partial void LeaveRule_functionCall_conflicts();

	// $ANTLR start "functionCall_conflicts"
	// MySQL51Parser.g3:1478:1: functionCall_conflicts : ( ASCII LPAREN expr RPAREN -> ^( FUNC ^( ASCII expr ) ) | CHARSET LPAREN expr RPAREN -> ^( FUNC ^( CHARSET expr ) ) | COALESCE LPAREN exprList RPAREN -> ^( FUNC ^( COALESCE exprList ) ) | COLLATION LPAREN expr RPAREN -> ^( FUNC ^( COLLATION expr ) ) | CONTAINS LPAREN e1= expr COMMA e2= expr RPAREN -> ^( FUNC ^( CONTAINS $e1 $e2) ) | DATABASE LPAREN RPAREN -> ^( FUNC ^( DATABASE LPAREN ) ) | GEOMETRYCOLLECTION LPAREN exprList RPAREN -> ^( FUNC ^( GEOMETRYCOLLECTION exprList ) ) | IF LPAREN e1= expr COMMA e2= expr COMMA e3= expr RPAREN -> ^( FUNC ^( IF $e1 $e2 $e3) ) | LINESTRING LPAREN exprList RPAREN -> ^( FUNC ^( LINESTRING exprList ) ) | MICROSECOND LPAREN expr RPAREN -> ^( FUNC ^( MICROSECOND expr ) ) | MOD LPAREN e1= expr COMMA e2= expr RPAREN -> ^( FUNC ^( MOD $e1 $e2) ) | MULTILINESTRING LPAREN exprList RPAREN -> ^( FUNC ^( MULTILINESTRING exprList ) ) | MULTIPOINT LPAREN exprList RPAREN -> ^( FUNC ^( MULTIPOINT exprList ) ) | MULTIPOLYGON LPAREN exprList RPAREN -> ^( FUNC ^( MULTIPOLYGON exprList ) ) | OLD_PASSWORD LPAREN expr RPAREN -> ^( FUNC ^( OLD_PASSWORD expr ) ) | PASSWORD LPAREN expr RPAREN -> ^( FUNC ^( PASSWORD expr ) ) | POINT LPAREN x= expr COMMA y= expr RPAREN -> ^( FUNC ^( POINT $x $y) ) | POLYGON LPAREN exprList RPAREN -> ^( FUNC ^( POLYGON exprList ) ) | QUARTER LPAREN expr RPAREN -> ^( FUNC ^( QUARTER expr ) ) | REPEAT LPAREN str= expr COMMA count= expr RPAREN -> ^( FUNC ^( REPEAT $str $count) ) | REPLACE LPAREN str= expr COMMA from= expr COMMA to= expr RPAREN -> ^( FUNC ^( REPLACE $str $from $to) ) | TRUNCATE LPAREN num= expr COMMA decimals= expr RPAREN -> ^( FUNC ^( TRUNCATE $num $decimals) ) | WEEK LPAREN date= expr ( COMMA mode= expr )? RPAREN -> ^( FUNC ^( WEEK $date ( $mode)? ) ) );
	[GrammarRule("functionCall_conflicts")]
	private MySQL51Parser.functionCall_conflicts_return functionCall_conflicts()
	{
		EnterRule_functionCall_conflicts();
		EnterRule("functionCall_conflicts", 108);
		TraceIn("functionCall_conflicts", 108);
		MySQL51Parser.functionCall_conflicts_return retval = new MySQL51Parser.functionCall_conflicts_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ASCII1025 = default(IToken);
		IToken LPAREN1026 = default(IToken);
		IToken RPAREN1028 = default(IToken);
		IToken CHARSET1029 = default(IToken);
		IToken LPAREN1030 = default(IToken);
		IToken RPAREN1032 = default(IToken);
		IToken COALESCE1033 = default(IToken);
		IToken LPAREN1034 = default(IToken);
		IToken RPAREN1036 = default(IToken);
		IToken COLLATION1037 = default(IToken);
		IToken LPAREN1038 = default(IToken);
		IToken RPAREN1040 = default(IToken);
		IToken CONTAINS1041 = default(IToken);
		IToken LPAREN1042 = default(IToken);
		IToken COMMA1043 = default(IToken);
		IToken RPAREN1044 = default(IToken);
		IToken DATABASE1045 = default(IToken);
		IToken LPAREN1046 = default(IToken);
		IToken RPAREN1047 = default(IToken);
		IToken GEOMETRYCOLLECTION1048 = default(IToken);
		IToken LPAREN1049 = default(IToken);
		IToken RPAREN1051 = default(IToken);
		IToken IF1052 = default(IToken);
		IToken LPAREN1053 = default(IToken);
		IToken COMMA1054 = default(IToken);
		IToken COMMA1055 = default(IToken);
		IToken RPAREN1056 = default(IToken);
		IToken LINESTRING1057 = default(IToken);
		IToken LPAREN1058 = default(IToken);
		IToken RPAREN1060 = default(IToken);
		IToken MICROSECOND1061 = default(IToken);
		IToken LPAREN1062 = default(IToken);
		IToken RPAREN1064 = default(IToken);
		IToken MOD1065 = default(IToken);
		IToken LPAREN1066 = default(IToken);
		IToken COMMA1067 = default(IToken);
		IToken RPAREN1068 = default(IToken);
		IToken MULTILINESTRING1069 = default(IToken);
		IToken LPAREN1070 = default(IToken);
		IToken RPAREN1072 = default(IToken);
		IToken MULTIPOINT1073 = default(IToken);
		IToken LPAREN1074 = default(IToken);
		IToken RPAREN1076 = default(IToken);
		IToken MULTIPOLYGON1077 = default(IToken);
		IToken LPAREN1078 = default(IToken);
		IToken RPAREN1080 = default(IToken);
		IToken OLD_PASSWORD1081 = default(IToken);
		IToken LPAREN1082 = default(IToken);
		IToken RPAREN1084 = default(IToken);
		IToken PASSWORD1085 = default(IToken);
		IToken LPAREN1086 = default(IToken);
		IToken RPAREN1088 = default(IToken);
		IToken POINT1089 = default(IToken);
		IToken LPAREN1090 = default(IToken);
		IToken COMMA1091 = default(IToken);
		IToken RPAREN1092 = default(IToken);
		IToken POLYGON1093 = default(IToken);
		IToken LPAREN1094 = default(IToken);
		IToken RPAREN1096 = default(IToken);
		IToken QUARTER1097 = default(IToken);
		IToken LPAREN1098 = default(IToken);
		IToken RPAREN1100 = default(IToken);
		IToken REPEAT1101 = default(IToken);
		IToken LPAREN1102 = default(IToken);
		IToken COMMA1103 = default(IToken);
		IToken RPAREN1104 = default(IToken);
		IToken REPLACE1105 = default(IToken);
		IToken LPAREN1106 = default(IToken);
		IToken COMMA1107 = default(IToken);
		IToken COMMA1108 = default(IToken);
		IToken RPAREN1109 = default(IToken);
		IToken TRUNCATE1110 = default(IToken);
		IToken LPAREN1111 = default(IToken);
		IToken COMMA1112 = default(IToken);
		IToken RPAREN1113 = default(IToken);
		IToken WEEK1114 = default(IToken);
		IToken LPAREN1115 = default(IToken);
		IToken COMMA1116 = default(IToken);
		IToken RPAREN1117 = default(IToken);
		MySQL51Parser.expr_return e1 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return e2 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return e3 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return x = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return y = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return str = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return count = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return from = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return to = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return num = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return decimals = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return date = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return mode = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1027 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1031 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1035 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1039 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1050 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.exprList_return exprList1059 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1063 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1071 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.exprList_return exprList1075 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.exprList_return exprList1079 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1083 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1087 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1095 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1099 = default(MySQL51Parser.expr_return);

		object ASCII1025_tree = default(object);
		object LPAREN1026_tree = default(object);
		object RPAREN1028_tree = default(object);
		object CHARSET1029_tree = default(object);
		object LPAREN1030_tree = default(object);
		object RPAREN1032_tree = default(object);
		object COALESCE1033_tree = default(object);
		object LPAREN1034_tree = default(object);
		object RPAREN1036_tree = default(object);
		object COLLATION1037_tree = default(object);
		object LPAREN1038_tree = default(object);
		object RPAREN1040_tree = default(object);
		object CONTAINS1041_tree = default(object);
		object LPAREN1042_tree = default(object);
		object COMMA1043_tree = default(object);
		object RPAREN1044_tree = default(object);
		object DATABASE1045_tree = default(object);
		object LPAREN1046_tree = default(object);
		object RPAREN1047_tree = default(object);
		object GEOMETRYCOLLECTION1048_tree = default(object);
		object LPAREN1049_tree = default(object);
		object RPAREN1051_tree = default(object);
		object IF1052_tree = default(object);
		object LPAREN1053_tree = default(object);
		object COMMA1054_tree = default(object);
		object COMMA1055_tree = default(object);
		object RPAREN1056_tree = default(object);
		object LINESTRING1057_tree = default(object);
		object LPAREN1058_tree = default(object);
		object RPAREN1060_tree = default(object);
		object MICROSECOND1061_tree = default(object);
		object LPAREN1062_tree = default(object);
		object RPAREN1064_tree = default(object);
		object MOD1065_tree = default(object);
		object LPAREN1066_tree = default(object);
		object COMMA1067_tree = default(object);
		object RPAREN1068_tree = default(object);
		object MULTILINESTRING1069_tree = default(object);
		object LPAREN1070_tree = default(object);
		object RPAREN1072_tree = default(object);
		object MULTIPOINT1073_tree = default(object);
		object LPAREN1074_tree = default(object);
		object RPAREN1076_tree = default(object);
		object MULTIPOLYGON1077_tree = default(object);
		object LPAREN1078_tree = default(object);
		object RPAREN1080_tree = default(object);
		object OLD_PASSWORD1081_tree = default(object);
		object LPAREN1082_tree = default(object);
		object RPAREN1084_tree = default(object);
		object PASSWORD1085_tree = default(object);
		object LPAREN1086_tree = default(object);
		object RPAREN1088_tree = default(object);
		object POINT1089_tree = default(object);
		object LPAREN1090_tree = default(object);
		object COMMA1091_tree = default(object);
		object RPAREN1092_tree = default(object);
		object POLYGON1093_tree = default(object);
		object LPAREN1094_tree = default(object);
		object RPAREN1096_tree = default(object);
		object QUARTER1097_tree = default(object);
		object LPAREN1098_tree = default(object);
		object RPAREN1100_tree = default(object);
		object REPEAT1101_tree = default(object);
		object LPAREN1102_tree = default(object);
		object COMMA1103_tree = default(object);
		object RPAREN1104_tree = default(object);
		object REPLACE1105_tree = default(object);
		object LPAREN1106_tree = default(object);
		object COMMA1107_tree = default(object);
		object COMMA1108_tree = default(object);
		object RPAREN1109_tree = default(object);
		object TRUNCATE1110_tree = default(object);
		object LPAREN1111_tree = default(object);
		object COMMA1112_tree = default(object);
		object RPAREN1113_tree = default(object);
		object WEEK1114_tree = default(object);
		object LPAREN1115_tree = default(object);
		object COMMA1116_tree = default(object);
		object RPAREN1117_tree = default(object);
		RewriteRuleITokenStream stream_ASCII=new RewriteRuleITokenStream(adaptor,"token ASCII");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_CHARSET=new RewriteRuleITokenStream(adaptor,"token CHARSET");
		RewriteRuleITokenStream stream_COALESCE=new RewriteRuleITokenStream(adaptor,"token COALESCE");
		RewriteRuleITokenStream stream_COLLATION=new RewriteRuleITokenStream(adaptor,"token COLLATION");
		RewriteRuleITokenStream stream_CONTAINS=new RewriteRuleITokenStream(adaptor,"token CONTAINS");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_DATABASE=new RewriteRuleITokenStream(adaptor,"token DATABASE");
		RewriteRuleITokenStream stream_GEOMETRYCOLLECTION=new RewriteRuleITokenStream(adaptor,"token GEOMETRYCOLLECTION");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_LINESTRING=new RewriteRuleITokenStream(adaptor,"token LINESTRING");
		RewriteRuleITokenStream stream_MICROSECOND=new RewriteRuleITokenStream(adaptor,"token MICROSECOND");
		RewriteRuleITokenStream stream_MOD=new RewriteRuleITokenStream(adaptor,"token MOD");
		RewriteRuleITokenStream stream_MULTILINESTRING=new RewriteRuleITokenStream(adaptor,"token MULTILINESTRING");
		RewriteRuleITokenStream stream_MULTIPOINT=new RewriteRuleITokenStream(adaptor,"token MULTIPOINT");
		RewriteRuleITokenStream stream_MULTIPOLYGON=new RewriteRuleITokenStream(adaptor,"token MULTIPOLYGON");
		RewriteRuleITokenStream stream_OLD_PASSWORD=new RewriteRuleITokenStream(adaptor,"token OLD_PASSWORD");
		RewriteRuleITokenStream stream_PASSWORD=new RewriteRuleITokenStream(adaptor,"token PASSWORD");
		RewriteRuleITokenStream stream_POINT=new RewriteRuleITokenStream(adaptor,"token POINT");
		RewriteRuleITokenStream stream_POLYGON=new RewriteRuleITokenStream(adaptor,"token POLYGON");
		RewriteRuleITokenStream stream_QUARTER=new RewriteRuleITokenStream(adaptor,"token QUARTER");
		RewriteRuleITokenStream stream_REPEAT=new RewriteRuleITokenStream(adaptor,"token REPEAT");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		RewriteRuleITokenStream stream_WEEK=new RewriteRuleITokenStream(adaptor,"token WEEK");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		try { DebugEnterRule(GrammarFileName, "functionCall_conflicts");
		DebugLocation(1478, 1);
		try
		{
			// MySQL51Parser.g3:1479:2: ( ASCII LPAREN expr RPAREN -> ^( FUNC ^( ASCII expr ) ) | CHARSET LPAREN expr RPAREN -> ^( FUNC ^( CHARSET expr ) ) | COALESCE LPAREN exprList RPAREN -> ^( FUNC ^( COALESCE exprList ) ) | COLLATION LPAREN expr RPAREN -> ^( FUNC ^( COLLATION expr ) ) | CONTAINS LPAREN e1= expr COMMA e2= expr RPAREN -> ^( FUNC ^( CONTAINS $e1 $e2) ) | DATABASE LPAREN RPAREN -> ^( FUNC ^( DATABASE LPAREN ) ) | GEOMETRYCOLLECTION LPAREN exprList RPAREN -> ^( FUNC ^( GEOMETRYCOLLECTION exprList ) ) | IF LPAREN e1= expr COMMA e2= expr COMMA e3= expr RPAREN -> ^( FUNC ^( IF $e1 $e2 $e3) ) | LINESTRING LPAREN exprList RPAREN -> ^( FUNC ^( LINESTRING exprList ) ) | MICROSECOND LPAREN expr RPAREN -> ^( FUNC ^( MICROSECOND expr ) ) | MOD LPAREN e1= expr COMMA e2= expr RPAREN -> ^( FUNC ^( MOD $e1 $e2) ) | MULTILINESTRING LPAREN exprList RPAREN -> ^( FUNC ^( MULTILINESTRING exprList ) ) | MULTIPOINT LPAREN exprList RPAREN -> ^( FUNC ^( MULTIPOINT exprList ) ) | MULTIPOLYGON LPAREN exprList RPAREN -> ^( FUNC ^( MULTIPOLYGON exprList ) ) | OLD_PASSWORD LPAREN expr RPAREN -> ^( FUNC ^( OLD_PASSWORD expr ) ) | PASSWORD LPAREN expr RPAREN -> ^( FUNC ^( PASSWORD expr ) ) | POINT LPAREN x= expr COMMA y= expr RPAREN -> ^( FUNC ^( POINT $x $y) ) | POLYGON LPAREN exprList RPAREN -> ^( FUNC ^( POLYGON exprList ) ) | QUARTER LPAREN expr RPAREN -> ^( FUNC ^( QUARTER expr ) ) | REPEAT LPAREN str= expr COMMA count= expr RPAREN -> ^( FUNC ^( REPEAT $str $count) ) | REPLACE LPAREN str= expr COMMA from= expr COMMA to= expr RPAREN -> ^( FUNC ^( REPLACE $str $from $to) ) | TRUNCATE LPAREN num= expr COMMA decimals= expr RPAREN -> ^( FUNC ^( TRUNCATE $num $decimals) ) | WEEK LPAREN date= expr ( COMMA mode= expr )? RPAREN -> ^( FUNC ^( WEEK $date ( $mode)? ) ) )
			int alt348=23;
			try { DebugEnterDecision(348, false);
			switch (input.LA(1))
			{
			case ASCII:
				{
				alt348 = 1;
				}
				break;
			case CHARSET:
				{
				alt348 = 2;
				}
				break;
			case COALESCE:
				{
				alt348 = 3;
				}
				break;
			case COLLATION:
				{
				alt348 = 4;
				}
				break;
			case CONTAINS:
				{
				alt348 = 5;
				}
				break;
			case DATABASE:
				{
				alt348 = 6;
				}
				break;
			case GEOMETRYCOLLECTION:
				{
				alt348 = 7;
				}
				break;
			case IF:
				{
				alt348 = 8;
				}
				break;
			case LINESTRING:
				{
				alt348 = 9;
				}
				break;
			case MICROSECOND:
				{
				alt348 = 10;
				}
				break;
			case MOD:
				{
				alt348 = 11;
				}
				break;
			case MULTILINESTRING:
				{
				alt348 = 12;
				}
				break;
			case MULTIPOINT:
				{
				alt348 = 13;
				}
				break;
			case MULTIPOLYGON:
				{
				alt348 = 14;
				}
				break;
			case OLD_PASSWORD:
				{
				alt348 = 15;
				}
				break;
			case PASSWORD:
				{
				alt348 = 16;
				}
				break;
			case POINT:
				{
				alt348 = 17;
				}
				break;
			case POLYGON:
				{
				alt348 = 18;
				}
				break;
			case QUARTER:
				{
				alt348 = 19;
				}
				break;
			case REPEAT:
				{
				alt348 = 20;
				}
				break;
			case REPLACE:
				{
				alt348 = 21;
				}
				break;
			case TRUNCATE:
				{
				alt348 = 22;
				}
				break;
			case WEEK:
				{
				alt348 = 23;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 348, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(348); }
			switch (alt348)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1481:3: ASCII LPAREN expr RPAREN
				{
				DebugLocation(1481, 3);
				ASCII1025=(IToken)Match(input,ASCII,Follow._ASCII_in_functionCall_conflicts13561); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASCII.Add(ASCII1025);

				DebugLocation(1481, 9);
				LPAREN1026=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13563); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1026);

				DebugLocation(1481, 16);
				PushFollow(Follow._expr_in_functionCall_conflicts13565);
				expr1027=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1027.Tree);
				DebugLocation(1481, 21);
				RPAREN1028=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1028);



				{
				// AST REWRITE
				// elements: ASCII, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1481:29: -> ^( FUNC ^( ASCII expr ) )
				{
					DebugLocation(1481, 32);
					// MySQL51Parser.g3:1481:32: ^( FUNC ^( ASCII expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1481, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1481, 39);
					// MySQL51Parser.g3:1481:39: ^( ASCII expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1481, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_ASCII.NextNode(), root_2);

					DebugLocation(1481, 47);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1482:4: CHARSET LPAREN expr RPAREN
				{
				DebugLocation(1482, 4);
				CHARSET1029=(IToken)Match(input,CHARSET,Follow._CHARSET_in_functionCall_conflicts13585); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CHARSET.Add(CHARSET1029);

				DebugLocation(1482, 12);
				LPAREN1030=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13587); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1030);

				DebugLocation(1482, 19);
				PushFollow(Follow._expr_in_functionCall_conflicts13589);
				expr1031=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1031.Tree);
				DebugLocation(1482, 24);
				RPAREN1032=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13591); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1032);



				{
				// AST REWRITE
				// elements: CHARSET, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1482:32: -> ^( FUNC ^( CHARSET expr ) )
				{
					DebugLocation(1482, 35);
					// MySQL51Parser.g3:1482:35: ^( FUNC ^( CHARSET expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1482, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1482, 42);
					// MySQL51Parser.g3:1482:42: ^( CHARSET expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1482, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_CHARSET.NextNode(), root_2);

					DebugLocation(1482, 52);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1483:4: COALESCE LPAREN exprList RPAREN
				{
				DebugLocation(1483, 4);
				COALESCE1033=(IToken)Match(input,COALESCE,Follow._COALESCE_in_functionCall_conflicts13609); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COALESCE.Add(COALESCE1033);

				DebugLocation(1483, 13);
				LPAREN1034=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13611); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1034);

				DebugLocation(1483, 20);
				PushFollow(Follow._exprList_in_functionCall_conflicts13613);
				exprList1035=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1035.Tree);
				DebugLocation(1483, 29);
				RPAREN1036=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13615); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1036);



				{
				// AST REWRITE
				// elements: COALESCE, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1483:37: -> ^( FUNC ^( COALESCE exprList ) )
				{
					DebugLocation(1483, 40);
					// MySQL51Parser.g3:1483:40: ^( FUNC ^( COALESCE exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1483, 42);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1483, 47);
					// MySQL51Parser.g3:1483:47: ^( COALESCE exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1483, 49);
					root_2 = (object)adaptor.BecomeRoot(stream_COALESCE.NextNode(), root_2);

					DebugLocation(1483, 58);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1484:4: COLLATION LPAREN expr RPAREN
				{
				DebugLocation(1484, 4);
				COLLATION1037=(IToken)Match(input,COLLATION,Follow._COLLATION_in_functionCall_conflicts13633); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLLATION.Add(COLLATION1037);

				DebugLocation(1484, 14);
				LPAREN1038=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13635); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1038);

				DebugLocation(1484, 21);
				PushFollow(Follow._expr_in_functionCall_conflicts13637);
				expr1039=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1039.Tree);
				DebugLocation(1484, 26);
				RPAREN1040=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13639); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1040);



				{
				// AST REWRITE
				// elements: COLLATION, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1484:34: -> ^( FUNC ^( COLLATION expr ) )
				{
					DebugLocation(1484, 37);
					// MySQL51Parser.g3:1484:37: ^( FUNC ^( COLLATION expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1484, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1484, 44);
					// MySQL51Parser.g3:1484:44: ^( COLLATION expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1484, 46);
					root_2 = (object)adaptor.BecomeRoot(stream_COLLATION.NextNode(), root_2);

					DebugLocation(1484, 56);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1485:4: CONTAINS LPAREN e1= expr COMMA e2= expr RPAREN
				{
				DebugLocation(1485, 4);
				CONTAINS1041=(IToken)Match(input,CONTAINS,Follow._CONTAINS_in_functionCall_conflicts13657); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTAINS.Add(CONTAINS1041);

				DebugLocation(1485, 13);
				LPAREN1042=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13659); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1042);

				DebugLocation(1485, 22);
				PushFollow(Follow._expr_in_functionCall_conflicts13663);
				e1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e1.Tree);
				DebugLocation(1485, 28);
				COMMA1043=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts13665); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1043);

				DebugLocation(1485, 36);
				PushFollow(Follow._expr_in_functionCall_conflicts13669);
				e2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e2.Tree);
				DebugLocation(1485, 42);
				RPAREN1044=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13671); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1044);



				{
				// AST REWRITE
				// elements: CONTAINS, e1, e2
				// token labels: 
				// rule labels: e1, e2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.Tree:null);
				RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1485:50: -> ^( FUNC ^( CONTAINS $e1 $e2) )
				{
					DebugLocation(1485, 53);
					// MySQL51Parser.g3:1485:53: ^( FUNC ^( CONTAINS $e1 $e2) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1485, 55);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1485, 60);
					// MySQL51Parser.g3:1485:60: ^( CONTAINS $e1 $e2)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1485, 62);
					root_2 = (object)adaptor.BecomeRoot(stream_CONTAINS.NextNode(), root_2);

					DebugLocation(1485, 72);
					adaptor.AddChild(root_2, stream_e1.NextTree());
					DebugLocation(1485, 76);
					adaptor.AddChild(root_2, stream_e2.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1486:4: DATABASE LPAREN RPAREN
				{
				DebugLocation(1486, 4);
				DATABASE1045=(IToken)Match(input,DATABASE,Follow._DATABASE_in_functionCall_conflicts13694); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATABASE.Add(DATABASE1045);

				DebugLocation(1486, 13);
				LPAREN1046=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13696); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1046);

				DebugLocation(1486, 20);
				RPAREN1047=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13698); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1047);



				{
				// AST REWRITE
				// elements: DATABASE, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1486:28: -> ^( FUNC ^( DATABASE LPAREN ) )
				{
					DebugLocation(1486, 31);
					// MySQL51Parser.g3:1486:31: ^( FUNC ^( DATABASE LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1486, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1486, 38);
					// MySQL51Parser.g3:1486:38: ^( DATABASE LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1486, 40);
					root_2 = (object)adaptor.BecomeRoot(stream_DATABASE.NextNode(), root_2);

					DebugLocation(1486, 49);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1487:4: GEOMETRYCOLLECTION LPAREN exprList RPAREN
				{
				DebugLocation(1487, 4);
				GEOMETRYCOLLECTION1048=(IToken)Match(input,GEOMETRYCOLLECTION,Follow._GEOMETRYCOLLECTION_in_functionCall_conflicts13716); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_GEOMETRYCOLLECTION.Add(GEOMETRYCOLLECTION1048);

				DebugLocation(1487, 23);
				LPAREN1049=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1049);

				DebugLocation(1487, 30);
				PushFollow(Follow._exprList_in_functionCall_conflicts13720);
				exprList1050=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1050.Tree);
				DebugLocation(1487, 39);
				RPAREN1051=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13722); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1051);



				{
				// AST REWRITE
				// elements: GEOMETRYCOLLECTION, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1487:47: -> ^( FUNC ^( GEOMETRYCOLLECTION exprList ) )
				{
					DebugLocation(1487, 50);
					// MySQL51Parser.g3:1487:50: ^( FUNC ^( GEOMETRYCOLLECTION exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1487, 52);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1487, 57);
					// MySQL51Parser.g3:1487:57: ^( GEOMETRYCOLLECTION exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1487, 59);
					root_2 = (object)adaptor.BecomeRoot(stream_GEOMETRYCOLLECTION.NextNode(), root_2);

					DebugLocation(1487, 78);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1488:4: IF LPAREN e1= expr COMMA e2= expr COMMA e3= expr RPAREN
				{
				DebugLocation(1488, 4);
				IF1052=(IToken)Match(input,IF,Follow._IF_in_functionCall_conflicts13741); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF1052);

				DebugLocation(1488, 7);
				LPAREN1053=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13743); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1053);

				DebugLocation(1488, 16);
				PushFollow(Follow._expr_in_functionCall_conflicts13747);
				e1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e1.Tree);
				DebugLocation(1488, 22);
				COMMA1054=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts13749); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1054);

				DebugLocation(1488, 30);
				PushFollow(Follow._expr_in_functionCall_conflicts13753);
				e2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e2.Tree);
				DebugLocation(1488, 36);
				COMMA1055=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts13755); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1055);

				DebugLocation(1488, 44);
				PushFollow(Follow._expr_in_functionCall_conflicts13759);
				e3=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e3.Tree);
				DebugLocation(1488, 50);
				RPAREN1056=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13761); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1056);



				{
				// AST REWRITE
				// elements: IF, e1, e2, e3
				// token labels: 
				// rule labels: e1, e2, e3, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.Tree:null);
				RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.Tree:null);
				RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1488:57: -> ^( FUNC ^( IF $e1 $e2 $e3) )
				{
					DebugLocation(1488, 60);
					// MySQL51Parser.g3:1488:60: ^( FUNC ^( IF $e1 $e2 $e3) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1488, 62);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1488, 67);
					// MySQL51Parser.g3:1488:67: ^( IF $e1 $e2 $e3)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1488, 69);
					root_2 = (object)adaptor.BecomeRoot(stream_IF.NextNode(), root_2);

					DebugLocation(1488, 73);
					adaptor.AddChild(root_2, stream_e1.NextTree());
					DebugLocation(1488, 77);
					adaptor.AddChild(root_2, stream_e2.NextTree());
					DebugLocation(1488, 81);
					adaptor.AddChild(root_2, stream_e3.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:1489:4: LINESTRING LPAREN exprList RPAREN
				{
				DebugLocation(1489, 4);
				LINESTRING1057=(IToken)Match(input,LINESTRING,Follow._LINESTRING_in_functionCall_conflicts13785); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LINESTRING.Add(LINESTRING1057);

				DebugLocation(1489, 15);
				LPAREN1058=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1058);

				DebugLocation(1489, 22);
				PushFollow(Follow._exprList_in_functionCall_conflicts13789);
				exprList1059=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1059.Tree);
				DebugLocation(1489, 31);
				RPAREN1060=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13791); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1060);



				{
				// AST REWRITE
				// elements: LINESTRING, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1489:39: -> ^( FUNC ^( LINESTRING exprList ) )
				{
					DebugLocation(1489, 42);
					// MySQL51Parser.g3:1489:42: ^( FUNC ^( LINESTRING exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1489, 44);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1489, 49);
					// MySQL51Parser.g3:1489:49: ^( LINESTRING exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1489, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_LINESTRING.NextNode(), root_2);

					DebugLocation(1489, 62);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:1490:4: MICROSECOND LPAREN expr RPAREN
				{
				DebugLocation(1490, 4);
				MICROSECOND1061=(IToken)Match(input,MICROSECOND,Follow._MICROSECOND_in_functionCall_conflicts13810); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MICROSECOND.Add(MICROSECOND1061);

				DebugLocation(1490, 16);
				LPAREN1062=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13812); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1062);

				DebugLocation(1490, 23);
				PushFollow(Follow._expr_in_functionCall_conflicts13814);
				expr1063=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1063.Tree);
				DebugLocation(1490, 28);
				RPAREN1064=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13816); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1064);



				{
				// AST REWRITE
				// elements: MICROSECOND, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1490:36: -> ^( FUNC ^( MICROSECOND expr ) )
				{
					DebugLocation(1490, 39);
					// MySQL51Parser.g3:1490:39: ^( FUNC ^( MICROSECOND expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1490, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1490, 46);
					// MySQL51Parser.g3:1490:46: ^( MICROSECOND expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1490, 48);
					root_2 = (object)adaptor.BecomeRoot(stream_MICROSECOND.NextNode(), root_2);

					DebugLocation(1490, 60);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:1491:4: MOD LPAREN e1= expr COMMA e2= expr RPAREN
				{
				DebugLocation(1491, 4);
				MOD1065=(IToken)Match(input,MOD,Follow._MOD_in_functionCall_conflicts13834); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MOD.Add(MOD1065);

				DebugLocation(1491, 8);
				LPAREN1066=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13836); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1066);

				DebugLocation(1491, 17);
				PushFollow(Follow._expr_in_functionCall_conflicts13840);
				e1=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e1.Tree);
				DebugLocation(1491, 23);
				COMMA1067=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts13842); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1067);

				DebugLocation(1491, 31);
				PushFollow(Follow._expr_in_functionCall_conflicts13846);
				e2=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(e2.Tree);
				DebugLocation(1491, 37);
				RPAREN1068=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13848); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1068);



				{
				// AST REWRITE
				// elements: MOD, e1, e2
				// token labels: 
				// rule labels: e1, e2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.Tree:null);
				RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1491:45: -> ^( FUNC ^( MOD $e1 $e2) )
				{
					DebugLocation(1491, 48);
					// MySQL51Parser.g3:1491:48: ^( FUNC ^( MOD $e1 $e2) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1491, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1491, 55);
					// MySQL51Parser.g3:1491:55: ^( MOD $e1 $e2)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1491, 57);
					root_2 = (object)adaptor.BecomeRoot(stream_MOD.NextNode(), root_2);

					DebugLocation(1491, 62);
					adaptor.AddChild(root_2, stream_e1.NextTree());
					DebugLocation(1491, 66);
					adaptor.AddChild(root_2, stream_e2.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:1492:4: MULTILINESTRING LPAREN exprList RPAREN
				{
				DebugLocation(1492, 4);
				MULTILINESTRING1069=(IToken)Match(input,MULTILINESTRING,Follow._MULTILINESTRING_in_functionCall_conflicts13870); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MULTILINESTRING.Add(MULTILINESTRING1069);

				DebugLocation(1492, 20);
				LPAREN1070=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13872); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1070);

				DebugLocation(1492, 27);
				PushFollow(Follow._exprList_in_functionCall_conflicts13874);
				exprList1071=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1071.Tree);
				DebugLocation(1492, 36);
				RPAREN1072=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13876); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1072);



				{
				// AST REWRITE
				// elements: MULTILINESTRING, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1492:44: -> ^( FUNC ^( MULTILINESTRING exprList ) )
				{
					DebugLocation(1492, 47);
					// MySQL51Parser.g3:1492:47: ^( FUNC ^( MULTILINESTRING exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1492, 49);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1492, 54);
					// MySQL51Parser.g3:1492:54: ^( MULTILINESTRING exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1492, 56);
					root_2 = (object)adaptor.BecomeRoot(stream_MULTILINESTRING.NextNode(), root_2);

					DebugLocation(1492, 72);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:1493:4: MULTIPOINT LPAREN exprList RPAREN
				{
				DebugLocation(1493, 4);
				MULTIPOINT1073=(IToken)Match(input,MULTIPOINT,Follow._MULTIPOINT_in_functionCall_conflicts13895); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MULTIPOINT.Add(MULTIPOINT1073);

				DebugLocation(1493, 15);
				LPAREN1074=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13897); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1074);

				DebugLocation(1493, 22);
				PushFollow(Follow._exprList_in_functionCall_conflicts13899);
				exprList1075=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1075.Tree);
				DebugLocation(1493, 31);
				RPAREN1076=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13901); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1076);



				{
				// AST REWRITE
				// elements: MULTIPOINT, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1493:39: -> ^( FUNC ^( MULTIPOINT exprList ) )
				{
					DebugLocation(1493, 42);
					// MySQL51Parser.g3:1493:42: ^( FUNC ^( MULTIPOINT exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1493, 44);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1493, 49);
					// MySQL51Parser.g3:1493:49: ^( MULTIPOINT exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1493, 51);
					root_2 = (object)adaptor.BecomeRoot(stream_MULTIPOINT.NextNode(), root_2);

					DebugLocation(1493, 62);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:1494:4: MULTIPOLYGON LPAREN exprList RPAREN
				{
				DebugLocation(1494, 4);
				MULTIPOLYGON1077=(IToken)Match(input,MULTIPOLYGON,Follow._MULTIPOLYGON_in_functionCall_conflicts13920); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MULTIPOLYGON.Add(MULTIPOLYGON1077);

				DebugLocation(1494, 17);
				LPAREN1078=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13922); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1078);

				DebugLocation(1494, 24);
				PushFollow(Follow._exprList_in_functionCall_conflicts13924);
				exprList1079=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1079.Tree);
				DebugLocation(1494, 33);
				RPAREN1080=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13926); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1080);



				{
				// AST REWRITE
				// elements: MULTIPOLYGON, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1494:41: -> ^( FUNC ^( MULTIPOLYGON exprList ) )
				{
					DebugLocation(1494, 44);
					// MySQL51Parser.g3:1494:44: ^( FUNC ^( MULTIPOLYGON exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1494, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1494, 51);
					// MySQL51Parser.g3:1494:51: ^( MULTIPOLYGON exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1494, 53);
					root_2 = (object)adaptor.BecomeRoot(stream_MULTIPOLYGON.NextNode(), root_2);

					DebugLocation(1494, 66);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:1495:4: OLD_PASSWORD LPAREN expr RPAREN
				{
				DebugLocation(1495, 4);
				OLD_PASSWORD1081=(IToken)Match(input,OLD_PASSWORD,Follow._OLD_PASSWORD_in_functionCall_conflicts13945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OLD_PASSWORD.Add(OLD_PASSWORD1081);

				DebugLocation(1495, 17);
				LPAREN1082=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13947); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1082);

				DebugLocation(1495, 24);
				PushFollow(Follow._expr_in_functionCall_conflicts13949);
				expr1083=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1083.Tree);
				DebugLocation(1495, 29);
				RPAREN1084=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13951); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1084);



				{
				// AST REWRITE
				// elements: OLD_PASSWORD, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1495:37: -> ^( FUNC ^( OLD_PASSWORD expr ) )
				{
					DebugLocation(1495, 40);
					// MySQL51Parser.g3:1495:40: ^( FUNC ^( OLD_PASSWORD expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1495, 42);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1495, 47);
					// MySQL51Parser.g3:1495:47: ^( OLD_PASSWORD expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1495, 49);
					root_2 = (object)adaptor.BecomeRoot(stream_OLD_PASSWORD.NextNode(), root_2);

					DebugLocation(1495, 62);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:1496:4: PASSWORD LPAREN expr RPAREN
				{
				DebugLocation(1496, 4);
				PASSWORD1085=(IToken)Match(input,PASSWORD,Follow._PASSWORD_in_functionCall_conflicts13969); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PASSWORD.Add(PASSWORD1085);

				DebugLocation(1496, 13);
				LPAREN1086=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13971); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1086);

				DebugLocation(1496, 20);
				PushFollow(Follow._expr_in_functionCall_conflicts13973);
				expr1087=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1087.Tree);
				DebugLocation(1496, 25);
				RPAREN1088=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts13975); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1088);



				{
				// AST REWRITE
				// elements: PASSWORD, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1496:33: -> ^( FUNC ^( PASSWORD expr ) )
				{
					DebugLocation(1496, 36);
					// MySQL51Parser.g3:1496:36: ^( FUNC ^( PASSWORD expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1496, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1496, 43);
					// MySQL51Parser.g3:1496:43: ^( PASSWORD expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1496, 45);
					root_2 = (object)adaptor.BecomeRoot(stream_PASSWORD.NextNode(), root_2);

					DebugLocation(1496, 54);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// MySQL51Parser.g3:1497:4: POINT LPAREN x= expr COMMA y= expr RPAREN
				{
				DebugLocation(1497, 4);
				POINT1089=(IToken)Match(input,POINT,Follow._POINT_in_functionCall_conflicts13993); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POINT.Add(POINT1089);

				DebugLocation(1497, 10);
				LPAREN1090=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts13995); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1090);

				DebugLocation(1497, 18);
				PushFollow(Follow._expr_in_functionCall_conflicts13999);
				x=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(x.Tree);
				DebugLocation(1497, 24);
				COMMA1091=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14001); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1091);

				DebugLocation(1497, 31);
				PushFollow(Follow._expr_in_functionCall_conflicts14005);
				y=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(y.Tree);
				DebugLocation(1497, 37);
				RPAREN1092=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14007); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1092);



				{
				// AST REWRITE
				// elements: POINT, x, y
				// token labels: 
				// rule labels: x, y, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.Tree:null);
				RewriteRuleSubtreeStream stream_y=new RewriteRuleSubtreeStream(adaptor,"rule y",y!=null?y.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1497:45: -> ^( FUNC ^( POINT $x $y) )
				{
					DebugLocation(1497, 48);
					// MySQL51Parser.g3:1497:48: ^( FUNC ^( POINT $x $y) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1497, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1497, 55);
					// MySQL51Parser.g3:1497:55: ^( POINT $x $y)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1497, 57);
					root_2 = (object)adaptor.BecomeRoot(stream_POINT.NextNode(), root_2);

					DebugLocation(1497, 64);
					adaptor.AddChild(root_2, stream_x.NextTree());
					DebugLocation(1497, 67);
					adaptor.AddChild(root_2, stream_y.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// MySQL51Parser.g3:1498:4: POLYGON LPAREN exprList RPAREN
				{
				DebugLocation(1498, 4);
				POLYGON1093=(IToken)Match(input,POLYGON,Follow._POLYGON_in_functionCall_conflicts14030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POLYGON.Add(POLYGON1093);

				DebugLocation(1498, 12);
				LPAREN1094=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14032); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1094);

				DebugLocation(1498, 19);
				PushFollow(Follow._exprList_in_functionCall_conflicts14034);
				exprList1095=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1095.Tree);
				DebugLocation(1498, 28);
				RPAREN1096=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14036); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1096);



				{
				// AST REWRITE
				// elements: POLYGON, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1498:36: -> ^( FUNC ^( POLYGON exprList ) )
				{
					DebugLocation(1498, 39);
					// MySQL51Parser.g3:1498:39: ^( FUNC ^( POLYGON exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1498, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1498, 46);
					// MySQL51Parser.g3:1498:46: ^( POLYGON exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1498, 48);
					root_2 = (object)adaptor.BecomeRoot(stream_POLYGON.NextNode(), root_2);

					DebugLocation(1498, 56);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// MySQL51Parser.g3:1499:4: QUARTER LPAREN expr RPAREN
				{
				DebugLocation(1499, 4);
				QUARTER1097=(IToken)Match(input,QUARTER,Follow._QUARTER_in_functionCall_conflicts14055); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QUARTER.Add(QUARTER1097);

				DebugLocation(1499, 12);
				LPAREN1098=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14057); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1098);

				DebugLocation(1499, 19);
				PushFollow(Follow._expr_in_functionCall_conflicts14059);
				expr1099=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1099.Tree);
				DebugLocation(1499, 24);
				RPAREN1100=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14061); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1100);



				{
				// AST REWRITE
				// elements: QUARTER, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1499:32: -> ^( FUNC ^( QUARTER expr ) )
				{
					DebugLocation(1499, 35);
					// MySQL51Parser.g3:1499:35: ^( FUNC ^( QUARTER expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1499, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1499, 42);
					// MySQL51Parser.g3:1499:42: ^( QUARTER expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1499, 44);
					root_2 = (object)adaptor.BecomeRoot(stream_QUARTER.NextNode(), root_2);

					DebugLocation(1499, 52);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// MySQL51Parser.g3:1500:4: REPEAT LPAREN str= expr COMMA count= expr RPAREN
				{
				DebugLocation(1500, 4);
				REPEAT1101=(IToken)Match(input,REPEAT,Follow._REPEAT_in_functionCall_conflicts14079); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPEAT.Add(REPEAT1101);

				DebugLocation(1500, 11);
				LPAREN1102=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1102);

				DebugLocation(1500, 21);
				PushFollow(Follow._expr_in_functionCall_conflicts14085);
				str=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(str.Tree);
				DebugLocation(1500, 27);
				COMMA1103=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14087); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1103);

				DebugLocation(1500, 38);
				PushFollow(Follow._expr_in_functionCall_conflicts14091);
				count=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(count.Tree);
				DebugLocation(1500, 44);
				RPAREN1104=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1104);



				{
				// AST REWRITE
				// elements: REPEAT, str, count
				// token labels: 
				// rule labels: str, count, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
				RewriteRuleSubtreeStream stream_count=new RewriteRuleSubtreeStream(adaptor,"rule count",count!=null?count.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1500:52: -> ^( FUNC ^( REPEAT $str $count) )
				{
					DebugLocation(1500, 55);
					// MySQL51Parser.g3:1500:55: ^( FUNC ^( REPEAT $str $count) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1500, 57);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1500, 62);
					// MySQL51Parser.g3:1500:62: ^( REPEAT $str $count)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1500, 64);
					root_2 = (object)adaptor.BecomeRoot(stream_REPEAT.NextNode(), root_2);

					DebugLocation(1500, 72);
					adaptor.AddChild(root_2, stream_str.NextTree());
					DebugLocation(1500, 77);
					adaptor.AddChild(root_2, stream_count.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// MySQL51Parser.g3:1501:4: REPLACE LPAREN str= expr COMMA from= expr COMMA to= expr RPAREN
				{
				DebugLocation(1501, 4);
				REPLACE1105=(IToken)Match(input,REPLACE,Follow._REPLACE_in_functionCall_conflicts14115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPLACE.Add(REPLACE1105);

				DebugLocation(1501, 12);
				LPAREN1106=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14117); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1106);

				DebugLocation(1501, 22);
				PushFollow(Follow._expr_in_functionCall_conflicts14121);
				str=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(str.Tree);
				DebugLocation(1501, 28);
				COMMA1107=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14123); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1107);

				DebugLocation(1501, 38);
				PushFollow(Follow._expr_in_functionCall_conflicts14127);
				from=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(from.Tree);
				DebugLocation(1501, 44);
				COMMA1108=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1108);

				DebugLocation(1501, 52);
				PushFollow(Follow._expr_in_functionCall_conflicts14133);
				to=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(to.Tree);
				DebugLocation(1501, 58);
				RPAREN1109=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14135); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1109);



				{
				// AST REWRITE
				// elements: REPLACE, str, from, to
				// token labels: 
				// rule labels: str, from, to, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
				RewriteRuleSubtreeStream stream_from=new RewriteRuleSubtreeStream(adaptor,"rule from",from!=null?from.Tree:null);
				RewriteRuleSubtreeStream stream_to=new RewriteRuleSubtreeStream(adaptor,"rule to",to!=null?to.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1501:66: -> ^( FUNC ^( REPLACE $str $from $to) )
				{
					DebugLocation(1501, 69);
					// MySQL51Parser.g3:1501:69: ^( FUNC ^( REPLACE $str $from $to) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1501, 71);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1501, 76);
					// MySQL51Parser.g3:1501:76: ^( REPLACE $str $from $to)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1501, 78);
					root_2 = (object)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_2);

					DebugLocation(1501, 87);
					adaptor.AddChild(root_2, stream_str.NextTree());
					DebugLocation(1501, 92);
					adaptor.AddChild(root_2, stream_from.NextTree());
					DebugLocation(1501, 98);
					adaptor.AddChild(root_2, stream_to.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// MySQL51Parser.g3:1502:4: TRUNCATE LPAREN num= expr COMMA decimals= expr RPAREN
				{
				DebugLocation(1502, 4);
				TRUNCATE1110=(IToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_functionCall_conflicts14160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE1110);

				DebugLocation(1502, 13);
				LPAREN1111=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14162); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1111);

				DebugLocation(1502, 23);
				PushFollow(Follow._expr_in_functionCall_conflicts14166);
				num=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(num.Tree);
				DebugLocation(1502, 29);
				COMMA1112=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14168); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1112);

				DebugLocation(1502, 43);
				PushFollow(Follow._expr_in_functionCall_conflicts14172);
				decimals=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(decimals.Tree);
				DebugLocation(1502, 49);
				RPAREN1113=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14174); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1113);



				{
				// AST REWRITE
				// elements: TRUNCATE, num, decimals
				// token labels: 
				// rule labels: num, decimals, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_num=new RewriteRuleSubtreeStream(adaptor,"rule num",num!=null?num.Tree:null);
				RewriteRuleSubtreeStream stream_decimals=new RewriteRuleSubtreeStream(adaptor,"rule decimals",decimals!=null?decimals.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1502:57: -> ^( FUNC ^( TRUNCATE $num $decimals) )
				{
					DebugLocation(1502, 60);
					// MySQL51Parser.g3:1502:60: ^( FUNC ^( TRUNCATE $num $decimals) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1502, 62);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1502, 67);
					// MySQL51Parser.g3:1502:67: ^( TRUNCATE $num $decimals)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1502, 69);
					root_2 = (object)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_2);

					DebugLocation(1502, 79);
					adaptor.AddChild(root_2, stream_num.NextTree());
					DebugLocation(1502, 84);
					adaptor.AddChild(root_2, stream_decimals.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// MySQL51Parser.g3:1503:4: WEEK LPAREN date= expr ( COMMA mode= expr )? RPAREN
				{
				DebugLocation(1503, 4);
				WEEK1114=(IToken)Match(input,WEEK,Follow._WEEK_in_functionCall_conflicts14196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WEEK.Add(WEEK1114);

				DebugLocation(1503, 9);
				LPAREN1115=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_conflicts14198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1115);

				DebugLocation(1503, 20);
				PushFollow(Follow._expr_in_functionCall_conflicts14202);
				date=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(date.Tree);
				DebugLocation(1503, 26);
				// MySQL51Parser.g3:1503:26: ( COMMA mode= expr )?
				int alt347=2;
				try { DebugEnterSubRule(347);
				try { DebugEnterDecision(347, false);
				int LA347_0 = input.LA(1);

				if ((LA347_0==COMMA))
				{
					alt347 = 1;
				}
				} finally { DebugExitDecision(347); }
				switch (alt347)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1503:27: COMMA mode= expr
					{
					DebugLocation(1503, 27);
					COMMA1116=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_conflicts14205); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA1116);

					DebugLocation(1503, 37);
					PushFollow(Follow._expr_in_functionCall_conflicts14209);
					mode=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(mode.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(347); }

				DebugLocation(1503, 45);
				RPAREN1117=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_conflicts14213); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1117);



				{
				// AST REWRITE
				// elements: WEEK, date, mode
				// token labels: 
				// rule labels: date, mode, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date",date!=null?date.Tree:null);
				RewriteRuleSubtreeStream stream_mode=new RewriteRuleSubtreeStream(adaptor,"rule mode",mode!=null?mode.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1503:53: -> ^( FUNC ^( WEEK $date ( $mode)? ) )
				{
					DebugLocation(1503, 56);
					// MySQL51Parser.g3:1503:56: ^( FUNC ^( WEEK $date ( $mode)? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1503, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1503, 63);
					// MySQL51Parser.g3:1503:63: ^( WEEK $date ( $mode)? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1503, 65);
					root_2 = (object)adaptor.BecomeRoot(stream_WEEK.NextNode(), root_2);

					DebugLocation(1503, 71);
					adaptor.AddChild(root_2, stream_date.NextTree());
					DebugLocation(1503, 77);
					// MySQL51Parser.g3:1503:77: ( $mode)?
					if (stream_mode.HasNext)
					{
						DebugLocation(1503, 77);
						adaptor.AddChild(root_2, stream_mode.NextTree());

					}
					stream_mode.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall_conflicts", 108);
			LeaveRule("functionCall_conflicts", 108);
			LeaveRule_functionCall_conflicts();
		}
		DebugLocation(1504, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall_conflicts"); }
		return retval;

	}
	// $ANTLR end "functionCall_conflicts"

	private sealed partial class functionCall_reserved_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionCall_reserved_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_functionCall_reserved();
	partial void LeaveRule_functionCall_reserved();

	// $ANTLR start "functionCall_reserved"
	// MySQL51Parser.g3:1506:1: functionCall_reserved : ( CHAR LPAREN exprList ( USING (charsetname= ID |charsetname= STRING ) )? RPAREN -> ^( FUNC ^( CHAR exprList ( $charsetname)? ) ) | CURRENT_USER ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_USER ( LPAREN )? ) ) | DATE LPAREN expr RPAREN -> ^( FUNC ^( DATE expr ) ) | DAY LPAREN expr RPAREN -> ^( FUNC ^( DAY expr ) ) | HOUR LPAREN expr RPAREN -> ^( FUNC ^( HOUR expr ) ) | INSERT LPAREN str= expr COMMA pos= expr COMMA len= expr COMMA newstr= expr RPAREN -> ^( FUNC ^( INSERT $str $pos $len $newstr) ) | INTERVAL LPAREN exprList RPAREN -> ^( FUNC ^( INTERVAL exprList ) ) | LEFT LPAREN expr RPAREN -> ^( FUNC ^( LEFT expr ) ) | MINUTE LPAREN expr RPAREN -> ^( FUNC ^( MINUTE expr ) ) | MONTH LPAREN expr RPAREN -> ^( FUNC ^( MONTH expr ) ) | RIGHT LPAREN expr RPAREN -> ^( FUNC ^( RIGHT expr ) ) | SECOND LPAREN expr RPAREN -> ^( FUNC ^( SECOND expr ) ) | TIME LPAREN expr RPAREN -> ^( FUNC ^( TIME expr ) ) | TIMESTAMP LPAREN expr RPAREN -> ^( FUNC ^( TIMESTAMP expr ) ) | USER LPAREN RPAREN -> ^( FUNC ^( USER LPAREN ) ) | YEAR LPAREN expr RPAREN -> ^( FUNC ^( YEAR expr ) ) );
	[GrammarRule("functionCall_reserved")]
	private MySQL51Parser.functionCall_reserved_return functionCall_reserved()
	{
		EnterRule_functionCall_reserved();
		EnterRule("functionCall_reserved", 109);
		TraceIn("functionCall_reserved", 109);
		MySQL51Parser.functionCall_reserved_return retval = new MySQL51Parser.functionCall_reserved_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken charsetname = default(IToken);
		IToken CHAR1118 = default(IToken);
		IToken LPAREN1119 = default(IToken);
		IToken USING1121 = default(IToken);
		IToken RPAREN1122 = default(IToken);
		IToken CURRENT_USER1123 = default(IToken);
		IToken LPAREN1124 = default(IToken);
		IToken RPAREN1125 = default(IToken);
		IToken DATE1126 = default(IToken);
		IToken LPAREN1127 = default(IToken);
		IToken RPAREN1129 = default(IToken);
		IToken DAY1130 = default(IToken);
		IToken LPAREN1131 = default(IToken);
		IToken RPAREN1133 = default(IToken);
		IToken HOUR1134 = default(IToken);
		IToken LPAREN1135 = default(IToken);
		IToken RPAREN1137 = default(IToken);
		IToken INSERT1138 = default(IToken);
		IToken LPAREN1139 = default(IToken);
		IToken COMMA1140 = default(IToken);
		IToken COMMA1141 = default(IToken);
		IToken COMMA1142 = default(IToken);
		IToken RPAREN1143 = default(IToken);
		IToken INTERVAL1144 = default(IToken);
		IToken LPAREN1145 = default(IToken);
		IToken RPAREN1147 = default(IToken);
		IToken LEFT1148 = default(IToken);
		IToken LPAREN1149 = default(IToken);
		IToken RPAREN1151 = default(IToken);
		IToken MINUTE1152 = default(IToken);
		IToken LPAREN1153 = default(IToken);
		IToken RPAREN1155 = default(IToken);
		IToken MONTH1156 = default(IToken);
		IToken LPAREN1157 = default(IToken);
		IToken RPAREN1159 = default(IToken);
		IToken RIGHT1160 = default(IToken);
		IToken LPAREN1161 = default(IToken);
		IToken RPAREN1163 = default(IToken);
		IToken SECOND1164 = default(IToken);
		IToken LPAREN1165 = default(IToken);
		IToken RPAREN1167 = default(IToken);
		IToken TIME1168 = default(IToken);
		IToken LPAREN1169 = default(IToken);
		IToken RPAREN1171 = default(IToken);
		IToken TIMESTAMP1172 = default(IToken);
		IToken LPAREN1173 = default(IToken);
		IToken RPAREN1175 = default(IToken);
		IToken USER1176 = default(IToken);
		IToken LPAREN1177 = default(IToken);
		IToken RPAREN1178 = default(IToken);
		IToken YEAR1179 = default(IToken);
		IToken LPAREN1180 = default(IToken);
		IToken RPAREN1182 = default(IToken);
		MySQL51Parser.expr_return str = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return pos = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return len = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return newstr = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1120 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1128 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1132 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1136 = default(MySQL51Parser.expr_return);
		MySQL51Parser.exprList_return exprList1146 = default(MySQL51Parser.exprList_return);
		MySQL51Parser.expr_return expr1150 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1154 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1158 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1162 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1166 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1170 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1174 = default(MySQL51Parser.expr_return);
		MySQL51Parser.expr_return expr1181 = default(MySQL51Parser.expr_return);

		object charsetname_tree = default(object);
		object CHAR1118_tree = default(object);
		object LPAREN1119_tree = default(object);
		object USING1121_tree = default(object);
		object RPAREN1122_tree = default(object);
		object CURRENT_USER1123_tree = default(object);
		object LPAREN1124_tree = default(object);
		object RPAREN1125_tree = default(object);
		object DATE1126_tree = default(object);
		object LPAREN1127_tree = default(object);
		object RPAREN1129_tree = default(object);
		object DAY1130_tree = default(object);
		object LPAREN1131_tree = default(object);
		object RPAREN1133_tree = default(object);
		object HOUR1134_tree = default(object);
		object LPAREN1135_tree = default(object);
		object RPAREN1137_tree = default(object);
		object INSERT1138_tree = default(object);
		object LPAREN1139_tree = default(object);
		object COMMA1140_tree = default(object);
		object COMMA1141_tree = default(object);
		object COMMA1142_tree = default(object);
		object RPAREN1143_tree = default(object);
		object INTERVAL1144_tree = default(object);
		object LPAREN1145_tree = default(object);
		object RPAREN1147_tree = default(object);
		object LEFT1148_tree = default(object);
		object LPAREN1149_tree = default(object);
		object RPAREN1151_tree = default(object);
		object MINUTE1152_tree = default(object);
		object LPAREN1153_tree = default(object);
		object RPAREN1155_tree = default(object);
		object MONTH1156_tree = default(object);
		object LPAREN1157_tree = default(object);
		object RPAREN1159_tree = default(object);
		object RIGHT1160_tree = default(object);
		object LPAREN1161_tree = default(object);
		object RPAREN1163_tree = default(object);
		object SECOND1164_tree = default(object);
		object LPAREN1165_tree = default(object);
		object RPAREN1167_tree = default(object);
		object TIME1168_tree = default(object);
		object LPAREN1169_tree = default(object);
		object RPAREN1171_tree = default(object);
		object TIMESTAMP1172_tree = default(object);
		object LPAREN1173_tree = default(object);
		object RPAREN1175_tree = default(object);
		object USER1176_tree = default(object);
		object LPAREN1177_tree = default(object);
		object RPAREN1178_tree = default(object);
		object YEAR1179_tree = default(object);
		object LPAREN1180_tree = default(object);
		object RPAREN1182_tree = default(object);
		RewriteRuleITokenStream stream_CHAR=new RewriteRuleITokenStream(adaptor,"token CHAR");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_CURRENT_USER=new RewriteRuleITokenStream(adaptor,"token CURRENT_USER");
		RewriteRuleITokenStream stream_DATE=new RewriteRuleITokenStream(adaptor,"token DATE");
		RewriteRuleITokenStream stream_DAY=new RewriteRuleITokenStream(adaptor,"token DAY");
		RewriteRuleITokenStream stream_HOUR=new RewriteRuleITokenStream(adaptor,"token HOUR");
		RewriteRuleITokenStream stream_INSERT=new RewriteRuleITokenStream(adaptor,"token INSERT");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_INTERVAL=new RewriteRuleITokenStream(adaptor,"token INTERVAL");
		RewriteRuleITokenStream stream_LEFT=new RewriteRuleITokenStream(adaptor,"token LEFT");
		RewriteRuleITokenStream stream_MINUTE=new RewriteRuleITokenStream(adaptor,"token MINUTE");
		RewriteRuleITokenStream stream_MONTH=new RewriteRuleITokenStream(adaptor,"token MONTH");
		RewriteRuleITokenStream stream_RIGHT=new RewriteRuleITokenStream(adaptor,"token RIGHT");
		RewriteRuleITokenStream stream_SECOND=new RewriteRuleITokenStream(adaptor,"token SECOND");
		RewriteRuleITokenStream stream_TIME=new RewriteRuleITokenStream(adaptor,"token TIME");
		RewriteRuleITokenStream stream_TIMESTAMP=new RewriteRuleITokenStream(adaptor,"token TIMESTAMP");
		RewriteRuleITokenStream stream_USER=new RewriteRuleITokenStream(adaptor,"token USER");
		RewriteRuleITokenStream stream_YEAR=new RewriteRuleITokenStream(adaptor,"token YEAR");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "functionCall_reserved");
		DebugLocation(1506, 1);
		try
		{
			// MySQL51Parser.g3:1507:2: ( CHAR LPAREN exprList ( USING (charsetname= ID |charsetname= STRING ) )? RPAREN -> ^( FUNC ^( CHAR exprList ( $charsetname)? ) ) | CURRENT_USER ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_USER ( LPAREN )? ) ) | DATE LPAREN expr RPAREN -> ^( FUNC ^( DATE expr ) ) | DAY LPAREN expr RPAREN -> ^( FUNC ^( DAY expr ) ) | HOUR LPAREN expr RPAREN -> ^( FUNC ^( HOUR expr ) ) | INSERT LPAREN str= expr COMMA pos= expr COMMA len= expr COMMA newstr= expr RPAREN -> ^( FUNC ^( INSERT $str $pos $len $newstr) ) | INTERVAL LPAREN exprList RPAREN -> ^( FUNC ^( INTERVAL exprList ) ) | LEFT LPAREN expr RPAREN -> ^( FUNC ^( LEFT expr ) ) | MINUTE LPAREN expr RPAREN -> ^( FUNC ^( MINUTE expr ) ) | MONTH LPAREN expr RPAREN -> ^( FUNC ^( MONTH expr ) ) | RIGHT LPAREN expr RPAREN -> ^( FUNC ^( RIGHT expr ) ) | SECOND LPAREN expr RPAREN -> ^( FUNC ^( SECOND expr ) ) | TIME LPAREN expr RPAREN -> ^( FUNC ^( TIME expr ) ) | TIMESTAMP LPAREN expr RPAREN -> ^( FUNC ^( TIMESTAMP expr ) ) | USER LPAREN RPAREN -> ^( FUNC ^( USER LPAREN ) ) | YEAR LPAREN expr RPAREN -> ^( FUNC ^( YEAR expr ) ) )
			int alt352=16;
			try { DebugEnterDecision(352, false);
			switch (input.LA(1))
			{
			case CHAR:
				{
				alt352 = 1;
				}
				break;
			case CURRENT_USER:
				{
				alt352 = 2;
				}
				break;
			case DATE:
				{
				alt352 = 3;
				}
				break;
			case DAY:
				{
				alt352 = 4;
				}
				break;
			case HOUR:
				{
				alt352 = 5;
				}
				break;
			case INSERT:
				{
				alt352 = 6;
				}
				break;
			case INTERVAL:
				{
				alt352 = 7;
				}
				break;
			case LEFT:
				{
				alt352 = 8;
				}
				break;
			case MINUTE:
				{
				alt352 = 9;
				}
				break;
			case MONTH:
				{
				alt352 = 10;
				}
				break;
			case RIGHT:
				{
				alt352 = 11;
				}
				break;
			case SECOND:
				{
				alt352 = 12;
				}
				break;
			case TIME:
				{
				alt352 = 13;
				}
				break;
			case TIMESTAMP:
				{
				alt352 = 14;
				}
				break;
			case USER:
				{
				alt352 = 15;
				}
				break;
			case YEAR:
				{
				alt352 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 352, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(352); }
			switch (alt352)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1508:3: CHAR LPAREN exprList ( USING (charsetname= ID |charsetname= STRING ) )? RPAREN
				{
				DebugLocation(1508, 3);
				CHAR1118=(IToken)Match(input,CHAR,Follow._CHAR_in_functionCall_reserved14246); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CHAR.Add(CHAR1118);

				DebugLocation(1508, 8);
				LPAREN1119=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14248); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1119);

				DebugLocation(1508, 15);
				PushFollow(Follow._exprList_in_functionCall_reserved14250);
				exprList1120=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1120.Tree);
				DebugLocation(1508, 24);
				// MySQL51Parser.g3:1508:24: ( USING (charsetname= ID |charsetname= STRING ) )?
				int alt350=2;
				try { DebugEnterSubRule(350);
				try { DebugEnterDecision(350, false);
				int LA350_0 = input.LA(1);

				if ((LA350_0==USING))
				{
					alt350 = 1;
				}
				} finally { DebugExitDecision(350); }
				switch (alt350)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1508:25: USING (charsetname= ID |charsetname= STRING )
					{
					DebugLocation(1508, 25);
					USING1121=(IToken)Match(input,USING,Follow._USING_in_functionCall_reserved14253); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_USING.Add(USING1121);

					DebugLocation(1508, 31);
					// MySQL51Parser.g3:1508:31: (charsetname= ID |charsetname= STRING )
					int alt349=2;
					try { DebugEnterSubRule(349);
					try { DebugEnterDecision(349, false);
					int LA349_0 = input.LA(1);

					if ((LA349_0==ID))
					{
						alt349 = 1;
					}
					else if ((LA349_0==STRING))
					{
						alt349 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 349, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(349); }
					switch (alt349)
					{
					case 1:
						DebugEnterAlt(1);
						// MySQL51Parser.g3:1508:32: charsetname= ID
						{
						DebugLocation(1508, 43);
						charsetname=(IToken)Match(input,ID,Follow._ID_in_functionCall_reserved14258); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ID.Add(charsetname);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// MySQL51Parser.g3:1508:47: charsetname= STRING
						{
						DebugLocation(1508, 58);
						charsetname=(IToken)Match(input,STRING,Follow._STRING_in_functionCall_reserved14262); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(charsetname);


						}
						break;

					}
					} finally { DebugExitSubRule(349); }


					}
					break;

				}
				} finally { DebugExitSubRule(350); }

				DebugLocation(1508, 69);
				RPAREN1122=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14267); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1122);



				{
				// AST REWRITE
				// elements: CHAR, exprList, charsetname
				// token labels: charsetname
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_charsetname=new RewriteRuleITokenStream(adaptor,"token charsetname",charsetname);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1508:77: -> ^( FUNC ^( CHAR exprList ( $charsetname)? ) )
				{
					DebugLocation(1508, 80);
					// MySQL51Parser.g3:1508:80: ^( FUNC ^( CHAR exprList ( $charsetname)? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1508, 82);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1508, 87);
					// MySQL51Parser.g3:1508:87: ^( CHAR exprList ( $charsetname)? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1508, 89);
					root_2 = (object)adaptor.BecomeRoot(stream_CHAR.NextNode(), root_2);

					DebugLocation(1508, 94);
					adaptor.AddChild(root_2, stream_exprList.NextTree());
					DebugLocation(1508, 104);
					// MySQL51Parser.g3:1508:104: ( $charsetname)?
					if (stream_charsetname.HasNext)
					{
						DebugLocation(1508, 104);
						adaptor.AddChild(root_2, stream_charsetname.NextNode());

					}
					stream_charsetname.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// MySQL51Parser.g3:1509:4: CURRENT_USER ( LPAREN RPAREN )?
				{
				DebugLocation(1509, 4);
				CURRENT_USER1123=(IToken)Match(input,CURRENT_USER,Follow._CURRENT_USER_in_functionCall_reserved14290); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CURRENT_USER.Add(CURRENT_USER1123);

				DebugLocation(1509, 17);
				// MySQL51Parser.g3:1509:17: ( LPAREN RPAREN )?
				int alt351=2;
				try { DebugEnterSubRule(351);
				try { DebugEnterDecision(351, false);
				int LA351_0 = input.LA(1);

				if ((LA351_0==LPAREN))
				{
					int LA351_1 = input.LA(2);

					if ((LA351_1==RPAREN))
					{
						alt351 = 1;
					}
				}
				} finally { DebugExitDecision(351); }
				switch (alt351)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1509:18: LPAREN RPAREN
					{
					DebugLocation(1509, 18);
					LPAREN1124=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14293); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1124);

					DebugLocation(1509, 25);
					RPAREN1125=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14295); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1125);


					}
					break;

				}
				} finally { DebugExitSubRule(351); }



				{
				// AST REWRITE
				// elements: CURRENT_USER, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1509:40: -> ^( FUNC ^( CURRENT_USER ( LPAREN )? ) )
				{
					DebugLocation(1509, 43);
					// MySQL51Parser.g3:1509:43: ^( FUNC ^( CURRENT_USER ( LPAREN )? ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1509, 45);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1509, 50);
					// MySQL51Parser.g3:1509:50: ^( CURRENT_USER ( LPAREN )? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1509, 52);
					root_2 = (object)adaptor.BecomeRoot(stream_CURRENT_USER.NextNode(), root_2);

					DebugLocation(1509, 65);
					// MySQL51Parser.g3:1509:65: ( LPAREN )?
					if (stream_LPAREN.HasNext)
					{
						DebugLocation(1509, 65);
						adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					}
					stream_LPAREN.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// MySQL51Parser.g3:1510:4: DATE LPAREN expr RPAREN
				{
				DebugLocation(1510, 4);
				DATE1126=(IToken)Match(input,DATE,Follow._DATE_in_functionCall_reserved14321); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATE.Add(DATE1126);

				DebugLocation(1510, 9);
				LPAREN1127=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14323); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1127);

				DebugLocation(1510, 16);
				PushFollow(Follow._expr_in_functionCall_reserved14325);
				expr1128=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1128.Tree);
				DebugLocation(1510, 21);
				RPAREN1129=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14327); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1129);



				{
				// AST REWRITE
				// elements: DATE, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1510:29: -> ^( FUNC ^( DATE expr ) )
				{
					DebugLocation(1510, 32);
					// MySQL51Parser.g3:1510:32: ^( FUNC ^( DATE expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1510, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1510, 39);
					// MySQL51Parser.g3:1510:39: ^( DATE expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1510, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_DATE.NextNode(), root_2);

					DebugLocation(1510, 46);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// MySQL51Parser.g3:1511:4: DAY LPAREN expr RPAREN
				{
				DebugLocation(1511, 4);
				DAY1130=(IToken)Match(input,DAY,Follow._DAY_in_functionCall_reserved14345); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DAY.Add(DAY1130);

				DebugLocation(1511, 8);
				LPAREN1131=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14347); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1131);

				DebugLocation(1511, 15);
				PushFollow(Follow._expr_in_functionCall_reserved14349);
				expr1132=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1132.Tree);
				DebugLocation(1511, 20);
				RPAREN1133=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14351); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1133);



				{
				// AST REWRITE
				// elements: DAY, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1511:28: -> ^( FUNC ^( DAY expr ) )
				{
					DebugLocation(1511, 31);
					// MySQL51Parser.g3:1511:31: ^( FUNC ^( DAY expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1511, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1511, 38);
					// MySQL51Parser.g3:1511:38: ^( DAY expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1511, 40);
					root_2 = (object)adaptor.BecomeRoot(stream_DAY.NextNode(), root_2);

					DebugLocation(1511, 44);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// MySQL51Parser.g3:1512:4: HOUR LPAREN expr RPAREN
				{
				DebugLocation(1512, 4);
				HOUR1134=(IToken)Match(input,HOUR,Follow._HOUR_in_functionCall_reserved14369); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HOUR.Add(HOUR1134);

				DebugLocation(1512, 9);
				LPAREN1135=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14371); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1135);

				DebugLocation(1512, 16);
				PushFollow(Follow._expr_in_functionCall_reserved14373);
				expr1136=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1136.Tree);
				DebugLocation(1512, 21);
				RPAREN1137=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14375); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1137);



				{
				// AST REWRITE
				// elements: HOUR, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1512:29: -> ^( FUNC ^( HOUR expr ) )
				{
					DebugLocation(1512, 32);
					// MySQL51Parser.g3:1512:32: ^( FUNC ^( HOUR expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1512, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1512, 39);
					// MySQL51Parser.g3:1512:39: ^( HOUR expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1512, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_HOUR.NextNode(), root_2);

					DebugLocation(1512, 46);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// MySQL51Parser.g3:1513:4: INSERT LPAREN str= expr COMMA pos= expr COMMA len= expr COMMA newstr= expr RPAREN
				{
				DebugLocation(1513, 4);
				INSERT1138=(IToken)Match(input,INSERT,Follow._INSERT_in_functionCall_reserved14393); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT.Add(INSERT1138);

				DebugLocation(1513, 11);
				LPAREN1139=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1139);

				DebugLocation(1514, 7);
				PushFollow(Follow._expr_in_functionCall_reserved14403);
				str=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(str.Tree);
				DebugLocation(1514, 13);
				COMMA1140=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_reserved14405); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1140);

				DebugLocation(1514, 22);
				PushFollow(Follow._expr_in_functionCall_reserved14409);
				pos=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(pos.Tree);
				DebugLocation(1514, 28);
				COMMA1141=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_reserved14411); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1141);

				DebugLocation(1514, 37);
				PushFollow(Follow._expr_in_functionCall_reserved14415);
				len=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(len.Tree);
				DebugLocation(1514, 43);
				COMMA1142=(IToken)Match(input,COMMA,Follow._COMMA_in_functionCall_reserved14417); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COMMA.Add(COMMA1142);

				DebugLocation(1514, 55);
				PushFollow(Follow._expr_in_functionCall_reserved14421);
				newstr=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(newstr.Tree);
				DebugLocation(1515, 3);
				RPAREN1143=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14425); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1143);



				{
				// AST REWRITE
				// elements: INSERT, str, pos, len, newstr
				// token labels: 
				// rule labels: str, pos, len, newstr, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_str=new RewriteRuleSubtreeStream(adaptor,"rule str",str!=null?str.Tree:null);
				RewriteRuleSubtreeStream stream_pos=new RewriteRuleSubtreeStream(adaptor,"rule pos",pos!=null?pos.Tree:null);
				RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.Tree:null);
				RewriteRuleSubtreeStream stream_newstr=new RewriteRuleSubtreeStream(adaptor,"rule newstr",newstr!=null?newstr.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1515:15: -> ^( FUNC ^( INSERT $str $pos $len $newstr) )
				{
					DebugLocation(1515, 18);
					// MySQL51Parser.g3:1515:18: ^( FUNC ^( INSERT $str $pos $len $newstr) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1515, 20);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1515, 25);
					// MySQL51Parser.g3:1515:25: ^( INSERT $str $pos $len $newstr)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1515, 27);
					root_2 = (object)adaptor.BecomeRoot(stream_INSERT.NextNode(), root_2);

					DebugLocation(1515, 35);
					adaptor.AddChild(root_2, stream_str.NextTree());
					DebugLocation(1515, 40);
					adaptor.AddChild(root_2, stream_pos.NextTree());
					DebugLocation(1515, 45);
					adaptor.AddChild(root_2, stream_len.NextTree());
					DebugLocation(1515, 50);
					adaptor.AddChild(root_2, stream_newstr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// MySQL51Parser.g3:1517:4: INTERVAL LPAREN exprList RPAREN
				{
				DebugLocation(1517, 4);
				INTERVAL1144=(IToken)Match(input,INTERVAL,Follow._INTERVAL_in_functionCall_reserved14459); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INTERVAL.Add(INTERVAL1144);

				DebugLocation(1517, 13);
				LPAREN1145=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14461); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1145);

				DebugLocation(1517, 20);
				PushFollow(Follow._exprList_in_functionCall_reserved14463);
				exprList1146=exprList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_exprList.Add(exprList1146.Tree);
				DebugLocation(1517, 29);
				RPAREN1147=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14465); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1147);



				{
				// AST REWRITE
				// elements: INTERVAL, exprList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1517:37: -> ^( FUNC ^( INTERVAL exprList ) )
				{
					DebugLocation(1517, 40);
					// MySQL51Parser.g3:1517:40: ^( FUNC ^( INTERVAL exprList ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1517, 42);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1517, 47);
					// MySQL51Parser.g3:1517:47: ^( INTERVAL exprList )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1517, 49);
					root_2 = (object)adaptor.BecomeRoot(stream_INTERVAL.NextNode(), root_2);

					DebugLocation(1517, 58);
					adaptor.AddChild(root_2, stream_exprList.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// MySQL51Parser.g3:1518:4: LEFT LPAREN expr RPAREN
				{
				DebugLocation(1518, 4);
				LEFT1148=(IToken)Match(input,LEFT,Follow._LEFT_in_functionCall_reserved14483); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LEFT.Add(LEFT1148);

				DebugLocation(1518, 9);
				LPAREN1149=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14485); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1149);

				DebugLocation(1518, 16);
				PushFollow(Follow._expr_in_functionCall_reserved14487);
				expr1150=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1150.Tree);
				DebugLocation(1518, 21);
				RPAREN1151=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14489); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1151);



				{
				// AST REWRITE
				// elements: LEFT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1518:29: -> ^( FUNC ^( LEFT expr ) )
				{
					DebugLocation(1518, 32);
					// MySQL51Parser.g3:1518:32: ^( FUNC ^( LEFT expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1518, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1518, 39);
					// MySQL51Parser.g3:1518:39: ^( LEFT expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1518, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_LEFT.NextNode(), root_2);

					DebugLocation(1518, 46);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// MySQL51Parser.g3:1519:4: MINUTE LPAREN expr RPAREN
				{
				DebugLocation(1519, 4);
				MINUTE1152=(IToken)Match(input,MINUTE,Follow._MINUTE_in_functionCall_reserved14507); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUTE.Add(MINUTE1152);

				DebugLocation(1519, 11);
				LPAREN1153=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14509); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1153);

				DebugLocation(1519, 18);
				PushFollow(Follow._expr_in_functionCall_reserved14511);
				expr1154=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1154.Tree);
				DebugLocation(1519, 23);
				RPAREN1155=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14513); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1155);



				{
				// AST REWRITE
				// elements: MINUTE, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1519:31: -> ^( FUNC ^( MINUTE expr ) )
				{
					DebugLocation(1519, 34);
					// MySQL51Parser.g3:1519:34: ^( FUNC ^( MINUTE expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1519, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1519, 41);
					// MySQL51Parser.g3:1519:41: ^( MINUTE expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1519, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_MINUTE.NextNode(), root_2);

					DebugLocation(1519, 50);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// MySQL51Parser.g3:1520:4: MONTH LPAREN expr RPAREN
				{
				DebugLocation(1520, 4);
				MONTH1156=(IToken)Match(input,MONTH,Follow._MONTH_in_functionCall_reserved14531); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MONTH.Add(MONTH1156);

				DebugLocation(1520, 10);
				LPAREN1157=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14533); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1157);

				DebugLocation(1520, 17);
				PushFollow(Follow._expr_in_functionCall_reserved14535);
				expr1158=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1158.Tree);
				DebugLocation(1520, 22);
				RPAREN1159=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14537); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1159);



				{
				// AST REWRITE
				// elements: MONTH, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1520:30: -> ^( FUNC ^( MONTH expr ) )
				{
					DebugLocation(1520, 33);
					// MySQL51Parser.g3:1520:33: ^( FUNC ^( MONTH expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1520, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1520, 40);
					// MySQL51Parser.g3:1520:40: ^( MONTH expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1520, 42);
					root_2 = (object)adaptor.BecomeRoot(stream_MONTH.NextNode(), root_2);

					DebugLocation(1520, 48);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// MySQL51Parser.g3:1521:4: RIGHT LPAREN expr RPAREN
				{
				DebugLocation(1521, 4);
				RIGHT1160=(IToken)Match(input,RIGHT,Follow._RIGHT_in_functionCall_reserved14555); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RIGHT.Add(RIGHT1160);

				DebugLocation(1521, 10);
				LPAREN1161=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14557); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1161);

				DebugLocation(1521, 17);
				PushFollow(Follow._expr_in_functionCall_reserved14559);
				expr1162=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1162.Tree);
				DebugLocation(1521, 22);
				RPAREN1163=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14561); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1163);



				{
				// AST REWRITE
				// elements: RIGHT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1521:30: -> ^( FUNC ^( RIGHT expr ) )
				{
					DebugLocation(1521, 33);
					// MySQL51Parser.g3:1521:33: ^( FUNC ^( RIGHT expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1521, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1521, 40);
					// MySQL51Parser.g3:1521:40: ^( RIGHT expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1521, 42);
					root_2 = (object)adaptor.BecomeRoot(stream_RIGHT.NextNode(), root_2);

					DebugLocation(1521, 48);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// MySQL51Parser.g3:1522:4: SECOND LPAREN expr RPAREN
				{
				DebugLocation(1522, 4);
				SECOND1164=(IToken)Match(input,SECOND,Follow._SECOND_in_functionCall_reserved14579); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SECOND.Add(SECOND1164);

				DebugLocation(1522, 11);
				LPAREN1165=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14581); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1165);

				DebugLocation(1522, 18);
				PushFollow(Follow._expr_in_functionCall_reserved14583);
				expr1166=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1166.Tree);
				DebugLocation(1522, 23);
				RPAREN1167=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14585); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1167);



				{
				// AST REWRITE
				// elements: SECOND, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1522:31: -> ^( FUNC ^( SECOND expr ) )
				{
					DebugLocation(1522, 34);
					// MySQL51Parser.g3:1522:34: ^( FUNC ^( SECOND expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1522, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1522, 41);
					// MySQL51Parser.g3:1522:41: ^( SECOND expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1522, 43);
					root_2 = (object)adaptor.BecomeRoot(stream_SECOND.NextNode(), root_2);

					DebugLocation(1522, 50);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// MySQL51Parser.g3:1523:4: TIME LPAREN expr RPAREN
				{
				DebugLocation(1523, 4);
				TIME1168=(IToken)Match(input,TIME,Follow._TIME_in_functionCall_reserved14603); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TIME.Add(TIME1168);

				DebugLocation(1523, 9);
				LPAREN1169=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14605); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1169);

				DebugLocation(1523, 16);
				PushFollow(Follow._expr_in_functionCall_reserved14607);
				expr1170=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1170.Tree);
				DebugLocation(1523, 21);
				RPAREN1171=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14609); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1171);



				{
				// AST REWRITE
				// elements: TIME, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1523:29: -> ^( FUNC ^( TIME expr ) )
				{
					DebugLocation(1523, 32);
					// MySQL51Parser.g3:1523:32: ^( FUNC ^( TIME expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1523, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1523, 39);
					// MySQL51Parser.g3:1523:39: ^( TIME expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1523, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_TIME.NextNode(), root_2);

					DebugLocation(1523, 46);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// MySQL51Parser.g3:1524:4: TIMESTAMP LPAREN expr RPAREN
				{
				DebugLocation(1524, 4);
				TIMESTAMP1172=(IToken)Match(input,TIMESTAMP,Follow._TIMESTAMP_in_functionCall_reserved14627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TIMESTAMP.Add(TIMESTAMP1172);

				DebugLocation(1524, 14);
				LPAREN1173=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14629); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1173);

				DebugLocation(1524, 21);
				PushFollow(Follow._expr_in_functionCall_reserved14631);
				expr1174=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1174.Tree);
				DebugLocation(1524, 26);
				RPAREN1175=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14633); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1175);



				{
				// AST REWRITE
				// elements: TIMESTAMP, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1524:34: -> ^( FUNC ^( TIMESTAMP expr ) )
				{
					DebugLocation(1524, 37);
					// MySQL51Parser.g3:1524:37: ^( FUNC ^( TIMESTAMP expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1524, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1524, 44);
					// MySQL51Parser.g3:1524:44: ^( TIMESTAMP expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1524, 46);
					root_2 = (object)adaptor.BecomeRoot(stream_TIMESTAMP.NextNode(), root_2);

					DebugLocation(1524, 56);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// MySQL51Parser.g3:1525:4: USER LPAREN RPAREN
				{
				DebugLocation(1525, 4);
				USER1176=(IToken)Match(input,USER,Follow._USER_in_functionCall_reserved14651); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_USER.Add(USER1176);

				DebugLocation(1525, 9);
				LPAREN1177=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14653); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1177);

				DebugLocation(1525, 16);
				RPAREN1178=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14655); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1178);



				{
				// AST REWRITE
				// elements: USER, LPAREN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1525:24: -> ^( FUNC ^( USER LPAREN ) )
				{
					DebugLocation(1525, 27);
					// MySQL51Parser.g3:1525:27: ^( FUNC ^( USER LPAREN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1525, 29);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1525, 34);
					// MySQL51Parser.g3:1525:34: ^( USER LPAREN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1525, 36);
					root_2 = (object)adaptor.BecomeRoot(stream_USER.NextNode(), root_2);

					DebugLocation(1525, 41);
					adaptor.AddChild(root_2, stream_LPAREN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// MySQL51Parser.g3:1526:4: YEAR LPAREN expr RPAREN
				{
				DebugLocation(1526, 4);
				YEAR1179=(IToken)Match(input,YEAR,Follow._YEAR_in_functionCall_reserved14673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_YEAR.Add(YEAR1179);

				DebugLocation(1526, 9);
				LPAREN1180=(IToken)Match(input,LPAREN,Follow._LPAREN_in_functionCall_reserved14675); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LPAREN.Add(LPAREN1180);

				DebugLocation(1526, 16);
				PushFollow(Follow._expr_in_functionCall_reserved14677);
				expr1181=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr1181.Tree);
				DebugLocation(1526, 21);
				RPAREN1182=(IToken)Match(input,RPAREN,Follow._RPAREN_in_functionCall_reserved14679); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_RPAREN.Add(RPAREN1182);



				{
				// AST REWRITE
				// elements: YEAR, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 1526:29: -> ^( FUNC ^( YEAR expr ) )
				{
					DebugLocation(1526, 32);
					// MySQL51Parser.g3:1526:32: ^( FUNC ^( YEAR expr ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(1526, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNC, "FUNC"), root_1);

					DebugLocation(1526, 39);
					// MySQL51Parser.g3:1526:39: ^( YEAR expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(1526, 41);
					root_2 = (object)adaptor.BecomeRoot(stream_YEAR.NextNode(), root_2);

					DebugLocation(1526, 46);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionCall_reserved", 109);
			LeaveRule("functionCall_reserved", 109);
			LeaveRule_functionCall_reserved();
		}
		DebugLocation(1527, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall_reserved"); }
		return retval;

	}
	// $ANTLR end "functionCall_reserved"

	private sealed partial class drop_database_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_database_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_database();
	partial void LeaveRule_drop_database();

	// $ANTLR start "drop_database"
	// MySQL51Parser.g3:1530:1: drop_database : DROP database_or_schema ( IF EXISTS )? ident -> ^( DROP DATABASE ident ) ;
	[GrammarRule("drop_database")]
	private MySQL51Parser.drop_database_return drop_database()
	{
		EnterRule_drop_database();
		EnterRule("drop_database", 110);
		TraceIn("drop_database", 110);
		MySQL51Parser.drop_database_return retval = new MySQL51Parser.drop_database_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1183 = default(IToken);
		IToken IF1185 = default(IToken);
		IToken EXISTS1186 = default(IToken);
		MySQL51Parser.database_or_schema_return database_or_schema1184 = default(MySQL51Parser.database_or_schema_return);
		MySQL51Parser.ident_return ident1187 = default(MySQL51Parser.ident_return);

		object DROP1183_tree = default(object);
		object IF1185_tree = default(object);
		object EXISTS1186_tree = default(object);
		RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
		RewriteRuleSubtreeStream stream_database_or_schema=new RewriteRuleSubtreeStream(adaptor,"rule database_or_schema");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "drop_database");
		DebugLocation(1530, 1);
		try
		{
			// MySQL51Parser.g3:1531:2: ( DROP database_or_schema ( IF EXISTS )? ident -> ^( DROP DATABASE ident ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1531:4: DROP database_or_schema ( IF EXISTS )? ident
			{
			DebugLocation(1531, 4);
			DROP1183=(IToken)Match(input,DROP,Follow._DROP_in_drop_database14705); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP1183);

			DebugLocation(1531, 9);
			PushFollow(Follow._database_or_schema_in_drop_database14707);
			database_or_schema1184=database_or_schema();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_database_or_schema.Add(database_or_schema1184.Tree);
			DebugLocation(1531, 28);
			// MySQL51Parser.g3:1531:28: ( IF EXISTS )?
			int alt353=2;
			try { DebugEnterSubRule(353);
			try { DebugEnterDecision(353, false);
			int LA353_0 = input.LA(1);

			if ((LA353_0==IF))
			{
				alt353 = 1;
			}
			} finally { DebugExitDecision(353); }
			switch (alt353)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1531:30: IF EXISTS
				{
				DebugLocation(1531, 30);
				IF1185=(IToken)Match(input,IF,Follow._IF_in_drop_database14711); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IF.Add(IF1185);

				DebugLocation(1531, 33);
				EXISTS1186=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_database14713); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS1186);


				}
				break;

			}
			} finally { DebugExitSubRule(353); }

			DebugLocation(1531, 43);
			PushFollow(Follow._ident_in_drop_database14718);
			ident1187=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident1187.Tree);


			{
			// AST REWRITE
			// elements: DROP, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1531:49: -> ^( DROP DATABASE ident )
			{
				DebugLocation(1531, 52);
				// MySQL51Parser.g3:1531:52: ^( DROP DATABASE ident )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1531, 55);
				root_1 = (object)adaptor.BecomeRoot(stream_DROP.NextNode(), root_1);

				DebugLocation(1531, 60);
				adaptor.AddChild(root_1, (object)adaptor.Create(DATABASE, "DATABASE"));
				DebugLocation(1531, 69);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_database", 110);
			LeaveRule("drop_database", 110);
			LeaveRule_drop_database();
		}
		DebugLocation(1532, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_database"); }
		return retval;

	}
	// $ANTLR end "drop_database"

	private sealed partial class database_or_schema_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public database_or_schema_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_database_or_schema();
	partial void LeaveRule_database_or_schema();

	// $ANTLR start "database_or_schema"
	// MySQL51Parser.g3:1534:1: database_or_schema : ( DATABASE | SCHEMA );
	[GrammarRule("database_or_schema")]
	private MySQL51Parser.database_or_schema_return database_or_schema()
	{
		EnterRule_database_or_schema();
		EnterRule("database_or_schema", 111);
		TraceIn("database_or_schema", 111);
		MySQL51Parser.database_or_schema_return retval = new MySQL51Parser.database_or_schema_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set1188 = default(IToken);

		object set1188_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "database_or_schema");
		DebugLocation(1534, 1);
		try
		{
			// MySQL51Parser.g3:1535:2: ( DATABASE | SCHEMA )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1535, 2);
			set1188=(IToken)input.LT(1);
			if (input.LA(1)==DATABASE||input.LA(1)==SCHEMA)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1188));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("database_or_schema", 111);
			LeaveRule("database_or_schema", 111);
			LeaveRule_database_or_schema();
		}
		DebugLocation(1536, 1);
		} finally { DebugExitRule(GrammarFileName, "database_or_schema"); }
		return retval;

	}
	// $ANTLR end "database_or_schema"

	private sealed partial class drop_event_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_event_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_event();
	partial void LeaveRule_drop_event();

	// $ANTLR start "drop_event"
	// MySQL51Parser.g3:1538:1: drop_event : DROP EVENT ( IF EXISTS )? ident ;
	[GrammarRule("drop_event")]
	private MySQL51Parser.drop_event_return drop_event()
	{
		EnterRule_drop_event();
		EnterRule("drop_event", 112);
		TraceIn("drop_event", 112);
		MySQL51Parser.drop_event_return retval = new MySQL51Parser.drop_event_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1189 = default(IToken);
		IToken EVENT1190 = default(IToken);
		IToken IF1191 = default(IToken);
		IToken EXISTS1192 = default(IToken);
		MySQL51Parser.ident_return ident1193 = default(MySQL51Parser.ident_return);

		object DROP1189_tree = default(object);
		object EVENT1190_tree = default(object);
		object IF1191_tree = default(object);
		object EXISTS1192_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_event");
		DebugLocation(1538, 1);
		try
		{
			// MySQL51Parser.g3:1539:2: ( DROP EVENT ( IF EXISTS )? ident )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1539:4: DROP EVENT ( IF EXISTS )? ident
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1539, 4);
			DROP1189=(IToken)Match(input,DROP,Follow._DROP_in_drop_event14756); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1189_tree = (object)adaptor.Create(DROP1189);
			adaptor.AddChild(root_0, DROP1189_tree);
			}
			DebugLocation(1539, 9);
			EVENT1190=(IToken)Match(input,EVENT,Follow._EVENT_in_drop_event14758); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EVENT1190_tree = (object)adaptor.Create(EVENT1190);
			adaptor.AddChild(root_0, EVENT1190_tree);
			}
			DebugLocation(1539, 15);
			// MySQL51Parser.g3:1539:15: ( IF EXISTS )?
			int alt354=2;
			try { DebugEnterSubRule(354);
			try { DebugEnterDecision(354, false);
			int LA354_0 = input.LA(1);

			if ((LA354_0==IF))
			{
				alt354 = 1;
			}
			} finally { DebugExitDecision(354); }
			switch (alt354)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1539:17: IF EXISTS
				{
				DebugLocation(1539, 17);
				IF1191=(IToken)Match(input,IF,Follow._IF_in_drop_event14762); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1191_tree = (object)adaptor.Create(IF1191);
				adaptor.AddChild(root_0, IF1191_tree);
				}
				DebugLocation(1539, 20);
				EXISTS1192=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_event14764); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1192_tree = (object)adaptor.Create(EXISTS1192);
				adaptor.AddChild(root_0, EXISTS1192_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(354); }

			DebugLocation(1539, 30);
			PushFollow(Follow._ident_in_drop_event14769);
			ident1193=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident1193.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_event", 112);
			LeaveRule("drop_event", 112);
			LeaveRule_drop_event();
		}
		DebugLocation(1540, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_event"); }
		return retval;

	}
	// $ANTLR end "drop_event"

	private sealed partial class drop_routine_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_routine_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_routine();
	partial void LeaveRule_drop_routine();

	// $ANTLR start "drop_routine"
	// MySQL51Parser.g3:1542:1: drop_routine : DROP ( PROCEDURE | FUNCTION ) ( IF EXISTS )? simple_table_ref_no_alias ;
	[GrammarRule("drop_routine")]
	private MySQL51Parser.drop_routine_return drop_routine()
	{
		EnterRule_drop_routine();
		EnterRule("drop_routine", 113);
		TraceIn("drop_routine", 113);
		MySQL51Parser.drop_routine_return retval = new MySQL51Parser.drop_routine_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1194 = default(IToken);
		IToken set1195 = default(IToken);
		IToken IF1196 = default(IToken);
		IToken EXISTS1197 = default(IToken);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias1198 = default(MySQL51Parser.simple_table_ref_no_alias_return);

		object DROP1194_tree = default(object);
		object set1195_tree = default(object);
		object IF1196_tree = default(object);
		object EXISTS1197_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_routine");
		DebugLocation(1542, 1);
		try
		{
			// MySQL51Parser.g3:1543:2: ( DROP ( PROCEDURE | FUNCTION ) ( IF EXISTS )? simple_table_ref_no_alias )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1543:4: DROP ( PROCEDURE | FUNCTION ) ( IF EXISTS )? simple_table_ref_no_alias
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1543, 4);
			DROP1194=(IToken)Match(input,DROP,Follow._DROP_in_drop_routine14780); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1194_tree = (object)adaptor.Create(DROP1194);
			adaptor.AddChild(root_0, DROP1194_tree);
			}
			DebugLocation(1543, 9);
			set1195=(IToken)input.LT(1);
			if (input.LA(1)==FUNCTION||input.LA(1)==PROCEDURE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1195));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1543, 34);
			// MySQL51Parser.g3:1543:34: ( IF EXISTS )?
			int alt355=2;
			try { DebugEnterSubRule(355);
			try { DebugEnterDecision(355, false);
			int LA355_0 = input.LA(1);

			if ((LA355_0==IF))
			{
				alt355 = 1;
			}
			} finally { DebugExitDecision(355); }
			switch (alt355)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1543:36: IF EXISTS
				{
				DebugLocation(1543, 36);
				IF1196=(IToken)Match(input,IF,Follow._IF_in_drop_routine14794); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1196_tree = (object)adaptor.Create(IF1196);
				adaptor.AddChild(root_0, IF1196_tree);
				}
				DebugLocation(1543, 39);
				EXISTS1197=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_routine14796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1197_tree = (object)adaptor.Create(EXISTS1197);
				adaptor.AddChild(root_0, EXISTS1197_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(355); }

			DebugLocation(1543, 49);
			PushFollow(Follow._simple_table_ref_no_alias_in_drop_routine14801);
			simple_table_ref_no_alias1198=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias1198.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_routine", 113);
			LeaveRule("drop_routine", 113);
			LeaveRule_drop_routine();
		}
		DebugLocation(1544, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_routine"); }
		return retval;

	}
	// $ANTLR end "drop_routine"

	private sealed partial class drop_index_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_index_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_index();
	partial void LeaveRule_drop_index();

	// $ANTLR start "drop_index"
	// MySQL51Parser.g3:1546:1: drop_index : DROP ( ONLINE | OFFLINE )? INDEX ident ON simple_table_ref_no_alias ;
	[GrammarRule("drop_index")]
	private MySQL51Parser.drop_index_return drop_index()
	{
		EnterRule_drop_index();
		EnterRule("drop_index", 114);
		TraceIn("drop_index", 114);
		MySQL51Parser.drop_index_return retval = new MySQL51Parser.drop_index_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1199 = default(IToken);
		IToken set1200 = default(IToken);
		IToken INDEX1201 = default(IToken);
		IToken ON1203 = default(IToken);
		MySQL51Parser.ident_return ident1202 = default(MySQL51Parser.ident_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias1204 = default(MySQL51Parser.simple_table_ref_no_alias_return);

		object DROP1199_tree = default(object);
		object set1200_tree = default(object);
		object INDEX1201_tree = default(object);
		object ON1203_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_index");
		DebugLocation(1546, 1);
		try
		{
			// MySQL51Parser.g3:1547:2: ( DROP ( ONLINE | OFFLINE )? INDEX ident ON simple_table_ref_no_alias )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1547:4: DROP ( ONLINE | OFFLINE )? INDEX ident ON simple_table_ref_no_alias
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1547, 4);
			DROP1199=(IToken)Match(input,DROP,Follow._DROP_in_drop_index14812); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1199_tree = (object)adaptor.Create(DROP1199);
			adaptor.AddChild(root_0, DROP1199_tree);
			}
			DebugLocation(1547, 9);
			// MySQL51Parser.g3:1547:9: ( ONLINE | OFFLINE )?
			int alt356=2;
			try { DebugEnterSubRule(356);
			try { DebugEnterDecision(356, false);
			int LA356_0 = input.LA(1);

			if (((LA356_0>=OFFLINE && LA356_0<=ONLINE)))
			{
				alt356 = 1;
			}
			} finally { DebugExitDecision(356); }
			switch (alt356)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:
				{
				DebugLocation(1547, 9);
				set1200=(IToken)input.LT(1);
				if ((input.LA(1)>=OFFLINE && input.LA(1)<=ONLINE))
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1200));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(356); }

			DebugLocation(1547, 31);
			INDEX1201=(IToken)Match(input,INDEX,Follow._INDEX_in_drop_index14825); if (state.failed) return retval;
			if (state.backtracking == 0) {
			INDEX1201_tree = (object)adaptor.Create(INDEX1201);
			adaptor.AddChild(root_0, INDEX1201_tree);
			}
			DebugLocation(1547, 37);
			PushFollow(Follow._ident_in_drop_index14827);
			ident1202=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident1202.Tree);
			DebugLocation(1547, 43);
			ON1203=(IToken)Match(input,ON,Follow._ON_in_drop_index14829); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ON1203_tree = (object)adaptor.Create(ON1203);
			adaptor.AddChild(root_0, ON1203_tree);
			}
			DebugLocation(1547, 46);
			PushFollow(Follow._simple_table_ref_no_alias_in_drop_index14831);
			simple_table_ref_no_alias1204=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias1204.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_index", 114);
			LeaveRule("drop_index", 114);
			LeaveRule_drop_index();
		}
		DebugLocation(1548, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_index"); }
		return retval;

	}
	// $ANTLR end "drop_index"

	private sealed partial class drop_logfile_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_logfile_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_logfile();
	partial void LeaveRule_drop_logfile();

	// $ANTLR start "drop_logfile"
	// MySQL51Parser.g3:1550:1: drop_logfile : DROP LOGILE GROUP ident ENGINE ( EQUALS )? ( NDB | NDBCLUSTER ) ;
	[GrammarRule("drop_logfile")]
	private MySQL51Parser.drop_logfile_return drop_logfile()
	{
		EnterRule_drop_logfile();
		EnterRule("drop_logfile", 115);
		TraceIn("drop_logfile", 115);
		MySQL51Parser.drop_logfile_return retval = new MySQL51Parser.drop_logfile_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1205 = default(IToken);
		IToken LOGILE1206 = default(IToken);
		IToken GROUP1207 = default(IToken);
		IToken ENGINE1209 = default(IToken);
		IToken EQUALS1210 = default(IToken);
		IToken set1211 = default(IToken);
		MySQL51Parser.ident_return ident1208 = default(MySQL51Parser.ident_return);

		object DROP1205_tree = default(object);
		object LOGILE1206_tree = default(object);
		object GROUP1207_tree = default(object);
		object ENGINE1209_tree = default(object);
		object EQUALS1210_tree = default(object);
		object set1211_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_logfile");
		DebugLocation(1550, 1);
		try
		{
			// MySQL51Parser.g3:1551:2: ( DROP LOGILE GROUP ident ENGINE ( EQUALS )? ( NDB | NDBCLUSTER ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1551:4: DROP LOGILE GROUP ident ENGINE ( EQUALS )? ( NDB | NDBCLUSTER )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1551, 4);
			DROP1205=(IToken)Match(input,DROP,Follow._DROP_in_drop_logfile14842); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1205_tree = (object)adaptor.Create(DROP1205);
			adaptor.AddChild(root_0, DROP1205_tree);
			}
			DebugLocation(1551, 9);
			LOGILE1206=(IToken)Match(input,LOGILE,Follow._LOGILE_in_drop_logfile14844); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOGILE1206_tree = (object)adaptor.Create(LOGILE1206);
			adaptor.AddChild(root_0, LOGILE1206_tree);
			}
			DebugLocation(1551, 16);
			GROUP1207=(IToken)Match(input,GROUP,Follow._GROUP_in_drop_logfile14846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			GROUP1207_tree = (object)adaptor.Create(GROUP1207);
			adaptor.AddChild(root_0, GROUP1207_tree);
			}
			DebugLocation(1551, 22);
			PushFollow(Follow._ident_in_drop_logfile14848);
			ident1208=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident1208.Tree);
			DebugLocation(1551, 28);
			ENGINE1209=(IToken)Match(input,ENGINE,Follow._ENGINE_in_drop_logfile14850); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ENGINE1209_tree = (object)adaptor.Create(ENGINE1209);
			adaptor.AddChild(root_0, ENGINE1209_tree);
			}
			DebugLocation(1551, 35);
			// MySQL51Parser.g3:1551:35: ( EQUALS )?
			int alt357=2;
			try { DebugEnterSubRule(357);
			try { DebugEnterDecision(357, false);
			int LA357_0 = input.LA(1);

			if ((LA357_0==EQUALS))
			{
				alt357 = 1;
			}
			} finally { DebugExitDecision(357); }
			switch (alt357)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1551:37: EQUALS
				{
				DebugLocation(1551, 37);
				EQUALS1210=(IToken)Match(input,EQUALS,Follow._EQUALS_in_drop_logfile14854); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EQUALS1210_tree = (object)adaptor.Create(EQUALS1210);
				adaptor.AddChild(root_0, EQUALS1210_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(357); }

			DebugLocation(1551, 47);
			set1211=(IToken)input.LT(1);
			if (input.LA(1)==NDBCLUSTER||input.LA(1)==NDB)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1211));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_logfile", 115);
			LeaveRule("drop_logfile", 115);
			LeaveRule_drop_logfile();
		}
		DebugLocation(1552, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_logfile"); }
		return retval;

	}
	// $ANTLR end "drop_logfile"

	private sealed partial class drop_server_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_server_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_server();
	partial void LeaveRule_drop_server();

	// $ANTLR start "drop_server"
	// MySQL51Parser.g3:1554:1: drop_server : DROP SERVER ( IF EXISTS )? ident ;
	[GrammarRule("drop_server")]
	private MySQL51Parser.drop_server_return drop_server()
	{
		EnterRule_drop_server();
		EnterRule("drop_server", 116);
		TraceIn("drop_server", 116);
		MySQL51Parser.drop_server_return retval = new MySQL51Parser.drop_server_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1212 = default(IToken);
		IToken SERVER1213 = default(IToken);
		IToken IF1214 = default(IToken);
		IToken EXISTS1215 = default(IToken);
		MySQL51Parser.ident_return ident1216 = default(MySQL51Parser.ident_return);

		object DROP1212_tree = default(object);
		object SERVER1213_tree = default(object);
		object IF1214_tree = default(object);
		object EXISTS1215_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_server");
		DebugLocation(1554, 1);
		try
		{
			// MySQL51Parser.g3:1555:2: ( DROP SERVER ( IF EXISTS )? ident )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1555:4: DROP SERVER ( IF EXISTS )? ident
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1555, 4);
			DROP1212=(IToken)Match(input,DROP,Follow._DROP_in_drop_server14879); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1212_tree = (object)adaptor.Create(DROP1212);
			adaptor.AddChild(root_0, DROP1212_tree);
			}
			DebugLocation(1555, 9);
			SERVER1213=(IToken)Match(input,SERVER,Follow._SERVER_in_drop_server14881); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SERVER1213_tree = (object)adaptor.Create(SERVER1213);
			adaptor.AddChild(root_0, SERVER1213_tree);
			}
			DebugLocation(1555, 16);
			// MySQL51Parser.g3:1555:16: ( IF EXISTS )?
			int alt358=2;
			try { DebugEnterSubRule(358);
			try { DebugEnterDecision(358, false);
			int LA358_0 = input.LA(1);

			if ((LA358_0==IF))
			{
				alt358 = 1;
			}
			} finally { DebugExitDecision(358); }
			switch (alt358)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1555:18: IF EXISTS
				{
				DebugLocation(1555, 18);
				IF1214=(IToken)Match(input,IF,Follow._IF_in_drop_server14885); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1214_tree = (object)adaptor.Create(IF1214);
				adaptor.AddChild(root_0, IF1214_tree);
				}
				DebugLocation(1555, 21);
				EXISTS1215=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_server14887); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1215_tree = (object)adaptor.Create(EXISTS1215);
				adaptor.AddChild(root_0, EXISTS1215_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(358); }

			DebugLocation(1555, 31);
			PushFollow(Follow._ident_in_drop_server14892);
			ident1216=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident1216.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_server", 116);
			LeaveRule("drop_server", 116);
			LeaveRule_drop_server();
		}
		DebugLocation(1556, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_server"); }
		return retval;

	}
	// $ANTLR end "drop_server"

	private sealed partial class drop_table_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_table_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_table();
	partial void LeaveRule_drop_table();

	// $ANTLR start "drop_table"
	// MySQL51Parser.g3:1558:1: drop_table : DROP ( TEMPORARY )? ( TABLE | TABLES ) ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )? ;
	[GrammarRule("drop_table")]
	private MySQL51Parser.drop_table_return drop_table()
	{
		EnterRule_drop_table();
		EnterRule("drop_table", 117);
		TraceIn("drop_table", 117);
		MySQL51Parser.drop_table_return retval = new MySQL51Parser.drop_table_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1217 = default(IToken);
		IToken TEMPORARY1218 = default(IToken);
		IToken set1219 = default(IToken);
		IToken IF1220 = default(IToken);
		IToken EXISTS1221 = default(IToken);
		MySQL51Parser.simple_obj_ref_no_alias_list_return simple_obj_ref_no_alias_list1222 = default(MySQL51Parser.simple_obj_ref_no_alias_list_return);
		MySQL51Parser.cascade_or_restrict_return cascade_or_restrict1223 = default(MySQL51Parser.cascade_or_restrict_return);

		object DROP1217_tree = default(object);
		object TEMPORARY1218_tree = default(object);
		object set1219_tree = default(object);
		object IF1220_tree = default(object);
		object EXISTS1221_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_table");
		DebugLocation(1558, 1);
		try
		{
			// MySQL51Parser.g3:1559:2: ( DROP ( TEMPORARY )? ( TABLE | TABLES ) ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1559:4: DROP ( TEMPORARY )? ( TABLE | TABLES ) ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1559, 4);
			DROP1217=(IToken)Match(input,DROP,Follow._DROP_in_drop_table14903); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1217_tree = (object)adaptor.Create(DROP1217);
			adaptor.AddChild(root_0, DROP1217_tree);
			}
			DebugLocation(1559, 9);
			// MySQL51Parser.g3:1559:9: ( TEMPORARY )?
			int alt359=2;
			try { DebugEnterSubRule(359);
			try { DebugEnterDecision(359, false);
			int LA359_0 = input.LA(1);

			if ((LA359_0==TEMPORARY))
			{
				alt359 = 1;
			}
			} finally { DebugExitDecision(359); }
			switch (alt359)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1559:11: TEMPORARY
				{
				DebugLocation(1559, 11);
				TEMPORARY1218=(IToken)Match(input,TEMPORARY,Follow._TEMPORARY_in_drop_table14907); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TEMPORARY1218_tree = (object)adaptor.Create(TEMPORARY1218);
				adaptor.AddChild(root_0, TEMPORARY1218_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(359); }

			DebugLocation(1559, 24);
			set1219=(IToken)input.LT(1);
			if ((input.LA(1)>=TABLE && input.LA(1)<=TABLES))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1219));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1559, 43);
			// MySQL51Parser.g3:1559:43: ( IF EXISTS )?
			int alt360=2;
			try { DebugEnterSubRule(360);
			try { DebugEnterDecision(360, false);
			int LA360_0 = input.LA(1);

			if ((LA360_0==IF))
			{
				alt360 = 1;
			}
			} finally { DebugExitDecision(360); }
			switch (alt360)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1559:45: IF EXISTS
				{
				DebugLocation(1559, 45);
				IF1220=(IToken)Match(input,IF,Follow._IF_in_drop_table14924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1220_tree = (object)adaptor.Create(IF1220);
				adaptor.AddChild(root_0, IF1220_tree);
				}
				DebugLocation(1559, 48);
				EXISTS1221=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_table14926); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1221_tree = (object)adaptor.Create(EXISTS1221);
				adaptor.AddChild(root_0, EXISTS1221_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(360); }

			DebugLocation(1559, 58);
			PushFollow(Follow._simple_obj_ref_no_alias_list_in_drop_table14931);
			simple_obj_ref_no_alias_list1222=simple_obj_ref_no_alias_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_obj_ref_no_alias_list1222.Tree);
			DebugLocation(1559, 87);
			// MySQL51Parser.g3:1559:87: ( cascade_or_restrict )?
			int alt361=2;
			try { DebugEnterSubRule(361);
			try { DebugEnterDecision(361, false);
			int LA361_0 = input.LA(1);

			if ((LA361_0==CASCADE||LA361_0==RESTRICT))
			{
				alt361 = 1;
			}
			} finally { DebugExitDecision(361); }
			switch (alt361)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1559:89: cascade_or_restrict
				{
				DebugLocation(1559, 89);
				PushFollow(Follow._cascade_or_restrict_in_drop_table14935);
				cascade_or_restrict1223=cascade_or_restrict();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cascade_or_restrict1223.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(361); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table", 117);
			LeaveRule("drop_table", 117);
			LeaveRule_drop_table();
		}
		DebugLocation(1560, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table"); }
		return retval;

	}
	// $ANTLR end "drop_table"

	private sealed partial class simple_obj_ref_no_alias_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simple_obj_ref_no_alias_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_simple_obj_ref_no_alias_list();
	partial void LeaveRule_simple_obj_ref_no_alias_list();

	// $ANTLR start "simple_obj_ref_no_alias_list"
	// MySQL51Parser.g3:1562:1: simple_obj_ref_no_alias_list : simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* -> ^( simple_table_ref_no_alias ) ;
	[GrammarRule("simple_obj_ref_no_alias_list")]
	private MySQL51Parser.simple_obj_ref_no_alias_list_return simple_obj_ref_no_alias_list()
	{
		EnterRule_simple_obj_ref_no_alias_list();
		EnterRule("simple_obj_ref_no_alias_list", 118);
		TraceIn("simple_obj_ref_no_alias_list", 118);
		MySQL51Parser.simple_obj_ref_no_alias_list_return retval = new MySQL51Parser.simple_obj_ref_no_alias_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA1225 = default(IToken);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias1224 = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias1226 = default(MySQL51Parser.simple_table_ref_no_alias_return);

		object COMMA1225_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_simple_table_ref_no_alias=new RewriteRuleSubtreeStream(adaptor,"rule simple_table_ref_no_alias");
		try { DebugEnterRule(GrammarFileName, "simple_obj_ref_no_alias_list");
		DebugLocation(1562, 1);
		try
		{
			// MySQL51Parser.g3:1563:2: ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* -> ^( simple_table_ref_no_alias ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1563:4: simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )*
			{
			DebugLocation(1563, 4);
			PushFollow(Follow._simple_table_ref_no_alias_in_simple_obj_ref_no_alias_list14949);
			simple_table_ref_no_alias1224=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(simple_table_ref_no_alias1224.Tree);
			DebugLocation(1563, 30);
			// MySQL51Parser.g3:1563:30: ( COMMA simple_table_ref_no_alias )*
			try { DebugEnterSubRule(362);
			while (true)
			{
				int alt362=2;
				try { DebugEnterDecision(362, false);
				int LA362_0 = input.LA(1);

				if ((LA362_0==COMMA))
				{
					alt362 = 1;
				}


				} finally { DebugExitDecision(362); }
				switch ( alt362 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1563:32: COMMA simple_table_ref_no_alias
					{
					DebugLocation(1563, 32);
					COMMA1225=(IToken)Match(input,COMMA,Follow._COMMA_in_simple_obj_ref_no_alias_list14953); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA1225);

					DebugLocation(1563, 38);
					PushFollow(Follow._simple_table_ref_no_alias_in_simple_obj_ref_no_alias_list14955);
					simple_table_ref_no_alias1226=simple_table_ref_no_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_simple_table_ref_no_alias.Add(simple_table_ref_no_alias1226.Tree);

					}
					break;

				default:
					goto loop362;
				}
			}

			loop362:
				;

			} finally { DebugExitSubRule(362); }



			{
			// AST REWRITE
			// elements: simple_table_ref_no_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 1563:67: -> ^( simple_table_ref_no_alias )
			{
				DebugLocation(1563, 70);
				// MySQL51Parser.g3:1563:70: ^( simple_table_ref_no_alias )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(1563, 73);
				root_1 = (object)adaptor.BecomeRoot(stream_simple_table_ref_no_alias.NextNode(), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_obj_ref_no_alias_list", 118);
			LeaveRule("simple_obj_ref_no_alias_list", 118);
			LeaveRule_simple_obj_ref_no_alias_list();
		}
		DebugLocation(1564, 1);
		} finally { DebugExitRule(GrammarFileName, "simple_obj_ref_no_alias_list"); }
		return retval;

	}
	// $ANTLR end "simple_obj_ref_no_alias_list"

	private sealed partial class drop_trigger_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_trigger_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_trigger();
	partial void LeaveRule_drop_trigger();

	// $ANTLR start "drop_trigger"
	// MySQL51Parser.g3:1566:1: drop_trigger : DROP TRIGGER ( IF EXISTS )? simple_obj_ref_no_alias ;
	[GrammarRule("drop_trigger")]
	private MySQL51Parser.drop_trigger_return drop_trigger()
	{
		EnterRule_drop_trigger();
		EnterRule("drop_trigger", 119);
		TraceIn("drop_trigger", 119);
		MySQL51Parser.drop_trigger_return retval = new MySQL51Parser.drop_trigger_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1227 = default(IToken);
		IToken TRIGGER1228 = default(IToken);
		IToken IF1229 = default(IToken);
		IToken EXISTS1230 = default(IToken);
		MySQL51Parser.simple_obj_ref_no_alias_return simple_obj_ref_no_alias1231 = default(MySQL51Parser.simple_obj_ref_no_alias_return);

		object DROP1227_tree = default(object);
		object TRIGGER1228_tree = default(object);
		object IF1229_tree = default(object);
		object EXISTS1230_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_trigger");
		DebugLocation(1566, 1);
		try
		{
			// MySQL51Parser.g3:1567:2: ( DROP TRIGGER ( IF EXISTS )? simple_obj_ref_no_alias )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1567:4: DROP TRIGGER ( IF EXISTS )? simple_obj_ref_no_alias
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1567, 4);
			DROP1227=(IToken)Match(input,DROP,Follow._DROP_in_drop_trigger14977); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1227_tree = (object)adaptor.Create(DROP1227);
			adaptor.AddChild(root_0, DROP1227_tree);
			}
			DebugLocation(1567, 9);
			TRIGGER1228=(IToken)Match(input,TRIGGER,Follow._TRIGGER_in_drop_trigger14979); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TRIGGER1228_tree = (object)adaptor.Create(TRIGGER1228);
			adaptor.AddChild(root_0, TRIGGER1228_tree);
			}
			DebugLocation(1567, 17);
			// MySQL51Parser.g3:1567:17: ( IF EXISTS )?
			int alt363=2;
			try { DebugEnterSubRule(363);
			try { DebugEnterDecision(363, false);
			int LA363_0 = input.LA(1);

			if ((LA363_0==IF))
			{
				alt363 = 1;
			}
			} finally { DebugExitDecision(363); }
			switch (alt363)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1567:19: IF EXISTS
				{
				DebugLocation(1567, 19);
				IF1229=(IToken)Match(input,IF,Follow._IF_in_drop_trigger14983); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1229_tree = (object)adaptor.Create(IF1229);
				adaptor.AddChild(root_0, IF1229_tree);
				}
				DebugLocation(1567, 22);
				EXISTS1230=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_trigger14985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1230_tree = (object)adaptor.Create(EXISTS1230);
				adaptor.AddChild(root_0, EXISTS1230_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(363); }

			DebugLocation(1567, 32);
			PushFollow(Follow._simple_obj_ref_no_alias_in_drop_trigger14990);
			simple_obj_ref_no_alias1231=simple_obj_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_obj_ref_no_alias1231.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_trigger", 119);
			LeaveRule("drop_trigger", 119);
			LeaveRule_drop_trigger();
		}
		DebugLocation(1568, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_trigger"); }
		return retval;

	}
	// $ANTLR end "drop_trigger"

	private sealed partial class drop_view_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public drop_view_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_drop_view();
	partial void LeaveRule_drop_view();

	// $ANTLR start "drop_view"
	// MySQL51Parser.g3:1570:1: drop_view : DROP VIEW ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )? ;
	[GrammarRule("drop_view")]
	private MySQL51Parser.drop_view_return drop_view()
	{
		EnterRule_drop_view();
		EnterRule("drop_view", 120);
		TraceIn("drop_view", 120);
		MySQL51Parser.drop_view_return retval = new MySQL51Parser.drop_view_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DROP1232 = default(IToken);
		IToken VIEW1233 = default(IToken);
		IToken IF1234 = default(IToken);
		IToken EXISTS1235 = default(IToken);
		MySQL51Parser.simple_obj_ref_no_alias_list_return simple_obj_ref_no_alias_list1236 = default(MySQL51Parser.simple_obj_ref_no_alias_list_return);
		MySQL51Parser.cascade_or_restrict_return cascade_or_restrict1237 = default(MySQL51Parser.cascade_or_restrict_return);

		object DROP1232_tree = default(object);
		object VIEW1233_tree = default(object);
		object IF1234_tree = default(object);
		object EXISTS1235_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "drop_view");
		DebugLocation(1570, 1);
		try
		{
			// MySQL51Parser.g3:1571:2: ( DROP VIEW ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1571:4: DROP VIEW ( IF EXISTS )? simple_obj_ref_no_alias_list ( cascade_or_restrict )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1571, 4);
			DROP1232=(IToken)Match(input,DROP,Follow._DROP_in_drop_view15001); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DROP1232_tree = (object)adaptor.Create(DROP1232);
			adaptor.AddChild(root_0, DROP1232_tree);
			}
			DebugLocation(1571, 9);
			VIEW1233=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view15003); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VIEW1233_tree = (object)adaptor.Create(VIEW1233);
			adaptor.AddChild(root_0, VIEW1233_tree);
			}
			DebugLocation(1571, 14);
			// MySQL51Parser.g3:1571:14: ( IF EXISTS )?
			int alt364=2;
			try { DebugEnterSubRule(364);
			try { DebugEnterDecision(364, false);
			int LA364_0 = input.LA(1);

			if ((LA364_0==IF))
			{
				alt364 = 1;
			}
			} finally { DebugExitDecision(364); }
			switch (alt364)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1571:16: IF EXISTS
				{
				DebugLocation(1571, 16);
				IF1234=(IToken)Match(input,IF,Follow._IF_in_drop_view15007); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IF1234_tree = (object)adaptor.Create(IF1234);
				adaptor.AddChild(root_0, IF1234_tree);
				}
				DebugLocation(1571, 19);
				EXISTS1235=(IToken)Match(input,EXISTS,Follow._EXISTS_in_drop_view15009); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EXISTS1235_tree = (object)adaptor.Create(EXISTS1235);
				adaptor.AddChild(root_0, EXISTS1235_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(364); }

			DebugLocation(1571, 29);
			PushFollow(Follow._simple_obj_ref_no_alias_list_in_drop_view15014);
			simple_obj_ref_no_alias_list1236=simple_obj_ref_no_alias_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_obj_ref_no_alias_list1236.Tree);
			DebugLocation(1571, 58);
			// MySQL51Parser.g3:1571:58: ( cascade_or_restrict )?
			int alt365=2;
			try { DebugEnterSubRule(365);
			try { DebugEnterDecision(365, false);
			int LA365_0 = input.LA(1);

			if ((LA365_0==CASCADE||LA365_0==RESTRICT))
			{
				alt365 = 1;
			}
			} finally { DebugExitDecision(365); }
			switch (alt365)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1571:60: cascade_or_restrict
				{
				DebugLocation(1571, 60);
				PushFollow(Follow._cascade_or_restrict_in_drop_view15018);
				cascade_or_restrict1237=cascade_or_restrict();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cascade_or_restrict1237.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(365); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view", 120);
			LeaveRule("drop_view", 120);
			LeaveRule_drop_view();
		}
		DebugLocation(1572, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view"); }
		return retval;

	}
	// $ANTLR end "drop_view"

	private sealed partial class cascade_or_restrict_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public cascade_or_restrict_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_cascade_or_restrict();
	partial void LeaveRule_cascade_or_restrict();

	// $ANTLR start "cascade_or_restrict"
	// MySQL51Parser.g3:1574:1: cascade_or_restrict : ( RESTRICT | CASCADE );
	[GrammarRule("cascade_or_restrict")]
	private MySQL51Parser.cascade_or_restrict_return cascade_or_restrict()
	{
		EnterRule_cascade_or_restrict();
		EnterRule("cascade_or_restrict", 121);
		TraceIn("cascade_or_restrict", 121);
		MySQL51Parser.cascade_or_restrict_return retval = new MySQL51Parser.cascade_or_restrict_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set1238 = default(IToken);

		object set1238_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "cascade_or_restrict");
		DebugLocation(1574, 1);
		try
		{
			// MySQL51Parser.g3:1575:2: ( RESTRICT | CASCADE )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1575, 2);
			set1238=(IToken)input.LT(1);
			if (input.LA(1)==CASCADE||input.LA(1)==RESTRICT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1238));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cascade_or_restrict", 121);
			LeaveRule("cascade_or_restrict", 121);
			LeaveRule_cascade_or_restrict();
		}
		DebugLocation(1576, 1);
		} finally { DebugExitRule(GrammarFileName, "cascade_or_restrict"); }
		return retval;

	}
	// $ANTLR end "cascade_or_restrict"

	private sealed partial class rename_database_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public rename_database_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_rename_database();
	partial void LeaveRule_rename_database();

	// $ANTLR start "rename_database"
	// MySQL51Parser.g3:1578:1: rename_database : RENAME ( DATABASE | SCHEMA ) old_dbname= ident TO new_dbname= ident ;
	[GrammarRule("rename_database")]
	private MySQL51Parser.rename_database_return rename_database()
	{
		EnterRule_rename_database();
		EnterRule("rename_database", 122);
		TraceIn("rename_database", 122);
		MySQL51Parser.rename_database_return retval = new MySQL51Parser.rename_database_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RENAME1239 = default(IToken);
		IToken set1240 = default(IToken);
		IToken TO1241 = default(IToken);
		MySQL51Parser.ident_return old_dbname = default(MySQL51Parser.ident_return);
		MySQL51Parser.ident_return new_dbname = default(MySQL51Parser.ident_return);

		object RENAME1239_tree = default(object);
		object set1240_tree = default(object);
		object TO1241_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "rename_database");
		DebugLocation(1578, 1);
		try
		{
			// MySQL51Parser.g3:1579:2: ( RENAME ( DATABASE | SCHEMA ) old_dbname= ident TO new_dbname= ident )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1579:4: RENAME ( DATABASE | SCHEMA ) old_dbname= ident TO new_dbname= ident
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1579, 4);
			RENAME1239=(IToken)Match(input,RENAME,Follow._RENAME_in_rename_database15047); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RENAME1239_tree = (object)adaptor.Create(RENAME1239);
			adaptor.AddChild(root_0, RENAME1239_tree);
			}
			DebugLocation(1579, 11);
			set1240=(IToken)input.LT(1);
			if (input.LA(1)==DATABASE||input.LA(1)==SCHEMA)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1240));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1579, 43);
			PushFollow(Follow._ident_in_rename_database15061);
			old_dbname=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, old_dbname.Tree);
			DebugLocation(1579, 50);
			TO1241=(IToken)Match(input,TO,Follow._TO_in_rename_database15063); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TO1241_tree = (object)adaptor.Create(TO1241);
			adaptor.AddChild(root_0, TO1241_tree);
			}
			DebugLocation(1579, 63);
			PushFollow(Follow._ident_in_rename_database15067);
			new_dbname=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, new_dbname.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rename_database", 122);
			LeaveRule("rename_database", 122);
			LeaveRule_rename_database();
		}
		DebugLocation(1580, 1);
		} finally { DebugExitRule(GrammarFileName, "rename_database"); }
		return retval;

	}
	// $ANTLR end "rename_database"

	private sealed partial class rename_table_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public rename_table_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_rename_table();
	partial void LeaveRule_rename_table();

	// $ANTLR start "rename_table"
	// MySQL51Parser.g3:1582:1: rename_table : RENAME TABLE table_src_to_dst_list ;
	[GrammarRule("rename_table")]
	private MySQL51Parser.rename_table_return rename_table()
	{
		EnterRule_rename_table();
		EnterRule("rename_table", 123);
		TraceIn("rename_table", 123);
		MySQL51Parser.rename_table_return retval = new MySQL51Parser.rename_table_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RENAME1242 = default(IToken);
		IToken TABLE1243 = default(IToken);
		MySQL51Parser.table_src_to_dst_list_return table_src_to_dst_list1244 = default(MySQL51Parser.table_src_to_dst_list_return);

		object RENAME1242_tree = default(object);
		object TABLE1243_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "rename_table");
		DebugLocation(1582, 1);
		try
		{
			// MySQL51Parser.g3:1583:2: ( RENAME TABLE table_src_to_dst_list )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1583:4: RENAME TABLE table_src_to_dst_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1583, 4);
			RENAME1242=(IToken)Match(input,RENAME,Follow._RENAME_in_rename_table15078); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RENAME1242_tree = (object)adaptor.Create(RENAME1242);
			adaptor.AddChild(root_0, RENAME1242_tree);
			}
			DebugLocation(1583, 11);
			TABLE1243=(IToken)Match(input,TABLE,Follow._TABLE_in_rename_table15080); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TABLE1243_tree = (object)adaptor.Create(TABLE1243);
			adaptor.AddChild(root_0, TABLE1243_tree);
			}
			DebugLocation(1583, 17);
			PushFollow(Follow._table_src_to_dst_list_in_rename_table15082);
			table_src_to_dst_list1244=table_src_to_dst_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, table_src_to_dst_list1244.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rename_table", 123);
			LeaveRule("rename_table", 123);
			LeaveRule_rename_table();
		}
		DebugLocation(1584, 1);
		} finally { DebugExitRule(GrammarFileName, "rename_table"); }
		return retval;

	}
	// $ANTLR end "rename_table"

	private sealed partial class table_src_to_dst_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public table_src_to_dst_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_table_src_to_dst_list();
	partial void LeaveRule_table_src_to_dst_list();

	// $ANTLR start "table_src_to_dst_list"
	// MySQL51Parser.g3:1586:1: table_src_to_dst_list :old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias ( COMMA old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias )* ;
	[GrammarRule("table_src_to_dst_list")]
	private MySQL51Parser.table_src_to_dst_list_return table_src_to_dst_list()
	{
		EnterRule_table_src_to_dst_list();
		EnterRule("table_src_to_dst_list", 124);
		TraceIn("table_src_to_dst_list", 124);
		MySQL51Parser.table_src_to_dst_list_return retval = new MySQL51Parser.table_src_to_dst_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TO1245 = default(IToken);
		IToken COMMA1246 = default(IToken);
		IToken TO1247 = default(IToken);
		List<object> list_old_tblname = null;
		List<object> list_new_tblname = null;
		MySQL51Parser.simple_table_ref_no_alias_return old_tblname = default(MySQL51Parser.simple_table_ref_no_alias_return);
		MySQL51Parser.simple_table_ref_no_alias_return new_tblname = default(MySQL51Parser.simple_table_ref_no_alias_return);
		object TO1245_tree = default(object);
		object COMMA1246_tree = default(object);
		object TO1247_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "table_src_to_dst_list");
		DebugLocation(1586, 1);
		try
		{
			// MySQL51Parser.g3:1587:2: (old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias ( COMMA old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1587:4: old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias ( COMMA old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1587, 15);
			PushFollow(Follow._simple_table_ref_no_alias_in_table_src_to_dst_list15095);
			old_tblname=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, old_tblname.Tree);
			if (list_old_tblname==null) list_old_tblname=new List<object>();
			list_old_tblname.Add(old_tblname.Tree);

			DebugLocation(1587, 43);
			TO1245=(IToken)Match(input,TO,Follow._TO_in_table_src_to_dst_list15097); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TO1245_tree = (object)adaptor.Create(TO1245);
			adaptor.AddChild(root_0, TO1245_tree);
			}
			DebugLocation(1587, 57);
			PushFollow(Follow._simple_table_ref_no_alias_in_table_src_to_dst_list15101);
			new_tblname=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, new_tblname.Tree);
			if (list_new_tblname==null) list_new_tblname=new List<object>();
			list_new_tblname.Add(new_tblname.Tree);

			DebugLocation(1588, 3);
			// MySQL51Parser.g3:1588:3: ( COMMA old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias )*
			try { DebugEnterSubRule(366);
			while (true)
			{
				int alt366=2;
				try { DebugEnterDecision(366, false);
				int LA366_0 = input.LA(1);

				if ((LA366_0==COMMA))
				{
					alt366 = 1;
				}


				} finally { DebugExitDecision(366); }
				switch ( alt366 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1588:5: COMMA old_tblname+= simple_table_ref_no_alias TO new_tblname+= simple_table_ref_no_alias
					{
					DebugLocation(1588, 5);
					COMMA1246=(IToken)Match(input,COMMA,Follow._COMMA_in_table_src_to_dst_list15108); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA1246_tree = (object)adaptor.Create(COMMA1246);
					adaptor.AddChild(root_0, COMMA1246_tree);
					}
					DebugLocation(1588, 22);
					PushFollow(Follow._simple_table_ref_no_alias_in_table_src_to_dst_list15112);
					old_tblname=simple_table_ref_no_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, old_tblname.Tree);
					if (list_old_tblname==null) list_old_tblname=new List<object>();
					list_old_tblname.Add(old_tblname.Tree);

					DebugLocation(1588, 50);
					TO1247=(IToken)Match(input,TO,Follow._TO_in_table_src_to_dst_list15114); if (state.failed) return retval;
					if (state.backtracking == 0) {
					TO1247_tree = (object)adaptor.Create(TO1247);
					adaptor.AddChild(root_0, TO1247_tree);
					}
					DebugLocation(1588, 64);
					PushFollow(Follow._simple_table_ref_no_alias_in_table_src_to_dst_list15118);
					new_tblname=simple_table_ref_no_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, new_tblname.Tree);
					if (list_new_tblname==null) list_new_tblname=new List<object>();
					list_new_tblname.Add(new_tblname.Tree);


					}
					break;

				default:
					goto loop366;
				}
			}

			loop366:
				;

			} finally { DebugExitSubRule(366); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_src_to_dst_list", 124);
			LeaveRule("table_src_to_dst_list", 124);
			LeaveRule_table_src_to_dst_list();
		}
		DebugLocation(1589, 1);
		} finally { DebugExitRule(GrammarFileName, "table_src_to_dst_list"); }
		return retval;

	}
	// $ANTLR end "table_src_to_dst_list"

	private sealed partial class truncate_table_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public truncate_table_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_truncate_table();
	partial void LeaveRule_truncate_table();

	// $ANTLR start "truncate_table"
	// MySQL51Parser.g3:1591:1: truncate_table : TRUNCATE ( TABLE )? simple_table_ref_no_alias ;
	[GrammarRule("truncate_table")]
	private MySQL51Parser.truncate_table_return truncate_table()
	{
		EnterRule_truncate_table();
		EnterRule("truncate_table", 125);
		TraceIn("truncate_table", 125);
		MySQL51Parser.truncate_table_return retval = new MySQL51Parser.truncate_table_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRUNCATE1248 = default(IToken);
		IToken TABLE1249 = default(IToken);
		MySQL51Parser.simple_table_ref_no_alias_return simple_table_ref_no_alias1250 = default(MySQL51Parser.simple_table_ref_no_alias_return);

		object TRUNCATE1248_tree = default(object);
		object TABLE1249_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "truncate_table");
		DebugLocation(1591, 1);
		try
		{
			// MySQL51Parser.g3:1592:2: ( TRUNCATE ( TABLE )? simple_table_ref_no_alias )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1592:4: TRUNCATE ( TABLE )? simple_table_ref_no_alias
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1592, 4);
			TRUNCATE1248=(IToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncate_table15132); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TRUNCATE1248_tree = (object)adaptor.Create(TRUNCATE1248);
			adaptor.AddChild(root_0, TRUNCATE1248_tree);
			}
			DebugLocation(1592, 13);
			// MySQL51Parser.g3:1592:13: ( TABLE )?
			int alt367=2;
			try { DebugEnterSubRule(367);
			try { DebugEnterDecision(367, false);
			int LA367_0 = input.LA(1);

			if ((LA367_0==TABLE))
			{
				alt367 = 1;
			}
			} finally { DebugExitDecision(367); }
			switch (alt367)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1592:15: TABLE
				{
				DebugLocation(1592, 15);
				TABLE1249=(IToken)Match(input,TABLE,Follow._TABLE_in_truncate_table15136); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TABLE1249_tree = (object)adaptor.Create(TABLE1249);
				adaptor.AddChild(root_0, TABLE1249_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(367); }

			DebugLocation(1592, 24);
			PushFollow(Follow._simple_table_ref_no_alias_in_truncate_table15141);
			simple_table_ref_no_alias1250=simple_table_ref_no_alias();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simple_table_ref_no_alias1250.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncate_table", 125);
			LeaveRule("truncate_table", 125);
			LeaveRule_truncate_table();
		}
		DebugLocation(1593, 1);
		} finally { DebugExitRule(GrammarFileName, "truncate_table"); }
		return retval;

	}
	// $ANTLR end "truncate_table"

	private sealed partial class create_user_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public create_user_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_create_user();
	partial void LeaveRule_create_user();

	// $ANTLR start "create_user"
	// MySQL51Parser.g3:1595:1: create_user : CREATE USER user_specification_list ;
	[GrammarRule("create_user")]
	private MySQL51Parser.create_user_return create_user()
	{
		EnterRule_create_user();
		EnterRule("create_user", 126);
		TraceIn("create_user", 126);
		MySQL51Parser.create_user_return retval = new MySQL51Parser.create_user_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CREATE1251 = default(IToken);
		IToken USER1252 = default(IToken);
		MySQL51Parser.user_specification_list_return user_specification_list1253 = default(MySQL51Parser.user_specification_list_return);

		object CREATE1251_tree = default(object);
		object USER1252_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "create_user");
		DebugLocation(1595, 1);
		try
		{
			// MySQL51Parser.g3:1596:2: ( CREATE USER user_specification_list )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1596:4: CREATE USER user_specification_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1596, 4);
			CREATE1251=(IToken)Match(input,CREATE,Follow._CREATE_in_create_user15152); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CREATE1251_tree = (object)adaptor.Create(CREATE1251);
			adaptor.AddChild(root_0, CREATE1251_tree);
			}
			DebugLocation(1596, 11);
			USER1252=(IToken)Match(input,USER,Follow._USER_in_create_user15154); if (state.failed) return retval;
			if (state.backtracking == 0) {
			USER1252_tree = (object)adaptor.Create(USER1252);
			adaptor.AddChild(root_0, USER1252_tree);
			}
			DebugLocation(1596, 16);
			PushFollow(Follow._user_specification_list_in_create_user15156);
			user_specification_list1253=user_specification_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, user_specification_list1253.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_user", 126);
			LeaveRule("create_user", 126);
			LeaveRule_create_user();
		}
		DebugLocation(1597, 1);
		} finally { DebugExitRule(GrammarFileName, "create_user"); }
		return retval;

	}
	// $ANTLR end "create_user"

	private sealed partial class user_specification_list_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public user_specification_list_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_user_specification_list();
	partial void LeaveRule_user_specification_list();

	// $ANTLR start "user_specification_list"
	// MySQL51Parser.g3:1599:1: user_specification_list : user_specification ( COMMA user_specification )* ;
	[GrammarRule("user_specification_list")]
	private MySQL51Parser.user_specification_list_return user_specification_list()
	{
		EnterRule_user_specification_list();
		EnterRule("user_specification_list", 127);
		TraceIn("user_specification_list", 127);
		MySQL51Parser.user_specification_list_return retval = new MySQL51Parser.user_specification_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA1255 = default(IToken);
		MySQL51Parser.user_specification_return user_specification1254 = default(MySQL51Parser.user_specification_return);
		MySQL51Parser.user_specification_return user_specification1256 = default(MySQL51Parser.user_specification_return);

		object COMMA1255_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "user_specification_list");
		DebugLocation(1599, 1);
		try
		{
			// MySQL51Parser.g3:1600:2: ( user_specification ( COMMA user_specification )* )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1600:4: user_specification ( COMMA user_specification )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1600, 4);
			PushFollow(Follow._user_specification_in_user_specification_list15167);
			user_specification1254=user_specification();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, user_specification1254.Tree);
			DebugLocation(1600, 23);
			// MySQL51Parser.g3:1600:23: ( COMMA user_specification )*
			try { DebugEnterSubRule(368);
			while (true)
			{
				int alt368=2;
				try { DebugEnterDecision(368, false);
				int LA368_0 = input.LA(1);

				if ((LA368_0==COMMA))
				{
					alt368 = 1;
				}


				} finally { DebugExitDecision(368); }
				switch ( alt368 )
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1600:25: COMMA user_specification
					{
					DebugLocation(1600, 25);
					COMMA1255=(IToken)Match(input,COMMA,Follow._COMMA_in_user_specification_list15171); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA1255_tree = (object)adaptor.Create(COMMA1255);
					adaptor.AddChild(root_0, COMMA1255_tree);
					}
					DebugLocation(1600, 31);
					PushFollow(Follow._user_specification_in_user_specification_list15173);
					user_specification1256=user_specification();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, user_specification1256.Tree);

					}
					break;

				default:
					goto loop368;
				}
			}

			loop368:
				;

			} finally { DebugExitSubRule(368); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("user_specification_list", 127);
			LeaveRule("user_specification_list", 127);
			LeaveRule_user_specification_list();
		}
		DebugLocation(1601, 1);
		} finally { DebugExitRule(GrammarFileName, "user_specification_list"); }
		return retval;

	}
	// $ANTLR end "user_specification_list"

	private sealed partial class user_specification_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public user_specification_return(MySQL51Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(MySQL51Parser grammar);
	}

	partial void EnterRule_user_specification();
	partial void LeaveRule_user_specification();

	// $ANTLR start "user_specification"
	// MySQL51Parser.g3:1603:1: user_specification : USER_HOST_or_ID_or_STRING ( IDENTIFIED BY ( PASSWORD )? STRING )? ;
	[GrammarRule("user_specification")]
	private MySQL51Parser.user_specification_return user_specification()
	{
		EnterRule_user_specification();
		EnterRule("user_specification", 128);
		TraceIn("user_specification", 128);
		MySQL51Parser.user_specification_return retval = new MySQL51Parser.user_specification_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken USER_HOST_or_ID_or_STRING1257 = default(IToken);
		IToken IDENTIFIED1258 = default(IToken);
		IToken BY1259 = default(IToken);
		IToken PASSWORD1260 = default(IToken);
		IToken STRING1261 = default(IToken);

		object USER_HOST_or_ID_or_STRING1257_tree = default(object);
		object IDENTIFIED1258_tree = default(object);
		object BY1259_tree = default(object);
		object PASSWORD1260_tree = default(object);
		object STRING1261_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "user_specification");
		DebugLocation(1603, 1);
		try
		{
			// MySQL51Parser.g3:1604:2: ( USER_HOST_or_ID_or_STRING ( IDENTIFIED BY ( PASSWORD )? STRING )? )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1604:4: USER_HOST_or_ID_or_STRING ( IDENTIFIED BY ( PASSWORD )? STRING )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1604, 4);
			USER_HOST_or_ID_or_STRING1257=(IToken)Match(input,USER_HOST_or_ID_or_STRING,Follow._USER_HOST_or_ID_or_STRING_in_user_specification15187); if (state.failed) return retval;
			if (state.backtracking == 0) {
			USER_HOST_or_ID_or_STRING1257_tree = (object)adaptor.Create(USER_HOST_or_ID_or_STRING1257);
			adaptor.AddChild(root_0, USER_HOST_or_ID_or_STRING1257_tree);
			}
			DebugLocation(1604, 30);
			// MySQL51Parser.g3:1604:30: ( IDENTIFIED BY ( PASSWORD )? STRING )?
			int alt370=2;
			try { DebugEnterSubRule(370);
			try { DebugEnterDecision(370, false);
			int LA370_0 = input.LA(1);

			if ((LA370_0==IDENTIFIED))
			{
				alt370 = 1;
			}
			} finally { DebugExitDecision(370); }
			switch (alt370)
			{
			case 1:
				DebugEnterAlt(1);
				// MySQL51Parser.g3:1604:32: IDENTIFIED BY ( PASSWORD )? STRING
				{
				DebugLocation(1604, 32);
				IDENTIFIED1258=(IToken)Match(input,IDENTIFIED,Follow._IDENTIFIED_in_user_specification15191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIED1258_tree = (object)adaptor.Create(IDENTIFIED1258);
				adaptor.AddChild(root_0, IDENTIFIED1258_tree);
				}
				DebugLocation(1604, 43);
				BY1259=(IToken)Match(input,BY,Follow._BY_in_user_specification15193); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BY1259_tree = (object)adaptor.Create(BY1259);
				adaptor.AddChild(root_0, BY1259_tree);
				}
				DebugLocation(1604, 46);
				// MySQL51Parser.g3:1604:46: ( PASSWORD )?
				int alt369=2;
				try { DebugEnterSubRule(369);
				try { DebugEnterDecision(369, false);
				int LA369_0 = input.LA(1);

				if ((LA369_0==PASSWORD))
				{
					alt369 = 1;
				}
				} finally { DebugExitDecision(369); }
				switch (alt369)
				{
				case 1:
					DebugEnterAlt(1);
					// MySQL51Parser.g3:1604:48: PASSWORD
					{
					DebugLocation(1604, 48);
					PASSWORD1260=(IToken)Match(input,PASSWORD,Follow._PASSWORD_in_user_specification15197); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PASSWORD1260_tree = (object)adaptor.Create(PASSWORD1260);
					adaptor.AddChild(root_0, PASSWORD1260_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(369); }

				DebugLocation(1604, 60);
				STRING1261=(IToken)Match(input,STRING,Follow._STRING_in_user_specification15202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING1261_tree = (object)adaptor.Create(STRING1261);
				adaptor.AddChild(root_0, STRING1261_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(370); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("user_specification", 128);
			LeaveRule("user_specification", 128);
			LeaveRule_user_specification();
		}
		DebugLocation(1605, 1);
		} finally { DebugExitRule(GrammarFileName, "user_specification"); }
		return retval;

	}
	// $ANTLR end "user_specification"

	partial void EnterRule_synpred2_MySQL51Parser_fragment();
	partial void LeaveRule_synpred2_MySQL51Parser_fragment();

	// $ANTLR start synpred2_MySQL51Parser
	public void synpred2_MySQL51Parser_fragment()
	{
		EnterRule_synpred2_MySQL51Parser_fragment();
		EnterRule("synpred2_MySQL51Parser_fragment", 130);
		TraceIn("synpred2_MySQL51Parser_fragment", 130);
		try
		{
			// MySQL51Parser.g3:346:4: ( LEFT | RIGHT )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:
			{
			DebugLocation(346, 4);
			if (input.LA(1)==LEFT||input.LA(1)==RIGHT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred2_MySQL51Parser_fragment", 130);
			LeaveRule("synpred2_MySQL51Parser_fragment", 130);
			LeaveRule_synpred2_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred2_MySQL51Parser

	partial void EnterRule_synpred3_MySQL51Parser_fragment();
	partial void LeaveRule_synpred3_MySQL51Parser_fragment();

	// $ANTLR start synpred3_MySQL51Parser
	public void synpred3_MySQL51Parser_fragment()
	{
		EnterRule_synpred3_MySQL51Parser_fragment();
		EnterRule("synpred3_MySQL51Parser_fragment", 131);
		TraceIn("synpred3_MySQL51Parser_fragment", 131);
		try
		{
			// MySQL51Parser.g3:351:7: ( join_condition_on )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:351:8: join_condition_on
			{
			DebugLocation(351, 8);
			PushFollow(Follow._join_condition_on_in_synpred3_MySQL51Parser3580);
			join_condition_on();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_MySQL51Parser_fragment", 131);
			LeaveRule("synpred3_MySQL51Parser_fragment", 131);
			LeaveRule_synpred3_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred3_MySQL51Parser

	partial void EnterRule_synpred4_MySQL51Parser_fragment();
	partial void LeaveRule_synpred4_MySQL51Parser_fragment();

	// $ANTLR start synpred4_MySQL51Parser
	public void synpred4_MySQL51Parser_fragment()
	{
		EnterRule_synpred4_MySQL51Parser_fragment();
		EnterRule("synpred4_MySQL51Parser_fragment", 132);
		TraceIn("synpred4_MySQL51Parser_fragment", 132);
		try
		{
			// MySQL51Parser.g3:355:5: ( NATURAL )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:355:6: NATURAL
			{
			DebugLocation(355, 6);
			Match(input,NATURAL,Follow._NATURAL_in_synpred4_MySQL51Parser3643); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_MySQL51Parser_fragment", 132);
			LeaveRule("synpred4_MySQL51Parser_fragment", 132);
			LeaveRule_synpred4_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred4_MySQL51Parser

	partial void EnterRule_synpred5_MySQL51Parser_fragment();
	partial void LeaveRule_synpred5_MySQL51Parser_fragment();

	// $ANTLR start synpred5_MySQL51Parser
	public void synpred5_MySQL51Parser_fragment()
	{
		EnterRule_synpred5_MySQL51Parser_fragment();
		EnterRule("synpred5_MySQL51Parser_fragment", 133);
		TraceIn("synpred5_MySQL51Parser_fragment", 133);
		try
		{
			// MySQL51Parser.g3:810:27: ( subselect_in_expr_rhs )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:810:28: subselect_in_expr_rhs
			{
			DebugLocation(810, 28);
			PushFollow(Follow._subselect_in_expr_rhs_in_synpred5_MySQL51Parser7094);
			subselect_in_expr_rhs();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_MySQL51Parser_fragment", 133);
			LeaveRule("synpred5_MySQL51Parser_fragment", 133);
			LeaveRule_synpred5_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred5_MySQL51Parser

	partial void EnterRule_synpred6_MySQL51Parser_fragment();
	partial void LeaveRule_synpred6_MySQL51Parser_fragment();

	// $ANTLR start synpred6_MySQL51Parser
	public void synpred6_MySQL51Parser_fragment()
	{
		EnterRule_synpred6_MySQL51Parser_fragment();
		EnterRule("synpred6_MySQL51Parser_fragment", 134);
		TraceIn("synpred6_MySQL51Parser_fragment", 134);
		try
		{
			// MySQL51Parser.g3:910:4: ( INTERVAL ~ ( LPAREN ) )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:910:5: INTERVAL ~ ( LPAREN )
			{
			DebugLocation(910, 5);
			Match(input,INTERVAL,Follow._INTERVAL_in_synpred6_MySQL51Parser7795); if (state.failed) return;
			DebugLocation(910, 14);
			if ((input.LA(1)>=ACCESSIBLE && input.LA(1)<=LOW_PRIORITY)||(input.LA(1)>=MASTER && input.LA(1)<=UNARY_PLUS))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred6_MySQL51Parser_fragment", 134);
			LeaveRule("synpred6_MySQL51Parser_fragment", 134);
			LeaveRule_synpred6_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred6_MySQL51Parser

	partial void EnterRule_synpred7_MySQL51Parser_fragment();
	partial void LeaveRule_synpred7_MySQL51Parser_fragment();

	// $ANTLR start synpred7_MySQL51Parser
	public void synpred7_MySQL51Parser_fragment()
	{
		MySQL51Parser.literal_return lhsLit = default(MySQL51Parser.literal_return);

		EnterRule_synpred7_MySQL51Parser_fragment();
		EnterRule("synpred7_MySQL51Parser_fragment", 135);
		TraceIn("synpred7_MySQL51Parser_fragment", 135);
		try
		{
			// MySQL51Parser.g3:916:3: (lhsLit= literal )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:916:5: lhsLit= literal
			{
			DebugLocation(916, 11);
			PushFollow(Follow._literal_in_synpred7_MySQL51Parser7852);
			lhsLit=literal();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_MySQL51Parser_fragment", 135);
			LeaveRule("synpred7_MySQL51Parser_fragment", 135);
			LeaveRule_synpred7_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred7_MySQL51Parser

	partial void EnterRule_synpred8_MySQL51Parser_fragment();
	partial void LeaveRule_synpred8_MySQL51Parser_fragment();

	// $ANTLR start synpred8_MySQL51Parser
	public void synpred8_MySQL51Parser_fragment()
	{
		EnterRule_synpred8_MySQL51Parser_fragment();
		EnterRule("synpred8_MySQL51Parser_fragment", 136);
		TraceIn("synpred8_MySQL51Parser_fragment", 136);
		try
		{
			// MySQL51Parser.g3:917:4: ( subselect )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:917:6: subselect
			{
			DebugLocation(917, 6);
			PushFollow(Follow._subselect_in_synpred8_MySQL51Parser7865);
			subselect();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_MySQL51Parser_fragment", 136);
			LeaveRule("synpred8_MySQL51Parser_fragment", 136);
			LeaveRule_synpred8_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred8_MySQL51Parser

	partial void EnterRule_synpred10_MySQL51Parser_fragment();
	partial void LeaveRule_synpred10_MySQL51Parser_fragment();

	// $ANTLR start synpred10_MySQL51Parser
	public void synpred10_MySQL51Parser_fragment()
	{
		EnterRule_synpred10_MySQL51Parser_fragment();
		EnterRule("synpred10_MySQL51Parser_fragment", 138);
		TraceIn("synpred10_MySQL51Parser_fragment", 138);
		try
		{
			// MySQL51Parser.g3:972:4: ( functionCall )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:972:5: functionCall
			{
			DebugLocation(972, 5);
			PushFollow(Follow._functionCall_in_synpred10_MySQL51Parser8252);
			functionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_MySQL51Parser_fragment", 138);
			LeaveRule("synpred10_MySQL51Parser_fragment", 138);
			LeaveRule_synpred10_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred10_MySQL51Parser

	partial void EnterRule_synpred11_MySQL51Parser_fragment();
	partial void LeaveRule_synpred11_MySQL51Parser_fragment();

	// $ANTLR start synpred11_MySQL51Parser
	public void synpred11_MySQL51Parser_fragment()
	{
		EnterRule_synpred11_MySQL51Parser_fragment();
		EnterRule("synpred11_MySQL51Parser_fragment", 139);
		TraceIn("synpred11_MySQL51Parser_fragment", 139);
		try
		{
			// MySQL51Parser.g3:1429:5: ( INTERVAL )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1429:6: INTERVAL
			{
			DebugLocation(1429, 6);
			Match(input,INTERVAL,Follow._INTERVAL_in_synpred11_MySQL51Parser12732); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_MySQL51Parser_fragment", 139);
			LeaveRule("synpred11_MySQL51Parser_fragment", 139);
			LeaveRule_synpred11_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred11_MySQL51Parser

	partial void EnterRule_synpred12_MySQL51Parser_fragment();
	partial void LeaveRule_synpred12_MySQL51Parser_fragment();

	// $ANTLR start synpred12_MySQL51Parser
	public void synpred12_MySQL51Parser_fragment()
	{
		EnterRule_synpred12_MySQL51Parser_fragment();
		EnterRule("synpred12_MySQL51Parser_fragment", 140);
		TraceIn("synpred12_MySQL51Parser_fragment", 140);
		try
		{
			// MySQL51Parser.g3:1446:6: ( INTERVAL )
			DebugEnterAlt(1);
			// MySQL51Parser.g3:1446:7: INTERVAL
			{
			DebugLocation(1446, 7);
			Match(input,INTERVAL,Follow._INTERVAL_in_synpred12_MySQL51Parser13118); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_MySQL51Parser_fragment", 140);
			LeaveRule("synpred12_MySQL51Parser_fragment", 140);
			LeaveRule_synpred12_MySQL51Parser_fragment();
		}
	}
	// $ANTLR end synpred12_MySQL51Parser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA51 dfa51;
	private DFA63 dfa63;
	private DFA98 dfa98;
	private DFA99 dfa99;
	private DFA128 dfa128;
	private DFA138 dfa138;
	private DFA148 dfa148;
	private DFA153 dfa153;
	private DFA159 dfa159;
	private DFA160 dfa160;
	private DFA161 dfa161;
	private DFA169 dfa169;
	private DFA170 dfa170;
	private DFA218 dfa218;
	private DFA266 dfa266;
	private DFA265 dfa265;
	private DFA346 dfa346;
	private DFA333 dfa333;
	private DFA338 dfa338;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa51 = new DFA51( this );
		dfa63 = new DFA63( this );
		dfa98 = new DFA98( this );
		dfa99 = new DFA99( this, SpecialStateTransition99 );
		dfa128 = new DFA128( this, SpecialStateTransition128 );
		dfa138 = new DFA138( this, SpecialStateTransition138 );
		dfa148 = new DFA148( this );
		dfa153 = new DFA153( this );
		dfa159 = new DFA159( this );
		dfa160 = new DFA160( this, SpecialStateTransition160 );
		dfa161 = new DFA161( this, SpecialStateTransition161 );
		dfa169 = new DFA169( this );
		dfa170 = new DFA170( this, SpecialStateTransition170 );
		dfa218 = new DFA218( this );
		dfa266 = new DFA266( this );
		dfa265 = new DFA265( this );
		dfa346 = new DFA346( this );
		dfa333 = new DFA333( this, SpecialStateTransition333 );
		dfa338 = new DFA338( this, SpecialStateTransition338 );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x24\xFFFF";
		private const string DFA3_eofS =
			"\x8\xFFFF\x1\xC\x1\xFFFF\x2\xC\x9\xFFFF\x1\xC\xE\xFFFF";
		private const string DFA3_minS =
			"\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\x4D\x2\xF\x1\xFFFF\x1\x5\x1\xFFFF"+
			"\x3\x72\x1\x5\x2\xFFFF\x1\x4D\xE\xFFFF";
		private const string DFA3_maxS =
			"\x1\x278\x1\xFFFF\x1\x27E\x5\xFFFF\x1\x278\x1\x23B\x2\x271\x1\xFFFF\x1"+
			"\x278\x1\xFFFF\x1\x22C\x1\x28D\x1\x229\x1\x278\x2\xFFFF\x1\x1EA\xE\xFFFF";
		private const string DFA3_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x4\xFFFF\x1\x8"+
			"\x1\xFFFF\x1\x9\x4\xFFFF\x1\x18\x1\x2\x1\xFFFF\x1\xA\x1\xB\x1\xD\x1\xE"+
			"\x1\x10\x1\x11\x1\x13\x1\x14\x1\xC\x1\xF\x1\x12\x1\x15\x1\x16\x1\x17";
		private const string DFA3_specialS =
			"\x24\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x13\x1\xFFFF\x5\x13\x4\xFFFF\x1\x13\x3\xFFFF\x1\x13\x2\xFFFF\x7"+
				"\x13\x2\xFFFF\x1\x8\x5\xFFFF\x2\x13\x9\xFFFF\x3\x13\x1\xFFFF\x1\x13"+
				"\x1\xFFFF\x2\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13\x2"+
				"\xFFFF\x1\x13\x1\xFFFF\x6\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF"+
				"\x1\x13\x1\xE\x1\xA\x5\x13\x1\xFFFF\x2\x13\x1\xFFFF\x2\x13\x1\xFFFF"+
				"\x1\x13\x2\xFFFF\x1\x13\x1\xF\x2\xFFFF\x1\x13\x9\xFFFF\x1\x13\x2\xFFFF"+
				"\x3\x13\x4\xFFFF\x1\x13\x4\xFFFF\x1\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1"+
				"\x13\x1\x7\x2\xFFFF\x1\x13\x2\xFFFF\x4\x13\x4\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x10\x1\xFFFF\x3\x13\x3\xFFFF\x1\x13\x1\xFFFF\x5\x13\x1\xFFFF\x2\x13"+
				"\x2\xFFFF\x3\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\x4\x2\x13\x2\xFFFF"+
				"\x2\x13\x2\xFFFF\x4\x13\x3\xFFFF\x1\x13\x3\xFFFF\x2\x13\x1\xFFFF\x1"+
				"\x13\x1\xFFFF\x5\x13\x3\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x2\x13"+
				"\x2\xFFFF\x1\x13\x2\xFFFF\x3\x13\x3\xFFFF\x2\x13\x3\xFFFF\x1\x13\x2"+
				"\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x3\xFFFF\x1\x5\x2\x13"+
				"\xA\xFFFF\x3\x13\x1\xFFFF\x2\x13\x4\xFFFF\x1\x13\x1\xFFFF\x3\x13\x3"+
				"\xFFFF\x1\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x4\xFFFF\x2\x13\x1\xFFFF"+
				"\x1\x13\x2\xFFFF\x1\xC\x2\x13\x2\xFFFF\x1\x13\x5\xFFFF\x1\x1\xE\x13"+
				"\x1\xFFFF\x1\x13\x2\xFFFF\x8\x13\x3\xFFFF\x3\x13\x2\xFFFF\x1\x13\x2"+
				"\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF"+
				"\x1\x13\x1\xFFFF\x4\x13\x1\xFFFF\x3\x13\x1\xFFFF\x7\x13\x4\xFFFF\x1"+
				"\x13\x6\xFFFF\x3\x13\x1\xFFFF\x1\x13\x1\xFFFF\x2\x13\x3\xFFFF\x1\x13"+
				"\x5\xFFFF\xC\x13\x1\xFFFF\x3\x13\x3\xFFFF\x3\x13\x1\xFFFF\x1\x13\x1"+
				"\xFFFF\x4\x13\x1\xFFFF\x3\x13\x8\xFFFF\x5\x13\x2\xFFFF\x3\x13\x1\xC"+
				"\x2\x13\x1\x11\x2\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x3\x13"+
				"\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x4\xFFFF\x1\xB\x5\x13\x1\xFFFF\x1\x13"+
				"\x1\xD\x1\x13\x3\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\x1\x3\xFFFF\x4\x13"+
				"\x2\xFFFF\x1\xC\x1\x13\x1\x3\x4\x13\x1\xFFFF\x2\x13\x1\xFFFF\x3\x13"+
				"\x7\xFFFF\x2\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x9\x1\xFFFF"+
				"\x2\x13\x4\xFFFF\x2\x13\x2\xFFFF\x5\x13\x3\xFFFF\x4\x13\x3\xFFFF\x4"+
				"\x13\x1\xFFFF\x2\x13\x1\xFFFF\x4\x13\x5\xFFFF\x2\x13\x1\xFFFF\x1\x13"+
				"\x2\xFFFF\x1\x12\x5\x13\x1\xFFFF\x4\x13\x2\xFFFF\x1\x13\x1\xC\x1\xFFFF"+
				"\x1\x13\x1\x6\x1\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x4\xFFFF\x1\x13"+
				"\x5\xFFFF\x1\x13\x4\xFFFF\x4\x13\x4\xFFFF\x2\x13\x2\xFFFF\x2\x13\x1"+
				"\xFFFF\x1\x13",
				"",
				"\x1\x14\x1\xFFFF\x5\x14\x4\xFFFF\x1\x14\x3\xFFFF\x1\x14\x2\xFFFF\x7"+
				"\x14\x2\xFFFF\x1\x14\x3\xFFFF\x4\x14\x1\xFFFF\x1\x14\x2\xFFFF\x3\x14"+
				"\x2\xFFFF\x3\x14\x1\xFFFF\x1\x14\x1\xFFFF\x2\x14\x2\xFFFF\x4\x14\x1"+
				"\xFFFF\x2\x14\x1\xFFFF\x1\x14\x1\xFFFF\x8\x14\x1\x13\x1\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x14\x1\xFFFF\x6\x14\x1\xFFFF\x2\x14\x1\xFFFF\x2\x14\x1"+
				"\xFFFF\x1\x14\x1\xFFFF\x2\x14\x3\xFFFF\x6\x14\x1\xFFFF\x1\x14\x2\xFFFF"+
				"\x2\x14\x1\xFFFF\x4\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1\x14\x4\xFFFF\x1"+
				"\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1\x14\x3\xFFFF\x1\x14\x2\xFFFF\x4\x14"+
				"\x4\xFFFF\x1\x14\x4\xFFFF\x3\x14\x3\xFFFF\x1\x14\x1\xFFFF\x5\x14\x1"+
				"\xFFFF\x2\x14\x2\xFFFF\x3\x14\x1\xFFFF\x2\x14\x1\xFFFF\x1\x14\x1\xFFFF"+
				"\x6\x14\x2\xFFFF\x4\x14\x3\xFFFF\x1\x14\x3\xFFFF\x2\x14\x1\xFFFF\x1"+
				"\x14\x1\xFFFF\x6\x14\x2\xFFFF\x1\x14\x2\xFFFF\x4\x14\x2\xFFFF\x2\x14"+
				"\x1\xFFFF\x3\x14\x3\xFFFF\x4\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1"+
				"\xFFFF\x1\x14\x1\xFFFF\x1\x14\x3\xFFFF\x3\x14\x7\xFFFF\x1\x14\x1\xFFFF"+
				"\x4\x14\x1\xFFFF\x2\x14\x4\xFFFF\x1\x14\x1\xFFFF\x4\x14\x2\xFFFF\x2"+
				"\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x4\xFFFF\x2\x14\x1\xFFFF\x1\x14"+
				"\x3\xFFFF\x2\x14\x2\xFFFF\x1\x14\x5\xFFFF\xF\x14\x1\xFFFF\xB\x14\x3"+
				"\xFFFF\x4\x14\x1\xFFFF\x4\x14\x2\xFFFF\x3\x14\x1\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x4\x14\x1\xFFFF\x3\x14\x1\xFFFF\x8\x14\x1\xFFFF\x3"+
				"\x14\x1\xFFFF\x2\x14\x1\xFFFF\x1\x14\x1\xFFFF\x3\x14\x1\xFFFF\x1\x14"+
				"\x1\xFFFF\x2\x14\x3\xFFFF\x1\x14\x5\xFFFF\x11\x14\x2\xFFFF\x3\x14\x1"+
				"\xFFFF\x1\x14\x1\xFFFF\x4\x14\x1\xFFFF\x3\x14\x8\xFFFF\x5\x14\x2\xFFFF"+
				"\x3\x14\x1\xFFFF\x2\x14\x1\xFFFF\x6\x14\x1\xFFFF\x3\x14\x1\xFFFF\x1"+
				"\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x6\x14\x1\xFFFF\x3\x14"+
				"\x3\xFFFF\x1\x14\x1\xFFFF\x1\x14\x4\xFFFF\x6\x14\x1\xFFFF\x1\x14\x1"+
				"\xFFFF\x4\x14\x1\xFFFF\x2\x14\x1\xFFFF\x3\x14\x7\xFFFF\x2\x14\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x8\x14\x1\xFFFF\xF"+
				"\x14\x1\xFFFF\x4\x14\x1\xFFFF\x2\x14\x1\xFFFF\x4\x14\x5\xFFFF\x2\x14"+
				"\x1\xFFFF\x9\x14\x1\xFFFF\x4\x14\x2\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1"+
				"\xFFFF\x1\x14\x2\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1\xFFFF\x4\x14\x1\xFFFF"+
				"\x1\x14\x3\xFFFF\x2\x14\x1\xFFFF\x6\x14\x4\xFFFF\x2\x14\x2\xFFFF\x2"+
				"\x14\x1\xFFFF\x1\x14\x5\xFFFF\x1\x14",
				"",
				"",
				"",
				"",
				"",
				"\x1\x13\x1\xFFFF\x5\x13\x4\xFFFF\x1\x13\x3\xFFFF\x1\x13\x2\xFFFF\x7"+
				"\x13\x2\xFFFF\x1\x13\x5\xFFFF\x2\x13\x9\xFFFF\x3\x13\x1\xFFFF\x1\x13"+
				"\x1\xFFFF\x2\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13\x2"+
				"\xFFFF\x1\x13\x1\xFFFF\x6\x13\x1\xFFFF\x2\x13\x1\xFFFF\x1\x13\x1\xFFFF"+
				"\x8\x13\x1\xFFFF\x2\x13\x1\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x2"+
				"\x13\x2\xFFFF\x1\x13\x9\xFFFF\x1\x13\x2\xFFFF\x3\x13\x4\xFFFF\x1\x13"+
				"\x4\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x2\x13\x2"+
				"\xFFFF\x1\x13\x2\xFFFF\x4\x13\x4\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF"+
				"\x3\x13\x3\xFFFF\x1\x13\x1\xFFFF\x5\x13\x1\xFFFF\x2\x13\x2\xFFFF\x3"+
				"\x13\x1\xFFFF\x1\x13\x2\xFFFF\x4\x13\x2\xFFFF\x2\x13\x2\xFFFF\x4\x13"+
				"\x3\xFFFF\x1\x13\x3\xFFFF\x2\x13\x1\xFFFF\x1\x13\x1\xFFFF\x5\x13\x3"+
				"\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x2\x13\x2\xFFFF\x1\x13\x2\xFFFF"+
				"\x3\x13\x3\xFFFF\x2\x13\x3\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1"+
				"\x13\x1\xFFFF\x1\x13\x3\xFFFF\x3\x13\xA\xFFFF\x3\x13\x1\xFFFF\x2\x13"+
				"\x4\xFFFF\x1\x13\x1\xFFFF\x3\x13\x3\xFFFF\x1\x13\x2\xFFFF\x1\x13\x2"+
				"\xFFFF\x1\x13\x4\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x3\x13\x2\xFFFF"+
				"\x1\x13\x5\xFFFF\xF\x13\x1\xFFFF\x1\x13\x2\xFFFF\x8\x13\x3\xFFFF\x3"+
				"\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x1\xFFFF\x1\x13"+
				"\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x4\x13\x1\xFFFF\x3\x13\x1"+
				"\xFFFF\x7\x13\x4\xFFFF\x1\x13\x6\xFFFF\x3\x13\x1\xFFFF\x1\x13\x1\xFFFF"+
				"\x2\x13\x3\xFFFF\x1\x13\x5\xFFFF\xC\x13\x1\xFFFF\x3\x13\x3\xFFFF\x3"+
				"\x13\x1\xFFFF\x1\x13\x1\xFFFF\x4\x13\x1\xFFFF\x3\x13\x8\xFFFF\x5\x13"+
				"\x2\xFFFF\x9\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1\xFFFF\x3\x13\x1"+
				"\xFFFF\x1\x13\x1\xFFFF\x1\x13\x4\xFFFF\x6\x13\x1\xFFFF\x3\x13\x3\xFFFF"+
				"\x1\x13\x1\xFFFF\x2\x13\x1\xC\x2\xFFFF\x4\x13\x2\xFFFF\x7\x13\x1\xFFFF"+
				"\x2\x13\x1\xFFFF\x3\x13\x7\xFFFF\x2\x13\x1\xFFFF\x1\x13\x1\xFFFF\x1"+
				"\x13\x1\xFFFF\x1\x13\x1\xFFFF\x2\x13\x4\xFFFF\x2\x13\x2\xFFFF\x5\x13"+
				"\x3\xFFFF\x4\x13\x3\xFFFF\x4\x13\x1\xFFFF\x2\x13\x1\xFFFF\x4\x13\x5"+
				"\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x6\x13\x1\xFFFF\x4\x13\x2\xFFFF"+
				"\x2\x13\x1\xFFFF\x3\x13\x2\xFFFF\x1\x13\x2\xFFFF\x1\x13\x4\xFFFF\x1"+
				"\x13\x5\xFFFF\x1\x13\x4\xFFFF\x4\x13\x4\xFFFF\x1\x15\x1\x13\x2\xFFFF"+
				"\x2\x13\x1\xFFFF\x1\x13",
				"\x1\x13\x1ED\xFFFF\x1\xC",
				"\x1\xC\x3D\xFFFF\x1\x13\x123\xFFFF\x1\xC\x51\xFFFF\x1\xC\x26\xFFFF\x1"+
				"\xC\x86\xFFFF\x1\xC",
				"\x1\xC\x3D\xFFFF\x1\x13\x123\xFFFF\x1\xC\x51\xFFFF\x1\xC\x26\xFFFF\x1"+
				"\xC\x4E\xFFFF\x1\xC\x37\xFFFF\x1\xC",
				"",
				"\x1\xC\x1\xFFFF\x5\xC\x4\xFFFF\x1\xC\x3\xFFFF\x1\xC\x2\xFFFF\x7\xC\x2"+
				"\xFFFF\x1\xC\x5\xFFFF\x2\xC\x9\xFFFF\x3\xC\x1\xFFFF\x1\xC\x1\xFFFF\x2"+
				"\xC\x2\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF"+
				"\x6\xC\x1\xFFFF\x1\xC\x1\x13\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF"+
				"\x6\xC\x1\xFFFF\x2\xC\x1\xFFFF\x2\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x3"+
				"\xFFFF\x1\xC\x9\xFFFF\x1\xC\x2\xFFFF\x3\xC\x4\xFFFF\x1\xC\x4\xFFFF\x1"+
				"\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1\xC\x3\xFFFF\x1\xC\x2\xFFFF\x4\xC\x4\xFFFF"+
				"\x1\xC\x4\xFFFF\x3\xC\x3\xFFFF\x1\xC\x1\xFFFF\x5\xC\x1\xFFFF\x2\xC\x2"+
				"\xFFFF\x3\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x2\xC\x2\xFFFF\x2"+
				"\xC\x2\xFFFF\x4\xC\x3\xFFFF\x1\xC\x3\xFFFF\x2\xC\x1\xFFFF\x1\xC\x1\xFFFF"+
				"\x5\xC\x3\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x2\xC\x2\xFFFF\x1\xC\x2"+
				"\xFFFF\x3\xC\x3\xFFFF\x2\xC\x3\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x1"+
				"\xC\x1\xFFFF\x1\xC\x4\xFFFF\x2\xC\xA\xFFFF\x3\xC\x1\xFFFF\x2\xC\x4\xFFFF"+
				"\x1\xC\x1\xFFFF\x3\xC\x3\xFFFF\x1\xC\x2\xFFFF\x1\xC\x2\xFFFF\x1\xC\x4"+
				"\xFFFF\x2\xC\x1\xFFFF\x1\xC\x3\xFFFF\x2\xC\x2\xFFFF\x1\xC\x6\xFFFF\xE"+
				"\xC\x1\xFFFF\x1\xC\x2\xFFFF\x8\xC\x3\xFFFF\x3\xC\x2\xFFFF\x1\xC\x2\xFFFF"+
				"\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1"+
				"\xFFFF\x4\xC\x1\xFFFF\x3\xC\x1\xFFFF\x7\xC\x4\xFFFF\x1\xC\x6\xFFFF\x3"+
				"\xC\x1\xFFFF\x1\xC\x1\xFFFF\x2\xC\x3\xFFFF\x1\xC\x5\xFFFF\xC\xC\x1\xFFFF"+
				"\x3\xC\x3\xFFFF\x3\xC\x1\xFFFF\x1\xC\x1\xFFFF\x4\xC\x1\xFFFF\x3\xC\x8"+
				"\xFFFF\x5\xC\x2\xFFFF\x3\xC\x1\xFFFF\x2\xC\x1\xFFFF\x2\xC\x1\xFFFF\x1"+
				"\xC\x1\xFFFF\x1\xC\x1\xFFFF\x3\xC\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x4\xFFFF"+
				"\x6\xC\x1\xFFFF\x3\xC\x3\xFFFF\x1\xC\x1\xFFFF\x1\xC\x4\xFFFF\x4\xC\x3"+
				"\xFFFF\x1\xC\x1\xFFFF\x4\xC\x1\xFFFF\x2\xC\x1\xFFFF\x3\xC\x7\xFFFF\x2"+
				"\xC\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF\x2\xC\x4\xFFFF"+
				"\x2\xC\x2\xFFFF\x5\xC\x3\xFFFF\x4\xC\x3\xFFFF\x4\xC\x1\xFFFF\x2\xC\x1"+
				"\xFFFF\x4\xC\x5\xFFFF\x2\xC\x1\xFFFF\x1\xC\x2\xFFFF\x6\xC\x1\xFFFF\x4"+
				"\xC\x2\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x2\xFFFF"+
				"\x1\xC\x4\xFFFF\x1\xC\x5\xFFFF\x1\xC\x4\xFFFF\x4\xC\x4\xFFFF\x2\xC\x2"+
				"\xFFFF\x2\xC\x1\xFFFF\x1\xC",
				"",
				"\x1\x17\x171\xFFFF\x1\x17\x44\xFFFF\x1\x16\x2\xFFFF\x1\x16",
				"\x1\x1E\x3A\xFFFF\x1\x18\x20\xFFFF\x1\x19\x20\xFFFF\x1\x1F\xB8\xFFFF"+
				"\x1\x19\x3B\xFFFF\x1\x1E\xA\xFFFF\x1\x1B\x39\xFFFF\x2\x20\x1\xFFFF\x1"+
				"\x20\x10\xFFFF\x1\x1C\x2B\xFFFF\x1\x1D\x1F\xFFFF\x1\x1A\x2\xFFFF\x2"+
				"\x1F",
				"\x1\x21\x171\xFFFF\x1\x21\x44\xFFFF\x1\x22",
				"\x1\x23\x1\xFFFF\x5\x23\x4\xFFFF\x1\x23\x3\xFFFF\x1\x23\x2\xFFFF\x7"+
				"\x23\x2\xFFFF\x1\x23\x5\xFFFF\x2\x23\x9\xFFFF\x3\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x2\x23\x2\xFFFF\x1\x23\x2\xFFFF\x1\x23\x1\xFFFF\x1\x23\x2"+
				"\xFFFF\x1\x23\x1\xFFFF\x6\x23\x1\xFFFF\x1\x23\x1\x13\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x1\x23\x1\xFFFF\x6\x23\x1\xFFFF\x2\x23\x1\xFFFF\x2\x23\x1"+
				"\xFFFF\x1\x23\x2\xFFFF\x1\x23\x3\xFFFF\x1\x23\x9\xFFFF\x1\x23\x2\xFFFF"+
				"\x3\x23\x4\xFFFF\x1\x23\x4\xFFFF\x1\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1"+
				"\x23\x3\xFFFF\x1\x23\x2\xFFFF\x4\x23\x4\xFFFF\x1\x23\x4\xFFFF\x3\x23"+
				"\x3\xFFFF\x1\x23\x1\xFFFF\x5\x23\x1\xFFFF\x2\x23\x2\xFFFF\x3\x23\x1"+
				"\xFFFF\x1\x23\x2\xFFFF\x1\x23\x1\xFFFF\x2\x23\x2\xFFFF\x2\x23\x2\xFFFF"+
				"\x4\x23\x3\xFFFF\x1\x23\x3\xFFFF\x2\x23\x1\xFFFF\x1\x23\x1\xFFFF\x5"+
				"\x23\x3\xFFFF\x1\x23\x2\xFFFF\x1\x23\x1\xFFFF\x2\x23\x2\xFFFF\x1\x23"+
				"\x2\xFFFF\x3\x23\x3\xFFFF\x2\x23\x3\xFFFF\x1\x23\x2\xFFFF\x1\x23\x1"+
				"\xFFFF\x1\x23\x1\xFFFF\x1\x23\x4\xFFFF\x2\x23\xA\xFFFF\x3\x23\x1\xFFFF"+
				"\x2\x23\x4\xFFFF\x1\x23\x1\xFFFF\x3\x23\x3\xFFFF\x1\x23\x2\xFFFF\x1"+
				"\x23\x2\xFFFF\x1\x23\x4\xFFFF\x2\x23\x1\xFFFF\x1\x23\x3\xFFFF\x2\x23"+
				"\x2\xFFFF\x1\x23\x6\xFFFF\xE\x23\x1\xFFFF\x1\x23\x2\xFFFF\x8\x23\x3"+
				"\xFFFF\x3\x23\x2\xFFFF\x1\x23\x2\xFFFF\x1\x23\x2\xFFFF\x1\x23\x1\xFFFF"+
				"\x1\x23\x1\xFFFF\x1\x23\x1\xFFFF\x1\x23\x1\xFFFF\x4\x23\x1\xFFFF\x3"+
				"\x23\x1\xFFFF\x7\x23\x4\xFFFF\x1\x23\x6\xFFFF\x3\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x2\x23\x3\xFFFF\x1\x23\x5\xFFFF\xC\x23\x1\xFFFF\x3\x23\x3"+
				"\xFFFF\x3\x23\x1\xFFFF\x1\x23\x1\xFFFF\x4\x23\x1\xFFFF\x3\x23\x8\xFFFF"+
				"\x5\x23\x2\xFFFF\x3\x23\x1\xFFFF\x2\x23\x1\xFFFF\x2\x23\x1\xFFFF\x1"+
				"\x23\x1\xFFFF\x1\x23\x1\xFFFF\x3\x23\x1\xFFFF\x1\x23\x1\xFFFF\x1\x23"+
				"\x4\xFFFF\x6\x23\x1\xFFFF\x3\x23\x3\xFFFF\x1\x23\x1\xFFFF\x1\x23\x4"+
				"\xFFFF\x4\x23\x3\xFFFF\x1\x23\x1\xFFFF\x4\x23\x1\xFFFF\x2\x23\x1\xFFFF"+
				"\x3\x23\x7\xFFFF\x2\x23\x1\xFFFF\x1\x23\x1\xFFFF\x1\x23\x1\xFFFF\x1"+
				"\x23\x1\xFFFF\x2\x23\x4\xFFFF\x2\x23\x2\xFFFF\x5\x23\x3\xFFFF\x4\x23"+
				"\x2\xFFFF\x5\x23\x1\xFFFF\x2\x23\x1\xFFFF\x4\x23\x5\xFFFF\x2\x23\x1"+
				"\xFFFF\x1\x23\x2\xFFFF\x6\x23\x1\xFFFF\x4\x23\x2\xFFFF\x1\x23\x2\xFFFF"+
				"\x1\x23\x1\xFFFF\x1\x23\x2\xFFFF\x1\x23\x2\xFFFF\x1\x23\x4\xFFFF\x1"+
				"\x23\x5\xFFFF\x1\x23\x4\xFFFF\x4\x23\x4\xFFFF\x2\x23\x2\xFFFF\x2\x23"+
				"\x1\xFFFF\x1\x23",
				"",
				"",
				"\x1\x13\x19C\xFFFF\x1\xC",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "46:4: ( select | do_stmt | show_stmt | explain_stmt | insert | update | delete | transaction | COMMENT_RULE | create_table | create_database | drop_database | drop_event | drop_routine | drop_index | drop_logfile | drop_server | drop_table | drop_trigger | drop_view | rename_database | rename_table | truncate_table | begin_end_stmt )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x35\xFFFF";
		private const string DFA51_eofS =
			"\x35\xFFFF";
		private const string DFA51_minS =
			"\x1\x18\x4\xFFFF\x1\x4F\x2\xFFFF\x1\x72\x5\xFFFF\x1\x4A\x5\xFFFF\x1\x4A"+
			"\x5\xFFFF\x3\x212\x6\xFFFF\x1\xE3\x1\x12D\x10\xFFFF";
		private const string DFA51_maxS =
			"\x1\x287\x4\xFFFF\x1\x1AA\x2\xFFFF\x1\x269\x5\xFFFF\x1\x212\x5\xFFFF"+
			"\x1\x212\x5\xFFFF\x3\x264\x6\xFFFF\x2\x212\x10\xFFFF";
		private const string DFA51_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\xE"+
			"\x1\xF\x1\x10\x1\x11\x1\x12\x1\xFFFF\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19"+
			"\x1\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x3\xFFFF\x1\x21\x1\x22\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x2\xFFFF\x1\x2A\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\x13\x1\x14\x1\x1A\x1\x1B\x1\x27\x1\x28\x1\x29\x1\x2B";
		private const string DFA51_specialS =
			"\x35\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x1\xB\xFFFF\x1\x25\x1\xFFFF\x1\x2\x1B\xFFFF\x1\x3\x9\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x6\x10\xFFFF\x1\x7\x3\xFFFF\x1\x8\xE\xFFFF\x1\x9\x31\xFFFF"+
				"\x1\xA\x1\xB\x2\xFFFF\x1\xC\x4\xFFFF\x1\xD\x1D\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\x1A\x3\xFFFF\x1\xF\x1E\xFFFF\x1\x11\x2F\xFFFF\x1"+
				"\x1C\xE\xFFFF\x1\x24\x51\xFFFF\x1\x12\x14\xFFFF\x1\x13\xB\xFFFF\x1\x15"+
				"\x1\x14\x1\xFFFF\x1\x16\x1\x17\x1\x18\x36\xFFFF\x1\x19\xC\xFFFF\x1\x1B"+
				"\x8\xFFFF\x1\x23\x18\xFFFF\x1\x1D\x5\xFFFF\x1\xB\x10\xFFFF\x1\x1E\x1"+
				"\x1F\x13\xFFFF\x1\x20\x25\xFFFF\x1\x21\x6\xFFFF\x1\x22\x1B\xFFFF\x1"+
				"\x10",
				"",
				"",
				"",
				"",
				"\x1\x6\x5E\xFFFF\x1\xD\xFB\xFFFF\x1\x16",
				"",
				"",
				"\x1\x26\x3A\xFFFF\x1\x27\x20\xFFFF\x1\x28\xD9\xFFFF\x1\x29\x80\xFFFF"+
				"\x1\x2A\x13\xFFFF\x1\x2B\x2B\xFFFF\x1\x2C",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2D\x1C7\xFFFF\x1\x2E",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2F\x1C7\xFFFF\x1\x30",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1D\x51\xFFFF\x1\x21",
				"\x1\x1D\x51\xFFFF\x1\x21",
				"\x1\x1D\x51\xFFFF\x1\x21",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x31\x12E\xFFFF\x1\x32",
				"\x1\x34\xE4\xFFFF\x1\x33",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "97:5: ( AUTHORS -> ^( $show_stmt ^( AUTHORS ) ) | BINLOG EVENTS ( IN logName= STRING )? ( FROM INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( BINLOG ( $logName)? ( INT_NUMBER )? ( limit )? ) ) | CHARACTER SET ( like_or_where )? -> ^( $show_stmt ^( CHARACTER ( like_or_where )? ) ) | COLLATION ( like_or_where )? -> ^( $show_stmt ^( COLLATION ( like_or_where )? ) ) | ( FULL )? COLUMNS ( FROM | IN ) simple_table_ref_no_alias ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( COLUMNS ( FULL )? simple_table_ref_no_alias ( ident )? ( like_or_where )? ) ) | CONTRIBUTORS -> ^( $show_stmt ^( CONTRIBUTORS ) ) | CREATE DATABASE ident -> ^( $show_stmt ^( CREATE DATABASE ident ) ) | CREATE EVENT ident -> ^( $show_stmt ^( CREATE EVENT ident ) ) | CREATE FUNCTION ident -> ^( $show_stmt ^( CREATE FUNCTION ident ) ) | CREATE PROCEDURE ident -> ^( $show_stmt ^( CREATE PROCEDURE ident ) ) | CREATE TABLE simple_table_ref_no_alias -> ^( $show_stmt ^( CREATE TABLE simple_table_ref_no_alias ) ) | CREATE TRIGGER ident -> ^( $show_stmt ^( CREATE TRIGGER ident ) ) | CREATE VIEW ident -> ^( $show_stmt ^( CREATE VIEW ident ) ) | DATABASES ( like_or_where )? -> ^( $show_stmt ^( DATABASES ( like_or_where )? ) ) | ENGINE ( INNODB | ident ) (what= STATUS |what= MUTEX ) -> ^( $show_stmt ^( ENGINE ( INNODB )? ( ident )? $what) ) | ( STORAGE )? ENGINES -> ^( $show_stmt ^( ENGINES ) ) | ERRORS ( limit )? -> ^( $show_stmt ^( ERRORS ( limit )? ) ) | ( FULL )? EVENTS -> ^( $show_stmt ^( EVENTS ( FULL )? ) ) | FUNCTION CODE ident -> ^( $show_stmt ^( CODE FUNCTION ident ) ) | FUNCTION STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS FUNCTION ( like_or_where )? ) ) | GRANTS FOR (whom+= STRING (whom+= USER_HOST )? |whom+= ID (whom+= USER_HOST )? |whom+= CURRENT_USER |whom+= CURRENT_USER LPAREN RPAREN ) -> ^( $show_stmt ^( GRANTS $whom) ) | INDEX_SYM FROM simple_table_ref_no_alias ( ( FROM | IN ) ident )? -> ^( $show_stmt ^( INDEX_SYM simple_table_ref_no_alias ( ident )? ) ) | INNODB STATUS -> ^( $show_stmt ^( INNODB STATUS ) ) | OPEN TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( OPEN ( ident )? ( like_or_where )? ) ) | PLUGINS -> ^( $show_stmt ^( PLUGINS ) ) | PROCEDURE CODE ident -> ^( $show_stmt ^( CODE PROCEDURE ident ) ) | PROCEDURE STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS PROCEDURE ident ) ) | PRIVILEGES -> ^( $show_stmt ^( PRIVILEGES ) ) | ( FULL )? PROCESSLIST -> ^( $show_stmt ^( PROCESSLIST ( FULL )? ) ) | PROFILE show_profile_types ( FOR QUERY INT_NUMBER )? ( limit )? -> ^( $show_stmt ^( PROFILE show_profile_types ( INT_NUMBER )? ( limit )? ) ) | PROFILES -> ^( $show_stmt ^( PROFILES ) ) | SCHEDULER STATUS -> ^( $show_stmt ^( STATUS SCHEDULER ) ) | optScopeModifier STATUS ( like_or_where )? -> ^( $show_stmt ^( STATUS ( optScopeModifier )? ( like_or_where )? ) ) | TABLE STATUS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( STATUS TABLE ( ident )? ( like_or_where )? ) ) | TABLES ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TABLES ( ident )? ( like_or_where )? ) ) | TRIGGERS ( ( FROM | IN ) ident )? ( like_or_where )? -> ^( $show_stmt ^( TRIGGERS ( ident )? ( like_or_where )? ) ) | optScopeModifier VARIABLES ( like_or_where )? -> ^( $show_stmt ^( VARIABLES ( optScopeModifier )? ( like_or_where )? ) ) | WARNINGS ( limit )? -> ^( $show_stmt ^( WARNINGS ( limit )? ) ) | SLAVE HOSTS -> ^( $show_stmt ^( SLAVE HOSTS ) ) | SLAVE STATUS -> ^( $show_stmt ^( SLAVE STATUS ) ) | MASTER STATUS -> ^( $show_stmt ^( MASTER STATUS ) ) | BINARY LOGS -> ^( $show_stmt ^( BINARY LOGS ) ) | MASTER LOGS -> ^( $show_stmt ^( MASTER LOGS ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\x184\xFFFF";
		private const string DFA63_eofS =
			"\x184\xFFFF";
		private const string DFA63_minS =
			"\x1\x5\x183\xFFFF";
		private const string DFA63_maxS =
			"\x1\x27E\x183\xFFFF";
		private const string DFA63_acceptS =
			"\x1\xFFFF\x1\x2\x151\xFFFF\x3\x1\x2D\xFFFF\x1\x1";
		private const string DFA63_specialS =
			"\x184\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x1\x1\xFFFF\x5\x1\x1\x183\x3\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF"+
				"\x7\x1\x2\xFFFF\x1\x1\x3\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3\x1\x2"+
				"\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x8\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x6\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x3"+
				"\xFFFF\x6\x1\x1\xFFFF\x1\x1\x2\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x1\x4\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF"+
				"\x1\x1\x2\xFFFF\x4\x1\x2\x183\x2\xFFFF\x1\x1\x4\xFFFF\x3\x1\x3\xFFFF"+
				"\x1\x1\x1\xFFFF\x5\x1\x1\xFFFF\x2\x1\x2\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x6\x1\x2\xFFFF\x4\x1\x3\xFFFF\x1\x1\x3\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6\x1\x2\xFFFF\x1\x1\x2\xFFFF\x4\x1\x2\xFFFF"+
				"\x2\x1\x1\x183\x3\x1\x3\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x3\x1\x7\xFFFF\x1\x1\x1\xFFFF\x4"+
				"\x1\x1\xFFFF\x2\x1\x4\xFFFF\x1\x1\x1\xFFFF\x4\x1\x2\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x3\xFFFF\x2\x1\x2"+
				"\xFFFF\x1\x1\x5\xFFFF\xF\x1\x1\xFFFF\xB\x1\x3\xFFFF\x4\x1\x1\xFFFF\x4"+
				"\x1\x2\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6\x1\x1\xFFFF\x3\x1\x1\xFFFF"+
				"\x8\x1\x1\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x2\x1\x3\xFFFF\x1\x1\x5\xFFFF\x11\x1\x2\xFFFF"+
				"\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1\x8\xFFFF\x5\x1\x2"+
				"\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x6\x1\x1\xFFFF\x3\x1\x3\xFFFF"+
				"\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x3\x1\x6\xFFFF\x1\x183\x1\x154\x1\x153\x1\x183"+
				"\x1\x155\x1\x183\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x8\x1\x1\x183\xF\x1\x1"+
				"\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF\x4\x1\x5\xFFFF\x2\x1\x1\xFFFF\x9"+
				"\x1\x1\xFFFF\x4\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x3\xFFFF\x2\x1\x1"+
				"\xFFFF\x6\x1\x4\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x5\xFFFF\x1"+
				"\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "()* loopback of 202:11: ( options {k=1; } : select_options )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA98 : DFA
	{
		private const string DFA98_eotS =
			"\x1A\xFFFF";
		private const string DFA98_eofS =
			"\x1\x3\x19\xFFFF";
		private const string DFA98_minS =
			"\x1\x50\x19\xFFFF";
		private const string DFA98_maxS =
			"\x1\x26E\x19\xFFFF";
		private const string DFA98_acceptS =
			"\x1\xFFFF\x2\x1\x1\x2\x16\xFFFF";
		private const string DFA98_specialS =
			"\x1A\xFFFF}>";
		private static readonly string[] DFA98_transitionS =
			{
				"\x1\x3\x14\xFFFF\x1\x3\x60\xFFFF\x1\x3\x12\xFFFF\x1\x3\x3\xFFFF\x1\x3"+
				"\x15\xFFFF\x1\x3\xF\xFFFF\x1\x3\x8\xFFFF\x1\x3\xB\xFFFF\x1\x3\x6\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x43\xFFFF\x1\x3\x15\xFFFF\x1\x1\x9\xFFFF\x1\x3"+
				"\x1B\xFFFF\x1\x3\x9\xFFFF\x1\x3\x23\xFFFF\x1\x3\x8\xFFFF\x1\x3\xA\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x25\xFFFF\x1\x3\x32\xFFFF\x1\x3\xD\xFFFF\x1\x2"+
				"\x13\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA98_eot = DFA.UnpackEncodedString(DFA98_eotS);
		private static readonly short[] DFA98_eof = DFA.UnpackEncodedString(DFA98_eofS);
		private static readonly char[] DFA98_min = DFA.UnpackEncodedStringToUnsignedChars(DFA98_minS);
		private static readonly char[] DFA98_max = DFA.UnpackEncodedStringToUnsignedChars(DFA98_maxS);
		private static readonly short[] DFA98_accept = DFA.UnpackEncodedString(DFA98_acceptS);
		private static readonly short[] DFA98_special = DFA.UnpackEncodedString(DFA98_specialS);
		private static readonly short[][] DFA98_transition;

		static DFA98()
		{
			int numStates = DFA98_transitionS.Length;
			DFA98_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA98_transition[i] = DFA.UnpackEncodedString(DFA98_transitionS[i]);
			}
		}

		public DFA98( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 98;
			this.eot = DFA98_eot;
			this.eof = DFA98_eof;
			this.min = DFA98_min;
			this.max = DFA98_max;
			this.accept = DFA98_accept;
			this.special = DFA98_special;
			this.transition = DFA98_transition;
		}

		public override string Description { get { return "348:56: (cond1= join_condition_both )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x1B\xFFFF";
		private const string DFA99_eofS =
			"\x1\x2\x1A\xFFFF";
		private const string DFA99_minS =
			"\x1\x50\x1\x0\x19\xFFFF";
		private const string DFA99_maxS =
			"\x1\x26E\x1\x0\x19\xFFFF";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x17\xFFFF\x1\x1";
		private const string DFA99_specialS =
			"\x1\xFFFF\x1\x0\x19\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x2\x60\xFFFF\x1\x2\x12\xFFFF\x1\x2\x3\xFFFF\x1\x2"+
				"\x15\xFFFF\x1\x2\xF\xFFFF\x1\x2\x8\xFFFF\x1\x2\xB\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x43\xFFFF\x1\x2\x15\xFFFF\x1\x1\x9\xFFFF\x1\x2"+
				"\x1B\xFFFF\x1\x2\x9\xFFFF\x1\x2\x23\xFFFF\x1\x2\x8\xFFFF\x1\x2\xA\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2\x25\xFFFF\x1\x2\x32\xFFFF\x1\x2\xD\xFFFF\x1\x2"+
				"\x13\xFFFF\x1\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "351:5: ( ( join_condition_on )=>cond2= join_condition_on -> ^( $type $t2 $cond2) | -> ^( $type $t2) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition99(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA99_1 = input.LA(1);


				int index99_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_MySQL51Parser_fragment))) {s = 26;}

				else if ((true)) {s = 2;}


				input.Seek(index99_1);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 99, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA128 : DFA
	{
		private const string DFA128_eotS =
			"\x13B\xFFFF";
		private const string DFA128_eofS =
			"\x13B\xFFFF";
		private const string DFA128_minS =
			"\x1\x5\x138\x0\x2\xFFFF";
		private const string DFA128_maxS =
			"\x1\x278\x138\x0\x2\xFFFF";
		private const string DFA128_acceptS =
			"\x139\xFFFF\x1\x1\x1\x2";
		private const string DFA128_specialS =
			"\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15"+
			"\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F"+
			"\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29"+
			"\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33"+
			"\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D"+
			"\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1\x45\x1\x46\x1\x47"+
			"\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1\x50\x1\x51"+
			"\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1\x59\x1\x5A\x1\x5B"+
			"\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65"+
			"\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F"+
			"\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79"+
			"\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83"+
			"\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D"+
			"\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97"+
			"\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1\xA0\x1\xA1"+
			"\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x1\xAA\x1\xAB"+
			"\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1\xB4\x1\xB5"+
			"\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1\xBE\x1\xBF"+
			"\x1\xC0\x1\xC1\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1\xC6\x1\xC7\x1\xC8\x1\xC9"+
			"\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1\xD0\x1\xD1\x1\xD2\x1\xD3"+
			"\x1\xD4\x1\xD5\x1\xD6\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1\xDC\x1\xDD"+
			"\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1\xE6\x1\xE7"+
			"\x1\xE8\x1\xE9\x1\xEA\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1\xF0\x1\xF1"+
			"\x1\xF2\x1\xF3\x1\xF4\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9\x1\xFA\x1\xFB"+
			"\x1\xFC\x1\xFD\x1\xFE\x1\xFF\x1\x100\x1\x101\x1\x102\x1\x103\x1\x104"+
			"\x1\x105\x1\x106\x1\x107\x1\x108\x1\x109\x1\x10A\x1\x10B\x1\x10C\x1\x10D"+
			"\x1\x10E\x1\x10F\x1\x110\x1\x111\x1\x112\x1\x113\x1\x114\x1\x115\x1\x116"+
			"\x1\x117\x1\x118\x1\x119\x1\x11A\x1\x11B\x1\x11C\x1\x11D\x1\x11E\x1\x11F"+
			"\x1\x120\x1\x121\x1\x122\x1\x123\x1\x124\x1\x125\x1\x126\x1\x127\x1\x128"+
			"\x1\x129\x1\x12A\x1\x12B\x1\x12C\x1\x12D\x1\x12E\x1\x12F\x1\x130\x1\x131"+
			"\x1\x132\x1\x133\x1\x134\x1\x135\x1\x136\x1\x137\x1\x138\x2\xFFFF}>";
		private static readonly string[] DFA128_transitionS =
			{
				"\x1\x35\x1\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x4\xFFFF\x1\x3B"+
				"\x3\xFFFF\x1\x1\x2\xFFFF\x1\x3C\x1\x3D\x1\x3F\x1\x3E\x1\x41\x1\x40\x1"+
				"\x2\x2\xFFFF\x1\x3\x5\xFFFF\x1\x42\x1\x43\x9\xFFFF\x1\x44\x1\x45\x1"+
				"\x46\x1\xFFFF\x1\x47\x1\xFFFF\x1\x4\x1\x5\x2\xFFFF\x1\x48\x2\xFFFF\x1"+
				"\x49\x1\xFFFF\x1\x4A\x2\xFFFF\x1\x6\x1\xFFFF\x1\x7\x1\x4B\x1\x4C\x1"+
				"\x8\x1\x4D\x1\x4E\x1\xFFFF\x1\x4F\x2\xFFFF\x1\x50\x1\xFFFF\x1\x9\x1"+
				"\xFFFF\x1\xA\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\xFFFF\x1\x57\x1\x58"+
				"\x1\xFFFF\x1\xB\x1\x59\x1\xFFFF\x1\x5A\x2\xFFFF\x1\x5B\x3\xFFFF\x1\x5C"+
				"\x9\xFFFF\x1\x5D\x2\xFFFF\x1\x5E\x1\x60\x1\x5F\x4\xFFFF\x1\x61\x4\xFFFF"+
				"\x1\xC\x4\xFFFF\x1\x62\x1\xFFFF\x1\x63\x3\xFFFF\x1\x64\x2\xFFFF\x1\x65"+
				"\x1\x66\x1\x67\x1\x68\x4\xFFFF\x1\xD\x4\xFFFF\x1\x69\x1\x6A\x1\x6B\x3"+
				"\xFFFF\x1\x7B\x1\xFFFF\x1\xE\x1\x6C\x1\x6E\x1\x6F\x1\x6D\x1\xFFFF\x1"+
				"\x70\x1\x71\x2\xFFFF\x1\x72\x1\x73\x1\x74\x1\xFFFF\x1\xF\x2\xFFFF\x1"+
				"\x75\x1\xFFFF\x1\x76\x1\x77\x2\xFFFF\x1\x79\x1\x78\x2\xFFFF\x1\x51\x1"+
				"\x7D\x1\x7E\x1\x7F\x3\xFFFF\x1\x10\x3\xFFFF\x1\x7A\x1\x80\x1\xFFFF\x1"+
				"\x7C\x1\xFFFF\x1\x127\x1\x81\x1\x82\x1\x83\x1\x85\x3\xFFFF\x1\x84\x2"+
				"\xFFFF\x1\x11\x1\xFFFF\x1\x12\x1\x86\x2\xFFFF\x1\x13\x2\xFFFF\x1\x14"+
				"\x1\x87\x1\x88\x3\xFFFF\x1\x34\x1\x89\x3\xFFFF\x1\x8B\x2\xFFFF\x1\x8C"+
				"\x1\xFFFF\x1\x8D\x1\xFFFF\x1\x92\x4\xFFFF\x1\x93\x1\x15\xA\xFFFF\x1"+
				"\x8A\x1\x8E\x1\x8F\x1\xFFFF\x1\x90\x1\x91\x4\xFFFF\x1\x94\x1\xFFFF\x1"+
				"\x16\x1\x17\x1\x95\x3\xFFFF\x1\x96\x2\xFFFF\x1\x97\x2\xFFFF\x1\x98\x4"+
				"\xFFFF\x1\x99\x1\x9A\x1\xFFFF\x1\x9B\x3\xFFFF\x1\x9C\x1\x9D\x2\xFFFF"+
				"\x1\x9E\x6\xFFFF\x1\xA0\x1\xA8\x1\xA1\x1\xA3\x1\xA4\x1\xA6\x1\xA2\x1"+
				"\xA7\x1\xA9\x1\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xFFFF\x1\xA5\x2\xFFFF"+
				"\x1\xAF\x1\xB0\x1\x9F\x1\xB1\x1\xB2\x1\xB3\x1\xB4\x1\xB5\x3\xFFFF\x1"+
				"\xB6\x1\xB7\x1\xB8\x2\xFFFF\x1\xB9\x2\xFFFF\x1\xBA\x2\xFFFF\x1\xBB\x1"+
				"\xFFFF\x1\xBD\x1\xFFFF\x1\xBC\x1\xFFFF\x1\xBE\x1\xFFFF\x1\xBF\x1\xC0"+
				"\x1\xC1\x1\xC2\x1\xFFFF\x1\xC3\x1\xC4\x1\xC5\x1\xFFFF\x1\xC6\x1\xC7"+
				"\x1\xC9\x1\xC8\x1\x18\x1\xCB\x1\xCC\x4\xFFFF\x1\xCA\x6\xFFFF\x1\xCD"+
				"\x1\xCE\x1\xCF\x1\xFFFF\x1\xD1\x1\xFFFF\x1\xD0\x1\x19\x3\xFFFF\x1\x1A"+
				"\x5\xFFFF\x1\x1B\x1\xD2\x1\xD3\x1\x1C\x1\xD4\x1\x1D\x1\xD5\x1\xD6\x1"+
				"\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xFFFF\x1\xDB\x1\xDC\x1\x1E\x3\xFFFF\x1"+
				"\x1F\x1\xDD\x1\xDE\x1\xFFFF\x1\xDF\x1\xFFFF\x1\xE0\x1\xE1\x1\xE2\x1"+
				"\xE3\x1\xFFFF\x1\xE4\x1\xE5\x1\xE6\x8\xFFFF\x1\xE7\x1\xE8\x1\xEA\x1"+
				"\xE9\x1\xEB\x2\xFFFF\x1\xEC\x1\xED\x1\xEE\x1\xFFFF\x1\xEF\x1\x20\x1"+
				"\xFFFF\x1\xF0\x1\x21\x1\xFFFF\x1\xF1\x1\xFFFF\x1\xF2\x1\xFFFF\x1\x22"+
				"\x1\xF3\x1\x23\x1\xFFFF\x1\xF4\x1\xFFFF\x1\xF5\x4\xFFFF\x1\x24\x1\xF6"+
				"\x1\xF7\x1\xFA\x1\xF8\x1\xF9\x1\x139\x1\xFB\x1\x25\x1\xFC\x3\xFFFF\x1"+
				"\xFD\x1\xFFFF\x1\x26\x4\xFFFF\x1\xFE\x1\xFF\x1\x27\x1\x100\x3\xFFFF"+
				"\x1\x102\x1\xFFFF\x1\x103\x1\x28\x1\x101\x1\x2A\x1\xFFFF\x1\x104\x1"+
				"\x29\x1\xFFFF\x1\x2B\x1\x105\x1\x106\x7\xFFFF\x1\x108\x1\x107\x1\xFFFF"+
				"\x1\x109\x1\xFFFF\x1\x10A\x1\xFFFF\x1\x2C\x1\xFFFF\x1\x10B\x1\x10C\x4"+
				"\xFFFF\x1\x2D\x1\x10D\x2\xFFFF\x1\x10E\x1\x10F\x1\x110\x1\x111\x1\x112"+
				"\x3\xFFFF\x1\x113\x1\x114\x1\x115\x1\x116\x3\xFFFF\x1\x117\x1\x118\x1"+
				"\x119\x1\x11A\x1\xFFFF\x1\x11B\x1\x11C\x1\xFFFF\x1\x123\x1\x120\x1\x121"+
				"\x1\x122\x5\xFFFF\x1\x11D\x1\x11E\x1\xFFFF\x1\x11F\x2\xFFFF\x1\x2E\x1"+
				"\x125\x1\x124\x1\x126\x1\x128\x1\x129\x1\xFFFF\x1\x12B\x1\x12A\x1\x2F"+
				"\x1\x30\x2\xFFFF\x1\x12C\x2\xFFFF\x1\x12D\x1\xFFFF\x1\x33\x2\xFFFF\x1"+
				"\x12E\x2\xFFFF\x1\x12F\x4\xFFFF\x1\x132\x5\xFFFF\x1\x130\x4\xFFFF\x1"+
				"\x131\x1\x134\x1\x133\x1\x135\x4\xFFFF\x1\x136\x1\x31\x2\xFFFF\x1\x137"+
				"\x1\x32\x1\xFFFF\x1\x138",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA128_eot = DFA.UnpackEncodedString(DFA128_eotS);
		private static readonly short[] DFA128_eof = DFA.UnpackEncodedString(DFA128_eofS);
		private static readonly char[] DFA128_min = DFA.UnpackEncodedStringToUnsignedChars(DFA128_minS);
		private static readonly char[] DFA128_max = DFA.UnpackEncodedStringToUnsignedChars(DFA128_maxS);
		private static readonly short[] DFA128_accept = DFA.UnpackEncodedString(DFA128_acceptS);
		private static readonly short[] DFA128_special = DFA.UnpackEncodedString(DFA128_specialS);
		private static readonly short[][] DFA128_transition;

		static DFA128()
		{
			int numStates = DFA128_transitionS.Length;
			DFA128_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA128_transition[i] = DFA.UnpackEncodedString(DFA128_transitionS[i]);
			}
		}

		public DFA128( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 128;
			this.eot = DFA128_eot;
			this.eof = DFA128_eof;
			this.min = DFA128_min;
			this.max = DFA128_max;
			this.accept = DFA128_accept;
			this.special = DFA128_special;
			this.transition = DFA128_transition;
		}

		public override string Description { get { return "763:3: ({...}? => (names+= ident ( COMMA names+= ident )* )? |names+= ident ( COMMA names+= ident )* )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition128(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA128_0 = input.LA(1);


				int index128_0 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA128_0==ASCII)) {s = 1;}

				else if ((LA128_0==BACKUP)) {s = 2;}

				else if ((LA128_0==BEGIN)) {s = 3;}

				else if ((LA128_0==BYTE)) {s = 4;}

				else if ((LA128_0==CACHE)) {s = 5;}

				else if ((LA128_0==CHARSET)) {s = 6;}

				else if ((LA128_0==CHECKSUM)) {s = 7;}

				else if ((LA128_0==CLOSE)) {s = 8;}

				else if ((LA128_0==COMMENT)) {s = 9;}

				else if ((LA128_0==COMMIT)) {s = 10;}

				else if ((LA128_0==CONTAINS)) {s = 11;}

				else if ((LA128_0==DEALLOCATE)) {s = 12;}

				else if ((LA128_0==DO)) {s = 13;}

				else if ((LA128_0==END)) {s = 14;}

				else if ((LA128_0==EXECUTE)) {s = 15;}

				else if ((LA128_0==FLUSH)) {s = 16;}

				else if ((LA128_0==GROUP)) {s = 17;}

				else if ((LA128_0==HANDLER)) {s = 18;}

				else if ((LA128_0==HELP)) {s = 19;}

				else if ((LA128_0==HOST)) {s = 20;}

				else if ((LA128_0==INSTALL)) {s = 21;}

				else if ((LA128_0==LABEL)) {s = 22;}

				else if ((LA128_0==LANGUAGE)) {s = 23;}

				else if ((LA128_0==NO)) {s = 24;}

				else if ((LA128_0==OPEN)) {s = 25;}

				else if ((LA128_0==OPTIONS)) {s = 26;}

				else if ((LA128_0==OWNER)) {s = 27;}

				else if ((LA128_0==PARSER)) {s = 28;}

				else if ((LA128_0==PARTITION)) {s = 29;}

				else if ((LA128_0==PORT)) {s = 30;}

				else if ((LA128_0==PREPARE)) {s = 31;}

				else if ((LA128_0==REMOVE)) {s = 32;}

				else if ((LA128_0==REPAIR)) {s = 33;}

				else if ((LA128_0==RESET)) {s = 34;}

				else if ((LA128_0==RESTORE)) {s = 35;}

				else if ((LA128_0==ROLLBACK)) {s = 36;}

				else if ((LA128_0==SAVEPOINT)) {s = 37;}

				else if ((LA128_0==SECURITY)) {s = 38;}

				else if ((LA128_0==SERVER)) {s = 39;}

				else if ((LA128_0==SIGNED)) {s = 40;}

				else if ((LA128_0==SOCKET)) {s = 41;}

				else if ((LA128_0==SLAVE)) {s = 42;}

				else if ((LA128_0==SONAME)) {s = 43;}

				else if ((LA128_0==START)) {s = 44;}

				else if ((LA128_0==STOP)) {s = 45;}

				else if ((LA128_0==TRUNCATE)) {s = 46;}

				else if ((LA128_0==UNICODE)) {s = 47;}

				else if ((LA128_0==UNINSTALL)) {s = 48;}

				else if ((LA128_0==WRAPPER)) {s = 49;}

				else if ((LA128_0==XA)) {s = 50;}

				else if ((LA128_0==UPGRADE)) {s = 51;}

				else if ((LA128_0==ID)) {s = 52;}

				else if ((LA128_0==ACTION)) {s = 53;}

				else if ((LA128_0==ADDDATE)) {s = 54;}

				else if ((LA128_0==AFTER)) {s = 55;}

				else if ((LA128_0==AGAINST)) {s = 56;}

				else if ((LA128_0==AGGREGATE)) {s = 57;}

				else if ((LA128_0==ALGORITHM)) {s = 58;}

				else if ((LA128_0==ANY)) {s = 59;}

				else if ((LA128_0==AT)) {s = 60;}

				else if ((LA128_0==AUTHORS)) {s = 61;}

				else if ((LA128_0==AUTO_INCREMENT)) {s = 62;}

				else if ((LA128_0==AUTOEXTEND_SIZE)) {s = 63;}

				else if ((LA128_0==AVG_ROW_LENGTH)) {s = 64;}

				else if ((LA128_0==AVG)) {s = 65;}

				else if ((LA128_0==BINLOG)) {s = 66;}

				else if ((LA128_0==BIT)) {s = 67;}

				else if ((LA128_0==BLOCK)) {s = 68;}

				else if ((LA128_0==BOOL)) {s = 69;}

				else if ((LA128_0==BOOLEAN)) {s = 70;}

				else if ((LA128_0==BTREE)) {s = 71;}

				else if ((LA128_0==CASCADED)) {s = 72;}

				else if ((LA128_0==CHAIN)) {s = 73;}

				else if ((LA128_0==CHANGED)) {s = 74;}

				else if ((LA128_0==CIPHER)) {s = 75;}

				else if ((LA128_0==CLIENT)) {s = 76;}

				else if ((LA128_0==COALESCE)) {s = 77;}

				else if ((LA128_0==CODE)) {s = 78;}

				else if ((LA128_0==COLLATION)) {s = 79;}

				else if ((LA128_0==COLUMNS)) {s = 80;}

				else if ((LA128_0==FIELDS)) {s = 81;}

				else if ((LA128_0==COMMITTED)) {s = 82;}

				else if ((LA128_0==COMPACT)) {s = 83;}

				else if ((LA128_0==COMPLETION)) {s = 84;}

				else if ((LA128_0==COMPRESSED)) {s = 85;}

				else if ((LA128_0==CONCURRENT)) {s = 86;}

				else if ((LA128_0==CONNECTION)) {s = 87;}

				else if ((LA128_0==CONSISTENT)) {s = 88;}

				else if ((LA128_0==CONTEXT)) {s = 89;}

				else if ((LA128_0==CONTRIBUTORS)) {s = 90;}

				else if ((LA128_0==CPU)) {s = 91;}

				else if ((LA128_0==CUBE)) {s = 92;}

				else if ((LA128_0==DATA)) {s = 93;}

				else if ((LA128_0==DATAFILE)) {s = 94;}

				else if ((LA128_0==DATETIME)) {s = 95;}

				else if ((LA128_0==DATE)) {s = 96;}

				else if ((LA128_0==DAY)) {s = 97;}

				else if ((LA128_0==DEFINER)) {s = 98;}

				else if ((LA128_0==DELAY_KEY_WRITE)) {s = 99;}

				else if ((LA128_0==DES_KEY_FILE)) {s = 100;}

				else if ((LA128_0==DIRECTORY)) {s = 101;}

				else if ((LA128_0==DISABLE)) {s = 102;}

				else if ((LA128_0==DISCARD)) {s = 103;}

				else if ((LA128_0==DISK)) {s = 104;}

				else if ((LA128_0==DUMPFILE)) {s = 105;}

				else if ((LA128_0==DUPLICATE)) {s = 106;}

				else if ((LA128_0==DYNAMIC)) {s = 107;}

				else if ((LA128_0==ENDS)) {s = 108;}

				else if ((LA128_0==ENUM)) {s = 109;}

				else if ((LA128_0==ENGINE)) {s = 110;}

				else if ((LA128_0==ENGINES)) {s = 111;}

				else if ((LA128_0==ERRORS)) {s = 112;}

				else if ((LA128_0==ESCAPE)) {s = 113;}

				else if ((LA128_0==EVENT)) {s = 114;}

				else if ((LA128_0==EVENTS)) {s = 115;}

				else if ((LA128_0==EVERY)) {s = 116;}

				else if ((LA128_0==EXPANSION)) {s = 117;}

				else if ((LA128_0==EXTENDED)) {s = 118;}

				else if ((LA128_0==EXTENT_SIZE)) {s = 119;}

				else if ((LA128_0==FAULTS)) {s = 120;}

				else if ((LA128_0==FAST)) {s = 121;}

				else if ((LA128_0==FOUND)) {s = 122;}

				else if ((LA128_0==ENABLE)) {s = 123;}

				else if ((LA128_0==FULL)) {s = 124;}

				else if ((LA128_0==FILE)) {s = 125;}

				else if ((LA128_0==FIRST)) {s = 126;}

				else if ((LA128_0==FIXED)) {s = 127;}

				else if ((LA128_0==FRAC_SECOND)) {s = 128;}

				else if ((LA128_0==GEOMETRY)) {s = 129;}

				else if ((LA128_0==GEOMETRYCOLLECTION)) {s = 130;}

				else if ((LA128_0==GET_FORMAT)) {s = 131;}

				else if ((LA128_0==GRANTS)) {s = 132;}

				else if ((LA128_0==GLOBAL)) {s = 133;}

				else if ((LA128_0==HASH)) {s = 134;}

				else if ((LA128_0==HOSTS)) {s = 135;}

				else if ((LA128_0==HOUR)) {s = 136;}

				else if ((LA128_0==IDENTIFIED)) {s = 137;}

				else if ((LA128_0==INVOKER)) {s = 138;}

				else if ((LA128_0==IMPORT)) {s = 139;}

				else if ((LA128_0==INDEXES)) {s = 140;}

				else if ((LA128_0==INITIAL_SIZE)) {s = 141;}

				else if ((LA128_0==IO)) {s = 142;}

				else if ((LA128_0==IPC)) {s = 143;}

				else if ((LA128_0==ISOLATION)) {s = 144;}

				else if ((LA128_0==ISSUER)) {s = 145;}

				else if ((LA128_0==INNOBASE)) {s = 146;}

				else if ((LA128_0==INSERT_METHOD)) {s = 147;}

				else if ((LA128_0==KEY_BLOCK_SIZE)) {s = 148;}

				else if ((LA128_0==LAST)) {s = 149;}

				else if ((LA128_0==LEAVES)) {s = 150;}

				else if ((LA128_0==LESS)) {s = 151;}

				else if ((LA128_0==LEVEL)) {s = 152;}

				else if ((LA128_0==LINESTRING)) {s = 153;}

				else if ((LA128_0==LIST)) {s = 154;}

				else if ((LA128_0==LOCAL)) {s = 155;}

				else if ((LA128_0==LOCKS)) {s = 156;}

				else if ((LA128_0==LOGFILE)) {s = 157;}

				else if ((LA128_0==LOGS)) {s = 158;}

				else if ((LA128_0==MAX_ROWS)) {s = 159;}

				else if ((LA128_0==MASTER)) {s = 160;}

				else if ((LA128_0==MASTER_HOST)) {s = 161;}

				else if ((LA128_0==MASTER_PORT)) {s = 162;}

				else if ((LA128_0==MASTER_LOG_FILE)) {s = 163;}

				else if ((LA128_0==MASTER_LOG_POS)) {s = 164;}

				else if ((LA128_0==MASTER_USER)) {s = 165;}

				else if ((LA128_0==MASTER_PASSWORD)) {s = 166;}

				else if ((LA128_0==MASTER_SERVER_ID)) {s = 167;}

				else if ((LA128_0==MASTER_CONNECT_RETRY)) {s = 168;}

				else if ((LA128_0==MASTER_SSL)) {s = 169;}

				else if ((LA128_0==MASTER_SSL_CA)) {s = 170;}

				else if ((LA128_0==MASTER_SSL_CAPATH)) {s = 171;}

				else if ((LA128_0==MASTER_SSL_CERT)) {s = 172;}

				else if ((LA128_0==MASTER_SSL_CIPHER)) {s = 173;}

				else if ((LA128_0==MASTER_SSL_KEY)) {s = 174;}

				else if ((LA128_0==MAX_CONNECTIONS_PER_HOUR)) {s = 175;}

				else if ((LA128_0==MAX_QUERIES_PER_HOUR)) {s = 176;}

				else if ((LA128_0==MAX_SIZE)) {s = 177;}

				else if ((LA128_0==MAX_UPDATES_PER_HOUR)) {s = 178;}

				else if ((LA128_0==MAX_USER_CONNECTIONS)) {s = 179;}

				else if ((LA128_0==MAX_VALUE)) {s = 180;}

				else if ((LA128_0==MEDIUM)) {s = 181;}

				else if ((LA128_0==MEMORY)) {s = 182;}

				else if ((LA128_0==MERGE)) {s = 183;}

				else if ((LA128_0==MICROSECOND)) {s = 184;}

				else if ((LA128_0==MIGRATE)) {s = 185;}

				else if ((LA128_0==MINUTE)) {s = 186;}

				else if ((LA128_0==MIN_ROWS)) {s = 187;}

				else if ((LA128_0==MODIFY)) {s = 188;}

				else if ((LA128_0==MODE)) {s = 189;}

				else if ((LA128_0==MONTH)) {s = 190;}

				else if ((LA128_0==MULTILINESTRING)) {s = 191;}

				else if ((LA128_0==MULTIPOINT)) {s = 192;}

				else if ((LA128_0==MULTIPOLYGON)) {s = 193;}

				else if ((LA128_0==MUTEX)) {s = 194;}

				else if ((LA128_0==NAME)) {s = 195;}

				else if ((LA128_0==NAMES)) {s = 196;}

				else if ((LA128_0==NATIONAL)) {s = 197;}

				else if ((LA128_0==NCHAR)) {s = 198;}

				else if ((LA128_0==NDBCLUSTER)) {s = 199;}

				else if ((LA128_0==NEXT)) {s = 200;}

				else if ((LA128_0==NEW)) {s = 201;}

				else if ((LA128_0==NO_WAIT)) {s = 202;}

				else if ((LA128_0==NODEGROUP)) {s = 203;}

				else if ((LA128_0==NONE)) {s = 204;}

				else if ((LA128_0==NVARCHAR)) {s = 205;}

				else if ((LA128_0==OFFSET)) {s = 206;}

				else if ((LA128_0==OLD_PASSWORD)) {s = 207;}

				else if ((LA128_0==ONE_SHOT)) {s = 208;}

				else if ((LA128_0==ONE)) {s = 209;}

				else if ((LA128_0==PACK_KEYS)) {s = 210;}

				else if ((LA128_0==PAGE)) {s = 211;}

				else if ((LA128_0==PARTIAL)) {s = 212;}

				else if ((LA128_0==PARTITIONING)) {s = 213;}

				else if ((LA128_0==PARTITIONS)) {s = 214;}

				else if ((LA128_0==PASSWORD)) {s = 215;}

				else if ((LA128_0==PHASE)) {s = 216;}

				else if ((LA128_0==PLUGIN)) {s = 217;}

				else if ((LA128_0==PLUGINS)) {s = 218;}

				else if ((LA128_0==POINT)) {s = 219;}

				else if ((LA128_0==POLYGON)) {s = 220;}

				else if ((LA128_0==PRESERVE)) {s = 221;}

				else if ((LA128_0==PREV)) {s = 222;}

				else if ((LA128_0==PRIVILEGES)) {s = 223;}

				else if ((LA128_0==PROCESS)) {s = 224;}

				else if ((LA128_0==PROCESSLIST)) {s = 225;}

				else if ((LA128_0==PROFILE)) {s = 226;}

				else if ((LA128_0==PROFILES)) {s = 227;}

				else if ((LA128_0==QUARTER)) {s = 228;}

				else if ((LA128_0==QUERY)) {s = 229;}

				else if ((LA128_0==QUICK)) {s = 230;}

				else if ((LA128_0==REBUILD)) {s = 231;}

				else if ((LA128_0==RECOVER)) {s = 232;}

				else if ((LA128_0==REDO_BUFFER_SIZE)) {s = 233;}

				else if ((LA128_0==REDOFILE)) {s = 234;}

				else if ((LA128_0==REDUNDANT)) {s = 235;}

				else if ((LA128_0==RELAY_LOG_FILE)) {s = 236;}

				else if ((LA128_0==RELAY_LOG_POS)) {s = 237;}

				else if ((LA128_0==RELAY_THREAD)) {s = 238;}

				else if ((LA128_0==RELOAD)) {s = 239;}

				else if ((LA128_0==REORGANIZE)) {s = 240;}

				else if ((LA128_0==REPEATABLE)) {s = 241;}

				else if ((LA128_0==REPLICATION)) {s = 242;}

				else if ((LA128_0==RESOURCES)) {s = 243;}

				else if ((LA128_0==RESUME)) {s = 244;}

				else if ((LA128_0==RETURNS)) {s = 245;}

				else if ((LA128_0==ROLLUP)) {s = 246;}

				else if ((LA128_0==ROUTINE)) {s = 247;}

				else if ((LA128_0==ROWS)) {s = 248;}

				else if ((LA128_0==ROW_FORMAT)) {s = 249;}

				else if ((LA128_0==ROW)) {s = 250;}

				else if ((LA128_0==RTREE)) {s = 251;}

				else if ((LA128_0==SCHEDULE)) {s = 252;}

				else if ((LA128_0==SECOND)) {s = 253;}

				else if ((LA128_0==SERIAL)) {s = 254;}

				else if ((LA128_0==SERIALIZABLE)) {s = 255;}

				else if ((LA128_0==SESSION)) {s = 256;}

				else if ((LA128_0==SIMPLE)) {s = 257;}

				else if ((LA128_0==SHARE)) {s = 258;}

				else if ((LA128_0==SHUTDOWN)) {s = 259;}

				else if ((LA128_0==SNAPSHOT)) {s = 260;}

				else if ((LA128_0==SOUNDS)) {s = 261;}

				else if ((LA128_0==SOURCE)) {s = 262;}

				else if ((LA128_0==SQL_CACHE)) {s = 263;}

				else if ((LA128_0==SQL_BUFFER_RESULT)) {s = 264;}

				else if ((LA128_0==SQL_NO_CACHE)) {s = 265;}

				else if ((LA128_0==SQL_THREAD)) {s = 266;}

				else if ((LA128_0==STARTS)) {s = 267;}

				else if ((LA128_0==STATUS)) {s = 268;}

				else if ((LA128_0==STORAGE)) {s = 269;}

				else if ((LA128_0==STRING_KEYWORD)) {s = 270;}

				else if ((LA128_0==SUBDATE)) {s = 271;}

				else if ((LA128_0==SUBJECT)) {s = 272;}

				else if ((LA128_0==SUBPARTITION)) {s = 273;}

				else if ((LA128_0==SUBPARTITIONS)) {s = 274;}

				else if ((LA128_0==SUPER)) {s = 275;}

				else if ((LA128_0==SUSPEND)) {s = 276;}

				else if ((LA128_0==SWAPS)) {s = 277;}

				else if ((LA128_0==SWITCHES)) {s = 278;}

				else if ((LA128_0==TABLES)) {s = 279;}

				else if ((LA128_0==TABLESPACE)) {s = 280;}

				else if ((LA128_0==TEMPORARY)) {s = 281;}

				else if ((LA128_0==TEMPTABLE)) {s = 282;}

				else if ((LA128_0==TEXT)) {s = 283;}

				else if ((LA128_0==THAN)) {s = 284;}

				else if ((LA128_0==TRANSACTION)) {s = 285;}

				else if ((LA128_0==TRANSACTIONAL)) {s = 286;}

				else if ((LA128_0==TRIGGERS)) {s = 287;}

				else if ((LA128_0==TIMESTAMP)) {s = 288;}

				else if ((LA128_0==TIMESTAMP_ADD)) {s = 289;}

				else if ((LA128_0==TIMESTAMP_DIFF)) {s = 290;}

				else if ((LA128_0==TIME)) {s = 291;}

				else if ((LA128_0==TYPES)) {s = 292;}

				else if ((LA128_0==TYPE)) {s = 293;}

				else if ((LA128_0==UDF_RETURNS)) {s = 294;}

				else if ((LA128_0==FUNCTION)) {s = 295;}

				else if ((LA128_0==UNCOMMITTED)) {s = 296;}

				else if ((LA128_0==UNDEFINED)) {s = 297;}

				else if ((LA128_0==UNDO_BUFFER_SIZE)) {s = 298;}

				else if ((LA128_0==UNDOFILE)) {s = 299;}

				else if ((LA128_0==UNKNOWN)) {s = 300;}

				else if ((LA128_0==UNTIL)) {s = 301;}

				else if ((LA128_0==USER)) {s = 302;}

				else if ((LA128_0==USE_FRM)) {s = 303;}

				else if ((LA128_0==VARIABLES)) {s = 304;}

				else if ((LA128_0==VIEW)) {s = 305;}

				else if ((LA128_0==VALUE)) {s = 306;}

				else if ((LA128_0==WARNINGS)) {s = 307;}

				else if ((LA128_0==WAIT)) {s = 308;}

				else if ((LA128_0==WEEK)) {s = 309;}

				else if ((LA128_0==WORK)) {s = 310;}

				else if ((LA128_0==X509)) {s = 311;}

				else if ((LA128_0==YEAR)) {s = 312;}

				else if ((LA128_0==RPAREN) && ((index_hint_stack.Peek().namesOptional == true))) {s = 313;}


				input.Seek(index128_0);
				if (s >= 0) return s;
				break;
			case 1:
				int LA128_1 = input.LA(1);


				int index128_1 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_1);
				if (s >= 0) return s;
				break;
			case 2:
				int LA128_2 = input.LA(1);


				int index128_2 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_2);
				if (s >= 0) return s;
				break;
			case 3:
				int LA128_3 = input.LA(1);


				int index128_3 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_3);
				if (s >= 0) return s;
				break;
			case 4:
				int LA128_4 = input.LA(1);


				int index128_4 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_4);
				if (s >= 0) return s;
				break;
			case 5:
				int LA128_5 = input.LA(1);


				int index128_5 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_5);
				if (s >= 0) return s;
				break;
			case 6:
				int LA128_6 = input.LA(1);


				int index128_6 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_6);
				if (s >= 0) return s;
				break;
			case 7:
				int LA128_7 = input.LA(1);


				int index128_7 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_7);
				if (s >= 0) return s;
				break;
			case 8:
				int LA128_8 = input.LA(1);


				int index128_8 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_8);
				if (s >= 0) return s;
				break;
			case 9:
				int LA128_9 = input.LA(1);


				int index128_9 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_9);
				if (s >= 0) return s;
				break;
			case 10:
				int LA128_10 = input.LA(1);


				int index128_10 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_10);
				if (s >= 0) return s;
				break;
			case 11:
				int LA128_11 = input.LA(1);


				int index128_11 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_11);
				if (s >= 0) return s;
				break;
			case 12:
				int LA128_12 = input.LA(1);


				int index128_12 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_12);
				if (s >= 0) return s;
				break;
			case 13:
				int LA128_13 = input.LA(1);


				int index128_13 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_13);
				if (s >= 0) return s;
				break;
			case 14:
				int LA128_14 = input.LA(1);


				int index128_14 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_14);
				if (s >= 0) return s;
				break;
			case 15:
				int LA128_15 = input.LA(1);


				int index128_15 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_15);
				if (s >= 0) return s;
				break;
			case 16:
				int LA128_16 = input.LA(1);


				int index128_16 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_16);
				if (s >= 0) return s;
				break;
			case 17:
				int LA128_17 = input.LA(1);


				int index128_17 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_17);
				if (s >= 0) return s;
				break;
			case 18:
				int LA128_18 = input.LA(1);


				int index128_18 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_18);
				if (s >= 0) return s;
				break;
			case 19:
				int LA128_19 = input.LA(1);


				int index128_19 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_19);
				if (s >= 0) return s;
				break;
			case 20:
				int LA128_20 = input.LA(1);


				int index128_20 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_20);
				if (s >= 0) return s;
				break;
			case 21:
				int LA128_21 = input.LA(1);


				int index128_21 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_21);
				if (s >= 0) return s;
				break;
			case 22:
				int LA128_22 = input.LA(1);


				int index128_22 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_22);
				if (s >= 0) return s;
				break;
			case 23:
				int LA128_23 = input.LA(1);


				int index128_23 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_23);
				if (s >= 0) return s;
				break;
			case 24:
				int LA128_24 = input.LA(1);


				int index128_24 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_24);
				if (s >= 0) return s;
				break;
			case 25:
				int LA128_25 = input.LA(1);


				int index128_25 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_25);
				if (s >= 0) return s;
				break;
			case 26:
				int LA128_26 = input.LA(1);


				int index128_26 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_26);
				if (s >= 0) return s;
				break;
			case 27:
				int LA128_27 = input.LA(1);


				int index128_27 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_27);
				if (s >= 0) return s;
				break;
			case 28:
				int LA128_28 = input.LA(1);


				int index128_28 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_28);
				if (s >= 0) return s;
				break;
			case 29:
				int LA128_29 = input.LA(1);


				int index128_29 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_29);
				if (s >= 0) return s;
				break;
			case 30:
				int LA128_30 = input.LA(1);


				int index128_30 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_30);
				if (s >= 0) return s;
				break;
			case 31:
				int LA128_31 = input.LA(1);


				int index128_31 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_31);
				if (s >= 0) return s;
				break;
			case 32:
				int LA128_32 = input.LA(1);


				int index128_32 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_32);
				if (s >= 0) return s;
				break;
			case 33:
				int LA128_33 = input.LA(1);


				int index128_33 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_33);
				if (s >= 0) return s;
				break;
			case 34:
				int LA128_34 = input.LA(1);


				int index128_34 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_34);
				if (s >= 0) return s;
				break;
			case 35:
				int LA128_35 = input.LA(1);


				int index128_35 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_35);
				if (s >= 0) return s;
				break;
			case 36:
				int LA128_36 = input.LA(1);


				int index128_36 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_36);
				if (s >= 0) return s;
				break;
			case 37:
				int LA128_37 = input.LA(1);


				int index128_37 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_37);
				if (s >= 0) return s;
				break;
			case 38:
				int LA128_38 = input.LA(1);


				int index128_38 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_38);
				if (s >= 0) return s;
				break;
			case 39:
				int LA128_39 = input.LA(1);


				int index128_39 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_39);
				if (s >= 0) return s;
				break;
			case 40:
				int LA128_40 = input.LA(1);


				int index128_40 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_40);
				if (s >= 0) return s;
				break;
			case 41:
				int LA128_41 = input.LA(1);


				int index128_41 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_41);
				if (s >= 0) return s;
				break;
			case 42:
				int LA128_42 = input.LA(1);


				int index128_42 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_42);
				if (s >= 0) return s;
				break;
			case 43:
				int LA128_43 = input.LA(1);


				int index128_43 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_43);
				if (s >= 0) return s;
				break;
			case 44:
				int LA128_44 = input.LA(1);


				int index128_44 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_44);
				if (s >= 0) return s;
				break;
			case 45:
				int LA128_45 = input.LA(1);


				int index128_45 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_45);
				if (s >= 0) return s;
				break;
			case 46:
				int LA128_46 = input.LA(1);


				int index128_46 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_46);
				if (s >= 0) return s;
				break;
			case 47:
				int LA128_47 = input.LA(1);


				int index128_47 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_47);
				if (s >= 0) return s;
				break;
			case 48:
				int LA128_48 = input.LA(1);


				int index128_48 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_48);
				if (s >= 0) return s;
				break;
			case 49:
				int LA128_49 = input.LA(1);


				int index128_49 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_49);
				if (s >= 0) return s;
				break;
			case 50:
				int LA128_50 = input.LA(1);


				int index128_50 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_50);
				if (s >= 0) return s;
				break;
			case 51:
				int LA128_51 = input.LA(1);


				int index128_51 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_51);
				if (s >= 0) return s;
				break;
			case 52:
				int LA128_52 = input.LA(1);


				int index128_52 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_52);
				if (s >= 0) return s;
				break;
			case 53:
				int LA128_53 = input.LA(1);


				int index128_53 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_53);
				if (s >= 0) return s;
				break;
			case 54:
				int LA128_54 = input.LA(1);


				int index128_54 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_54);
				if (s >= 0) return s;
				break;
			case 55:
				int LA128_55 = input.LA(1);


				int index128_55 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_55);
				if (s >= 0) return s;
				break;
			case 56:
				int LA128_56 = input.LA(1);


				int index128_56 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_56);
				if (s >= 0) return s;
				break;
			case 57:
				int LA128_57 = input.LA(1);


				int index128_57 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_57);
				if (s >= 0) return s;
				break;
			case 58:
				int LA128_58 = input.LA(1);


				int index128_58 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_58);
				if (s >= 0) return s;
				break;
			case 59:
				int LA128_59 = input.LA(1);


				int index128_59 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_59);
				if (s >= 0) return s;
				break;
			case 60:
				int LA128_60 = input.LA(1);


				int index128_60 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_60);
				if (s >= 0) return s;
				break;
			case 61:
				int LA128_61 = input.LA(1);


				int index128_61 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_61);
				if (s >= 0) return s;
				break;
			case 62:
				int LA128_62 = input.LA(1);


				int index128_62 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_62);
				if (s >= 0) return s;
				break;
			case 63:
				int LA128_63 = input.LA(1);


				int index128_63 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_63);
				if (s >= 0) return s;
				break;
			case 64:
				int LA128_64 = input.LA(1);


				int index128_64 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_64);
				if (s >= 0) return s;
				break;
			case 65:
				int LA128_65 = input.LA(1);


				int index128_65 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_65);
				if (s >= 0) return s;
				break;
			case 66:
				int LA128_66 = input.LA(1);


				int index128_66 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_66);
				if (s >= 0) return s;
				break;
			case 67:
				int LA128_67 = input.LA(1);


				int index128_67 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_67);
				if (s >= 0) return s;
				break;
			case 68:
				int LA128_68 = input.LA(1);


				int index128_68 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_68);
				if (s >= 0) return s;
				break;
			case 69:
				int LA128_69 = input.LA(1);


				int index128_69 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_69);
				if (s >= 0) return s;
				break;
			case 70:
				int LA128_70 = input.LA(1);


				int index128_70 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_70);
				if (s >= 0) return s;
				break;
			case 71:
				int LA128_71 = input.LA(1);


				int index128_71 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_71);
				if (s >= 0) return s;
				break;
			case 72:
				int LA128_72 = input.LA(1);


				int index128_72 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_72);
				if (s >= 0) return s;
				break;
			case 73:
				int LA128_73 = input.LA(1);


				int index128_73 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_73);
				if (s >= 0) return s;
				break;
			case 74:
				int LA128_74 = input.LA(1);


				int index128_74 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_74);
				if (s >= 0) return s;
				break;
			case 75:
				int LA128_75 = input.LA(1);


				int index128_75 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_75);
				if (s >= 0) return s;
				break;
			case 76:
				int LA128_76 = input.LA(1);


				int index128_76 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_76);
				if (s >= 0) return s;
				break;
			case 77:
				int LA128_77 = input.LA(1);


				int index128_77 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_77);
				if (s >= 0) return s;
				break;
			case 78:
				int LA128_78 = input.LA(1);


				int index128_78 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_78);
				if (s >= 0) return s;
				break;
			case 79:
				int LA128_79 = input.LA(1);


				int index128_79 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_79);
				if (s >= 0) return s;
				break;
			case 80:
				int LA128_80 = input.LA(1);


				int index128_80 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_80);
				if (s >= 0) return s;
				break;
			case 81:
				int LA128_81 = input.LA(1);


				int index128_81 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_81);
				if (s >= 0) return s;
				break;
			case 82:
				int LA128_82 = input.LA(1);


				int index128_82 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_82);
				if (s >= 0) return s;
				break;
			case 83:
				int LA128_83 = input.LA(1);


				int index128_83 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_83);
				if (s >= 0) return s;
				break;
			case 84:
				int LA128_84 = input.LA(1);


				int index128_84 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_84);
				if (s >= 0) return s;
				break;
			case 85:
				int LA128_85 = input.LA(1);


				int index128_85 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_85);
				if (s >= 0) return s;
				break;
			case 86:
				int LA128_86 = input.LA(1);


				int index128_86 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_86);
				if (s >= 0) return s;
				break;
			case 87:
				int LA128_87 = input.LA(1);


				int index128_87 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_87);
				if (s >= 0) return s;
				break;
			case 88:
				int LA128_88 = input.LA(1);


				int index128_88 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_88);
				if (s >= 0) return s;
				break;
			case 89:
				int LA128_89 = input.LA(1);


				int index128_89 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_89);
				if (s >= 0) return s;
				break;
			case 90:
				int LA128_90 = input.LA(1);


				int index128_90 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_90);
				if (s >= 0) return s;
				break;
			case 91:
				int LA128_91 = input.LA(1);


				int index128_91 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_91);
				if (s >= 0) return s;
				break;
			case 92:
				int LA128_92 = input.LA(1);


				int index128_92 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_92);
				if (s >= 0) return s;
				break;
			case 93:
				int LA128_93 = input.LA(1);


				int index128_93 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_93);
				if (s >= 0) return s;
				break;
			case 94:
				int LA128_94 = input.LA(1);


				int index128_94 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_94);
				if (s >= 0) return s;
				break;
			case 95:
				int LA128_95 = input.LA(1);


				int index128_95 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_95);
				if (s >= 0) return s;
				break;
			case 96:
				int LA128_96 = input.LA(1);


				int index128_96 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_96);
				if (s >= 0) return s;
				break;
			case 97:
				int LA128_97 = input.LA(1);


				int index128_97 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_97);
				if (s >= 0) return s;
				break;
			case 98:
				int LA128_98 = input.LA(1);


				int index128_98 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_98);
				if (s >= 0) return s;
				break;
			case 99:
				int LA128_99 = input.LA(1);


				int index128_99 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_99);
				if (s >= 0) return s;
				break;
			case 100:
				int LA128_100 = input.LA(1);


				int index128_100 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_100);
				if (s >= 0) return s;
				break;
			case 101:
				int LA128_101 = input.LA(1);


				int index128_101 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_101);
				if (s >= 0) return s;
				break;
			case 102:
				int LA128_102 = input.LA(1);


				int index128_102 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_102);
				if (s >= 0) return s;
				break;
			case 103:
				int LA128_103 = input.LA(1);


				int index128_103 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_103);
				if (s >= 0) return s;
				break;
			case 104:
				int LA128_104 = input.LA(1);


				int index128_104 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_104);
				if (s >= 0) return s;
				break;
			case 105:
				int LA128_105 = input.LA(1);


				int index128_105 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_105);
				if (s >= 0) return s;
				break;
			case 106:
				int LA128_106 = input.LA(1);


				int index128_106 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_106);
				if (s >= 0) return s;
				break;
			case 107:
				int LA128_107 = input.LA(1);


				int index128_107 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_107);
				if (s >= 0) return s;
				break;
			case 108:
				int LA128_108 = input.LA(1);


				int index128_108 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_108);
				if (s >= 0) return s;
				break;
			case 109:
				int LA128_109 = input.LA(1);


				int index128_109 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_109);
				if (s >= 0) return s;
				break;
			case 110:
				int LA128_110 = input.LA(1);


				int index128_110 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_110);
				if (s >= 0) return s;
				break;
			case 111:
				int LA128_111 = input.LA(1);


				int index128_111 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_111);
				if (s >= 0) return s;
				break;
			case 112:
				int LA128_112 = input.LA(1);


				int index128_112 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_112);
				if (s >= 0) return s;
				break;
			case 113:
				int LA128_113 = input.LA(1);


				int index128_113 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_113);
				if (s >= 0) return s;
				break;
			case 114:
				int LA128_114 = input.LA(1);


				int index128_114 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_114);
				if (s >= 0) return s;
				break;
			case 115:
				int LA128_115 = input.LA(1);


				int index128_115 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_115);
				if (s >= 0) return s;
				break;
			case 116:
				int LA128_116 = input.LA(1);


				int index128_116 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_116);
				if (s >= 0) return s;
				break;
			case 117:
				int LA128_117 = input.LA(1);


				int index128_117 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_117);
				if (s >= 0) return s;
				break;
			case 118:
				int LA128_118 = input.LA(1);


				int index128_118 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_118);
				if (s >= 0) return s;
				break;
			case 119:
				int LA128_119 = input.LA(1);


				int index128_119 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_119);
				if (s >= 0) return s;
				break;
			case 120:
				int LA128_120 = input.LA(1);


				int index128_120 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_120);
				if (s >= 0) return s;
				break;
			case 121:
				int LA128_121 = input.LA(1);


				int index128_121 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_121);
				if (s >= 0) return s;
				break;
			case 122:
				int LA128_122 = input.LA(1);


				int index128_122 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_122);
				if (s >= 0) return s;
				break;
			case 123:
				int LA128_123 = input.LA(1);


				int index128_123 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_123);
				if (s >= 0) return s;
				break;
			case 124:
				int LA128_124 = input.LA(1);


				int index128_124 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_124);
				if (s >= 0) return s;
				break;
			case 125:
				int LA128_125 = input.LA(1);


				int index128_125 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_125);
				if (s >= 0) return s;
				break;
			case 126:
				int LA128_126 = input.LA(1);


				int index128_126 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_126);
				if (s >= 0) return s;
				break;
			case 127:
				int LA128_127 = input.LA(1);


				int index128_127 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_127);
				if (s >= 0) return s;
				break;
			case 128:
				int LA128_128 = input.LA(1);


				int index128_128 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_128);
				if (s >= 0) return s;
				break;
			case 129:
				int LA128_129 = input.LA(1);


				int index128_129 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_129);
				if (s >= 0) return s;
				break;
			case 130:
				int LA128_130 = input.LA(1);


				int index128_130 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_130);
				if (s >= 0) return s;
				break;
			case 131:
				int LA128_131 = input.LA(1);


				int index128_131 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_131);
				if (s >= 0) return s;
				break;
			case 132:
				int LA128_132 = input.LA(1);


				int index128_132 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_132);
				if (s >= 0) return s;
				break;
			case 133:
				int LA128_133 = input.LA(1);


				int index128_133 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_133);
				if (s >= 0) return s;
				break;
			case 134:
				int LA128_134 = input.LA(1);


				int index128_134 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_134);
				if (s >= 0) return s;
				break;
			case 135:
				int LA128_135 = input.LA(1);


				int index128_135 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_135);
				if (s >= 0) return s;
				break;
			case 136:
				int LA128_136 = input.LA(1);


				int index128_136 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_136);
				if (s >= 0) return s;
				break;
			case 137:
				int LA128_137 = input.LA(1);


				int index128_137 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_137);
				if (s >= 0) return s;
				break;
			case 138:
				int LA128_138 = input.LA(1);


				int index128_138 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_138);
				if (s >= 0) return s;
				break;
			case 139:
				int LA128_139 = input.LA(1);


				int index128_139 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_139);
				if (s >= 0) return s;
				break;
			case 140:
				int LA128_140 = input.LA(1);


				int index128_140 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_140);
				if (s >= 0) return s;
				break;
			case 141:
				int LA128_141 = input.LA(1);


				int index128_141 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_141);
				if (s >= 0) return s;
				break;
			case 142:
				int LA128_142 = input.LA(1);


				int index128_142 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_142);
				if (s >= 0) return s;
				break;
			case 143:
				int LA128_143 = input.LA(1);


				int index128_143 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_143);
				if (s >= 0) return s;
				break;
			case 144:
				int LA128_144 = input.LA(1);


				int index128_144 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_144);
				if (s >= 0) return s;
				break;
			case 145:
				int LA128_145 = input.LA(1);


				int index128_145 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_145);
				if (s >= 0) return s;
				break;
			case 146:
				int LA128_146 = input.LA(1);


				int index128_146 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_146);
				if (s >= 0) return s;
				break;
			case 147:
				int LA128_147 = input.LA(1);


				int index128_147 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_147);
				if (s >= 0) return s;
				break;
			case 148:
				int LA128_148 = input.LA(1);


				int index128_148 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_148);
				if (s >= 0) return s;
				break;
			case 149:
				int LA128_149 = input.LA(1);


				int index128_149 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_149);
				if (s >= 0) return s;
				break;
			case 150:
				int LA128_150 = input.LA(1);


				int index128_150 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_150);
				if (s >= 0) return s;
				break;
			case 151:
				int LA128_151 = input.LA(1);


				int index128_151 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_151);
				if (s >= 0) return s;
				break;
			case 152:
				int LA128_152 = input.LA(1);


				int index128_152 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_152);
				if (s >= 0) return s;
				break;
			case 153:
				int LA128_153 = input.LA(1);


				int index128_153 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_153);
				if (s >= 0) return s;
				break;
			case 154:
				int LA128_154 = input.LA(1);


				int index128_154 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_154);
				if (s >= 0) return s;
				break;
			case 155:
				int LA128_155 = input.LA(1);


				int index128_155 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_155);
				if (s >= 0) return s;
				break;
			case 156:
				int LA128_156 = input.LA(1);


				int index128_156 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_156);
				if (s >= 0) return s;
				break;
			case 157:
				int LA128_157 = input.LA(1);


				int index128_157 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_157);
				if (s >= 0) return s;
				break;
			case 158:
				int LA128_158 = input.LA(1);


				int index128_158 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_158);
				if (s >= 0) return s;
				break;
			case 159:
				int LA128_159 = input.LA(1);


				int index128_159 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_159);
				if (s >= 0) return s;
				break;
			case 160:
				int LA128_160 = input.LA(1);


				int index128_160 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_160);
				if (s >= 0) return s;
				break;
			case 161:
				int LA128_161 = input.LA(1);


				int index128_161 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_161);
				if (s >= 0) return s;
				break;
			case 162:
				int LA128_162 = input.LA(1);


				int index128_162 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_162);
				if (s >= 0) return s;
				break;
			case 163:
				int LA128_163 = input.LA(1);


				int index128_163 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_163);
				if (s >= 0) return s;
				break;
			case 164:
				int LA128_164 = input.LA(1);


				int index128_164 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_164);
				if (s >= 0) return s;
				break;
			case 165:
				int LA128_165 = input.LA(1);


				int index128_165 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_165);
				if (s >= 0) return s;
				break;
			case 166:
				int LA128_166 = input.LA(1);


				int index128_166 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_166);
				if (s >= 0) return s;
				break;
			case 167:
				int LA128_167 = input.LA(1);


				int index128_167 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_167);
				if (s >= 0) return s;
				break;
			case 168:
				int LA128_168 = input.LA(1);


				int index128_168 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_168);
				if (s >= 0) return s;
				break;
			case 169:
				int LA128_169 = input.LA(1);


				int index128_169 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_169);
				if (s >= 0) return s;
				break;
			case 170:
				int LA128_170 = input.LA(1);


				int index128_170 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_170);
				if (s >= 0) return s;
				break;
			case 171:
				int LA128_171 = input.LA(1);


				int index128_171 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_171);
				if (s >= 0) return s;
				break;
			case 172:
				int LA128_172 = input.LA(1);


				int index128_172 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_172);
				if (s >= 0) return s;
				break;
			case 173:
				int LA128_173 = input.LA(1);


				int index128_173 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_173);
				if (s >= 0) return s;
				break;
			case 174:
				int LA128_174 = input.LA(1);


				int index128_174 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_174);
				if (s >= 0) return s;
				break;
			case 175:
				int LA128_175 = input.LA(1);


				int index128_175 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_175);
				if (s >= 0) return s;
				break;
			case 176:
				int LA128_176 = input.LA(1);


				int index128_176 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_176);
				if (s >= 0) return s;
				break;
			case 177:
				int LA128_177 = input.LA(1);


				int index128_177 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_177);
				if (s >= 0) return s;
				break;
			case 178:
				int LA128_178 = input.LA(1);


				int index128_178 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_178);
				if (s >= 0) return s;
				break;
			case 179:
				int LA128_179 = input.LA(1);


				int index128_179 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_179);
				if (s >= 0) return s;
				break;
			case 180:
				int LA128_180 = input.LA(1);


				int index128_180 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_180);
				if (s >= 0) return s;
				break;
			case 181:
				int LA128_181 = input.LA(1);


				int index128_181 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_181);
				if (s >= 0) return s;
				break;
			case 182:
				int LA128_182 = input.LA(1);


				int index128_182 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_182);
				if (s >= 0) return s;
				break;
			case 183:
				int LA128_183 = input.LA(1);


				int index128_183 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_183);
				if (s >= 0) return s;
				break;
			case 184:
				int LA128_184 = input.LA(1);


				int index128_184 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_184);
				if (s >= 0) return s;
				break;
			case 185:
				int LA128_185 = input.LA(1);


				int index128_185 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_185);
				if (s >= 0) return s;
				break;
			case 186:
				int LA128_186 = input.LA(1);


				int index128_186 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_186);
				if (s >= 0) return s;
				break;
			case 187:
				int LA128_187 = input.LA(1);


				int index128_187 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_187);
				if (s >= 0) return s;
				break;
			case 188:
				int LA128_188 = input.LA(1);


				int index128_188 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_188);
				if (s >= 0) return s;
				break;
			case 189:
				int LA128_189 = input.LA(1);


				int index128_189 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_189);
				if (s >= 0) return s;
				break;
			case 190:
				int LA128_190 = input.LA(1);


				int index128_190 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_190);
				if (s >= 0) return s;
				break;
			case 191:
				int LA128_191 = input.LA(1);


				int index128_191 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_191);
				if (s >= 0) return s;
				break;
			case 192:
				int LA128_192 = input.LA(1);


				int index128_192 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_192);
				if (s >= 0) return s;
				break;
			case 193:
				int LA128_193 = input.LA(1);


				int index128_193 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_193);
				if (s >= 0) return s;
				break;
			case 194:
				int LA128_194 = input.LA(1);


				int index128_194 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_194);
				if (s >= 0) return s;
				break;
			case 195:
				int LA128_195 = input.LA(1);


				int index128_195 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_195);
				if (s >= 0) return s;
				break;
			case 196:
				int LA128_196 = input.LA(1);


				int index128_196 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_196);
				if (s >= 0) return s;
				break;
			case 197:
				int LA128_197 = input.LA(1);


				int index128_197 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_197);
				if (s >= 0) return s;
				break;
			case 198:
				int LA128_198 = input.LA(1);


				int index128_198 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_198);
				if (s >= 0) return s;
				break;
			case 199:
				int LA128_199 = input.LA(1);


				int index128_199 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_199);
				if (s >= 0) return s;
				break;
			case 200:
				int LA128_200 = input.LA(1);


				int index128_200 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_200);
				if (s >= 0) return s;
				break;
			case 201:
				int LA128_201 = input.LA(1);


				int index128_201 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_201);
				if (s >= 0) return s;
				break;
			case 202:
				int LA128_202 = input.LA(1);


				int index128_202 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_202);
				if (s >= 0) return s;
				break;
			case 203:
				int LA128_203 = input.LA(1);


				int index128_203 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_203);
				if (s >= 0) return s;
				break;
			case 204:
				int LA128_204 = input.LA(1);


				int index128_204 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_204);
				if (s >= 0) return s;
				break;
			case 205:
				int LA128_205 = input.LA(1);


				int index128_205 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_205);
				if (s >= 0) return s;
				break;
			case 206:
				int LA128_206 = input.LA(1);


				int index128_206 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_206);
				if (s >= 0) return s;
				break;
			case 207:
				int LA128_207 = input.LA(1);


				int index128_207 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_207);
				if (s >= 0) return s;
				break;
			case 208:
				int LA128_208 = input.LA(1);


				int index128_208 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_208);
				if (s >= 0) return s;
				break;
			case 209:
				int LA128_209 = input.LA(1);


				int index128_209 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_209);
				if (s >= 0) return s;
				break;
			case 210:
				int LA128_210 = input.LA(1);


				int index128_210 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_210);
				if (s >= 0) return s;
				break;
			case 211:
				int LA128_211 = input.LA(1);


				int index128_211 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_211);
				if (s >= 0) return s;
				break;
			case 212:
				int LA128_212 = input.LA(1);


				int index128_212 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_212);
				if (s >= 0) return s;
				break;
			case 213:
				int LA128_213 = input.LA(1);


				int index128_213 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_213);
				if (s >= 0) return s;
				break;
			case 214:
				int LA128_214 = input.LA(1);


				int index128_214 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_214);
				if (s >= 0) return s;
				break;
			case 215:
				int LA128_215 = input.LA(1);


				int index128_215 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_215);
				if (s >= 0) return s;
				break;
			case 216:
				int LA128_216 = input.LA(1);


				int index128_216 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_216);
				if (s >= 0) return s;
				break;
			case 217:
				int LA128_217 = input.LA(1);


				int index128_217 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_217);
				if (s >= 0) return s;
				break;
			case 218:
				int LA128_218 = input.LA(1);


				int index128_218 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_218);
				if (s >= 0) return s;
				break;
			case 219:
				int LA128_219 = input.LA(1);


				int index128_219 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_219);
				if (s >= 0) return s;
				break;
			case 220:
				int LA128_220 = input.LA(1);


				int index128_220 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_220);
				if (s >= 0) return s;
				break;
			case 221:
				int LA128_221 = input.LA(1);


				int index128_221 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_221);
				if (s >= 0) return s;
				break;
			case 222:
				int LA128_222 = input.LA(1);


				int index128_222 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_222);
				if (s >= 0) return s;
				break;
			case 223:
				int LA128_223 = input.LA(1);


				int index128_223 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_223);
				if (s >= 0) return s;
				break;
			case 224:
				int LA128_224 = input.LA(1);


				int index128_224 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_224);
				if (s >= 0) return s;
				break;
			case 225:
				int LA128_225 = input.LA(1);


				int index128_225 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_225);
				if (s >= 0) return s;
				break;
			case 226:
				int LA128_226 = input.LA(1);


				int index128_226 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_226);
				if (s >= 0) return s;
				break;
			case 227:
				int LA128_227 = input.LA(1);


				int index128_227 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_227);
				if (s >= 0) return s;
				break;
			case 228:
				int LA128_228 = input.LA(1);


				int index128_228 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_228);
				if (s >= 0) return s;
				break;
			case 229:
				int LA128_229 = input.LA(1);


				int index128_229 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_229);
				if (s >= 0) return s;
				break;
			case 230:
				int LA128_230 = input.LA(1);


				int index128_230 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_230);
				if (s >= 0) return s;
				break;
			case 231:
				int LA128_231 = input.LA(1);


				int index128_231 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_231);
				if (s >= 0) return s;
				break;
			case 232:
				int LA128_232 = input.LA(1);


				int index128_232 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_232);
				if (s >= 0) return s;
				break;
			case 233:
				int LA128_233 = input.LA(1);


				int index128_233 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_233);
				if (s >= 0) return s;
				break;
			case 234:
				int LA128_234 = input.LA(1);


				int index128_234 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_234);
				if (s >= 0) return s;
				break;
			case 235:
				int LA128_235 = input.LA(1);


				int index128_235 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_235);
				if (s >= 0) return s;
				break;
			case 236:
				int LA128_236 = input.LA(1);


				int index128_236 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_236);
				if (s >= 0) return s;
				break;
			case 237:
				int LA128_237 = input.LA(1);


				int index128_237 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_237);
				if (s >= 0) return s;
				break;
			case 238:
				int LA128_238 = input.LA(1);


				int index128_238 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_238);
				if (s >= 0) return s;
				break;
			case 239:
				int LA128_239 = input.LA(1);


				int index128_239 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_239);
				if (s >= 0) return s;
				break;
			case 240:
				int LA128_240 = input.LA(1);


				int index128_240 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_240);
				if (s >= 0) return s;
				break;
			case 241:
				int LA128_241 = input.LA(1);


				int index128_241 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_241);
				if (s >= 0) return s;
				break;
			case 242:
				int LA128_242 = input.LA(1);


				int index128_242 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_242);
				if (s >= 0) return s;
				break;
			case 243:
				int LA128_243 = input.LA(1);


				int index128_243 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_243);
				if (s >= 0) return s;
				break;
			case 244:
				int LA128_244 = input.LA(1);


				int index128_244 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_244);
				if (s >= 0) return s;
				break;
			case 245:
				int LA128_245 = input.LA(1);


				int index128_245 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_245);
				if (s >= 0) return s;
				break;
			case 246:
				int LA128_246 = input.LA(1);


				int index128_246 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_246);
				if (s >= 0) return s;
				break;
			case 247:
				int LA128_247 = input.LA(1);


				int index128_247 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_247);
				if (s >= 0) return s;
				break;
			case 248:
				int LA128_248 = input.LA(1);


				int index128_248 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_248);
				if (s >= 0) return s;
				break;
			case 249:
				int LA128_249 = input.LA(1);


				int index128_249 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_249);
				if (s >= 0) return s;
				break;
			case 250:
				int LA128_250 = input.LA(1);


				int index128_250 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_250);
				if (s >= 0) return s;
				break;
			case 251:
				int LA128_251 = input.LA(1);


				int index128_251 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_251);
				if (s >= 0) return s;
				break;
			case 252:
				int LA128_252 = input.LA(1);


				int index128_252 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_252);
				if (s >= 0) return s;
				break;
			case 253:
				int LA128_253 = input.LA(1);


				int index128_253 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_253);
				if (s >= 0) return s;
				break;
			case 254:
				int LA128_254 = input.LA(1);


				int index128_254 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_254);
				if (s >= 0) return s;
				break;
			case 255:
				int LA128_255 = input.LA(1);


				int index128_255 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_255);
				if (s >= 0) return s;
				break;
			case 256:
				int LA128_256 = input.LA(1);


				int index128_256 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_256);
				if (s >= 0) return s;
				break;
			case 257:
				int LA128_257 = input.LA(1);


				int index128_257 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_257);
				if (s >= 0) return s;
				break;
			case 258:
				int LA128_258 = input.LA(1);


				int index128_258 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_258);
				if (s >= 0) return s;
				break;
			case 259:
				int LA128_259 = input.LA(1);


				int index128_259 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_259);
				if (s >= 0) return s;
				break;
			case 260:
				int LA128_260 = input.LA(1);


				int index128_260 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_260);
				if (s >= 0) return s;
				break;
			case 261:
				int LA128_261 = input.LA(1);


				int index128_261 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_261);
				if (s >= 0) return s;
				break;
			case 262:
				int LA128_262 = input.LA(1);


				int index128_262 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_262);
				if (s >= 0) return s;
				break;
			case 263:
				int LA128_263 = input.LA(1);


				int index128_263 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_263);
				if (s >= 0) return s;
				break;
			case 264:
				int LA128_264 = input.LA(1);


				int index128_264 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_264);
				if (s >= 0) return s;
				break;
			case 265:
				int LA128_265 = input.LA(1);


				int index128_265 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_265);
				if (s >= 0) return s;
				break;
			case 266:
				int LA128_266 = input.LA(1);


				int index128_266 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_266);
				if (s >= 0) return s;
				break;
			case 267:
				int LA128_267 = input.LA(1);


				int index128_267 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_267);
				if (s >= 0) return s;
				break;
			case 268:
				int LA128_268 = input.LA(1);


				int index128_268 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_268);
				if (s >= 0) return s;
				break;
			case 269:
				int LA128_269 = input.LA(1);


				int index128_269 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_269);
				if (s >= 0) return s;
				break;
			case 270:
				int LA128_270 = input.LA(1);


				int index128_270 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_270);
				if (s >= 0) return s;
				break;
			case 271:
				int LA128_271 = input.LA(1);


				int index128_271 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_271);
				if (s >= 0) return s;
				break;
			case 272:
				int LA128_272 = input.LA(1);


				int index128_272 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_272);
				if (s >= 0) return s;
				break;
			case 273:
				int LA128_273 = input.LA(1);


				int index128_273 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_273);
				if (s >= 0) return s;
				break;
			case 274:
				int LA128_274 = input.LA(1);


				int index128_274 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_274);
				if (s >= 0) return s;
				break;
			case 275:
				int LA128_275 = input.LA(1);


				int index128_275 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_275);
				if (s >= 0) return s;
				break;
			case 276:
				int LA128_276 = input.LA(1);


				int index128_276 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_276);
				if (s >= 0) return s;
				break;
			case 277:
				int LA128_277 = input.LA(1);


				int index128_277 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_277);
				if (s >= 0) return s;
				break;
			case 278:
				int LA128_278 = input.LA(1);


				int index128_278 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_278);
				if (s >= 0) return s;
				break;
			case 279:
				int LA128_279 = input.LA(1);


				int index128_279 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_279);
				if (s >= 0) return s;
				break;
			case 280:
				int LA128_280 = input.LA(1);


				int index128_280 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_280);
				if (s >= 0) return s;
				break;
			case 281:
				int LA128_281 = input.LA(1);


				int index128_281 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_281);
				if (s >= 0) return s;
				break;
			case 282:
				int LA128_282 = input.LA(1);


				int index128_282 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_282);
				if (s >= 0) return s;
				break;
			case 283:
				int LA128_283 = input.LA(1);


				int index128_283 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_283);
				if (s >= 0) return s;
				break;
			case 284:
				int LA128_284 = input.LA(1);


				int index128_284 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_284);
				if (s >= 0) return s;
				break;
			case 285:
				int LA128_285 = input.LA(1);


				int index128_285 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_285);
				if (s >= 0) return s;
				break;
			case 286:
				int LA128_286 = input.LA(1);


				int index128_286 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_286);
				if (s >= 0) return s;
				break;
			case 287:
				int LA128_287 = input.LA(1);


				int index128_287 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_287);
				if (s >= 0) return s;
				break;
			case 288:
				int LA128_288 = input.LA(1);


				int index128_288 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_288);
				if (s >= 0) return s;
				break;
			case 289:
				int LA128_289 = input.LA(1);


				int index128_289 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_289);
				if (s >= 0) return s;
				break;
			case 290:
				int LA128_290 = input.LA(1);


				int index128_290 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_290);
				if (s >= 0) return s;
				break;
			case 291:
				int LA128_291 = input.LA(1);


				int index128_291 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_291);
				if (s >= 0) return s;
				break;
			case 292:
				int LA128_292 = input.LA(1);


				int index128_292 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_292);
				if (s >= 0) return s;
				break;
			case 293:
				int LA128_293 = input.LA(1);


				int index128_293 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_293);
				if (s >= 0) return s;
				break;
			case 294:
				int LA128_294 = input.LA(1);


				int index128_294 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_294);
				if (s >= 0) return s;
				break;
			case 295:
				int LA128_295 = input.LA(1);


				int index128_295 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_295);
				if (s >= 0) return s;
				break;
			case 296:
				int LA128_296 = input.LA(1);


				int index128_296 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_296);
				if (s >= 0) return s;
				break;
			case 297:
				int LA128_297 = input.LA(1);


				int index128_297 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_297);
				if (s >= 0) return s;
				break;
			case 298:
				int LA128_298 = input.LA(1);


				int index128_298 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_298);
				if (s >= 0) return s;
				break;
			case 299:
				int LA128_299 = input.LA(1);


				int index128_299 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_299);
				if (s >= 0) return s;
				break;
			case 300:
				int LA128_300 = input.LA(1);


				int index128_300 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_300);
				if (s >= 0) return s;
				break;
			case 301:
				int LA128_301 = input.LA(1);


				int index128_301 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_301);
				if (s >= 0) return s;
				break;
			case 302:
				int LA128_302 = input.LA(1);


				int index128_302 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_302);
				if (s >= 0) return s;
				break;
			case 303:
				int LA128_303 = input.LA(1);


				int index128_303 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_303);
				if (s >= 0) return s;
				break;
			case 304:
				int LA128_304 = input.LA(1);


				int index128_304 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_304);
				if (s >= 0) return s;
				break;
			case 305:
				int LA128_305 = input.LA(1);


				int index128_305 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_305);
				if (s >= 0) return s;
				break;
			case 306:
				int LA128_306 = input.LA(1);


				int index128_306 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_306);
				if (s >= 0) return s;
				break;
			case 307:
				int LA128_307 = input.LA(1);


				int index128_307 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_307);
				if (s >= 0) return s;
				break;
			case 308:
				int LA128_308 = input.LA(1);


				int index128_308 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_308);
				if (s >= 0) return s;
				break;
			case 309:
				int LA128_309 = input.LA(1);


				int index128_309 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_309);
				if (s >= 0) return s;
				break;
			case 310:
				int LA128_310 = input.LA(1);


				int index128_310 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_310);
				if (s >= 0) return s;
				break;
			case 311:
				int LA128_311 = input.LA(1);


				int index128_311 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_311);
				if (s >= 0) return s;
				break;
			case 312:
				int LA128_312 = input.LA(1);


				int index128_312 = input.Index;
				input.Rewind();
				s = -1;
				if (((index_hint_stack.Peek().namesOptional == true))) {s = 313;}

				else if ((true)) {s = 314;}


				input.Seek(index128_312);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 128, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA138 : DFA
	{
		private const string DFA138_eotS =
			"\x183\xFFFF";
		private const string DFA138_eofS =
			"\x183\xFFFF";
		private const string DFA138_minS =
			"\x1\x5\x1\x0\x181\xFFFF";
		private const string DFA138_maxS =
			"\x1\x27E\x1\x0\x181\xFFFF";
		private const string DFA138_acceptS =
			"\x2\xFFFF\x2\x1\x1\x2\x17E\xFFFF";
		private const string DFA138_specialS =
			"\x1\x0\x1\x1\x181\xFFFF}>";
		private static readonly string[] DFA138_transitionS =
			{
				"\x1\x4\x1\xFFFF\x5\x4\x1\x3\x3\xFFFF\x1\x1\x3\xFFFF\x1\x4\x2\xFFFF\x7"+
				"\x4\x2\xFFFF\x1\x4\x3\xFFFF\x4\x4\x1\xFFFF\x1\x4\x2\xFFFF\x3\x4\x2\xFFFF"+
				"\x3\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x4\x4\x1\xFFFF\x2\x4\x1"+
				"\xFFFF\x1\x4\x1\xFFFF\x8\x4\x2\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x6"+
				"\x4\x1\xFFFF\x2\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF"+
				"\x6\x4\x1\xFFFF\x1\x4\x2\xFFFF\x2\x4\x1\xFFFF\x4\x4\x1\xFFFF\x1\x4\x1"+
				"\xFFFF\x1\x4\x4\xFFFF\x1\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1"+
				"\x4\x2\xFFFF\x4\x4\x4\xFFFF\x1\x4\x4\xFFFF\x3\x4\x3\xFFFF\x1\x4\x1\xFFFF"+
				"\x5\x4\x1\xFFFF\x2\x4\x2\xFFFF\x3\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\x1"+
				"\xFFFF\x6\x4\x2\xFFFF\x4\x4\x3\xFFFF\x1\x4\x3\xFFFF\x2\x4\x1\xFFFF\x1"+
				"\x4\x1\xFFFF\x6\x4\x2\xFFFF\x1\x4\x2\xFFFF\x4\x4\x2\xFFFF\x2\x4\x1\xFFFF"+
				"\x3\x4\x3\xFFFF\x4\x4\x1\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1"+
				"\xFFFF\x1\x4\x3\xFFFF\x3\x4\x7\xFFFF\x1\x4\x1\xFFFF\x4\x4\x1\xFFFF\x2"+
				"\x4\x4\xFFFF\x1\x4\x1\xFFFF\x4\x4\x2\xFFFF\x2\x4\x1\xFFFF\x1\x4\x2\xFFFF"+
				"\x1\x4\x4\xFFFF\x2\x4\x1\xFFFF\x1\x4\x3\xFFFF\x2\x4\x2\xFFFF\x1\x4\x5"+
				"\xFFFF\xF\x4\x1\xFFFF\xB\x4\x3\xFFFF\x4\x4\x1\xFFFF\x4\x4\x2\xFFFF\x3"+
				"\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x4\x4\x1\xFFFF\x3\x4\x1\xFFFF"+
				"\x7\x4\x2\xFFFF\x3\x4\x1\xFFFF\x2\x4\x1\xFFFF\x1\x4\x1\xFFFF\x3\x4\x1"+
				"\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF\x1\x4\x5\xFFFF\x11\x4\x2\xFFFF"+
				"\x3\x4\x1\xFFFF\x1\x4\x1\xFFFF\x4\x4\x1\xFFFF\x3\x4\x8\xFFFF\x5\x4\x2"+
				"\xFFFF\x3\x4\x1\xFFFF\x2\x4\x1\xFFFF\x6\x4\x1\xFFFF\x3\x4\x1\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2\xFFFF\x6\x4\x1\xFFFF\x3\x4\x3\xFFFF"+
				"\x1\x4\x1\xFFFF\x1\x4\x4\xFFFF\x6\x4\x1\xFFFF\x1\x4\x1\xFFFF\x4\x4\x1"+
				"\xFFFF\x2\x4\x1\x2\x3\x4\x7\xFFFF\x2\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x8\x4\x1\xFFFF\xF\x4\x1\xFFFF\x4\x4\x1\xFFFF"+
				"\x2\x4\x1\xFFFF\x4\x4\x5\xFFFF\x2\x4\x1\xFFFF\x9\x4\x1\xFFFF\x4\x4\x2"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2\xFFFF\x1\x4\x2\xFFFF\x1"+
				"\x4\x1\xFFFF\x4\x4\x1\xFFFF\x1\x4\x3\xFFFF\x2\x4\x1\xFFFF\x6\x4\x4\xFFFF"+
				"\x2\x4\x2\xFFFF\x2\x4\x1\xFFFF\x1\x4\x5\xFFFF\x1\x4",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA138_eot = DFA.UnpackEncodedString(DFA138_eotS);
		private static readonly short[] DFA138_eof = DFA.UnpackEncodedString(DFA138_eofS);
		private static readonly char[] DFA138_min = DFA.UnpackEncodedStringToUnsignedChars(DFA138_minS);
		private static readonly char[] DFA138_max = DFA.UnpackEncodedStringToUnsignedChars(DFA138_maxS);
		private static readonly short[] DFA138_accept = DFA.UnpackEncodedString(DFA138_acceptS);
		private static readonly short[] DFA138_special = DFA.UnpackEncodedString(DFA138_specialS);
		private static readonly short[][] DFA138_transition;

		static DFA138()
		{
			int numStates = DFA138_transitionS.Length;
			DFA138_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA138_transition[i] = DFA.UnpackEncodedString(DFA138_transitionS[i]);
			}
		}

		public DFA138( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}

		public override string Description { get { return "810:26: ( ( subselect_in_expr_rhs )=> subselect_in_expr_rhs | bitwiseOrExpr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition138(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA138_0 = input.LA(1);


				int index138_0 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA138_0==ANY)) {s = 1;}

				else if ((LA138_0==SOME) && (EvaluatePredicate(synpred5_MySQL51Parser_fragment))) {s = 2;}

				else if ((LA138_0==ALL) && (EvaluatePredicate(synpred5_MySQL51Parser_fragment))) {s = 3;}

				else if ((LA138_0==ACTION||(LA138_0>=ADDDATE && LA138_0<=ALGORITHM)||LA138_0==ASCII||(LA138_0>=AT && LA138_0<=BACKUP)||LA138_0==BEGIN||(LA138_0>=BINARY && LA138_0<=BIT)||LA138_0==BITWISE_INVERSION||(LA138_0>=BIT_AND && LA138_0<=BIT_XOR)||(LA138_0>=BLOCK && LA138_0<=BOOLEAN)||LA138_0==BTREE||(LA138_0>=BYTE && LA138_0<=CACHE)||(LA138_0>=CASCADED && LA138_0<=CHAIN)||(LA138_0>=CHANGED && LA138_0<=CHAR)||LA138_0==CHARSET||(LA138_0>=CHECKSUM && LA138_0<=COLLATION)||LA138_0==COLUMNS||LA138_0==COMMENT||(LA138_0>=COMMIT && LA138_0<=CONCURRENT)||(LA138_0>=CONNECTION && LA138_0<=CONSISTENT)||(LA138_0>=CONTAINS && LA138_0<=CONTEXT)||LA138_0==CONTRIBUTORS||(LA138_0>=COUNT && LA138_0<=CPU)||(LA138_0>=CUBE && LA138_0<=CURRENT_USER)||LA138_0==CURTIME||(LA138_0>=DATA && LA138_0<=DATABASE)||(LA138_0>=DATAFILE && LA138_0<=DATE_ADD)||LA138_0==DATE_SUB||LA138_0==DAY||LA138_0==DEALLOCATE||LA138_0==DEFINER||LA138_0==DELAY_KEY_WRITE||LA138_0==DES_KEY_FILE||(LA138_0>=DIRECTORY && LA138_0<=DISK)||LA138_0==DO||(LA138_0>=DUMPFILE && LA138_0<=DYNAMIC)||LA138_0==ENABLE||(LA138_0>=END && LA138_0<=ENUM)||(LA138_0>=ERRORS && LA138_0<=ESCAPE)||(LA138_0>=EVENT && LA138_0<=EVERY)||(LA138_0>=EXECUTE && LA138_0<=EXISTS)||LA138_0==EXPANSION||(LA138_0>=EXTENDED && LA138_0<=FAULTS)||(LA138_0>=FIELDS && LA138_0<=FIXED)||LA138_0==FLUSH||(LA138_0>=FOUND && LA138_0<=FRAC_SECOND)||LA138_0==FULL||(LA138_0>=FUNCTION && LA138_0<=GLOBAL_VARIABLE)||LA138_0==GRANTS||(LA138_0>=GROUP && LA138_0<=HASH)||(LA138_0>=HELP && LA138_0<=HEXA_VALUE)||(LA138_0>=HOST && LA138_0<=HOUR)||(LA138_0>=ID && LA138_0<=IFNULL)||LA138_0==IMPORT||LA138_0==INDEXES||LA138_0==INITIAL_SIZE||LA138_0==INNOBASE||(LA138_0>=INSERT && LA138_0<=INSTALL)||LA138_0==INTERVAL||(LA138_0>=INT_NUMBER && LA138_0<=IPC)||(LA138_0>=ISOLATION && LA138_0<=ISSUER)||LA138_0==KEY_BLOCK_SIZE||(LA138_0>=LABEL && LA138_0<=LCURLY)||(LA138_0>=LEAVES && LA138_0<=LEFT)||LA138_0==LESS||LA138_0==LEVEL||(LA138_0>=LINESTRING && LA138_0<=LIST)||LA138_0==LOCAL||(LA138_0>=LOCKS && LA138_0<=LOGFILE)||LA138_0==LOGS||(LA138_0>=LPAREN && LA138_0<=MASTER_SSL_KEY)||(LA138_0>=MASTER_USER && LA138_0<=MEDIUM)||(LA138_0>=MEMORY && LA138_0<=MID)||(LA138_0>=MIGRATE && LA138_0<=MINUTE)||(LA138_0>=MIN_ROWS && LA138_0<=MODE)||LA138_0==MODIFY||LA138_0==MONTH||(LA138_0>=MULTILINESTRING && LA138_0<=MUTEX)||(LA138_0>=NAME && LA138_0<=NATIONAL)||(LA138_0>=NCHAR && LA138_0<=NONE)||(LA138_0>=NOT_OP && LA138_0<=NO_WAIT)||(LA138_0>=NULL && LA138_0<=NULLIF)||LA138_0==NUMBER||(LA138_0>=NVARCHAR && LA138_0<=OLD_PASSWORD)||LA138_0==ONE||(LA138_0>=ONE_SHOT && LA138_0<=OPEN)||LA138_0==OPTIONS||(LA138_0>=OWNER && LA138_0<=POSITION)||(LA138_0>=PREPARE && LA138_0<=PREV)||LA138_0==PRIVILEGES||(LA138_0>=PROCESS && LA138_0<=PROFILES)||(LA138_0>=QUARTER && LA138_0<=QUICK)||(LA138_0>=REBUILD && LA138_0<=REDUNDANT)||(LA138_0>=RELAY_LOG_FILE && LA138_0<=RELAY_THREAD)||(LA138_0>=RELOAD && LA138_0<=REMOVE)||(LA138_0>=REORGANIZE && LA138_0<=REPLICATION)||(LA138_0>=RESET && LA138_0<=RESTORE)||LA138_0==RESUME||LA138_0==RETURNS||LA138_0==RIGHT||(LA138_0>=ROLLBACK && LA138_0<=ROW_FORMAT)||(LA138_0>=RTREE && LA138_0<=SCHEDULE)||LA138_0==SECOND||LA138_0==SECURITY||(LA138_0>=SERIAL && LA138_0<=SESSION_VARIABLE)||LA138_0==SHARE||(LA138_0>=SHUTDOWN && LA138_0<=SLAVE)||(LA138_0>=SNAPSHOT && LA138_0<=SOCKET)||(LA138_0>=SONAME && LA138_0<=SOURCE)||(LA138_0>=SQL_BUFFER_RESULT && LA138_0<=SQL_CACHE)||LA138_0==SQL_NO_CACHE||LA138_0==SQL_THREAD||LA138_0==START||(LA138_0>=STARTS && LA138_0<=STORAGE)||(LA138_0>=STRING && LA138_0<=SYSTEM_USER)||(LA138_0>=TABLES && LA138_0<=TEMPTABLE)||(LA138_0>=TEXT && LA138_0<=THAN)||(LA138_0>=TIME && LA138_0<=TIMESTAMP_DIFF)||(LA138_0>=TRANSACTION && LA138_0<=TRANSACTIONAL)||(LA138_0>=TRIGGERS && LA138_0<=UNDEFINED)||(LA138_0>=UNDOFILE && LA138_0<=UNINSTALL)||LA138_0==UNKNOWN||LA138_0==UNTIL||LA138_0==UPGRADE||LA138_0==USER||LA138_0==USE_FRM||(LA138_0>=UTC_DATE && LA138_0<=VALUE)||LA138_0==VALUE_PLACEHOLDER||(LA138_0>=VARIABLES && LA138_0<=VARIANCE)||(LA138_0>=VAR_POP && LA138_0<=WEEK)||(LA138_0>=WORK && LA138_0<=WRAPPER)||(LA138_0>=X509 && LA138_0<=XA)||LA138_0==YEAR||LA138_0==CONCAT)) {s = 4;}


				input.Seek(index138_0);
				if (s >= 0) return s;
				break;
			case 1:
				int LA138_1 = input.LA(1);


				int index138_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_MySQL51Parser_fragment))) {s = 3;}

				else if ((true)) {s = 4;}


				input.Seek(index138_1);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 138, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA148 : DFA
	{
		private const string DFA148_eotS =
			"\x1B5\xFFFF";
		private const string DFA148_eofS =
			"\x1\x8\x1B4\xFFFF";
		private const string DFA148_minS =
			"\x1\x5\x1B4\xFFFF";
		private const string DFA148_maxS =
			"\x1\x27E\x1B4\xFFFF";
		private const string DFA148_acceptS =
			"\x1\xFFFF\x1\x1\x2\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1AC\xFFFF";
		private const string DFA148_specialS =
			"\x1B5\xFFFF}>";
		private static readonly string[] DFA148_transitionS =
			{
				"\x1\x8\x1\xFFFF\x5\x8\x3\xFFFF\x2\x8\x1\xFFFF\x3\x8\x1\xFFFF\x8\x8\x2"+
				"\xFFFF\x1\x8\x1\xFFFF\x1\x5\x1\xFFFF\x4\x8\x1\xFFFF\x1\x8\x1\x1\x1\xFFFF"+
				"\x3\x8\x2\xFFFF\x3\x8\x1\xFFFF\x1\x8\x1\xFFFF\x2\x8\x2\xFFFF\x4\x8\x1"+
				"\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1\xFFFF\x8\x8\x2\xFFFF\x3\x8\x1\xFFFF\x6"+
				"\x8\x1\xFFFF\x2\x8\x1\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1\xFFFF\x6\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x4\x8\x1"+
				"\xFFFF\x1\x8\x1\xFFFF\x6\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\x8\x2\xFFFF\x4\x8\x4\xFFFF\x1\x8\x4\xFFFF\x3\x8\x1\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x8\x8\x2\xFFFF\x3\x8\x1\xFFFF\x2\x8\x1"+
				"\xFFFF\x1\x8\x1\xFFFF\x6\x8\x2\xFFFF\x4\x8\x3\xFFFF\x2\x8\x2\xFFFF\x4"+
				"\x8\x1\xFFFF\x6\x8\x2\xFFFF\x8\x8\x1\xFFFF\x2\x8\x1\xFFFF\xA\x8\x1\xFFFF"+
				"\x1\x8\x1\x3\x1\xFFFF\x1\x8\x1\xFFFF\x3\x8\x3\xFFFF\x3\x8\x7\xFFFF\x6"+
				"\x8\x1\x7\x2\x8\x1\xFFFF\x1\x8\x2\xFFFF\x1\x8\x1\xFFFF\x4\x8\x2\xFFFF"+
				"\x2\x8\x1\xFFFF\x4\x8\x1\x4\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x2\xFFFF"+
				"\x6\x8\x5\xFFFF\xF\x8\x1\xFFFF\xB\x8\x3\xFFFF\x4\x8\x1\xFFFF\x9\x8\x1"+
				"\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x4\x8\x1\xFFFF\xB\x8\x1\x2\x4\x8"+
				"\x1\xFFFF\x4\x8\x1\xFFFF\x5\x8\x1\xFFFF\x2\x8\x3\xFFFF\x3\x8\x3\xFFFF"+
				"\x11\x8\x2\xFFFF\x3\x8\x1\xFFFF\x6\x8\x1\xFFFF\x3\x8\x1\xFFFF\x1\x8"+
				"\x6\xFFFF\x5\x8\x1\xFFFF\x4\x8\x1\xFFFF\x2\x8\x1\xFFFF\x6\x8\x1\xFFFF"+
				"\x3\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\xA\x8\x3"+
				"\xFFFF\x3\x8\x1\xFFFF\x1\x8\x1\xFFFF\x9\x8\x1\xFFFF\x4\x8\x1\xFFFF\x2"+
				"\x8\x1\xFFFF\x1\x8\x1\x6\x1\x8\x7\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x18\x8\x1\xFFFF\x4\x8\x1\xFFFF\x7\x8"+
				"\x5\xFFFF\x2\x8\x1\xFFFF\x9\x8\x1\xFFFF\x5\x8\x1\xFFFF\x1\x8\x2\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x1\x8\x2\xFFFF\x6\x8\x1\xFFFF\x1\x8\x3"+
				"\xFFFF\x2\x8\x1\xFFFF\x8\x8\x1\xFFFF\x3\x8\x2\xFFFF\x5\x8\x4\xFFFF\x1"+
				"\x8",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA148_eot = DFA.UnpackEncodedString(DFA148_eotS);
		private static readonly short[] DFA148_eof = DFA.UnpackEncodedString(DFA148_eofS);
		private static readonly char[] DFA148_min = DFA.UnpackEncodedStringToUnsignedChars(DFA148_minS);
		private static readonly char[] DFA148_max = DFA.UnpackEncodedStringToUnsignedChars(DFA148_maxS);
		private static readonly short[] DFA148_accept = DFA.UnpackEncodedString(DFA148_acceptS);
		private static readonly short[] DFA148_special = DFA.UnpackEncodedString(DFA148_specialS);
		private static readonly short[][] DFA148_transition;

		static DFA148()
		{
			int numStates = DFA148_transitionS.Length;
			DFA148_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA148_transition[i] = DFA.UnpackEncodedString(DFA148_transitionS[i]);
			}
		}

		public DFA148( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 148;
			this.eot = DFA148_eot;
			this.eof = DFA148_eof;
			this.min = DFA148_min;
			this.max = DFA148_max;
			this.accept = DFA148_accept;
			this.special = DFA148_special;
			this.transition = DFA148_transition;
		}

		public override string Description { get { return "846:5: ( (op+= BITWISE_OR rhs+= bitwiseAndExpr )+ | ( ( NOT )? IN ( parenExprList | subselect ) ) | LIKE unaryExpr ( ESCAPE STRING )? | BETWEEN bitwiseAndExpr AND bitwiseOrExpr | SOUNDS LIKE bitwiseAndExpr | isOperator )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA153 : DFA
	{
		private const string DFA153_eotS =
			"\x1B8\xFFFF";
		private const string DFA153_eofS =
			"\x1\x1\x1B7\xFFFF";
		private const string DFA153_minS =
			"\x1\x5\x1B7\xFFFF";
		private const string DFA153_maxS =
			"\x1\x27E\x1B7\xFFFF";
		private const string DFA153_acceptS =
			"\x1\xFFFF\x1\x2\x170\xFFFF\x2\x1\x44\xFFFF";
		private const string DFA153_specialS =
			"\x1B8\xFFFF}>";
		private static readonly string[] DFA153_transitionS =
			{
				"\x1\x1\x1\xFFFF\x5\x1\x3\xFFFF\x2\x1\x1\xFFFF\x3\x1\x1\xFFFF\x8\x1\x2"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x7\x1\x1\xFFFF\x3\x1\x2\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x8\x1\x2\xFFFF\x3\x1\x1\xFFFF\x6\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6"+
				"\x1\x1\xFFFF\x1\x1\x2\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x6\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x4\x1\x4\xFFFF\x1\x1\x4\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x8\x1\x2\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x6\x1\x2\xFFFF\x4\x1\x3\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x6\x1\x2"+
				"\xFFFF\x8\x1\x1\xFFFF\x2\x1\x1\xFFFF\xA\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x7\xFFFF\x9\x1\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x1\x1\x1\xFFFF\x4\x1\x2\xFFFF\x9\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x6\x1\x5\xFFFF\xF\x1\x1\xFFFF\xB\x1\x3\xFFFF\x4\x1\x1\xFFFF\x2"+
				"\x1\x1\x172\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF"+
				"\x10\x1\x1\xFFFF\x4\x1\x1\xFFFF\x5\x1\x1\xFFFF\x2\x1\x3\xFFFF\x3\x1"+
				"\x3\xFFFF\xC\x1\x1\x173\x4\x1\x2\xFFFF\x3\x1\x1\xFFFF\x6\x1\x1\xFFFF"+
				"\x3\x1\x1\xFFFF\x1\x1\x6\xFFFF\x5\x1\x1\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x6\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\xA\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x9\x1\x1\xFFFF"+
				"\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF\x3\x1\x7\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x18\x1\x1\xFFFF\x4\x1\x1\xFFFF"+
				"\x7\x1\x5\xFFFF\x2\x1\x1\xFFFF\x9\x1\x1\xFFFF\x5\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x6\x1\x1\xFFFF\x1"+
				"\x1\x3\xFFFF\x2\x1\x1\xFFFF\x8\x1\x1\xFFFF\x3\x1\x2\xFFFF\x5\x1\x4\xFFFF"+
				"\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA153_eot = DFA.UnpackEncodedString(DFA153_eotS);
		private static readonly short[] DFA153_eof = DFA.UnpackEncodedString(DFA153_eofS);
		private static readonly char[] DFA153_min = DFA.UnpackEncodedStringToUnsignedChars(DFA153_minS);
		private static readonly char[] DFA153_max = DFA.UnpackEncodedStringToUnsignedChars(DFA153_maxS);
		private static readonly short[] DFA153_accept = DFA.UnpackEncodedString(DFA153_acceptS);
		private static readonly short[] DFA153_special = DFA.UnpackEncodedString(DFA153_specialS);
		private static readonly short[][] DFA153_transition;

		static DFA153()
		{
			int numStates = DFA153_transitionS.Length;
			DFA153_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA153_transition[i] = DFA.UnpackEncodedString(DFA153_transitionS[i]);
			}
		}

		public DFA153( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 153;
			this.eot = DFA153_eot;
			this.eof = DFA153_eof;
			this.min = DFA153_min;
			this.max = DFA153_max;
			this.accept = DFA153_accept;
			this.special = DFA153_special;
			this.transition = DFA153_transition;
		}

		public override string Description { get { return "()* loopback of 869:27: ( (op+= PLUS |op+= MINUS ) rhs+= multiplicativeExpr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA159 : DFA
	{
		private const string DFA159_eotS =
			"\x17D\xFFFF";
		private const string DFA159_eofS =
			"\x17D\xFFFF";
		private const string DFA159_minS =
			"\x1\x5\x17C\xFFFF";
		private const string DFA159_maxS =
			"\x1\x27E\x17C\xFFFF";
		private const string DFA159_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x179\xFFFF";
		private const string DFA159_specialS =
			"\x17D\xFFFF}>";
		private static readonly string[] DFA159_transitionS =
			{
				"\x1\x3\x1\xFFFF\x5\x3\x4\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x7\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x1\x3\x3\x4\xFFFF\x3\x3\x2\xFFFF\x3\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x1\x2\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x6\x3"+
				"\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF"+
				"\x6\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x2\xFFFF\x4\x3\x4\xFFFF\x1\x3\x4\xFFFF\x3\x3\x3\xFFFF\x1\x3\x1\xFFFF"+
				"\x5\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x2\xFFFF\x4\x3\x3\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x6\x3\x2\xFFFF\x1\x3\x2\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x3\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x3\xFFFF\x3\x3\x7\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2"+
				"\x3\x4\xFFFF\x1\x3\x1\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3\x2\xFFFF\x1\x3\x5"+
				"\xFFFF\xF\x3\x1\xFFFF\xB\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF"+
				"\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x5\xFFFF\xC"+
				"\x3\x1\xFFFF\x4\x3\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF"+
				"\x3\x3\x8\xFFFF\x5\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x6"+
				"\x3\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x6\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x3\x3\x7\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x8\x3\x1\xFFFF\xF"+
				"\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x4\x3\x5\xFFFF\x2\x3\x1\xFFFF"+
				"\x9\x3\x1\xFFFF\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x6\x3\x4\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA159_eot = DFA.UnpackEncodedString(DFA159_eotS);
		private static readonly short[] DFA159_eof = DFA.UnpackEncodedString(DFA159_eofS);
		private static readonly char[] DFA159_min = DFA.UnpackEncodedStringToUnsignedChars(DFA159_minS);
		private static readonly char[] DFA159_max = DFA.UnpackEncodedStringToUnsignedChars(DFA159_maxS);
		private static readonly short[] DFA159_accept = DFA.UnpackEncodedString(DFA159_acceptS);
		private static readonly short[] DFA159_special = DFA.UnpackEncodedString(DFA159_specialS);
		private static readonly short[][] DFA159_transition;

		static DFA159()
		{
			int numStates = DFA159_transitionS.Length;
			DFA159_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA159_transition[i] = DFA.UnpackEncodedString(DFA159_transitionS[i]);
			}
		}

		public DFA159( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 159;
			this.eot = DFA159_eot;
			this.eof = DFA159_eof;
			this.min = DFA159_min;
			this.max = DFA159_max;
			this.accept = DFA159_accept;
			this.special = DFA159_special;
			this.transition = DFA159_transition;
		}

		public override string Description { get { return "899:1: binaryCollateExpr : (op= BINARY lhs= binaryCollateExpr -> ^( BINARY $lhs) |op= COLLATE lhs= binaryCollateExpr -> ^( COLLATE $lhs) | intervalExpr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA160 : DFA
	{
		private const string DFA160_eotS =
			"\x17D\xFFFF";
		private const string DFA160_eofS =
			"\x17D\xFFFF";
		private const string DFA160_minS =
			"\x1\x5\x1\x0\x17B\xFFFF";
		private const string DFA160_maxS =
			"\x1\x27E\x1\x0\x17B\xFFFF";
		private const string DFA160_acceptS =
			"\x2\xFFFF\x1\x2\x179\xFFFF\x1\x1";
		private const string DFA160_specialS =
			"\x1\xFFFF\x1\x0\x17B\xFFFF}>";
		private static readonly string[] DFA160_transitionS =
			{
				"\x1\x2\x1\xFFFF\x5\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x7\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x4\x2\x4\xFFFF\x3\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x6\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3\xFFFF\x6"+
				"\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x4\x2\x4\xFFFF\x1\x2\x4\xFFFF\x3\x2\x3\xFFFF\x1\x2\x1\xFFFF\x5"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x6\x2\x2\xFFFF\x4\x2\x3\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x6\x2\x2\xFFFF\x1\x2\x2\xFFFF\x4\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x3\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x3\xFFFF\x3\x2\x7\xFFFF\x1\x1\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF"+
				"\xF\x2\x1\xFFFF\xB\x2\x3\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3"+
				"\x2\x1\xFFFF\x7\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\xC\x2\x1"+
				"\xFFFF\x4\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3"+
				"\x2\x8\xFFFF\x5\x2\x2\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x6\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\xF\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x5\xFFFF\x2\x2\x1\xFFFF\x9"+
				"\x2\x1\xFFFF\x4\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1"+
				"\xFFFF\x6\x2\x4\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1"+
				"\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA160_eot = DFA.UnpackEncodedString(DFA160_eotS);
		private static readonly short[] DFA160_eof = DFA.UnpackEncodedString(DFA160_eofS);
		private static readonly char[] DFA160_min = DFA.UnpackEncodedStringToUnsignedChars(DFA160_minS);
		private static readonly char[] DFA160_max = DFA.UnpackEncodedStringToUnsignedChars(DFA160_maxS);
		private static readonly short[] DFA160_accept = DFA.UnpackEncodedString(DFA160_acceptS);
		private static readonly short[] DFA160_special = DFA.UnpackEncodedString(DFA160_specialS);
		private static readonly short[][] DFA160_transition;

		static DFA160()
		{
			int numStates = DFA160_transitionS.Length;
			DFA160_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA160_transition[i] = DFA.UnpackEncodedString(DFA160_transitionS[i]);
			}
		}

		public DFA160( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}

		public override string Description { get { return "909:1: intervalExpr : ( ( INTERVAL ~ ( LPAREN ) )=> INTERVAL expr timeUnit {...}? -> ^( INTERVAL expr timeUnit ) |lhsPrim= primary -> primary );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition160(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA160_1 = input.LA(1);


				int index160_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_MySQL51Parser_fragment))) {s = 380;}

				else if ((true)) {s = 2;}


				input.Seek(index160_1);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 160, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA161 : DFA
	{
		private const string DFA161_eotS =
			"\x33D\xFFFF";
		private const string DFA161_eofS =
			"\x6\xFFFF\x1\x18C\x336\xFFFF";
		private const string DFA161_minS =
			"\x1\x5\x5\xFFFF\x1\x5\x5\xFFFF\x1\x0\x19\xFFFF\x1\x0\x5\xFFFF\x1\x0\x3"+
			"\xFFFF\x1\x0\x3\xFFFF\x2\x0\x3\xFFFF\x5\x0\x1\xFFFF\x1\x0\x1\xFFFF\x2"+
			"\x0\x1\xFFFF\x8\x0\x2\xFFFF\x2\x0\x2\xFFFF\x3\x0\x3\xFFFF\x2\x0\x1\xFFFF"+
			"\xE5\x0\x1\x133\x35\x0\x1\x5\x5\xFFFF\x1\x0\x21\xFFFF\x137\x0\x68\xFFFF";
		private const string DFA161_maxS =
			"\x1\x27E\x5\xFFFF\x1\x27E\x5\xFFFF\x1\x0\x19\xFFFF\x1\x0\x5\xFFFF\x1"+
			"\x0\x3\xFFFF\x1\x0\x3\xFFFF\x2\x0\x3\xFFFF\x5\x0\x1\xFFFF\x1\x0\x1\xFFFF"+
			"\x2\x0\x1\xFFFF\x8\x0\x2\xFFFF\x2\x0\x2\xFFFF\x3\x0\x3\xFFFF\x2\x0\x1"+
			"\xFFFF\xE5\x0\x1\x133\x35\x0\x1\x27E\x5\xFFFF\x1\x0\x21\xFFFF\x137\x0"+
			"\x68\xFFFF";
		private const string DFA161_acceptS =
			"\x1\xFFFF\x5\x1\x1\xFFFF\x5\x1\x1\xFFFF\x19\x1\x1\xFFFF\x5\x1\x1\xFFFF"+
			"\x3\x1\x1\xFFFF\x3\x1\x2\xFFFF\x3\x1\x5\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2"+
			"\xFFFF\x1\x1\x8\xFFFF\x2\x1\x2\xFFFF\x2\x1\x3\xFFFF\x3\x1\x2\xFFFF\x1"+
			"\x1\x11C\xFFFF\x1\x3\x1\x5\x1\x9\x1\xA\x1\xB\x1\xFFFF\x21\x1\x137\xFFFF"+
			"\x63\x1\x1\x6\x1\x8\x1\x2\x1\x7\x1\x4";
		private const string DFA161_specialS =
			"\x1\x0\x5\xFFFF\x1\x1\x5\xFFFF\x1\x2\x19\xFFFF\x1\x3\x5\xFFFF\x1\x4\x3"+
			"\xFFFF\x1\x5\x3\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\x8\x1\x9\x1\xA\x1\xB\x1"+
			"\xC\x1\xFFFF\x1\xD\x1\xFFFF\x1\xE\x1\xF\x1\xFFFF\x1\x10\x1\x11\x1\x12"+
			"\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x2\xFFFF\x1\x18\x1\x19\x2\xFFFF\x1"+
			"\x1A\x1\x1B\x1\x1C\x3\xFFFF\x1\x1D\x1\x1E\x1\xFFFF\x1\x1F\x1\x20\x1\x21"+
			"\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B"+
			"\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35"+
			"\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F"+
			"\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49"+
			"\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53"+
			"\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D"+
			"\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67"+
			"\x1\x68\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71"+
			"\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B"+
			"\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85"+
			"\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F"+
			"\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97\x1\x98\x1\x99"+
			"\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1\xA0\x1\xA1\x1\xA2\x1\xA3"+
			"\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x1\xAA\x1\xAB\x1\xAC\x1\xAD"+
			"\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1\xB4\x1\xB5\x1\xB6\x1\xB7"+
			"\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1\xBE\x1\xBF\x1\xC0\x1\xC1"+
			"\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1\xC6\x1\xC7\x1\xC8\x1\xC9\x1\xCA\x1\xCB"+
			"\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1\xD0\x1\xD1\x1\xD2\x1\xD3\x1\xD4\x1\xD5"+
			"\x1\xD6\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1\xDC\x1\xDD\x1\xDE\x1\xDF"+
			"\x1\xE0\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1\xE6\x1\xE7\x1\xE8\x1\xE9"+
			"\x1\xEA\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1\xF0\x1\xF1\x1\xF2\x1\xF3"+
			"\x1\xF4\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9\x1\xFA\x1\xFB\x1\xFC\x1\xFD"+
			"\x1\xFE\x1\xFF\x1\x100\x1\x101\x1\x102\x1\x103\x1\x104\x1\x105\x1\x106"+
			"\x1\x107\x1\x108\x1\x109\x1\x10A\x1\x10B\x1\x10C\x1\x10D\x1\x10E\x1\x10F"+
			"\x1\x110\x1\x111\x1\x112\x1\x113\x1\x114\x1\x115\x1\x116\x1\x117\x1\x118"+
			"\x1\x119\x1\x11A\x1\x11B\x1\x11C\x1\x11D\x1\x11E\x1\x11F\x1\x120\x1\x121"+
			"\x1\x122\x1\x123\x1\x124\x1\x125\x1\x126\x1\x127\x1\x128\x1\x129\x1\x12A"+
			"\x1\x12B\x1\x12C\x1\x12D\x1\x12E\x1\x12F\x1\x130\x1\x131\x1\x132\x1\x133"+
			"\x1\x134\x1\x135\x1\x136\x1\x137\x1\x138\x1\x139\x1\x13A\x5\xFFFF\x1"+
			"\x13B\x21\xFFFF\x1\x13C\x1\x13D\x1\x13E\x1\x13F\x1\x140\x1\x141\x1\x142"+
			"\x1\x143\x1\x144\x1\x145\x1\x146\x1\x147\x1\x148\x1\x149\x1\x14A\x1\x14B"+
			"\x1\x14C\x1\x14D\x1\x14E\x1\x14F\x1\x150\x1\x151\x1\x152\x1\x153\x1\x154"+
			"\x1\x155\x1\x156\x1\x157\x1\x158\x1\x159\x1\x15A\x1\x15B\x1\x15C\x1\x15D"+
			"\x1\x15E\x1\x15F\x1\x160\x1\x161\x1\x162\x1\x163\x1\x164\x1\x165\x1\x166"+
			"\x1\x167\x1\x168\x1\x169\x1\x16A\x1\x16B\x1\x16C\x1\x16D\x1\x16E\x1\x16F"+
			"\x1\x170\x1\x171\x1\x172\x1\x173\x1\x174\x1\x175\x1\x176\x1\x177\x1\x178"+
			"\x1\x179\x1\x17A\x1\x17B\x1\x17C\x1\x17D\x1\x17E\x1\x17F\x1\x180\x1\x181"+
			"\x1\x182\x1\x183\x1\x184\x1\x185\x1\x186\x1\x187\x1\x188\x1\x189\x1\x18A"+
			"\x1\x18B\x1\x18C\x1\x18D\x1\x18E\x1\x18F\x1\x190\x1\x191\x1\x192\x1\x193"+
			"\x1\x194\x1\x195\x1\x196\x1\x197\x1\x198\x1\x199\x1\x19A\x1\x19B\x1\x19C"+
			"\x1\x19D\x1\x19E\x1\x19F\x1\x1A0\x1\x1A1\x1\x1A2\x1\x1A3\x1\x1A4\x1\x1A5"+
			"\x1\x1A6\x1\x1A7\x1\x1A8\x1\x1A9\x1\x1AA\x1\x1AB\x1\x1AC\x1\x1AD\x1\x1AE"+
			"\x1\x1AF\x1\x1B0\x1\x1B1\x1\x1B2\x1\x1B3\x1\x1B4\x1\x1B5\x1\x1B6\x1\x1B7"+
			"\x1\x1B8\x1\x1B9\x1\x1BA\x1\x1BB\x1\x1BC\x1\x1BD\x1\x1BE\x1\x1BF\x1\x1C0"+
			"\x1\x1C1\x1\x1C2\x1\x1C3\x1\x1C4\x1\x1C5\x1\x1C6\x1\x1C7\x1\x1C8\x1\x1C9"+
			"\x1\x1CA\x1\x1CB\x1\x1CC\x1\x1CD\x1\x1CE\x1\x1CF\x1\x1D0\x1\x1D1\x1\x1D2"+
			"\x1\x1D3\x1\x1D4\x1\x1D5\x1\x1D6\x1\x1D7\x1\x1D8\x1\x1D9\x1\x1DA\x1\x1DB"+
			"\x1\x1DC\x1\x1DD\x1\x1DE\x1\x1DF\x1\x1E0\x1\x1E1\x1\x1E2\x1\x1E3\x1\x1E4"+
			"\x1\x1E5\x1\x1E6\x1\x1E7\x1\x1E8\x1\x1E9\x1\x1EA\x1\x1EB\x1\x1EC\x1\x1ED"+
			"\x1\x1EE\x1\x1EF\x1\x1F0\x1\x1F1\x1\x1F2\x1\x1F3\x1\x1F4\x1\x1F5\x1\x1F6"+
			"\x1\x1F7\x1\x1F8\x1\x1F9\x1\x1FA\x1\x1FB\x1\x1FC\x1\x1FD\x1\x1FE\x1\x1FF"+
			"\x1\x200\x1\x201\x1\x202\x1\x203\x1\x204\x1\x205\x1\x206\x1\x207\x1\x208"+
			"\x1\x209\x1\x20A\x1\x20B\x1\x20C\x1\x20D\x1\x20E\x1\x20F\x1\x210\x1\x211"+
			"\x1\x212\x1\x213\x1\x214\x1\x215\x1\x216\x1\x217\x1\x218\x1\x219\x1\x21A"+
			"\x1\x21B\x1\x21C\x1\x21D\x1\x21E\x1\x21F\x1\x220\x1\x221\x1\x222\x1\x223"+
			"\x1\x224\x1\x225\x1\x226\x1\x227\x1\x228\x1\x229\x1\x22A\x1\x22B\x1\x22C"+
			"\x1\x22D\x1\x22E\x1\x22F\x1\x230\x1\x231\x1\x232\x1\x233\x1\x234\x1\x235"+
			"\x1\x236\x1\x237\x1\x238\x1\x239\x1\x23A\x1\x23B\x1\x23C\x1\x23D\x1\x23E"+
			"\x1\x23F\x1\x240\x1\x241\x1\x242\x1\x243\x1\x244\x1\x245\x1\x246\x1\x247"+
			"\x1\x248\x1\x249\x1\x24A\x1\x24B\x1\x24C\x1\x24D\x1\x24E\x1\x24F\x1\x250"+
			"\x1\x251\x1\x252\x1\x253\x1\x254\x1\x255\x1\x256\x1\x257\x1\x258\x1\x259"+
			"\x1\x25A\x1\x25B\x1\x25C\x1\x25D\x1\x25E\x1\x25F\x1\x260\x1\x261\x1\x262"+
			"\x1\x263\x1\x264\x1\x265\x1\x266\x1\x267\x1\x268\x1\x269\x1\x26A\x1\x26B"+
			"\x1\x26C\x1\x26D\x1\x26E\x1\x26F\x1\x270\x1\x271\x1\x272\x68\xFFFF}>";
		private static readonly string[] DFA161_transitionS =
			{
				"\x1\x90\x1\xFFFF\x1\x26\x1\x91\x1\x92\x1\x93\x1\x94\x4\xFFFF\x1\x95"+
				"\x3\xFFFF\x1\x39\x2\xFFFF\x1\x96\x1\x97\x1\x99\x1\x98\x1\xC\x1\x9A\x1"+
				"\x61\x2\xFFFF\x1\x62\x3\xFFFF\x1\x178\x1\x7\x1\x9B\x1\x9C\x4\xFFFF\x1"+
				"\xD\x1\xE\x1\xF\x2\xFFFF\x1\x9D\x1\x9E\x1\x9F\x1\xFFFF\x1\xA0\x1\xFFFF"+
				"\x1\x63\x1\x64\x2\xFFFF\x1\xA1\x1\x17B\x1\x10\x1\xA2\x1\xFFFF\x1\xA3"+
				"\x1\x50\x1\xFFFF\x1\x3A\x1\xFFFF\x1\x65\x1\xA4\x1\xA5\x1\x66\x1\x3B"+
				"\x1\xA6\x1\xFFFF\x1\x3C\x2\xFFFF\x1\xA7\x1\xFFFF\x1\x67\x1\xFFFF\x1"+
				"\x68\x1\xA9\x1\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xFFFF\x1\xAE\x1\xAF\x1\xFFFF"+
				"\x1\x3D\x1\xB0\x1\xFFFF\x1\xB1\x1\xFFFF\x1\x12\x1\xB2\x3\xFFFF\x1\xB3"+
				"\x1\x27\x1\x28\x1\x2A\x1\x2E\x1\x51\x1\xFFFF\x1\x29\x2\xFFFF\x1\xB4"+
				"\x1\x3E\x1\xFFFF\x1\xB5\x1\x52\x1\xB6\x1\x13\x1\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x53\x4\xFFFF\x1\x69\x4\xFFFF\x1\xB7\x1\xFFFF\x1\xB8\x3\xFFFF\x1"+
				"\xB9\x2\xFFFF\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x4\xFFFF\x1\x6A\x4\xFFFF\x1"+
				"\xBE\x1\xBF\x1\xC0\x3\xFFFF\x1\xD0\x1\xFFFF\x1\x6B\x1\xC1\x1\xC3\x1"+
				"\xC4\x1\xC2\x1\xFFFF\x1\xC5\x1\xC6\x2\xFFFF\x1\xC7\x1\xC8\x1\xC9\x1"+
				"\xFFFF\x1\x6C\x1\x177\x1\xFFFF\x1\xCA\x1\xFFFF\x1\xCB\x1\xCC\x1\x2B"+
				"\x1\xB\x1\xCE\x1\xCD\x2\xFFFF\x1\xA8\x1\xD2\x1\xD3\x1\xD4\x3\xFFFF\x1"+
				"\x6D\x3\xFFFF\x1\xCF\x1\xD5\x1\xFFFF\x1\xD1\x1\xFFFF\x1\x167\x1\xD6"+
				"\x1\x3F\x1\x2C\x1\xD8\x1\x4\x2\xFFFF\x1\xD7\x2\xFFFF\x1\x6E\x1\x16\x1"+
				"\x6F\x1\xD9\x2\xFFFF\x1\x70\x1\x8\x1\xFFFF\x1\x71\x1\xDA\x1\x54\x3\xFFFF"+
				"\x1\x60\x1\xDB\x1\x40\x1\x15\x1\xFFFF\x1\xDD\x2\xFFFF\x1\xDE\x1\xFFFF"+
				"\x1\xDF\x1\xFFFF\x1\xE4\x3\xFFFF\x1\x55\x1\xE5\x1\x72\x7\xFFFF\x1\x56"+
				"\x1\xFFFF\x1\x3\x1\xDC\x1\xE0\x1\xE1\x1\xFFFF\x1\xE2\x1\xE3\x4\xFFFF"+
				"\x1\xE6\x1\xFFFF\x1\x73\x1\x74\x1\xE7\x1\x179\x2\xFFFF\x1\xE8\x1\x57"+
				"\x1\xFFFF\x1\xE9\x2\xFFFF\x1\xEA\x4\xFFFF\x1\x41\x1\xEB\x1\xFFFF\x1"+
				"\xEC\x3\xFFFF\x1\xED\x1\xEE\x2\xFFFF\x1\xEF\x5\xFFFF\x1\x176\x1\xF1"+
				"\x1\xF9\x1\xF2\x1\xF4\x1\xF5\x1\xF7\x1\xF3\x1\xF8\x1\xFA\x1\xFB\x1\xFC"+
				"\x1\xFD\x1\xFE\x1\xFF\x1\xFFFF\x1\xF6\x1\x17A\x1\x17\x1\x100\x1\x101"+
				"\x1\xF0\x1\x102\x1\x103\x1\x104\x1\x105\x1\x106\x3\xFFFF\x1\x107\x1"+
				"\x108\x1\x42\x1\x18\x1\xFFFF\x1\x109\x1\x19\x1\xFFFF\x1\x58\x2\xFFFF"+
				"\x1\x10A\x1\x43\x1\x10C\x1\xFFFF\x1\x10B\x1\xFFFF\x1\x59\x1\xFFFF\x1"+
				"\x44\x1\x45\x1\x46\x1\x10D\x1\xFFFF\x1\x10E\x1\x10F\x1\x110\x1\xFFFF"+
				"\x1\x111\x1\x112\x1\x114\x1\x113\x1\x75\x1\x116\x1\x117\x3\xFFFF\x1"+
				"\x2D\x1\x115\x1\xFFFF\x1\x9\x1\x1A\x1\xFFFF\x1\x2\x1\xFFFF\x1\x118\x1"+
				"\x119\x1\x47\x1\xFFFF\x1\x11B\x1\xFFFF\x1\x11A\x1\x76\x3\xFFFF\x1\x77"+
				"\x5\xFFFF\x1\x78\x1\x11C\x1\x11D\x1\x79\x1\x11E\x1\x7A\x1\x11F\x1\x120"+
				"\x1\x48\x1\x121\x1\x122\x1\x123\x1\xFFFF\x1\x49\x1\x4A\x1\x7B\x1\x2F"+
				"\x2\xFFFF\x1\x7C\x1\x124\x1\x125\x1\xFFFF\x1\x126\x1\xFFFF\x1\x127\x1"+
				"\x128\x1\x129\x1\x12A\x1\xFFFF\x1\x4B\x1\x12B\x1\x12C\x8\xFFFF\x1\x12D"+
				"\x1\x12E\x1\x130\x1\x12F\x1\x131\x2\xFFFF\x1\x132\x1\x133\x1\x134\x1"+
				"\xFFFF\x1\x135\x1\x7D\x1\xFFFF\x1\x136\x1\x7E\x1\x4C\x1\x137\x1\x4D"+
				"\x1\x138\x1\xFFFF\x1\x7F\x1\x139\x1\x80\x1\xFFFF\x1\x13A\x1\xFFFF\x1"+
				"\x13B\x1\xFFFF\x1\x5A\x2\xFFFF\x1\x81\x1\x13C\x1\x13D\x1\x140\x1\x13E"+
				"\x1\x13F\x1\xFFFF\x1\x141\x1\x82\x1\x142\x3\xFFFF\x1\x5B\x1\xFFFF\x1"+
				"\x83\x4\xFFFF\x1\x143\x1\x144\x1\x84\x1\x145\x1\x1B\x1\x5\x1\xFFFF\x1"+
				"\x147\x1\xFFFF\x1\x148\x1\x85\x1\x146\x1\x87\x1\xFFFF\x1\x149\x1\x86"+
				"\x1\xFFFF\x1\x88\x1\x14A\x1\x14B\x7\xFFFF\x1\x14D\x1\x14C\x1\xFFFF\x1"+
				"\x14E\x1\xFFFF\x1\x14F\x1\xFFFF\x1\x89\x1\xFFFF\x1\x150\x1\x151\x1\x1C"+
				"\x1\x1D\x1\x1E\x1\x1F\x1\x8A\x1\x152\x1\xFFFF\x1\x1\x1\x153\x1\x30\x1"+
				"\x154\x1\x155\x1\x156\x1\x31\x1\x32\x1\x20\x1\x157\x1\x158\x1\x159\x1"+
				"\x15A\x1\x33\x1\x21\x1\xFFFF\x1\x15B\x1\x15C\x1\x15D\x1\x15E\x1\xFFFF"+
				"\x1\x15F\x1\x160\x1\xFFFF\x1\x5C\x1\x5D\x1\x34\x1\x35\x5\xFFFF\x1\x161"+
				"\x1\x162\x1\xFFFF\x1\x163\x1\x22\x1\xA\x1\x4E\x1\x165\x1\x164\x1\x166"+
				"\x1\x168\x1\x169\x1\xFFFF\x1\x16B\x1\x16A\x1\x8B\x1\x8C\x2\xFFFF\x1"+
				"\x16C\x2\xFFFF\x1\x16D\x1\xFFFF\x1\x8F\x2\xFFFF\x1\x5E\x2\xFFFF\x1\x16E"+
				"\x1\xFFFF\x1\x36\x1\x38\x1\x37\x1\x171\x1\xFFFF\x1\x6\x3\xFFFF\x1\x16F"+
				"\x1\x23\x1\xFFFF\x1\x24\x1\x25\x1\x170\x1\x173\x1\x172\x1\x4F\x4\xFFFF"+
				"\x1\x174\x1\x8D\x2\xFFFF\x1\x175\x1\x8E\x1\xFFFF\x1\x5F\x5\xFFFF\x1"+
				"\x11",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1D2\x1\xFFFF\x1\x1D3\x1\x1D4\x1\x1D5\x1\x1D6\x1\x1D7\x3\xFFFF\x1"+
				"\x187\x1\x1D8\x1\xFFFF\x1\x19D\x1\x18E\x1\x19E\x1\xFFFF\x1\x18B\x1\x1D9"+
				"\x1\x1DA\x1\x1DC\x1\x1DB\x1\x1DE\x1\x1DD\x1\x19F\x2\xFFFF\x1\x1A0\x1"+
				"\xFFFF\x1\x185\x1\xFFFF\x1\x2EA\x1\x2F3\x1\x1DF\x1\x1E0\x1\x334\x1\x2E8"+
				"\x1\x335\x1\x32D\x1\x2F8\x1\x2F9\x1\x2FA\x2\xFFFF\x1\x1E1\x1\x1E2\x1"+
				"\x1E3\x1\xFFFF\x1\x1E4\x1\xFFFF\x1\x1A1\x1\x1A2\x2\xFFFF\x1\x1E5\x1"+
				"\x32B\x1\x2FB\x1\x1E6\x1\xFFFF\x1\x1E7\x1\x324\x1\xFFFF\x1\x1A3\x1\xFFFF"+
				"\x1\x1A4\x1\x1E8\x1\x1E9\x1\x1A5\x1\x1EA\x1\x1EB\x1\x2EB\x1\x1EC\x2"+
				"\xFFFF\x1\x1ED\x1\x190\x1\x1A6\x1\xFFFF\x1\x1A7\x1\x1EF\x1\x1F0\x1\x1F1"+
				"\x1\x1F2\x1\x1F3\x1\xFFFF\x1\x1F4\x1\x1F5\x1\xFFFF\x1\x1A8\x1\x1F6\x1"+
				"\xFFFF\x1\x1F7\x1\xFFFF\x1\x2FD\x1\x1F8\x1\xFFFF\x1\x2E2\x1\xFFFF\x1"+
				"\x1F9\x1\x311\x1\x312\x1\x314\x1\x317\x1\x325\x1\xFFFF\x1\x313\x2\xFFFF"+
				"\x1\x1FA\x1\x31F\x1\xFFFF\x1\x1FB\x1\x1FD\x1\x1FC\x1\x2FE\x1\xFFFF\x1"+
				"\x2FF\x1\xFFFF\x1\x1FE\x4\x2D7\x1\x1A9\x4\xFFFF\x1\x1FF\x1\xFFFF\x1"+
				"\x200\x1\xFFFF\x1\x18F\x1\xFFFF\x1\x201\x2\xFFFF\x1\x202\x1\x203\x1"+
				"\x204\x1\x205\x2\xFFFF\x1\x330\x1\x32F\x1\x1AA\x4\xFFFF\x1\x206\x1\x207"+
				"\x1\x208\x1\xFFFF\x1\x2DB\x1\xFFFF\x1\x217\x1\xFFFF\x1\x1AB\x1\x209"+
				"\x1\x20B\x1\x20C\x1\x20A\x1\x17D\x1\x20D\x1\x17C\x2\xFFFF\x1\x20E\x1"+
				"\x20F\x1\x210\x1\xFFFF\x1\x1AC\x1\x328\x1\xFFFF\x1\x211\x1\xFFFF\x1"+
				"\x212\x1\x213\x1\x315\x1\x2F7\x1\x215\x1\x214\x2\xFFFF\x1\x1EE\x1\x219"+
				"\x1\x21A\x1\x21B\x3\xFFFF\x1\x1AD\x1\x197\x2\xFFFF\x1\x216\x1\x21C\x1"+
				"\x2D5\x1\x218\x1\xFFFF\x1\x2C3\x1\x21D\x1\x21E\x1\x21F\x1\x221\x1\x2F0"+
				"\x2\xFFFF\x1\x220\x1\x181\x1\x182\x1\x1AE\x1\x301\x1\x1AF\x1\x222\x1"+
				"\x192\x1\xFFFF\x1\x1B0\x1\x2F4\x1\xFFFF\x1\x1B1\x1\x223\x1\x224\x3\x2D7"+
				"\x1\x1D1\x1\x225\x1\x320\x1\x300\x1\xFFFF\x1\x227\x1\x2D9\x1\xFFFF\x1"+
				"\x228\x1\xFFFF\x1\x229\x1\x2E1\x1\x22E\x3\xFFFF\x1\x326\x1\x22F\x1\x1B2"+
				"\x7\xFFFF\x1\x2EC\x1\x196\x1\x2EF\x1\x226\x1\x22A\x1\x22B\x1\x337\x1"+
				"\x22C\x1\x22D\x1\xFFFF\x1\x2E3\x2\xFFFF\x1\x230\x1\xFFFF\x1\x1B3\x1"+
				"\x1B4\x1\x231\x1\x329\x2\xFFFF\x1\x232\x1\x2DF\x1\x332\x1\x233\x1\x17F"+
				"\x1\x180\x1\x234\x1\x336\x1\x194\x2\xFFFF\x1\x235\x1\x236\x1\xFFFF\x1"+
				"\x237\x2\xFFFF\x1\x198\x1\x238\x1\x239\x1\x186\x1\x189\x1\x23A\x5\xFFFF"+
				"\x1\x327\x1\x23C\x1\x244\x1\x23D\x1\x23F\x1\x240\x1\x242\x1\x23E\x1"+
				"\x243\x1\x245\x1\x246\x1\x247\x1\x248\x1\x249\x1\x24A\x1\xFFFF\x1\x241"+
				"\x1\x32A\x1\x302\x1\x24B\x1\x24C\x1\x23B\x1\x24D\x1\x24E\x1\x24F\x1"+
				"\x250\x1\x251\x3\xFFFF\x1\x252\x1\x253\x1\x254\x1\x303\x1\xFFFF\x1\x255"+
				"\x1\x304\x1\x2E6\x1\x256\x2\x2D7\x1\x257\x1\x321\x1\x259\x1\xFFFF\x1"+
				"\x258\x1\x331\x1\x25A\x1\x32E\x1\x25B\x1\x25C\x1\x25D\x1\x25E\x1\xFFFF"+
				"\x1\x25F\x1\x260\x1\x261\x1\x2E5\x1\x262\x1\x263\x1\x265\x1\x264\x1"+
				"\x1B5\x1\x267\x1\x268\x1\x32C\x1\x17E\x1\x2E9\x1\x316\x1\x266\x1\xFFFF"+
				"\x1\x2F5\x1\x305\x1\x183\x1\x2EE\x1\xFFFF\x1\x269\x1\x26A\x1\x26B\x1"+
				"\x19B\x1\x26D\x1\xFFFF\x1\x26C\x1\x1B6\x3\xFFFF\x1\x1B7\x1\x18A\x1\x193"+
				"\x3\xFFFF\x1\x1B8\x1\x26E\x1\x26F\x1\x1B9\x1\x270\x1\x1BA\x1\x271\x1"+
				"\x272\x1\x273\x1\x274\x1\x275\x1\x276\x1\x2E7\x1\x277\x1\x278\x1\x1BB"+
				"\x1\x318\x2\xFFFF\x1\x1BC\x1\x279\x1\x27A\x1\xFFFF\x1\x27B\x1\x195\x1"+
				"\x27C\x1\x27D\x1\x27E\x1\x27F\x1\xFFFF\x1\x280\x1\x281\x1\x282\x1\xFFFF"+
				"\x1\x2D8\x6\xFFFF\x1\x283\x1\x284\x1\x286\x1\x285\x1\x287\x1\xFFFF\x1"+
				"\x184\x1\x288\x1\x289\x1\x28A\x1\xFFFF\x1\x28B\x1\x1BD\x1\xFFFF\x1\x28C"+
				"\x1\x1BE\x1\x322\x1\x28D\x1\x323\x1\x28E\x1\xFFFF\x1\x1BF\x1\x28F\x1"+
				"\x1C0\x1\xFFFF\x1\x290\x1\xFFFF\x1\x291\x1\xFFFF\x1\x2E0\x1\x333\x1"+
				"\xFFFF\x1\x1C1\x1\x292\x1\x293\x1\x296\x1\x294\x1\x295\x1\x19A\x1\x297"+
				"\x1\x1C2\x1\x298\x3\xFFFF\x1\x299\x1\x2D7\x1\x1C3\x1\xFFFF\x1\x18D\x1"+
				"\xFFFF\x1\x19C\x1\x29A\x1\x29B\x1\x1C4\x1\x29C\x1\x306\x1\x2F1\x1\x2DE"+
				"\x1\x29E\x1\xFFFF\x1\x29F\x1\x1C5\x1\x29D\x1\x1C7\x1\xFFFF\x1\x2A0\x1"+
				"\x1C6\x1\xFFFF\x1\x1C8\x1\x2A1\x1\x2A2\x7\xFFFF\x1\x2A4\x1\x2A3\x1\xFFFF"+
				"\x1\x2A5\x1\xFFFF\x1\x2A6\x1\xFFFF\x1\x1C9\x1\xFFFF\x1\x2A7\x1\x2A8"+
				"\x1\x307\x1\x308\x1\x309\x1\x30A\x1\x1CA\x1\x2A9\x1\x2E4\x1\x2ED\x1"+
				"\x2AA\x1\x2AB\x1\x2AC\x1\x2AD\x1\x2AE\x1\x319\x1\x31A\x1\x30B\x1\x2AF"+
				"\x1\x2B0\x1\x2B1\x1\x2B2\x1\x31B\x1\x30C\x1\xFFFF\x1\x2B3\x1\x2B4\x1"+
				"\x2B5\x1\x2B6\x1\xFFFF\x1\x2B7\x1\x2B8\x1\x2DA\x1\x2BF\x1\x2BC\x1\x2BD"+
				"\x1\x2BE\x5\xFFFF\x1\x2B9\x1\x2BA\x1\xFFFF\x1\x2BB\x1\x30D\x1\x2F6\x1"+
				"\x1CB\x1\x2C1\x1\x2C0\x1\x2C2\x1\x2C4\x1\x2C5\x1\xFFFF\x1\x2C7\x1\x2C6"+
				"\x1\x1CC\x1\x1CD\x1\x199\x1\xFFFF\x1\x2C8\x2\xFFFF\x1\x2C9\x1\xFFFF"+
				"\x1\x1D0\x2\xFFFF\x1\x2CA\x2\xFFFF\x1\x2CB\x1\x2D6\x1\x31C\x1\x31E\x1"+
				"\x31D\x1\x2CE\x1\xFFFF\x1\x2F2\x3\xFFFF\x1\x2CC\x1\x30E\x1\xFFFF\x1"+
				"\x30F\x1\x310\x1\x2CD\x1\x2D0\x1\x2CF\x1\x2D1\x1\x2DC\x1\x2DD\x1\xFFFF"+
				"\x1\x191\x1\x2D2\x1\x1CE\x2\xFFFF\x1\x2D3\x1\x1CF\x1\x188\x1\x2D4\x1"+
				"\x2D7\x4\xFFFF\x1\x2FC",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x339",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x33B\x1\xFFFF\x5\x33B\x4\xFFFF\x1\x33B\x3\xFFFF\x1\x33B\x2\xFFFF"+
				"\x7\x33B\x2\xFFFF\x1\x33B\x3\xFFFF\x4\x33B\x1\xFFFF\x1\x33B\x2\xFFFF"+
				"\x3\x33B\x2\xFFFF\x3\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x2\x33B\x2\xFFFF"+
				"\x4\x33B\x1\xFFFF\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x8\x33B\x2\xFFFF"+
				"\x1\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x6\x33B\x1\xFFFF\x2\x33B\x1\xFFFF"+
				"\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x2\x33B\x3\xFFFF\x6\x33B\x1\xFFFF"+
				"\x1\x33B\x2\xFFFF\x2\x33B\x1\xFFFF\x4\x33B\x1\xFFFF\x1\x33B\x1\xFFFF"+
				"\x1\x33B\x4\xFFFF\x1\x33B\x4\xFFFF\x1\x33B\x1\xFFFF\x1\x33B\x3\xFFFF"+
				"\x1\x33B\x2\xFFFF\x4\x33B\x4\xFFFF\x1\x33B\x4\xFFFF\x3\x33B\x3\xFFFF"+
				"\x1\x33B\x1\xFFFF\x5\x33B\x1\xFFFF\x2\x33B\x2\xFFFF\x3\x33B\x1\xFFFF"+
				"\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x6\x33B\x2\xFFFF\x4\x33B\x3\xFFFF"+
				"\x1\x33B\x3\xFFFF\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x6\x33B\x2\xFFFF"+
				"\x1\x33B\x2\xFFFF\x4\x33B\x2\xFFFF\x2\x33B\x1\xFFFF\x3\x33B\x3\xFFFF"+
				"\x4\x33B\x1\xFFFF\x1\x33B\x2\xFFFF\x1\x33B\x1\xFFFF\x1\x33B\x1\xFFFF"+
				"\x1\x33B\x3\xFFFF\x3\x33B\x7\xFFFF\x1\x33B\x1\xFFFF\x4\x33B\x1\xFFFF"+
				"\x2\x33B\x4\xFFFF\x1\x33B\x1\xFFFF\x4\x33B\x2\xFFFF\x2\x33B\x1\xFFFF"+
				"\x1\x33B\x2\xFFFF\x1\x33B\x4\xFFFF\x2\x33B\x1\xFFFF\x1\x33B\x3\xFFFF"+
				"\x2\x33B\x2\xFFFF\x1\x33B\x5\xFFFF\xF\x33B\x1\xFFFF\xB\x33B\x3\xFFFF"+
				"\x4\x33B\x1\xFFFF\x4\x33B\x2\xFFFF\x3\x33B\x1\xFFFF\x1\x33B\x1\xFFFF"+
				"\x1\x33B\x1\xFFFF\x4\x33B\x1\xFFFF\x3\x33B\x1\xFFFF\x8\x33B\x1\xFFFF"+
				"\x3\x33B\x1\xFFFF\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x3\x33B\x1\xFFFF"+
				"\x1\x33B\x1\xFFFF\x2\x33B\x3\xFFFF\x1\x33B\x5\xFFFF\x11\x33B\x2\xFFFF"+
				"\x3\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x4\x33B\x1\xFFFF\x3\x33B\x8\xFFFF"+
				"\x5\x33B\x2\xFFFF\x3\x33B\x1\xFFFF\x2\x33B\x1\xFFFF\x6\x33B\x1\xFFFF"+
				"\x3\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x1\x33B\x2\xFFFF"+
				"\x6\x33B\x1\xFFFF\x3\x33B\x3\xFFFF\x1\x33B\x1\xFFFF\x1\x33B\x1\x33A"+
				"\x3\xFFFF\x6\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x4\x33B\x1\xFFFF\x2\x33B"+
				"\x1\xFFFF\x3\x33B\x7\xFFFF\x2\x33B\x1\xFFFF\x1\x33B\x1\xFFFF\x1\x33B"+
				"\x1\xFFFF\x1\x33B\x1\xFFFF\x8\x33B\x1\xFFFF\xF\x33B\x1\xFFFF\x4\x33B"+
				"\x1\xFFFF\x2\x33B\x1\xFFFF\x4\x33B\x5\xFFFF\x2\x33B\x1\xFFFF\x9\x33B"+
				"\x1\xFFFF\x4\x33B\x2\xFFFF\x1\x33B\x2\xFFFF\x1\x33B\x1\xFFFF\x1\x33B"+
				"\x2\xFFFF\x1\x33B\x2\xFFFF\x1\x33B\x1\xFFFF\x4\x33B\x1\xFFFF\x1\x33B"+
				"\x3\xFFFF\x2\x33B\x1\xFFFF\x6\x33B\x4\xFFFF\x2\x33B\x2\xFFFF\x2\x33B"+
				"\x1\xFFFF\x1\x33B\x5\xFFFF\x1\x33B",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA161_eot = DFA.UnpackEncodedString(DFA161_eotS);
		private static readonly short[] DFA161_eof = DFA.UnpackEncodedString(DFA161_eofS);
		private static readonly char[] DFA161_min = DFA.UnpackEncodedStringToUnsignedChars(DFA161_minS);
		private static readonly char[] DFA161_max = DFA.UnpackEncodedStringToUnsignedChars(DFA161_maxS);
		private static readonly short[] DFA161_accept = DFA.UnpackEncodedString(DFA161_acceptS);
		private static readonly short[] DFA161_special = DFA.UnpackEncodedString(DFA161_specialS);
		private static readonly short[][] DFA161_transition;

		static DFA161()
		{
			int numStates = DFA161_transitionS.Length;
			DFA161_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA161_transition[i] = DFA.UnpackEncodedString(DFA161_transitionS[i]);
			}
		}

		public DFA161( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 161;
			this.eot = DFA161_eot;
			this.eof = DFA161_eof;
			this.min = DFA161_min;
			this.max = DFA161_max;
			this.accept = DFA161_accept;
			this.special = DFA161_special;
			this.transition = DFA161_transition;
		}

		public override string Description { get { return "914:1: primary : ( (lhsLit= literal )=> literal | ( subselect )=> subselect | EXISTS subselect -> ^( EXISTS subselect ) | param_marker | BINARY primary | ident | LPAREN exprList RPAREN | ROW LPAREN exprList RPAREN | LCURLY ident expr RCURLY | match_expr | case_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition161(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA161_0 = input.LA(1);


				int index161_0 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA161_0==STRING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 1;}

				else if ((LA161_0==NUMBER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 2;}

				else if ((LA161_0==INT_NUMBER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 3;}

				else if ((LA161_0==GLOBAL_VARIABLE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 4;}

				else if ((LA161_0==SESSION_VARIABLE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 5;}

				else if ((LA161_0==VALUE_PLACEHOLDER)) {s = 6;}

				else if ((LA161_0==BINARY_VALUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 7;}

				else if ((LA161_0==HEXA_VALUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 8;}

				else if ((LA161_0==NULL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 9;}

				else if ((LA161_0==TRUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 10;}

				else if ((LA161_0==FALSE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 11;}

				else if ((LA161_0==AVG)) {s = 12;}

				else if ((LA161_0==BIT_AND) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 13;}

				else if ((LA161_0==BIT_OR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 14;}

				else if ((LA161_0==BIT_XOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 15;}

				else if ((LA161_0==CAST) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 16;}

				else if ((LA161_0==CONCAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 17;}

				else if ((LA161_0==COUNT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 18;}

				else if ((LA161_0==DATE_ADD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 19;}

				else if ((LA161_0==DATE_SUB) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 20;}

				else if ((LA161_0==IFNULL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 21;}

				else if ((LA161_0==GROUP_CONCAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 22;}

				else if ((LA161_0==MAX) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 23;}

				else if ((LA161_0==MID) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 24;}

				else if ((LA161_0==MIN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 25;}

				else if ((LA161_0==NULLIF) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 26;}

				else if ((LA161_0==SESSION_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 27;}

				else if ((LA161_0==STD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 28;}

				else if ((LA161_0==STDDEV) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 29;}

				else if ((LA161_0==STDDEV_POP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 30;}

				else if ((LA161_0==STDDEV_SAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 31;}

				else if ((LA161_0==SUM) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 32;}

				else if ((LA161_0==SYSTEM_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 33;}

				else if ((LA161_0==TRIM) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 34;}

				else if ((LA161_0==VARIANCE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 35;}

				else if ((LA161_0==VAR_POP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 36;}

				else if ((LA161_0==VAR_SAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 37;}

				else if ((LA161_0==ADDDATE)) {s = 38;}

				else if ((LA161_0==CURDATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 39;}

				else if ((LA161_0==CURRENT_DATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 40;}

				else if ((LA161_0==CURTIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 41;}

				else if ((LA161_0==CURRENT_TIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 42;}

				else if ((LA161_0==EXTRACT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 43;}

				else if ((LA161_0==GET_FORMAT)) {s = 44;}

				else if ((LA161_0==NOW) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 45;}

				else if ((LA161_0==CURRENT_TIMESTAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 46;}

				else if ((LA161_0==POSITION) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 47;}

				else if ((LA161_0==SUBDATE)) {s = 48;}

				else if ((LA161_0==SUBSTR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 49;}

				else if ((LA161_0==SUBSTRING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 50;}

				else if ((LA161_0==SYSDATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 51;}

				else if ((LA161_0==TIMESTAMP_ADD)) {s = 52;}

				else if ((LA161_0==TIMESTAMP_DIFF)) {s = 53;}

				else if ((LA161_0==UTC_DATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 54;}

				else if ((LA161_0==UTC_TIMESTAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 55;}

				else if ((LA161_0==UTC_TIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 56;}

				else if ((LA161_0==ASCII)) {s = 57;}

				else if ((LA161_0==CHARSET)) {s = 58;}

				else if ((LA161_0==COALESCE)) {s = 59;}

				else if ((LA161_0==COLLATION)) {s = 60;}

				else if ((LA161_0==CONTAINS)) {s = 61;}

				else if ((LA161_0==DATABASE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 62;}

				else if ((LA161_0==GEOMETRYCOLLECTION)) {s = 63;}

				else if ((LA161_0==IF) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 64;}

				else if ((LA161_0==LINESTRING)) {s = 65;}

				else if ((LA161_0==MICROSECOND)) {s = 66;}

				else if ((LA161_0==MOD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 67;}

				else if ((LA161_0==MULTILINESTRING)) {s = 68;}

				else if ((LA161_0==MULTIPOINT)) {s = 69;}

				else if ((LA161_0==MULTIPOLYGON)) {s = 70;}

				else if ((LA161_0==OLD_PASSWORD)) {s = 71;}

				else if ((LA161_0==PASSWORD)) {s = 72;}

				else if ((LA161_0==POINT)) {s = 73;}

				else if ((LA161_0==POLYGON)) {s = 74;}

				else if ((LA161_0==QUARTER)) {s = 75;}

				else if ((LA161_0==REPEAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 76;}

				else if ((LA161_0==REPLACE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 77;}

				else if ((LA161_0==TRUNCATE)) {s = 78;}

				else if ((LA161_0==WEEK)) {s = 79;}

				else if ((LA161_0==CHAR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 80;}

				else if ((LA161_0==CURRENT_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 81;}

				else if ((LA161_0==DATE)) {s = 82;}

				else if ((LA161_0==DAY)) {s = 83;}

				else if ((LA161_0==HOUR)) {s = 84;}

				else if ((LA161_0==INSERT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 85;}

				else if ((LA161_0==INTERVAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 86;}

				else if ((LA161_0==LEFT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 87;}

				else if ((LA161_0==MINUTE)) {s = 88;}

				else if ((LA161_0==MONTH)) {s = 89;}

				else if ((LA161_0==RIGHT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 90;}

				else if ((LA161_0==SECOND)) {s = 91;}

				else if ((LA161_0==TIME)) {s = 92;}

				else if ((LA161_0==TIMESTAMP)) {s = 93;}

				else if ((LA161_0==USER)) {s = 94;}

				else if ((LA161_0==YEAR)) {s = 95;}

				else if ((LA161_0==ID)) {s = 96;}

				else if ((LA161_0==BACKUP)) {s = 97;}

				else if ((LA161_0==BEGIN)) {s = 98;}

				else if ((LA161_0==BYTE)) {s = 99;}

				else if ((LA161_0==CACHE)) {s = 100;}

				else if ((LA161_0==CHECKSUM)) {s = 101;}

				else if ((LA161_0==CLOSE)) {s = 102;}

				else if ((LA161_0==COMMENT)) {s = 103;}

				else if ((LA161_0==COMMIT)) {s = 104;}

				else if ((LA161_0==DEALLOCATE)) {s = 105;}

				else if ((LA161_0==DO)) {s = 106;}

				else if ((LA161_0==END)) {s = 107;}

				else if ((LA161_0==EXECUTE)) {s = 108;}

				else if ((LA161_0==FLUSH)) {s = 109;}

				else if ((LA161_0==GROUP)) {s = 110;}

				else if ((LA161_0==HANDLER)) {s = 111;}

				else if ((LA161_0==HELP)) {s = 112;}

				else if ((LA161_0==HOST)) {s = 113;}

				else if ((LA161_0==INSTALL)) {s = 114;}

				else if ((LA161_0==LABEL)) {s = 115;}

				else if ((LA161_0==LANGUAGE)) {s = 116;}

				else if ((LA161_0==NO)) {s = 117;}

				else if ((LA161_0==OPEN)) {s = 118;}

				else if ((LA161_0==OPTIONS)) {s = 119;}

				else if ((LA161_0==OWNER)) {s = 120;}

				else if ((LA161_0==PARSER)) {s = 121;}

				else if ((LA161_0==PARTITION)) {s = 122;}

				else if ((LA161_0==PORT)) {s = 123;}

				else if ((LA161_0==PREPARE)) {s = 124;}

				else if ((LA161_0==REMOVE)) {s = 125;}

				else if ((LA161_0==REPAIR)) {s = 126;}

				else if ((LA161_0==RESET)) {s = 127;}

				else if ((LA161_0==RESTORE)) {s = 128;}

				else if ((LA161_0==ROLLBACK)) {s = 129;}

				else if ((LA161_0==SAVEPOINT)) {s = 130;}

				else if ((LA161_0==SECURITY)) {s = 131;}

				else if ((LA161_0==SERVER)) {s = 132;}

				else if ((LA161_0==SIGNED)) {s = 133;}

				else if ((LA161_0==SOCKET)) {s = 134;}

				else if ((LA161_0==SLAVE)) {s = 135;}

				else if ((LA161_0==SONAME)) {s = 136;}

				else if ((LA161_0==START)) {s = 137;}

				else if ((LA161_0==STOP)) {s = 138;}

				else if ((LA161_0==UNICODE)) {s = 139;}

				else if ((LA161_0==UNINSTALL)) {s = 140;}

				else if ((LA161_0==WRAPPER)) {s = 141;}

				else if ((LA161_0==XA)) {s = 142;}

				else if ((LA161_0==UPGRADE)) {s = 143;}

				else if ((LA161_0==ACTION)) {s = 144;}

				else if ((LA161_0==AFTER)) {s = 145;}

				else if ((LA161_0==AGAINST)) {s = 146;}

				else if ((LA161_0==AGGREGATE)) {s = 147;}

				else if ((LA161_0==ALGORITHM)) {s = 148;}

				else if ((LA161_0==ANY)) {s = 149;}

				else if ((LA161_0==AT)) {s = 150;}

				else if ((LA161_0==AUTHORS)) {s = 151;}

				else if ((LA161_0==AUTO_INCREMENT)) {s = 152;}

				else if ((LA161_0==AUTOEXTEND_SIZE)) {s = 153;}

				else if ((LA161_0==AVG_ROW_LENGTH)) {s = 154;}

				else if ((LA161_0==BINLOG)) {s = 155;}

				else if ((LA161_0==BIT)) {s = 156;}

				else if ((LA161_0==BLOCK)) {s = 157;}

				else if ((LA161_0==BOOL)) {s = 158;}

				else if ((LA161_0==BOOLEAN)) {s = 159;}

				else if ((LA161_0==BTREE)) {s = 160;}

				else if ((LA161_0==CASCADED)) {s = 161;}

				else if ((LA161_0==CHAIN)) {s = 162;}

				else if ((LA161_0==CHANGED)) {s = 163;}

				else if ((LA161_0==CIPHER)) {s = 164;}

				else if ((LA161_0==CLIENT)) {s = 165;}

				else if ((LA161_0==CODE)) {s = 166;}

				else if ((LA161_0==COLUMNS)) {s = 167;}

				else if ((LA161_0==FIELDS)) {s = 168;}

				else if ((LA161_0==COMMITTED)) {s = 169;}

				else if ((LA161_0==COMPACT)) {s = 170;}

				else if ((LA161_0==COMPLETION)) {s = 171;}

				else if ((LA161_0==COMPRESSED)) {s = 172;}

				else if ((LA161_0==CONCURRENT)) {s = 173;}

				else if ((LA161_0==CONNECTION)) {s = 174;}

				else if ((LA161_0==CONSISTENT)) {s = 175;}

				else if ((LA161_0==CONTEXT)) {s = 176;}

				else if ((LA161_0==CONTRIBUTORS)) {s = 177;}

				else if ((LA161_0==CPU)) {s = 178;}

				else if ((LA161_0==CUBE)) {s = 179;}

				else if ((LA161_0==DATA)) {s = 180;}

				else if ((LA161_0==DATAFILE)) {s = 181;}

				else if ((LA161_0==DATETIME)) {s = 182;}

				else if ((LA161_0==DEFINER)) {s = 183;}

				else if ((LA161_0==DELAY_KEY_WRITE)) {s = 184;}

				else if ((LA161_0==DES_KEY_FILE)) {s = 185;}

				else if ((LA161_0==DIRECTORY)) {s = 186;}

				else if ((LA161_0==DISABLE)) {s = 187;}

				else if ((LA161_0==DISCARD)) {s = 188;}

				else if ((LA161_0==DISK)) {s = 189;}

				else if ((LA161_0==DUMPFILE)) {s = 190;}

				else if ((LA161_0==DUPLICATE)) {s = 191;}

				else if ((LA161_0==DYNAMIC)) {s = 192;}

				else if ((LA161_0==ENDS)) {s = 193;}

				else if ((LA161_0==ENUM)) {s = 194;}

				else if ((LA161_0==ENGINE)) {s = 195;}

				else if ((LA161_0==ENGINES)) {s = 196;}

				else if ((LA161_0==ERRORS)) {s = 197;}

				else if ((LA161_0==ESCAPE)) {s = 198;}

				else if ((LA161_0==EVENT)) {s = 199;}

				else if ((LA161_0==EVENTS)) {s = 200;}

				else if ((LA161_0==EVERY)) {s = 201;}

				else if ((LA161_0==EXPANSION)) {s = 202;}

				else if ((LA161_0==EXTENDED)) {s = 203;}

				else if ((LA161_0==EXTENT_SIZE)) {s = 204;}

				else if ((LA161_0==FAULTS)) {s = 205;}

				else if ((LA161_0==FAST)) {s = 206;}

				else if ((LA161_0==FOUND)) {s = 207;}

				else if ((LA161_0==ENABLE)) {s = 208;}

				else if ((LA161_0==FULL)) {s = 209;}

				else if ((LA161_0==FILE)) {s = 210;}

				else if ((LA161_0==FIRST)) {s = 211;}

				else if ((LA161_0==FIXED)) {s = 212;}

				else if ((LA161_0==FRAC_SECOND)) {s = 213;}

				else if ((LA161_0==GEOMETRY)) {s = 214;}

				else if ((LA161_0==GRANTS)) {s = 215;}

				else if ((LA161_0==GLOBAL)) {s = 216;}

				else if ((LA161_0==HASH)) {s = 217;}

				else if ((LA161_0==HOSTS)) {s = 218;}

				else if ((LA161_0==IDENTIFIED)) {s = 219;}

				else if ((LA161_0==INVOKER)) {s = 220;}

				else if ((LA161_0==IMPORT)) {s = 221;}

				else if ((LA161_0==INDEXES)) {s = 222;}

				else if ((LA161_0==INITIAL_SIZE)) {s = 223;}

				else if ((LA161_0==IO)) {s = 224;}

				else if ((LA161_0==IPC)) {s = 225;}

				else if ((LA161_0==ISOLATION)) {s = 226;}

				else if ((LA161_0==ISSUER)) {s = 227;}

				else if ((LA161_0==INNOBASE)) {s = 228;}

				else if ((LA161_0==INSERT_METHOD)) {s = 229;}

				else if ((LA161_0==KEY_BLOCK_SIZE)) {s = 230;}

				else if ((LA161_0==LAST)) {s = 231;}

				else if ((LA161_0==LEAVES)) {s = 232;}

				else if ((LA161_0==LESS)) {s = 233;}

				else if ((LA161_0==LEVEL)) {s = 234;}

				else if ((LA161_0==LIST)) {s = 235;}

				else if ((LA161_0==LOCAL)) {s = 236;}

				else if ((LA161_0==LOCKS)) {s = 237;}

				else if ((LA161_0==LOGFILE)) {s = 238;}

				else if ((LA161_0==LOGS)) {s = 239;}

				else if ((LA161_0==MAX_ROWS)) {s = 240;}

				else if ((LA161_0==MASTER)) {s = 241;}

				else if ((LA161_0==MASTER_HOST)) {s = 242;}

				else if ((LA161_0==MASTER_PORT)) {s = 243;}

				else if ((LA161_0==MASTER_LOG_FILE)) {s = 244;}

				else if ((LA161_0==MASTER_LOG_POS)) {s = 245;}

				else if ((LA161_0==MASTER_USER)) {s = 246;}

				else if ((LA161_0==MASTER_PASSWORD)) {s = 247;}

				else if ((LA161_0==MASTER_SERVER_ID)) {s = 248;}

				else if ((LA161_0==MASTER_CONNECT_RETRY)) {s = 249;}

				else if ((LA161_0==MASTER_SSL)) {s = 250;}

				else if ((LA161_0==MASTER_SSL_CA)) {s = 251;}

				else if ((LA161_0==MASTER_SSL_CAPATH)) {s = 252;}

				else if ((LA161_0==MASTER_SSL_CERT)) {s = 253;}

				else if ((LA161_0==MASTER_SSL_CIPHER)) {s = 254;}

				else if ((LA161_0==MASTER_SSL_KEY)) {s = 255;}

				else if ((LA161_0==MAX_CONNECTIONS_PER_HOUR)) {s = 256;}

				else if ((LA161_0==MAX_QUERIES_PER_HOUR)) {s = 257;}

				else if ((LA161_0==MAX_SIZE)) {s = 258;}

				else if ((LA161_0==MAX_UPDATES_PER_HOUR)) {s = 259;}

				else if ((LA161_0==MAX_USER_CONNECTIONS)) {s = 260;}

				else if ((LA161_0==MAX_VALUE)) {s = 261;}

				else if ((LA161_0==MEDIUM)) {s = 262;}

				else if ((LA161_0==MEMORY)) {s = 263;}

				else if ((LA161_0==MERGE)) {s = 264;}

				else if ((LA161_0==MIGRATE)) {s = 265;}

				else if ((LA161_0==MIN_ROWS)) {s = 266;}

				else if ((LA161_0==MODIFY)) {s = 267;}

				else if ((LA161_0==MODE)) {s = 268;}

				else if ((LA161_0==MUTEX)) {s = 269;}

				else if ((LA161_0==NAME)) {s = 270;}

				else if ((LA161_0==NAMES)) {s = 271;}

				else if ((LA161_0==NATIONAL)) {s = 272;}

				else if ((LA161_0==NCHAR)) {s = 273;}

				else if ((LA161_0==NDBCLUSTER)) {s = 274;}

				else if ((LA161_0==NEXT)) {s = 275;}

				else if ((LA161_0==NEW)) {s = 276;}

				else if ((LA161_0==NO_WAIT)) {s = 277;}

				else if ((LA161_0==NODEGROUP)) {s = 278;}

				else if ((LA161_0==NONE)) {s = 279;}

				else if ((LA161_0==NVARCHAR)) {s = 280;}

				else if ((LA161_0==OFFSET)) {s = 281;}

				else if ((LA161_0==ONE_SHOT)) {s = 282;}

				else if ((LA161_0==ONE)) {s = 283;}

				else if ((LA161_0==PACK_KEYS)) {s = 284;}

				else if ((LA161_0==PAGE)) {s = 285;}

				else if ((LA161_0==PARTIAL)) {s = 286;}

				else if ((LA161_0==PARTITIONING)) {s = 287;}

				else if ((LA161_0==PARTITIONS)) {s = 288;}

				else if ((LA161_0==PHASE)) {s = 289;}

				else if ((LA161_0==PLUGIN)) {s = 290;}

				else if ((LA161_0==PLUGINS)) {s = 291;}

				else if ((LA161_0==PRESERVE)) {s = 292;}

				else if ((LA161_0==PREV)) {s = 293;}

				else if ((LA161_0==PRIVILEGES)) {s = 294;}

				else if ((LA161_0==PROCESS)) {s = 295;}

				else if ((LA161_0==PROCESSLIST)) {s = 296;}

				else if ((LA161_0==PROFILE)) {s = 297;}

				else if ((LA161_0==PROFILES)) {s = 298;}

				else if ((LA161_0==QUERY)) {s = 299;}

				else if ((LA161_0==QUICK)) {s = 300;}

				else if ((LA161_0==REBUILD)) {s = 301;}

				else if ((LA161_0==RECOVER)) {s = 302;}

				else if ((LA161_0==REDO_BUFFER_SIZE)) {s = 303;}

				else if ((LA161_0==REDOFILE)) {s = 304;}

				else if ((LA161_0==REDUNDANT)) {s = 305;}

				else if ((LA161_0==RELAY_LOG_FILE)) {s = 306;}

				else if ((LA161_0==RELAY_LOG_POS)) {s = 307;}

				else if ((LA161_0==RELAY_THREAD)) {s = 308;}

				else if ((LA161_0==RELOAD)) {s = 309;}

				else if ((LA161_0==REORGANIZE)) {s = 310;}

				else if ((LA161_0==REPEATABLE)) {s = 311;}

				else if ((LA161_0==REPLICATION)) {s = 312;}

				else if ((LA161_0==RESOURCES)) {s = 313;}

				else if ((LA161_0==RESUME)) {s = 314;}

				else if ((LA161_0==RETURNS)) {s = 315;}

				else if ((LA161_0==ROLLUP)) {s = 316;}

				else if ((LA161_0==ROUTINE)) {s = 317;}

				else if ((LA161_0==ROWS)) {s = 318;}

				else if ((LA161_0==ROW_FORMAT)) {s = 319;}

				else if ((LA161_0==ROW)) {s = 320;}

				else if ((LA161_0==RTREE)) {s = 321;}

				else if ((LA161_0==SCHEDULE)) {s = 322;}

				else if ((LA161_0==SERIAL)) {s = 323;}

				else if ((LA161_0==SERIALIZABLE)) {s = 324;}

				else if ((LA161_0==SESSION)) {s = 325;}

				else if ((LA161_0==SIMPLE)) {s = 326;}

				else if ((LA161_0==SHARE)) {s = 327;}

				else if ((LA161_0==SHUTDOWN)) {s = 328;}

				else if ((LA161_0==SNAPSHOT)) {s = 329;}

				else if ((LA161_0==SOUNDS)) {s = 330;}

				else if ((LA161_0==SOURCE)) {s = 331;}

				else if ((LA161_0==SQL_CACHE)) {s = 332;}

				else if ((LA161_0==SQL_BUFFER_RESULT)) {s = 333;}

				else if ((LA161_0==SQL_NO_CACHE)) {s = 334;}

				else if ((LA161_0==SQL_THREAD)) {s = 335;}

				else if ((LA161_0==STARTS)) {s = 336;}

				else if ((LA161_0==STATUS)) {s = 337;}

				else if ((LA161_0==STORAGE)) {s = 338;}

				else if ((LA161_0==STRING_KEYWORD)) {s = 339;}

				else if ((LA161_0==SUBJECT)) {s = 340;}

				else if ((LA161_0==SUBPARTITION)) {s = 341;}

				else if ((LA161_0==SUBPARTITIONS)) {s = 342;}

				else if ((LA161_0==SUPER)) {s = 343;}

				else if ((LA161_0==SUSPEND)) {s = 344;}

				else if ((LA161_0==SWAPS)) {s = 345;}

				else if ((LA161_0==SWITCHES)) {s = 346;}

				else if ((LA161_0==TABLES)) {s = 347;}

				else if ((LA161_0==TABLESPACE)) {s = 348;}

				else if ((LA161_0==TEMPORARY)) {s = 349;}

				else if ((LA161_0==TEMPTABLE)) {s = 350;}

				else if ((LA161_0==TEXT)) {s = 351;}

				else if ((LA161_0==THAN)) {s = 352;}

				else if ((LA161_0==TRANSACTION)) {s = 353;}

				else if ((LA161_0==TRANSACTIONAL)) {s = 354;}

				else if ((LA161_0==TRIGGERS)) {s = 355;}

				else if ((LA161_0==TYPES)) {s = 356;}

				else if ((LA161_0==TYPE)) {s = 357;}

				else if ((LA161_0==UDF_RETURNS)) {s = 358;}

				else if ((LA161_0==FUNCTION)) {s = 359;}

				else if ((LA161_0==UNCOMMITTED)) {s = 360;}

				else if ((LA161_0==UNDEFINED)) {s = 361;}

				else if ((LA161_0==UNDO_BUFFER_SIZE)) {s = 362;}

				else if ((LA161_0==UNDOFILE)) {s = 363;}

				else if ((LA161_0==UNKNOWN)) {s = 364;}

				else if ((LA161_0==UNTIL)) {s = 365;}

				else if ((LA161_0==USE_FRM)) {s = 366;}

				else if ((LA161_0==VARIABLES)) {s = 367;}

				else if ((LA161_0==VIEW)) {s = 368;}

				else if ((LA161_0==VALUE)) {s = 369;}

				else if ((LA161_0==WARNINGS)) {s = 370;}

				else if ((LA161_0==WAIT)) {s = 371;}

				else if ((LA161_0==WORK)) {s = 372;}

				else if ((LA161_0==X509)) {s = 373;}

				else if ((LA161_0==LPAREN)) {s = 374;}

				else if ((LA161_0==EXISTS)) {s = 375;}

				else if ((LA161_0==BINARY)) {s = 376;}

				else if ((LA161_0==LCURLY)) {s = 377;}

				else if ((LA161_0==MATCH)) {s = 378;}

				else if ((LA161_0==CASE)) {s = 379;}


				input.Seek(index161_0);
				if (s >= 0) return s;
				break;
			case 1:
				int LA161_6 = input.LA(1);


				int index161_6 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA161_6==ESCAPE)) {s = 380;}

				else if ((LA161_6==EQUALS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 381;}

				else if ((LA161_6==NOT_EQUAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 382;}

				else if ((LA161_6==LESS_THAN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 383;}

				else if ((LA161_6==LESS_THAN_EQUAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 384;}

				else if ((LA161_6==GREATER_THAN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 385;}

				else if ((LA161_6==GREATER_THAN_EQUAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 386;}

				else if ((LA161_6==NULL_SAFE_NOT_EQUAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 387;}

				else if ((LA161_6==REGEXP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 388;}

				else if ((LA161_6==BETWEEN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 389;}

				else if ((LA161_6==LOGICAL_AND) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 390;}

				else if ((LA161_6==AND) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 391;}

				else if ((LA161_6==XOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 392;}

				else if ((LA161_6==LOGICAL_OR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 393;}

				else if ((LA161_6==OR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 394;}

				else if ((LA161_6==ASSIGN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 395;}

				else if ((LA161_6==EOF) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 396;}

				else if ((LA161_6==SEMI) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 397;}

				else if ((LA161_6==ASC) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 398;}

				else if ((LA161_6==DESC) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 399;}

				else if ((LA161_6==COMMA) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 400;}

				else if ((LA161_6==WITH) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 401;}

				else if ((LA161_6==HAVING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 402;}

				else if ((LA161_6==ORDER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 403;}

				else if ((LA161_6==LIMIT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 404;}

				else if ((LA161_6==PROCEDURE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 405;}

				else if ((LA161_6==INTO) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 406;}

				else if ((LA161_6==FOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 407;}

				else if ((LA161_6==LOCK) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 408;}

				else if ((LA161_6==UNION) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 409;}

				else if ((LA161_6==RPAREN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 410;}

				else if ((LA161_6==ON) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 411;}

				else if ((LA161_6==SEPARATOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 412;}

				else if ((LA161_6==AS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 413;}

				else if ((LA161_6==ASCII)) {s = 414;}

				else if ((LA161_6==BACKUP)) {s = 415;}

				else if ((LA161_6==BEGIN)) {s = 416;}

				else if ((LA161_6==BYTE)) {s = 417;}

				else if ((LA161_6==CACHE)) {s = 418;}

				else if ((LA161_6==CHARSET)) {s = 419;}

				else if ((LA161_6==CHECKSUM)) {s = 420;}

				else if ((LA161_6==CLOSE)) {s = 421;}

				else if ((LA161_6==COMMENT)) {s = 422;}

				else if ((LA161_6==COMMIT)) {s = 423;}

				else if ((LA161_6==CONTAINS)) {s = 424;}

				else if ((LA161_6==DEALLOCATE)) {s = 425;}

				else if ((LA161_6==DO)) {s = 426;}

				else if ((LA161_6==END)) {s = 427;}

				else if ((LA161_6==EXECUTE)) {s = 428;}

				else if ((LA161_6==FLUSH)) {s = 429;}

				else if ((LA161_6==GROUP)) {s = 430;}

				else if ((LA161_6==HANDLER)) {s = 431;}

				else if ((LA161_6==HELP)) {s = 432;}

				else if ((LA161_6==HOST)) {s = 433;}

				else if ((LA161_6==INSTALL)) {s = 434;}

				else if ((LA161_6==LABEL)) {s = 435;}

				else if ((LA161_6==LANGUAGE)) {s = 436;}

				else if ((LA161_6==NO)) {s = 437;}

				else if ((LA161_6==OPEN)) {s = 438;}

				else if ((LA161_6==OPTIONS)) {s = 439;}

				else if ((LA161_6==OWNER)) {s = 440;}

				else if ((LA161_6==PARSER)) {s = 441;}

				else if ((LA161_6==PARTITION)) {s = 442;}

				else if ((LA161_6==PORT)) {s = 443;}

				else if ((LA161_6==PREPARE)) {s = 444;}

				else if ((LA161_6==REMOVE)) {s = 445;}

				else if ((LA161_6==REPAIR)) {s = 446;}

				else if ((LA161_6==RESET)) {s = 447;}

				else if ((LA161_6==RESTORE)) {s = 448;}

				else if ((LA161_6==ROLLBACK)) {s = 449;}

				else if ((LA161_6==SAVEPOINT)) {s = 450;}

				else if ((LA161_6==SECURITY)) {s = 451;}

				else if ((LA161_6==SERVER)) {s = 452;}

				else if ((LA161_6==SIGNED)) {s = 453;}

				else if ((LA161_6==SOCKET)) {s = 454;}

				else if ((LA161_6==SLAVE)) {s = 455;}

				else if ((LA161_6==SONAME)) {s = 456;}

				else if ((LA161_6==START)) {s = 457;}

				else if ((LA161_6==STOP)) {s = 458;}

				else if ((LA161_6==TRUNCATE)) {s = 459;}

				else if ((LA161_6==UNICODE)) {s = 460;}

				else if ((LA161_6==UNINSTALL)) {s = 461;}

				else if ((LA161_6==WRAPPER)) {s = 462;}

				else if ((LA161_6==XA)) {s = 463;}

				else if ((LA161_6==UPGRADE)) {s = 464;}

				else if ((LA161_6==ID)) {s = 465;}

				else if ((LA161_6==ACTION)) {s = 466;}

				else if ((LA161_6==ADDDATE)) {s = 467;}

				else if ((LA161_6==AFTER)) {s = 468;}

				else if ((LA161_6==AGAINST)) {s = 469;}

				else if ((LA161_6==AGGREGATE)) {s = 470;}

				else if ((LA161_6==ALGORITHM)) {s = 471;}

				else if ((LA161_6==ANY)) {s = 472;}

				else if ((LA161_6==AT)) {s = 473;}

				else if ((LA161_6==AUTHORS)) {s = 474;}

				else if ((LA161_6==AUTO_INCREMENT)) {s = 475;}

				else if ((LA161_6==AUTOEXTEND_SIZE)) {s = 476;}

				else if ((LA161_6==AVG_ROW_LENGTH)) {s = 477;}

				else if ((LA161_6==AVG)) {s = 478;}

				else if ((LA161_6==BINLOG)) {s = 479;}

				else if ((LA161_6==BIT)) {s = 480;}

				else if ((LA161_6==BLOCK)) {s = 481;}

				else if ((LA161_6==BOOL)) {s = 482;}

				else if ((LA161_6==BOOLEAN)) {s = 483;}

				else if ((LA161_6==BTREE)) {s = 484;}

				else if ((LA161_6==CASCADED)) {s = 485;}

				else if ((LA161_6==CHAIN)) {s = 486;}

				else if ((LA161_6==CHANGED)) {s = 487;}

				else if ((LA161_6==CIPHER)) {s = 488;}

				else if ((LA161_6==CLIENT)) {s = 489;}

				else if ((LA161_6==COALESCE)) {s = 490;}

				else if ((LA161_6==CODE)) {s = 491;}

				else if ((LA161_6==COLLATION)) {s = 492;}

				else if ((LA161_6==COLUMNS)) {s = 493;}

				else if ((LA161_6==FIELDS)) {s = 494;}

				else if ((LA161_6==COMMITTED)) {s = 495;}

				else if ((LA161_6==COMPACT)) {s = 496;}

				else if ((LA161_6==COMPLETION)) {s = 497;}

				else if ((LA161_6==COMPRESSED)) {s = 498;}

				else if ((LA161_6==CONCURRENT)) {s = 499;}

				else if ((LA161_6==CONNECTION)) {s = 500;}

				else if ((LA161_6==CONSISTENT)) {s = 501;}

				else if ((LA161_6==CONTEXT)) {s = 502;}

				else if ((LA161_6==CONTRIBUTORS)) {s = 503;}

				else if ((LA161_6==CPU)) {s = 504;}

				else if ((LA161_6==CUBE)) {s = 505;}

				else if ((LA161_6==DATA)) {s = 506;}

				else if ((LA161_6==DATAFILE)) {s = 507;}

				else if ((LA161_6==DATETIME)) {s = 508;}

				else if ((LA161_6==DATE)) {s = 509;}

				else if ((LA161_6==DAY)) {s = 510;}

				else if ((LA161_6==DEFINER)) {s = 511;}

				else if ((LA161_6==DELAY_KEY_WRITE)) {s = 512;}

				else if ((LA161_6==DES_KEY_FILE)) {s = 513;}

				else if ((LA161_6==DIRECTORY)) {s = 514;}

				else if ((LA161_6==DISABLE)) {s = 515;}

				else if ((LA161_6==DISCARD)) {s = 516;}

				else if ((LA161_6==DISK)) {s = 517;}

				else if ((LA161_6==DUMPFILE)) {s = 518;}

				else if ((LA161_6==DUPLICATE)) {s = 519;}

				else if ((LA161_6==DYNAMIC)) {s = 520;}

				else if ((LA161_6==ENDS)) {s = 521;}

				else if ((LA161_6==ENUM)) {s = 522;}

				else if ((LA161_6==ENGINE)) {s = 523;}

				else if ((LA161_6==ENGINES)) {s = 524;}

				else if ((LA161_6==ERRORS)) {s = 525;}

				else if ((LA161_6==EVENT)) {s = 526;}

				else if ((LA161_6==EVENTS)) {s = 527;}

				else if ((LA161_6==EVERY)) {s = 528;}

				else if ((LA161_6==EXPANSION)) {s = 529;}

				else if ((LA161_6==EXTENDED)) {s = 530;}

				else if ((LA161_6==EXTENT_SIZE)) {s = 531;}

				else if ((LA161_6==FAULTS)) {s = 532;}

				else if ((LA161_6==FAST)) {s = 533;}

				else if ((LA161_6==FOUND)) {s = 534;}

				else if ((LA161_6==ENABLE)) {s = 535;}

				else if ((LA161_6==FULL)) {s = 536;}

				else if ((LA161_6==FILE)) {s = 537;}

				else if ((LA161_6==FIRST)) {s = 538;}

				else if ((LA161_6==FIXED)) {s = 539;}

				else if ((LA161_6==FRAC_SECOND)) {s = 540;}

				else if ((LA161_6==GEOMETRY)) {s = 541;}

				else if ((LA161_6==GEOMETRYCOLLECTION)) {s = 542;}

				else if ((LA161_6==GET_FORMAT)) {s = 543;}

				else if ((LA161_6==GRANTS)) {s = 544;}

				else if ((LA161_6==GLOBAL)) {s = 545;}

				else if ((LA161_6==HASH)) {s = 546;}

				else if ((LA161_6==HOSTS)) {s = 547;}

				else if ((LA161_6==HOUR)) {s = 548;}

				else if ((LA161_6==IDENTIFIED)) {s = 549;}

				else if ((LA161_6==INVOKER)) {s = 550;}

				else if ((LA161_6==IMPORT)) {s = 551;}

				else if ((LA161_6==INDEXES)) {s = 552;}

				else if ((LA161_6==INITIAL_SIZE)) {s = 553;}

				else if ((LA161_6==IO)) {s = 554;}

				else if ((LA161_6==IPC)) {s = 555;}

				else if ((LA161_6==ISOLATION)) {s = 556;}

				else if ((LA161_6==ISSUER)) {s = 557;}

				else if ((LA161_6==INNOBASE)) {s = 558;}

				else if ((LA161_6==INSERT_METHOD)) {s = 559;}

				else if ((LA161_6==KEY_BLOCK_SIZE)) {s = 560;}

				else if ((LA161_6==LAST)) {s = 561;}

				else if ((LA161_6==LEAVES)) {s = 562;}

				else if ((LA161_6==LESS)) {s = 563;}

				else if ((LA161_6==LEVEL)) {s = 564;}

				else if ((LA161_6==LINESTRING)) {s = 565;}

				else if ((LA161_6==LIST)) {s = 566;}

				else if ((LA161_6==LOCAL)) {s = 567;}

				else if ((LA161_6==LOCKS)) {s = 568;}

				else if ((LA161_6==LOGFILE)) {s = 569;}

				else if ((LA161_6==LOGS)) {s = 570;}

				else if ((LA161_6==MAX_ROWS)) {s = 571;}

				else if ((LA161_6==MASTER)) {s = 572;}

				else if ((LA161_6==MASTER_HOST)) {s = 573;}

				else if ((LA161_6==MASTER_PORT)) {s = 574;}

				else if ((LA161_6==MASTER_LOG_FILE)) {s = 575;}

				else if ((LA161_6==MASTER_LOG_POS)) {s = 576;}

				else if ((LA161_6==MASTER_USER)) {s = 577;}

				else if ((LA161_6==MASTER_PASSWORD)) {s = 578;}

				else if ((LA161_6==MASTER_SERVER_ID)) {s = 579;}

				else if ((LA161_6==MASTER_CONNECT_RETRY)) {s = 580;}

				else if ((LA161_6==MASTER_SSL)) {s = 581;}

				else if ((LA161_6==MASTER_SSL_CA)) {s = 582;}

				else if ((LA161_6==MASTER_SSL_CAPATH)) {s = 583;}

				else if ((LA161_6==MASTER_SSL_CERT)) {s = 584;}

				else if ((LA161_6==MASTER_SSL_CIPHER)) {s = 585;}

				else if ((LA161_6==MASTER_SSL_KEY)) {s = 586;}

				else if ((LA161_6==MAX_CONNECTIONS_PER_HOUR)) {s = 587;}

				else if ((LA161_6==MAX_QUERIES_PER_HOUR)) {s = 588;}

				else if ((LA161_6==MAX_SIZE)) {s = 589;}

				else if ((LA161_6==MAX_UPDATES_PER_HOUR)) {s = 590;}

				else if ((LA161_6==MAX_USER_CONNECTIONS)) {s = 591;}

				else if ((LA161_6==MAX_VALUE)) {s = 592;}

				else if ((LA161_6==MEDIUM)) {s = 593;}

				else if ((LA161_6==MEMORY)) {s = 594;}

				else if ((LA161_6==MERGE)) {s = 595;}

				else if ((LA161_6==MICROSECOND)) {s = 596;}

				else if ((LA161_6==MIGRATE)) {s = 597;}

				else if ((LA161_6==MINUTE)) {s = 598;}

				else if ((LA161_6==MIN_ROWS)) {s = 599;}

				else if ((LA161_6==MODIFY)) {s = 600;}

				else if ((LA161_6==MODE)) {s = 601;}

				else if ((LA161_6==MONTH)) {s = 602;}

				else if ((LA161_6==MULTILINESTRING)) {s = 603;}

				else if ((LA161_6==MULTIPOINT)) {s = 604;}

				else if ((LA161_6==MULTIPOLYGON)) {s = 605;}

				else if ((LA161_6==MUTEX)) {s = 606;}

				else if ((LA161_6==NAME)) {s = 607;}

				else if ((LA161_6==NAMES)) {s = 608;}

				else if ((LA161_6==NATIONAL)) {s = 609;}

				else if ((LA161_6==NCHAR)) {s = 610;}

				else if ((LA161_6==NDBCLUSTER)) {s = 611;}

				else if ((LA161_6==NEXT)) {s = 612;}

				else if ((LA161_6==NEW)) {s = 613;}

				else if ((LA161_6==NO_WAIT)) {s = 614;}

				else if ((LA161_6==NODEGROUP)) {s = 615;}

				else if ((LA161_6==NONE)) {s = 616;}

				else if ((LA161_6==NVARCHAR)) {s = 617;}

				else if ((LA161_6==OFFSET)) {s = 618;}

				else if ((LA161_6==OLD_PASSWORD)) {s = 619;}

				else if ((LA161_6==ONE_SHOT)) {s = 620;}

				else if ((LA161_6==ONE)) {s = 621;}

				else if ((LA161_6==PACK_KEYS)) {s = 622;}

				else if ((LA161_6==PAGE)) {s = 623;}

				else if ((LA161_6==PARTIAL)) {s = 624;}

				else if ((LA161_6==PARTITIONING)) {s = 625;}

				else if ((LA161_6==PARTITIONS)) {s = 626;}

				else if ((LA161_6==PASSWORD)) {s = 627;}

				else if ((LA161_6==PHASE)) {s = 628;}

				else if ((LA161_6==PLUGIN)) {s = 629;}

				else if ((LA161_6==PLUGINS)) {s = 630;}

				else if ((LA161_6==POINT)) {s = 631;}

				else if ((LA161_6==POLYGON)) {s = 632;}

				else if ((LA161_6==PRESERVE)) {s = 633;}

				else if ((LA161_6==PREV)) {s = 634;}

				else if ((LA161_6==PRIVILEGES)) {s = 635;}

				else if ((LA161_6==PROCESS)) {s = 636;}

				else if ((LA161_6==PROCESSLIST)) {s = 637;}

				else if ((LA161_6==PROFILE)) {s = 638;}

				else if ((LA161_6==PROFILES)) {s = 639;}

				else if ((LA161_6==QUARTER)) {s = 640;}

				else if ((LA161_6==QUERY)) {s = 641;}

				else if ((LA161_6==QUICK)) {s = 642;}

				else if ((LA161_6==REBUILD)) {s = 643;}

				else if ((LA161_6==RECOVER)) {s = 644;}

				else if ((LA161_6==REDO_BUFFER_SIZE)) {s = 645;}

				else if ((LA161_6==REDOFILE)) {s = 646;}

				else if ((LA161_6==REDUNDANT)) {s = 647;}

				else if ((LA161_6==RELAY_LOG_FILE)) {s = 648;}

				else if ((LA161_6==RELAY_LOG_POS)) {s = 649;}

				else if ((LA161_6==RELAY_THREAD)) {s = 650;}

				else if ((LA161_6==RELOAD)) {s = 651;}

				else if ((LA161_6==REORGANIZE)) {s = 652;}

				else if ((LA161_6==REPEATABLE)) {s = 653;}

				else if ((LA161_6==REPLICATION)) {s = 654;}

				else if ((LA161_6==RESOURCES)) {s = 655;}

				else if ((LA161_6==RESUME)) {s = 656;}

				else if ((LA161_6==RETURNS)) {s = 657;}

				else if ((LA161_6==ROLLUP)) {s = 658;}

				else if ((LA161_6==ROUTINE)) {s = 659;}

				else if ((LA161_6==ROWS)) {s = 660;}

				else if ((LA161_6==ROW_FORMAT)) {s = 661;}

				else if ((LA161_6==ROW)) {s = 662;}

				else if ((LA161_6==RTREE)) {s = 663;}

				else if ((LA161_6==SCHEDULE)) {s = 664;}

				else if ((LA161_6==SECOND)) {s = 665;}

				else if ((LA161_6==SERIAL)) {s = 666;}

				else if ((LA161_6==SERIALIZABLE)) {s = 667;}

				else if ((LA161_6==SESSION)) {s = 668;}

				else if ((LA161_6==SIMPLE)) {s = 669;}

				else if ((LA161_6==SHARE)) {s = 670;}

				else if ((LA161_6==SHUTDOWN)) {s = 671;}

				else if ((LA161_6==SNAPSHOT)) {s = 672;}

				else if ((LA161_6==SOUNDS)) {s = 673;}

				else if ((LA161_6==SOURCE)) {s = 674;}

				else if ((LA161_6==SQL_CACHE)) {s = 675;}

				else if ((LA161_6==SQL_BUFFER_RESULT)) {s = 676;}

				else if ((LA161_6==SQL_NO_CACHE)) {s = 677;}

				else if ((LA161_6==SQL_THREAD)) {s = 678;}

				else if ((LA161_6==STARTS)) {s = 679;}

				else if ((LA161_6==STATUS)) {s = 680;}

				else if ((LA161_6==STORAGE)) {s = 681;}

				else if ((LA161_6==STRING_KEYWORD)) {s = 682;}

				else if ((LA161_6==SUBDATE)) {s = 683;}

				else if ((LA161_6==SUBJECT)) {s = 684;}

				else if ((LA161_6==SUBPARTITION)) {s = 685;}

				else if ((LA161_6==SUBPARTITIONS)) {s = 686;}

				else if ((LA161_6==SUPER)) {s = 687;}

				else if ((LA161_6==SUSPEND)) {s = 688;}

				else if ((LA161_6==SWAPS)) {s = 689;}

				else if ((LA161_6==SWITCHES)) {s = 690;}

				else if ((LA161_6==TABLES)) {s = 691;}

				else if ((LA161_6==TABLESPACE)) {s = 692;}

				else if ((LA161_6==TEMPORARY)) {s = 693;}

				else if ((LA161_6==TEMPTABLE)) {s = 694;}

				else if ((LA161_6==TEXT)) {s = 695;}

				else if ((LA161_6==THAN)) {s = 696;}

				else if ((LA161_6==TRANSACTION)) {s = 697;}

				else if ((LA161_6==TRANSACTIONAL)) {s = 698;}

				else if ((LA161_6==TRIGGERS)) {s = 699;}

				else if ((LA161_6==TIMESTAMP)) {s = 700;}

				else if ((LA161_6==TIMESTAMP_ADD)) {s = 701;}

				else if ((LA161_6==TIMESTAMP_DIFF)) {s = 702;}

				else if ((LA161_6==TIME)) {s = 703;}

				else if ((LA161_6==TYPES)) {s = 704;}

				else if ((LA161_6==TYPE)) {s = 705;}

				else if ((LA161_6==UDF_RETURNS)) {s = 706;}

				else if ((LA161_6==FUNCTION)) {s = 707;}

				else if ((LA161_6==UNCOMMITTED)) {s = 708;}

				else if ((LA161_6==UNDEFINED)) {s = 709;}

				else if ((LA161_6==UNDO_BUFFER_SIZE)) {s = 710;}

				else if ((LA161_6==UNDOFILE)) {s = 711;}

				else if ((LA161_6==UNKNOWN)) {s = 712;}

				else if ((LA161_6==UNTIL)) {s = 713;}

				else if ((LA161_6==USER)) {s = 714;}

				else if ((LA161_6==USE_FRM)) {s = 715;}

				else if ((LA161_6==VARIABLES)) {s = 716;}

				else if ((LA161_6==VIEW)) {s = 717;}

				else if ((LA161_6==VALUE)) {s = 718;}

				else if ((LA161_6==WARNINGS)) {s = 719;}

				else if ((LA161_6==WAIT)) {s = 720;}

				else if ((LA161_6==WEEK)) {s = 721;}

				else if ((LA161_6==WORK)) {s = 722;}

				else if ((LA161_6==X509)) {s = 723;}

				else if ((LA161_6==YEAR)) {s = 724;}

				else if ((LA161_6==FROM) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 725;}

				else if ((LA161_6==USING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 726;}

				else if (((LA161_6>=DAY_HOUR && LA161_6<=DAY_SECOND)||(LA161_6>=HOUR_MICROSECOND && LA161_6<=HOUR_SECOND)||(LA161_6>=MINUTE_MICROSECOND && LA161_6<=MINUTE_SECOND)||LA161_6==SECOND_MICROSECOND||LA161_6==YEAR_MONTH) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 727;}

				else if ((LA161_6==RCURLY) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 728;}

				else if ((LA161_6==IN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 729;}

				else if ((LA161_6==THEN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 730;}

				else if ((LA161_6==ELSE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 731;}

				else if ((LA161_6==WHEN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 732;}

				else if ((LA161_6==WHERE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 733;}

				else if ((LA161_6==SET) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 734;}

				else if ((LA161_6==LEFT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 735;}

				else if ((LA161_6==RIGHT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 736;}

				else if ((LA161_6==INNER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 737;}

				else if ((LA161_6==CROSS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 738;}

				else if ((LA161_6==JOIN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 739;}

				else if ((LA161_6==STRAIGHT_JOIN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 740;}

				else if ((LA161_6==NATURAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 741;}

				else if ((LA161_6==MINUS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 742;}

				else if ((LA161_6==PLUS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 743;}

				else if ((LA161_6==BITWISE_INVERSION) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 744;}

				else if ((LA161_6==NOT_OP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 745;}

				else if ((LA161_6==BINARY) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 746;}

				else if ((LA161_6==COLLATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 747;}

				else if ((LA161_6==INTERVAL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 748;}

				else if ((LA161_6==STRING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 749;}

				else if ((LA161_6==NUMBER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 750;}

				else if ((LA161_6==INT_NUMBER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 751;}

				else if ((LA161_6==GLOBAL_VARIABLE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 752;}

				else if ((LA161_6==SESSION_VARIABLE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 753;}

				else if ((LA161_6==VALUE_PLACEHOLDER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 754;}

				else if ((LA161_6==BINARY_VALUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 755;}

				else if ((LA161_6==HEXA_VALUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 756;}

				else if ((LA161_6==NULL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 757;}

				else if ((LA161_6==TRUE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 758;}

				else if ((LA161_6==FALSE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 759;}

				else if ((LA161_6==BIT_AND) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 760;}

				else if ((LA161_6==BIT_OR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 761;}

				else if ((LA161_6==BIT_XOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 762;}

				else if ((LA161_6==CAST) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 763;}

				else if ((LA161_6==CONCAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 764;}

				else if ((LA161_6==COUNT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 765;}

				else if ((LA161_6==DATE_ADD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 766;}

				else if ((LA161_6==DATE_SUB) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 767;}

				else if ((LA161_6==IFNULL) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 768;}

				else if ((LA161_6==GROUP_CONCAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 769;}

				else if ((LA161_6==MAX) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 770;}

				else if ((LA161_6==MID) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 771;}

				else if ((LA161_6==MIN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 772;}

				else if ((LA161_6==NULLIF) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 773;}

				else if ((LA161_6==SESSION_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 774;}

				else if ((LA161_6==STD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 775;}

				else if ((LA161_6==STDDEV) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 776;}

				else if ((LA161_6==STDDEV_POP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 777;}

				else if ((LA161_6==STDDEV_SAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 778;}

				else if ((LA161_6==SUM) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 779;}

				else if ((LA161_6==SYSTEM_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 780;}

				else if ((LA161_6==TRIM) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 781;}

				else if ((LA161_6==VARIANCE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 782;}

				else if ((LA161_6==VAR_POP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 783;}

				else if ((LA161_6==VAR_SAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 784;}

				else if ((LA161_6==CURDATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 785;}

				else if ((LA161_6==CURRENT_DATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 786;}

				else if ((LA161_6==CURTIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 787;}

				else if ((LA161_6==CURRENT_TIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 788;}

				else if ((LA161_6==EXTRACT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 789;}

				else if ((LA161_6==NOW) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 790;}

				else if ((LA161_6==CURRENT_TIMESTAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 791;}

				else if ((LA161_6==POSITION) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 792;}

				else if ((LA161_6==SUBSTR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 793;}

				else if ((LA161_6==SUBSTRING) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 794;}

				else if ((LA161_6==SYSDATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 795;}

				else if ((LA161_6==UTC_DATE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 796;}

				else if ((LA161_6==UTC_TIMESTAMP) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 797;}

				else if ((LA161_6==UTC_TIME) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 798;}

				else if ((LA161_6==DATABASE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 799;}

				else if ((LA161_6==IF) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 800;}

				else if ((LA161_6==MOD) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 801;}

				else if ((LA161_6==REPEAT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 802;}

				else if ((LA161_6==REPLACE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 803;}

				else if ((LA161_6==CHAR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 804;}

				else if ((LA161_6==CURRENT_USER) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 805;}

				else if ((LA161_6==INSERT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 806;}

				else if ((LA161_6==LPAREN) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 807;}

				else if ((LA161_6==EXISTS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 808;}

				else if ((LA161_6==LCURLY) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 809;}

				else if ((LA161_6==MATCH) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 810;}

				else if ((LA161_6==CASE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 811;}

				else if ((LA161_6==NOT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 812;}

				else if ((LA161_6==BITWISE_XOR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 813;}

				else if ((LA161_6==MULT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 814;}

				else if ((LA161_6==DIVISION) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 815;}

				else if ((LA161_6==DIV) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 816;}

				else if ((LA161_6==MODULO) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 817;}

				else if ((LA161_6==LEFT_SHIFT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 818;}

				else if ((LA161_6==RIGHT_SHIFT) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 819;}

				else if ((LA161_6==BITWISE_AND) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 820;}

				else if ((LA161_6==BITWISE_OR) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 821;}

				else if ((LA161_6==LIKE) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 822;}

				else if ((LA161_6==IS) && (EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}


				input.Seek(index161_6);
				if (s >= 0) return s;
				break;
			case 2:
				int LA161_12 = input.LA(1);


				int index161_12 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_12);
				if (s >= 0) return s;
				break;
			case 3:
				int LA161_38 = input.LA(1);


				int index161_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_38);
				if (s >= 0) return s;
				break;
			case 4:
				int LA161_44 = input.LA(1);


				int index161_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_44);
				if (s >= 0) return s;
				break;
			case 5:
				int LA161_48 = input.LA(1);


				int index161_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_48);
				if (s >= 0) return s;
				break;
			case 6:
				int LA161_52 = input.LA(1);


				int index161_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_52);
				if (s >= 0) return s;
				break;
			case 7:
				int LA161_53 = input.LA(1);


				int index161_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_53);
				if (s >= 0) return s;
				break;
			case 8:
				int LA161_57 = input.LA(1);


				int index161_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_57);
				if (s >= 0) return s;
				break;
			case 9:
				int LA161_58 = input.LA(1);


				int index161_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_58);
				if (s >= 0) return s;
				break;
			case 10:
				int LA161_59 = input.LA(1);


				int index161_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_59);
				if (s >= 0) return s;
				break;
			case 11:
				int LA161_60 = input.LA(1);


				int index161_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_60);
				if (s >= 0) return s;
				break;
			case 12:
				int LA161_61 = input.LA(1);


				int index161_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_61);
				if (s >= 0) return s;
				break;
			case 13:
				int LA161_63 = input.LA(1);


				int index161_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_63);
				if (s >= 0) return s;
				break;
			case 14:
				int LA161_65 = input.LA(1);


				int index161_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_65);
				if (s >= 0) return s;
				break;
			case 15:
				int LA161_66 = input.LA(1);


				int index161_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_66);
				if (s >= 0) return s;
				break;
			case 16:
				int LA161_68 = input.LA(1);


				int index161_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_68);
				if (s >= 0) return s;
				break;
			case 17:
				int LA161_69 = input.LA(1);


				int index161_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_69);
				if (s >= 0) return s;
				break;
			case 18:
				int LA161_70 = input.LA(1);


				int index161_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_70);
				if (s >= 0) return s;
				break;
			case 19:
				int LA161_71 = input.LA(1);


				int index161_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_71);
				if (s >= 0) return s;
				break;
			case 20:
				int LA161_72 = input.LA(1);


				int index161_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_72);
				if (s >= 0) return s;
				break;
			case 21:
				int LA161_73 = input.LA(1);


				int index161_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_73);
				if (s >= 0) return s;
				break;
			case 22:
				int LA161_74 = input.LA(1);


				int index161_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_74);
				if (s >= 0) return s;
				break;
			case 23:
				int LA161_75 = input.LA(1);


				int index161_75 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_75);
				if (s >= 0) return s;
				break;
			case 24:
				int LA161_78 = input.LA(1);


				int index161_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_78);
				if (s >= 0) return s;
				break;
			case 25:
				int LA161_79 = input.LA(1);


				int index161_79 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_79);
				if (s >= 0) return s;
				break;
			case 26:
				int LA161_82 = input.LA(1);


				int index161_82 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_82);
				if (s >= 0) return s;
				break;
			case 27:
				int LA161_83 = input.LA(1);


				int index161_83 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_83);
				if (s >= 0) return s;
				break;
			case 28:
				int LA161_84 = input.LA(1);


				int index161_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_84);
				if (s >= 0) return s;
				break;
			case 29:
				int LA161_88 = input.LA(1);


				int index161_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_88);
				if (s >= 0) return s;
				break;
			case 30:
				int LA161_89 = input.LA(1);


				int index161_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_89);
				if (s >= 0) return s;
				break;
			case 31:
				int LA161_91 = input.LA(1);


				int index161_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_91);
				if (s >= 0) return s;
				break;
			case 32:
				int LA161_92 = input.LA(1);


				int index161_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_92);
				if (s >= 0) return s;
				break;
			case 33:
				int LA161_93 = input.LA(1);


				int index161_93 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_93);
				if (s >= 0) return s;
				break;
			case 34:
				int LA161_94 = input.LA(1);


				int index161_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_94);
				if (s >= 0) return s;
				break;
			case 35:
				int LA161_95 = input.LA(1);


				int index161_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_95);
				if (s >= 0) return s;
				break;
			case 36:
				int LA161_96 = input.LA(1);


				int index161_96 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_96);
				if (s >= 0) return s;
				break;
			case 37:
				int LA161_97 = input.LA(1);


				int index161_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_97);
				if (s >= 0) return s;
				break;
			case 38:
				int LA161_98 = input.LA(1);


				int index161_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_98);
				if (s >= 0) return s;
				break;
			case 39:
				int LA161_99 = input.LA(1);


				int index161_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_99);
				if (s >= 0) return s;
				break;
			case 40:
				int LA161_100 = input.LA(1);


				int index161_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_100);
				if (s >= 0) return s;
				break;
			case 41:
				int LA161_101 = input.LA(1);


				int index161_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_101);
				if (s >= 0) return s;
				break;
			case 42:
				int LA161_102 = input.LA(1);


				int index161_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_102);
				if (s >= 0) return s;
				break;
			case 43:
				int LA161_103 = input.LA(1);


				int index161_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_103);
				if (s >= 0) return s;
				break;
			case 44:
				int LA161_104 = input.LA(1);


				int index161_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_104);
				if (s >= 0) return s;
				break;
			case 45:
				int LA161_105 = input.LA(1);


				int index161_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_105);
				if (s >= 0) return s;
				break;
			case 46:
				int LA161_106 = input.LA(1);


				int index161_106 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_106);
				if (s >= 0) return s;
				break;
			case 47:
				int LA161_107 = input.LA(1);


				int index161_107 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_107);
				if (s >= 0) return s;
				break;
			case 48:
				int LA161_108 = input.LA(1);


				int index161_108 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_108);
				if (s >= 0) return s;
				break;
			case 49:
				int LA161_109 = input.LA(1);


				int index161_109 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_109);
				if (s >= 0) return s;
				break;
			case 50:
				int LA161_110 = input.LA(1);


				int index161_110 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_110);
				if (s >= 0) return s;
				break;
			case 51:
				int LA161_111 = input.LA(1);


				int index161_111 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_111);
				if (s >= 0) return s;
				break;
			case 52:
				int LA161_112 = input.LA(1);


				int index161_112 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_112);
				if (s >= 0) return s;
				break;
			case 53:
				int LA161_113 = input.LA(1);


				int index161_113 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_113);
				if (s >= 0) return s;
				break;
			case 54:
				int LA161_114 = input.LA(1);


				int index161_114 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_114);
				if (s >= 0) return s;
				break;
			case 55:
				int LA161_115 = input.LA(1);


				int index161_115 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_115);
				if (s >= 0) return s;
				break;
			case 56:
				int LA161_116 = input.LA(1);


				int index161_116 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_116);
				if (s >= 0) return s;
				break;
			case 57:
				int LA161_117 = input.LA(1);


				int index161_117 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_117);
				if (s >= 0) return s;
				break;
			case 58:
				int LA161_118 = input.LA(1);


				int index161_118 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_118);
				if (s >= 0) return s;
				break;
			case 59:
				int LA161_119 = input.LA(1);


				int index161_119 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_119);
				if (s >= 0) return s;
				break;
			case 60:
				int LA161_120 = input.LA(1);


				int index161_120 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_120);
				if (s >= 0) return s;
				break;
			case 61:
				int LA161_121 = input.LA(1);


				int index161_121 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_121);
				if (s >= 0) return s;
				break;
			case 62:
				int LA161_122 = input.LA(1);


				int index161_122 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_122);
				if (s >= 0) return s;
				break;
			case 63:
				int LA161_123 = input.LA(1);


				int index161_123 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_123);
				if (s >= 0) return s;
				break;
			case 64:
				int LA161_124 = input.LA(1);


				int index161_124 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_124);
				if (s >= 0) return s;
				break;
			case 65:
				int LA161_125 = input.LA(1);


				int index161_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_125);
				if (s >= 0) return s;
				break;
			case 66:
				int LA161_126 = input.LA(1);


				int index161_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_126);
				if (s >= 0) return s;
				break;
			case 67:
				int LA161_127 = input.LA(1);


				int index161_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_127);
				if (s >= 0) return s;
				break;
			case 68:
				int LA161_128 = input.LA(1);


				int index161_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_128);
				if (s >= 0) return s;
				break;
			case 69:
				int LA161_129 = input.LA(1);


				int index161_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_129);
				if (s >= 0) return s;
				break;
			case 70:
				int LA161_130 = input.LA(1);


				int index161_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_130);
				if (s >= 0) return s;
				break;
			case 71:
				int LA161_131 = input.LA(1);


				int index161_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_131);
				if (s >= 0) return s;
				break;
			case 72:
				int LA161_132 = input.LA(1);


				int index161_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_132);
				if (s >= 0) return s;
				break;
			case 73:
				int LA161_133 = input.LA(1);


				int index161_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_133);
				if (s >= 0) return s;
				break;
			case 74:
				int LA161_134 = input.LA(1);


				int index161_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_134);
				if (s >= 0) return s;
				break;
			case 75:
				int LA161_135 = input.LA(1);


				int index161_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_135);
				if (s >= 0) return s;
				break;
			case 76:
				int LA161_136 = input.LA(1);


				int index161_136 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_136);
				if (s >= 0) return s;
				break;
			case 77:
				int LA161_137 = input.LA(1);


				int index161_137 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_137);
				if (s >= 0) return s;
				break;
			case 78:
				int LA161_138 = input.LA(1);


				int index161_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_138);
				if (s >= 0) return s;
				break;
			case 79:
				int LA161_139 = input.LA(1);


				int index161_139 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_139);
				if (s >= 0) return s;
				break;
			case 80:
				int LA161_140 = input.LA(1);


				int index161_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_140);
				if (s >= 0) return s;
				break;
			case 81:
				int LA161_141 = input.LA(1);


				int index161_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_141);
				if (s >= 0) return s;
				break;
			case 82:
				int LA161_142 = input.LA(1);


				int index161_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_142);
				if (s >= 0) return s;
				break;
			case 83:
				int LA161_143 = input.LA(1);


				int index161_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_143);
				if (s >= 0) return s;
				break;
			case 84:
				int LA161_144 = input.LA(1);


				int index161_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_144);
				if (s >= 0) return s;
				break;
			case 85:
				int LA161_145 = input.LA(1);


				int index161_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_145);
				if (s >= 0) return s;
				break;
			case 86:
				int LA161_146 = input.LA(1);


				int index161_146 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_146);
				if (s >= 0) return s;
				break;
			case 87:
				int LA161_147 = input.LA(1);


				int index161_147 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_147);
				if (s >= 0) return s;
				break;
			case 88:
				int LA161_148 = input.LA(1);


				int index161_148 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_148);
				if (s >= 0) return s;
				break;
			case 89:
				int LA161_149 = input.LA(1);


				int index161_149 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_149);
				if (s >= 0) return s;
				break;
			case 90:
				int LA161_150 = input.LA(1);


				int index161_150 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_150);
				if (s >= 0) return s;
				break;
			case 91:
				int LA161_151 = input.LA(1);


				int index161_151 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_151);
				if (s >= 0) return s;
				break;
			case 92:
				int LA161_152 = input.LA(1);


				int index161_152 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_152);
				if (s >= 0) return s;
				break;
			case 93:
				int LA161_153 = input.LA(1);


				int index161_153 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_153);
				if (s >= 0) return s;
				break;
			case 94:
				int LA161_154 = input.LA(1);


				int index161_154 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_154);
				if (s >= 0) return s;
				break;
			case 95:
				int LA161_155 = input.LA(1);


				int index161_155 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_155);
				if (s >= 0) return s;
				break;
			case 96:
				int LA161_156 = input.LA(1);


				int index161_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_156);
				if (s >= 0) return s;
				break;
			case 97:
				int LA161_157 = input.LA(1);


				int index161_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_157);
				if (s >= 0) return s;
				break;
			case 98:
				int LA161_158 = input.LA(1);


				int index161_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_158);
				if (s >= 0) return s;
				break;
			case 99:
				int LA161_159 = input.LA(1);


				int index161_159 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_159);
				if (s >= 0) return s;
				break;
			case 100:
				int LA161_160 = input.LA(1);


				int index161_160 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_160);
				if (s >= 0) return s;
				break;
			case 101:
				int LA161_161 = input.LA(1);


				int index161_161 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_161);
				if (s >= 0) return s;
				break;
			case 102:
				int LA161_162 = input.LA(1);


				int index161_162 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_162);
				if (s >= 0) return s;
				break;
			case 103:
				int LA161_163 = input.LA(1);


				int index161_163 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_163);
				if (s >= 0) return s;
				break;
			case 104:
				int LA161_164 = input.LA(1);


				int index161_164 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_164);
				if (s >= 0) return s;
				break;
			case 105:
				int LA161_165 = input.LA(1);


				int index161_165 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_165);
				if (s >= 0) return s;
				break;
			case 106:
				int LA161_166 = input.LA(1);


				int index161_166 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_166);
				if (s >= 0) return s;
				break;
			case 107:
				int LA161_167 = input.LA(1);


				int index161_167 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_167);
				if (s >= 0) return s;
				break;
			case 108:
				int LA161_168 = input.LA(1);


				int index161_168 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_168);
				if (s >= 0) return s;
				break;
			case 109:
				int LA161_169 = input.LA(1);


				int index161_169 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_169);
				if (s >= 0) return s;
				break;
			case 110:
				int LA161_170 = input.LA(1);


				int index161_170 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_170);
				if (s >= 0) return s;
				break;
			case 111:
				int LA161_171 = input.LA(1);


				int index161_171 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_171);
				if (s >= 0) return s;
				break;
			case 112:
				int LA161_172 = input.LA(1);


				int index161_172 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_172);
				if (s >= 0) return s;
				break;
			case 113:
				int LA161_173 = input.LA(1);


				int index161_173 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_173);
				if (s >= 0) return s;
				break;
			case 114:
				int LA161_174 = input.LA(1);


				int index161_174 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_174);
				if (s >= 0) return s;
				break;
			case 115:
				int LA161_175 = input.LA(1);


				int index161_175 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_175);
				if (s >= 0) return s;
				break;
			case 116:
				int LA161_176 = input.LA(1);


				int index161_176 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_176);
				if (s >= 0) return s;
				break;
			case 117:
				int LA161_177 = input.LA(1);


				int index161_177 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_177);
				if (s >= 0) return s;
				break;
			case 118:
				int LA161_178 = input.LA(1);


				int index161_178 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_178);
				if (s >= 0) return s;
				break;
			case 119:
				int LA161_179 = input.LA(1);


				int index161_179 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_179);
				if (s >= 0) return s;
				break;
			case 120:
				int LA161_180 = input.LA(1);


				int index161_180 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_180);
				if (s >= 0) return s;
				break;
			case 121:
				int LA161_181 = input.LA(1);


				int index161_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_181);
				if (s >= 0) return s;
				break;
			case 122:
				int LA161_182 = input.LA(1);


				int index161_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_182);
				if (s >= 0) return s;
				break;
			case 123:
				int LA161_183 = input.LA(1);


				int index161_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_183);
				if (s >= 0) return s;
				break;
			case 124:
				int LA161_184 = input.LA(1);


				int index161_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_184);
				if (s >= 0) return s;
				break;
			case 125:
				int LA161_185 = input.LA(1);


				int index161_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_185);
				if (s >= 0) return s;
				break;
			case 126:
				int LA161_186 = input.LA(1);


				int index161_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_186);
				if (s >= 0) return s;
				break;
			case 127:
				int LA161_187 = input.LA(1);


				int index161_187 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_187);
				if (s >= 0) return s;
				break;
			case 128:
				int LA161_188 = input.LA(1);


				int index161_188 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_188);
				if (s >= 0) return s;
				break;
			case 129:
				int LA161_189 = input.LA(1);


				int index161_189 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_189);
				if (s >= 0) return s;
				break;
			case 130:
				int LA161_190 = input.LA(1);


				int index161_190 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_190);
				if (s >= 0) return s;
				break;
			case 131:
				int LA161_191 = input.LA(1);


				int index161_191 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_191);
				if (s >= 0) return s;
				break;
			case 132:
				int LA161_192 = input.LA(1);


				int index161_192 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_192);
				if (s >= 0) return s;
				break;
			case 133:
				int LA161_193 = input.LA(1);


				int index161_193 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_193);
				if (s >= 0) return s;
				break;
			case 134:
				int LA161_194 = input.LA(1);


				int index161_194 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_194);
				if (s >= 0) return s;
				break;
			case 135:
				int LA161_195 = input.LA(1);


				int index161_195 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_195);
				if (s >= 0) return s;
				break;
			case 136:
				int LA161_196 = input.LA(1);


				int index161_196 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_196);
				if (s >= 0) return s;
				break;
			case 137:
				int LA161_197 = input.LA(1);


				int index161_197 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_197);
				if (s >= 0) return s;
				break;
			case 138:
				int LA161_198 = input.LA(1);


				int index161_198 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_198);
				if (s >= 0) return s;
				break;
			case 139:
				int LA161_199 = input.LA(1);


				int index161_199 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_199);
				if (s >= 0) return s;
				break;
			case 140:
				int LA161_200 = input.LA(1);


				int index161_200 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_200);
				if (s >= 0) return s;
				break;
			case 141:
				int LA161_201 = input.LA(1);


				int index161_201 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_201);
				if (s >= 0) return s;
				break;
			case 142:
				int LA161_202 = input.LA(1);


				int index161_202 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_202);
				if (s >= 0) return s;
				break;
			case 143:
				int LA161_203 = input.LA(1);


				int index161_203 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_203);
				if (s >= 0) return s;
				break;
			case 144:
				int LA161_204 = input.LA(1);


				int index161_204 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_204);
				if (s >= 0) return s;
				break;
			case 145:
				int LA161_205 = input.LA(1);


				int index161_205 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_205);
				if (s >= 0) return s;
				break;
			case 146:
				int LA161_206 = input.LA(1);


				int index161_206 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_206);
				if (s >= 0) return s;
				break;
			case 147:
				int LA161_207 = input.LA(1);


				int index161_207 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_207);
				if (s >= 0) return s;
				break;
			case 148:
				int LA161_208 = input.LA(1);


				int index161_208 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_208);
				if (s >= 0) return s;
				break;
			case 149:
				int LA161_209 = input.LA(1);


				int index161_209 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_209);
				if (s >= 0) return s;
				break;
			case 150:
				int LA161_210 = input.LA(1);


				int index161_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_210);
				if (s >= 0) return s;
				break;
			case 151:
				int LA161_211 = input.LA(1);


				int index161_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_211);
				if (s >= 0) return s;
				break;
			case 152:
				int LA161_212 = input.LA(1);


				int index161_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_212);
				if (s >= 0) return s;
				break;
			case 153:
				int LA161_213 = input.LA(1);


				int index161_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_213);
				if (s >= 0) return s;
				break;
			case 154:
				int LA161_214 = input.LA(1);


				int index161_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_214);
				if (s >= 0) return s;
				break;
			case 155:
				int LA161_215 = input.LA(1);


				int index161_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_215);
				if (s >= 0) return s;
				break;
			case 156:
				int LA161_216 = input.LA(1);


				int index161_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_216);
				if (s >= 0) return s;
				break;
			case 157:
				int LA161_217 = input.LA(1);


				int index161_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_217);
				if (s >= 0) return s;
				break;
			case 158:
				int LA161_218 = input.LA(1);


				int index161_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_218);
				if (s >= 0) return s;
				break;
			case 159:
				int LA161_219 = input.LA(1);


				int index161_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_219);
				if (s >= 0) return s;
				break;
			case 160:
				int LA161_220 = input.LA(1);


				int index161_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_220);
				if (s >= 0) return s;
				break;
			case 161:
				int LA161_221 = input.LA(1);


				int index161_221 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_221);
				if (s >= 0) return s;
				break;
			case 162:
				int LA161_222 = input.LA(1);


				int index161_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_222);
				if (s >= 0) return s;
				break;
			case 163:
				int LA161_223 = input.LA(1);


				int index161_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_223);
				if (s >= 0) return s;
				break;
			case 164:
				int LA161_224 = input.LA(1);


				int index161_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_224);
				if (s >= 0) return s;
				break;
			case 165:
				int LA161_225 = input.LA(1);


				int index161_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_225);
				if (s >= 0) return s;
				break;
			case 166:
				int LA161_226 = input.LA(1);


				int index161_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_226);
				if (s >= 0) return s;
				break;
			case 167:
				int LA161_227 = input.LA(1);


				int index161_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_227);
				if (s >= 0) return s;
				break;
			case 168:
				int LA161_228 = input.LA(1);


				int index161_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_228);
				if (s >= 0) return s;
				break;
			case 169:
				int LA161_229 = input.LA(1);


				int index161_229 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_229);
				if (s >= 0) return s;
				break;
			case 170:
				int LA161_230 = input.LA(1);


				int index161_230 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_230);
				if (s >= 0) return s;
				break;
			case 171:
				int LA161_231 = input.LA(1);


				int index161_231 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_231);
				if (s >= 0) return s;
				break;
			case 172:
				int LA161_232 = input.LA(1);


				int index161_232 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_232);
				if (s >= 0) return s;
				break;
			case 173:
				int LA161_233 = input.LA(1);


				int index161_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_233);
				if (s >= 0) return s;
				break;
			case 174:
				int LA161_234 = input.LA(1);


				int index161_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_234);
				if (s >= 0) return s;
				break;
			case 175:
				int LA161_235 = input.LA(1);


				int index161_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_235);
				if (s >= 0) return s;
				break;
			case 176:
				int LA161_236 = input.LA(1);


				int index161_236 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_236);
				if (s >= 0) return s;
				break;
			case 177:
				int LA161_237 = input.LA(1);


				int index161_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_237);
				if (s >= 0) return s;
				break;
			case 178:
				int LA161_238 = input.LA(1);


				int index161_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_238);
				if (s >= 0) return s;
				break;
			case 179:
				int LA161_239 = input.LA(1);


				int index161_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_239);
				if (s >= 0) return s;
				break;
			case 180:
				int LA161_240 = input.LA(1);


				int index161_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_240);
				if (s >= 0) return s;
				break;
			case 181:
				int LA161_241 = input.LA(1);


				int index161_241 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_241);
				if (s >= 0) return s;
				break;
			case 182:
				int LA161_242 = input.LA(1);


				int index161_242 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_242);
				if (s >= 0) return s;
				break;
			case 183:
				int LA161_243 = input.LA(1);


				int index161_243 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_243);
				if (s >= 0) return s;
				break;
			case 184:
				int LA161_244 = input.LA(1);


				int index161_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_244);
				if (s >= 0) return s;
				break;
			case 185:
				int LA161_245 = input.LA(1);


				int index161_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_245);
				if (s >= 0) return s;
				break;
			case 186:
				int LA161_246 = input.LA(1);


				int index161_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_246);
				if (s >= 0) return s;
				break;
			case 187:
				int LA161_247 = input.LA(1);


				int index161_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_247);
				if (s >= 0) return s;
				break;
			case 188:
				int LA161_248 = input.LA(1);


				int index161_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_248);
				if (s >= 0) return s;
				break;
			case 189:
				int LA161_249 = input.LA(1);


				int index161_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_249);
				if (s >= 0) return s;
				break;
			case 190:
				int LA161_250 = input.LA(1);


				int index161_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_250);
				if (s >= 0) return s;
				break;
			case 191:
				int LA161_251 = input.LA(1);


				int index161_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_251);
				if (s >= 0) return s;
				break;
			case 192:
				int LA161_252 = input.LA(1);


				int index161_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_252);
				if (s >= 0) return s;
				break;
			case 193:
				int LA161_253 = input.LA(1);


				int index161_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_253);
				if (s >= 0) return s;
				break;
			case 194:
				int LA161_254 = input.LA(1);


				int index161_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_254);
				if (s >= 0) return s;
				break;
			case 195:
				int LA161_255 = input.LA(1);


				int index161_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_255);
				if (s >= 0) return s;
				break;
			case 196:
				int LA161_256 = input.LA(1);


				int index161_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_256);
				if (s >= 0) return s;
				break;
			case 197:
				int LA161_257 = input.LA(1);


				int index161_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_257);
				if (s >= 0) return s;
				break;
			case 198:
				int LA161_258 = input.LA(1);


				int index161_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_258);
				if (s >= 0) return s;
				break;
			case 199:
				int LA161_259 = input.LA(1);


				int index161_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_259);
				if (s >= 0) return s;
				break;
			case 200:
				int LA161_260 = input.LA(1);


				int index161_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_260);
				if (s >= 0) return s;
				break;
			case 201:
				int LA161_261 = input.LA(1);


				int index161_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_261);
				if (s >= 0) return s;
				break;
			case 202:
				int LA161_262 = input.LA(1);


				int index161_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_262);
				if (s >= 0) return s;
				break;
			case 203:
				int LA161_263 = input.LA(1);


				int index161_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_263);
				if (s >= 0) return s;
				break;
			case 204:
				int LA161_264 = input.LA(1);


				int index161_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_264);
				if (s >= 0) return s;
				break;
			case 205:
				int LA161_265 = input.LA(1);


				int index161_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_265);
				if (s >= 0) return s;
				break;
			case 206:
				int LA161_266 = input.LA(1);


				int index161_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_266);
				if (s >= 0) return s;
				break;
			case 207:
				int LA161_267 = input.LA(1);


				int index161_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_267);
				if (s >= 0) return s;
				break;
			case 208:
				int LA161_268 = input.LA(1);


				int index161_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_268);
				if (s >= 0) return s;
				break;
			case 209:
				int LA161_269 = input.LA(1);


				int index161_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_269);
				if (s >= 0) return s;
				break;
			case 210:
				int LA161_270 = input.LA(1);


				int index161_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_270);
				if (s >= 0) return s;
				break;
			case 211:
				int LA161_271 = input.LA(1);


				int index161_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_271);
				if (s >= 0) return s;
				break;
			case 212:
				int LA161_272 = input.LA(1);


				int index161_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_272);
				if (s >= 0) return s;
				break;
			case 213:
				int LA161_273 = input.LA(1);


				int index161_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_273);
				if (s >= 0) return s;
				break;
			case 214:
				int LA161_274 = input.LA(1);


				int index161_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_274);
				if (s >= 0) return s;
				break;
			case 215:
				int LA161_275 = input.LA(1);


				int index161_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_275);
				if (s >= 0) return s;
				break;
			case 216:
				int LA161_276 = input.LA(1);


				int index161_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_276);
				if (s >= 0) return s;
				break;
			case 217:
				int LA161_277 = input.LA(1);


				int index161_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_277);
				if (s >= 0) return s;
				break;
			case 218:
				int LA161_278 = input.LA(1);


				int index161_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_278);
				if (s >= 0) return s;
				break;
			case 219:
				int LA161_279 = input.LA(1);


				int index161_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_279);
				if (s >= 0) return s;
				break;
			case 220:
				int LA161_280 = input.LA(1);


				int index161_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_280);
				if (s >= 0) return s;
				break;
			case 221:
				int LA161_281 = input.LA(1);


				int index161_281 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_281);
				if (s >= 0) return s;
				break;
			case 222:
				int LA161_282 = input.LA(1);


				int index161_282 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_282);
				if (s >= 0) return s;
				break;
			case 223:
				int LA161_283 = input.LA(1);


				int index161_283 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_283);
				if (s >= 0) return s;
				break;
			case 224:
				int LA161_284 = input.LA(1);


				int index161_284 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_284);
				if (s >= 0) return s;
				break;
			case 225:
				int LA161_285 = input.LA(1);


				int index161_285 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_285);
				if (s >= 0) return s;
				break;
			case 226:
				int LA161_286 = input.LA(1);


				int index161_286 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_286);
				if (s >= 0) return s;
				break;
			case 227:
				int LA161_287 = input.LA(1);


				int index161_287 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_287);
				if (s >= 0) return s;
				break;
			case 228:
				int LA161_288 = input.LA(1);


				int index161_288 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_288);
				if (s >= 0) return s;
				break;
			case 229:
				int LA161_289 = input.LA(1);


				int index161_289 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_289);
				if (s >= 0) return s;
				break;
			case 230:
				int LA161_290 = input.LA(1);


				int index161_290 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_290);
				if (s >= 0) return s;
				break;
			case 231:
				int LA161_291 = input.LA(1);


				int index161_291 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_291);
				if (s >= 0) return s;
				break;
			case 232:
				int LA161_292 = input.LA(1);


				int index161_292 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_292);
				if (s >= 0) return s;
				break;
			case 233:
				int LA161_293 = input.LA(1);


				int index161_293 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_293);
				if (s >= 0) return s;
				break;
			case 234:
				int LA161_294 = input.LA(1);


				int index161_294 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_294);
				if (s >= 0) return s;
				break;
			case 235:
				int LA161_295 = input.LA(1);


				int index161_295 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_295);
				if (s >= 0) return s;
				break;
			case 236:
				int LA161_296 = input.LA(1);


				int index161_296 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_296);
				if (s >= 0) return s;
				break;
			case 237:
				int LA161_297 = input.LA(1);


				int index161_297 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_297);
				if (s >= 0) return s;
				break;
			case 238:
				int LA161_298 = input.LA(1);


				int index161_298 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_298);
				if (s >= 0) return s;
				break;
			case 239:
				int LA161_299 = input.LA(1);


				int index161_299 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_299);
				if (s >= 0) return s;
				break;
			case 240:
				int LA161_300 = input.LA(1);


				int index161_300 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_300);
				if (s >= 0) return s;
				break;
			case 241:
				int LA161_301 = input.LA(1);


				int index161_301 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_301);
				if (s >= 0) return s;
				break;
			case 242:
				int LA161_302 = input.LA(1);


				int index161_302 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_302);
				if (s >= 0) return s;
				break;
			case 243:
				int LA161_303 = input.LA(1);


				int index161_303 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_303);
				if (s >= 0) return s;
				break;
			case 244:
				int LA161_304 = input.LA(1);


				int index161_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_304);
				if (s >= 0) return s;
				break;
			case 245:
				int LA161_305 = input.LA(1);


				int index161_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_305);
				if (s >= 0) return s;
				break;
			case 246:
				int LA161_306 = input.LA(1);


				int index161_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_306);
				if (s >= 0) return s;
				break;
			case 247:
				int LA161_307 = input.LA(1);


				int index161_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_307);
				if (s >= 0) return s;
				break;
			case 248:
				int LA161_308 = input.LA(1);


				int index161_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_308);
				if (s >= 0) return s;
				break;
			case 249:
				int LA161_309 = input.LA(1);


				int index161_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_309);
				if (s >= 0) return s;
				break;
			case 250:
				int LA161_310 = input.LA(1);


				int index161_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_310);
				if (s >= 0) return s;
				break;
			case 251:
				int LA161_311 = input.LA(1);


				int index161_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_311);
				if (s >= 0) return s;
				break;
			case 252:
				int LA161_312 = input.LA(1);


				int index161_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_312);
				if (s >= 0) return s;
				break;
			case 253:
				int LA161_313 = input.LA(1);


				int index161_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_313);
				if (s >= 0) return s;
				break;
			case 254:
				int LA161_314 = input.LA(1);


				int index161_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_314);
				if (s >= 0) return s;
				break;
			case 255:
				int LA161_315 = input.LA(1);


				int index161_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_315);
				if (s >= 0) return s;
				break;
			case 256:
				int LA161_316 = input.LA(1);


				int index161_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_316);
				if (s >= 0) return s;
				break;
			case 257:
				int LA161_317 = input.LA(1);


				int index161_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_317);
				if (s >= 0) return s;
				break;
			case 258:
				int LA161_318 = input.LA(1);


				int index161_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_318);
				if (s >= 0) return s;
				break;
			case 259:
				int LA161_319 = input.LA(1);


				int index161_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_319);
				if (s >= 0) return s;
				break;
			case 260:
				int LA161_320 = input.LA(1);


				int index161_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA161_320==LPAREN)) {s = 825;}

				else if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_320);
				if (s >= 0) return s;
				break;
			case 261:
				int LA161_321 = input.LA(1);


				int index161_321 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_321);
				if (s >= 0) return s;
				break;
			case 262:
				int LA161_322 = input.LA(1);


				int index161_322 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_322);
				if (s >= 0) return s;
				break;
			case 263:
				int LA161_323 = input.LA(1);


				int index161_323 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_323);
				if (s >= 0) return s;
				break;
			case 264:
				int LA161_324 = input.LA(1);


				int index161_324 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_324);
				if (s >= 0) return s;
				break;
			case 265:
				int LA161_325 = input.LA(1);


				int index161_325 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_325);
				if (s >= 0) return s;
				break;
			case 266:
				int LA161_326 = input.LA(1);


				int index161_326 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_326);
				if (s >= 0) return s;
				break;
			case 267:
				int LA161_327 = input.LA(1);


				int index161_327 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_327);
				if (s >= 0) return s;
				break;
			case 268:
				int LA161_328 = input.LA(1);


				int index161_328 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_328);
				if (s >= 0) return s;
				break;
			case 269:
				int LA161_329 = input.LA(1);


				int index161_329 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_329);
				if (s >= 0) return s;
				break;
			case 270:
				int LA161_330 = input.LA(1);


				int index161_330 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_330);
				if (s >= 0) return s;
				break;
			case 271:
				int LA161_331 = input.LA(1);


				int index161_331 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_331);
				if (s >= 0) return s;
				break;
			case 272:
				int LA161_332 = input.LA(1);


				int index161_332 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_332);
				if (s >= 0) return s;
				break;
			case 273:
				int LA161_333 = input.LA(1);


				int index161_333 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_333);
				if (s >= 0) return s;
				break;
			case 274:
				int LA161_334 = input.LA(1);


				int index161_334 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_334);
				if (s >= 0) return s;
				break;
			case 275:
				int LA161_335 = input.LA(1);


				int index161_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_335);
				if (s >= 0) return s;
				break;
			case 276:
				int LA161_336 = input.LA(1);


				int index161_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_336);
				if (s >= 0) return s;
				break;
			case 277:
				int LA161_337 = input.LA(1);


				int index161_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_337);
				if (s >= 0) return s;
				break;
			case 278:
				int LA161_338 = input.LA(1);


				int index161_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_338);
				if (s >= 0) return s;
				break;
			case 279:
				int LA161_339 = input.LA(1);


				int index161_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_339);
				if (s >= 0) return s;
				break;
			case 280:
				int LA161_340 = input.LA(1);


				int index161_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_340);
				if (s >= 0) return s;
				break;
			case 281:
				int LA161_341 = input.LA(1);


				int index161_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_341);
				if (s >= 0) return s;
				break;
			case 282:
				int LA161_342 = input.LA(1);


				int index161_342 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_342);
				if (s >= 0) return s;
				break;
			case 283:
				int LA161_343 = input.LA(1);


				int index161_343 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_343);
				if (s >= 0) return s;
				break;
			case 284:
				int LA161_344 = input.LA(1);


				int index161_344 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_344);
				if (s >= 0) return s;
				break;
			case 285:
				int LA161_345 = input.LA(1);


				int index161_345 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_345);
				if (s >= 0) return s;
				break;
			case 286:
				int LA161_346 = input.LA(1);


				int index161_346 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_346);
				if (s >= 0) return s;
				break;
			case 287:
				int LA161_347 = input.LA(1);


				int index161_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_347);
				if (s >= 0) return s;
				break;
			case 288:
				int LA161_348 = input.LA(1);


				int index161_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_348);
				if (s >= 0) return s;
				break;
			case 289:
				int LA161_349 = input.LA(1);


				int index161_349 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_349);
				if (s >= 0) return s;
				break;
			case 290:
				int LA161_350 = input.LA(1);


				int index161_350 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_350);
				if (s >= 0) return s;
				break;
			case 291:
				int LA161_351 = input.LA(1);


				int index161_351 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_351);
				if (s >= 0) return s;
				break;
			case 292:
				int LA161_352 = input.LA(1);


				int index161_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_352);
				if (s >= 0) return s;
				break;
			case 293:
				int LA161_353 = input.LA(1);


				int index161_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_353);
				if (s >= 0) return s;
				break;
			case 294:
				int LA161_354 = input.LA(1);


				int index161_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_354);
				if (s >= 0) return s;
				break;
			case 295:
				int LA161_355 = input.LA(1);


				int index161_355 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_355);
				if (s >= 0) return s;
				break;
			case 296:
				int LA161_356 = input.LA(1);


				int index161_356 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_356);
				if (s >= 0) return s;
				break;
			case 297:
				int LA161_357 = input.LA(1);


				int index161_357 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_357);
				if (s >= 0) return s;
				break;
			case 298:
				int LA161_358 = input.LA(1);


				int index161_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_358);
				if (s >= 0) return s;
				break;
			case 299:
				int LA161_359 = input.LA(1);


				int index161_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_359);
				if (s >= 0) return s;
				break;
			case 300:
				int LA161_360 = input.LA(1);


				int index161_360 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_360);
				if (s >= 0) return s;
				break;
			case 301:
				int LA161_361 = input.LA(1);


				int index161_361 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_361);
				if (s >= 0) return s;
				break;
			case 302:
				int LA161_362 = input.LA(1);


				int index161_362 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_362);
				if (s >= 0) return s;
				break;
			case 303:
				int LA161_363 = input.LA(1);


				int index161_363 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_363);
				if (s >= 0) return s;
				break;
			case 304:
				int LA161_364 = input.LA(1);


				int index161_364 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_364);
				if (s >= 0) return s;
				break;
			case 305:
				int LA161_365 = input.LA(1);


				int index161_365 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_365);
				if (s >= 0) return s;
				break;
			case 306:
				int LA161_366 = input.LA(1);


				int index161_366 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_366);
				if (s >= 0) return s;
				break;
			case 307:
				int LA161_367 = input.LA(1);


				int index161_367 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_367);
				if (s >= 0) return s;
				break;
			case 308:
				int LA161_368 = input.LA(1);


				int index161_368 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_368);
				if (s >= 0) return s;
				break;
			case 309:
				int LA161_369 = input.LA(1);


				int index161_369 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_369);
				if (s >= 0) return s;
				break;
			case 310:
				int LA161_370 = input.LA(1);


				int index161_370 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_370);
				if (s >= 0) return s;
				break;
			case 311:
				int LA161_371 = input.LA(1);


				int index161_371 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_371);
				if (s >= 0) return s;
				break;
			case 312:
				int LA161_372 = input.LA(1);


				int index161_372 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_372);
				if (s >= 0) return s;
				break;
			case 313:
				int LA161_373 = input.LA(1);


				int index161_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 824;}


				input.Seek(index161_373);
				if (s >= 0) return s;
				break;
			case 314:
				int LA161_374 = input.LA(1);


				int index161_374 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA161_374==SELECT) && (EvaluatePredicate(synpred8_MySQL51Parser_fragment))) {s = 826;}

				else if ((LA161_374==ACTION||(LA161_374>=ADDDATE && LA161_374<=ALGORITHM)||LA161_374==ANY||LA161_374==ASCII||(LA161_374>=AT && LA161_374<=BACKUP)||LA161_374==BEGIN||(LA161_374>=BINARY && LA161_374<=BIT)||LA161_374==BITWISE_INVERSION||(LA161_374>=BIT_AND && LA161_374<=BIT_XOR)||(LA161_374>=BLOCK && LA161_374<=BOOLEAN)||LA161_374==BTREE||(LA161_374>=BYTE && LA161_374<=CACHE)||(LA161_374>=CASCADED && LA161_374<=CHAIN)||(LA161_374>=CHANGED && LA161_374<=CHAR)||LA161_374==CHARSET||(LA161_374>=CHECKSUM && LA161_374<=COLLATION)||LA161_374==COLUMNS||LA161_374==COMMENT||(LA161_374>=COMMIT && LA161_374<=CONCURRENT)||(LA161_374>=CONNECTION && LA161_374<=CONSISTENT)||(LA161_374>=CONTAINS && LA161_374<=CONTEXT)||LA161_374==CONTRIBUTORS||(LA161_374>=COUNT && LA161_374<=CPU)||(LA161_374>=CUBE && LA161_374<=CURRENT_USER)||LA161_374==CURTIME||(LA161_374>=DATA && LA161_374<=DATABASE)||(LA161_374>=DATAFILE && LA161_374<=DATE_ADD)||LA161_374==DATE_SUB||LA161_374==DAY||LA161_374==DEALLOCATE||LA161_374==DEFINER||LA161_374==DELAY_KEY_WRITE||LA161_374==DES_KEY_FILE||(LA161_374>=DIRECTORY && LA161_374<=DISK)||LA161_374==DO||(LA161_374>=DUMPFILE && LA161_374<=DYNAMIC)||LA161_374==ENABLE||(LA161_374>=END && LA161_374<=ENUM)||(LA161_374>=ERRORS && LA161_374<=ESCAPE)||(LA161_374>=EVENT && LA161_374<=EVERY)||(LA161_374>=EXECUTE && LA161_374<=EXISTS)||LA161_374==EXPANSION||(LA161_374>=EXTENDED && LA161_374<=FAULTS)||(LA161_374>=FIELDS && LA161_374<=FIXED)||LA161_374==FLUSH||(LA161_374>=FOUND && LA161_374<=FRAC_SECOND)||LA161_374==FULL||(LA161_374>=FUNCTION && LA161_374<=GLOBAL_VARIABLE)||LA161_374==GRANTS||(LA161_374>=GROUP && LA161_374<=HASH)||(LA161_374>=HELP && LA161_374<=HEXA_VALUE)||(LA161_374>=HOST && LA161_374<=HOUR)||(LA161_374>=ID && LA161_374<=IFNULL)||LA161_374==IMPORT||LA161_374==INDEXES||LA161_374==INITIAL_SIZE||LA161_374==INNOBASE||(LA161_374>=INSERT && LA161_374<=INSTALL)||LA161_374==INTERVAL||(LA161_374>=INT_NUMBER && LA161_374<=IPC)||(LA161_374>=ISOLATION && LA161_374<=ISSUER)||LA161_374==KEY_BLOCK_SIZE||(LA161_374>=LABEL && LA161_374<=LCURLY)||(LA161_374>=LEAVES && LA161_374<=LEFT)||LA161_374==LESS||LA161_374==LEVEL||(LA161_374>=LINESTRING && LA161_374<=LIST)||LA161_374==LOCAL||(LA161_374>=LOCKS && LA161_374<=LOGFILE)||LA161_374==LOGS||(LA161_374>=LPAREN && LA161_374<=MASTER_SSL_KEY)||(LA161_374>=MASTER_USER && LA161_374<=MEDIUM)||(LA161_374>=MEMORY && LA161_374<=MID)||(LA161_374>=MIGRATE && LA161_374<=MINUTE)||(LA161_374>=MIN_ROWS && LA161_374<=MODE)||LA161_374==MODIFY||LA161_374==MONTH||(LA161_374>=MULTILINESTRING && LA161_374<=MUTEX)||(LA161_374>=NAME && LA161_374<=NATIONAL)||(LA161_374>=NCHAR && LA161_374<=NOT)||(LA161_374>=NOT_OP && LA161_374<=NO_WAIT)||(LA161_374>=NULL && LA161_374<=NULLIF)||LA161_374==NUMBER||(LA161_374>=NVARCHAR && LA161_374<=OLD_PASSWORD)||LA161_374==ONE||(LA161_374>=ONE_SHOT && LA161_374<=OPEN)||LA161_374==OPTIONS||(LA161_374>=OWNER && LA161_374<=POSITION)||(LA161_374>=PREPARE && LA161_374<=PREV)||LA161_374==PRIVILEGES||(LA161_374>=PROCESS && LA161_374<=PROFILES)||(LA161_374>=QUARTER && LA161_374<=QUICK)||(LA161_374>=REBUILD && LA161_374<=REDUNDANT)||(LA161_374>=RELAY_LOG_FILE && LA161_374<=RELAY_THREAD)||(LA161_374>=RELOAD && LA161_374<=REMOVE)||(LA161_374>=REORGANIZE && LA161_374<=REPLICATION)||(LA161_374>=RESET && LA161_374<=RESTORE)||LA161_374==RESUME||LA161_374==RETURNS||LA161_374==RIGHT||(LA161_374>=ROLLBACK && LA161_374<=ROW_FORMAT)||(LA161_374>=RTREE && LA161_374<=SCHEDULE)||LA161_374==SECOND||LA161_374==SECURITY||(LA161_374>=SERIAL && LA161_374<=SESSION_VARIABLE)||LA161_374==SHARE||(LA161_374>=SHUTDOWN && LA161_374<=SLAVE)||(LA161_374>=SNAPSHOT && LA161_374<=SOCKET)||(LA161_374>=SONAME && LA161_374<=SOURCE)||(LA161_374>=SQL_BUFFER_RESULT && LA161_374<=SQL_CACHE)||LA161_374==SQL_NO_CACHE||LA161_374==SQL_THREAD||LA161_374==START||(LA161_374>=STARTS && LA161_374<=STORAGE)||(LA161_374>=STRING && LA161_374<=SYSTEM_USER)||(LA161_374>=TABLES && LA161_374<=TEMPTABLE)||(LA161_374>=TEXT && LA161_374<=THAN)||(LA161_374>=TIME && LA161_374<=TIMESTAMP_DIFF)||(LA161_374>=TRANSACTION && LA161_374<=TRANSACTIONAL)||(LA161_374>=TRIGGERS && LA161_374<=UNDEFINED)||(LA161_374>=UNDOFILE && LA161_374<=UNINSTALL)||LA161_374==UNKNOWN||LA161_374==UNTIL||LA161_374==UPGRADE||LA161_374==USER||LA161_374==USE_FRM||(LA161_374>=UTC_DATE && LA161_374<=VALUE)||LA161_374==VALUE_PLACEHOLDER||(LA161_374>=VARIABLES && LA161_374<=VARIANCE)||(LA161_374>=VAR_POP && LA161_374<=WEEK)||(LA161_374>=WORK && LA161_374<=WRAPPER)||(LA161_374>=X509 && LA161_374<=XA)||LA161_374==YEAR||LA161_374==CONCAT)) {s = 827;}


				input.Seek(index161_374);
				if (s >= 0) return s;
				break;
			case 315:
				int LA161_380 = input.LA(1);


				int index161_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_380);
				if (s >= 0) return s;
				break;
			case 316:
				int LA161_414 = input.LA(1);


				int index161_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_414);
				if (s >= 0) return s;
				break;
			case 317:
				int LA161_415 = input.LA(1);


				int index161_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_415);
				if (s >= 0) return s;
				break;
			case 318:
				int LA161_416 = input.LA(1);


				int index161_416 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_416);
				if (s >= 0) return s;
				break;
			case 319:
				int LA161_417 = input.LA(1);


				int index161_417 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_417);
				if (s >= 0) return s;
				break;
			case 320:
				int LA161_418 = input.LA(1);


				int index161_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_418);
				if (s >= 0) return s;
				break;
			case 321:
				int LA161_419 = input.LA(1);


				int index161_419 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_419);
				if (s >= 0) return s;
				break;
			case 322:
				int LA161_420 = input.LA(1);


				int index161_420 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_420);
				if (s >= 0) return s;
				break;
			case 323:
				int LA161_421 = input.LA(1);


				int index161_421 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_421);
				if (s >= 0) return s;
				break;
			case 324:
				int LA161_422 = input.LA(1);


				int index161_422 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_422);
				if (s >= 0) return s;
				break;
			case 325:
				int LA161_423 = input.LA(1);


				int index161_423 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_423);
				if (s >= 0) return s;
				break;
			case 326:
				int LA161_424 = input.LA(1);


				int index161_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_424);
				if (s >= 0) return s;
				break;
			case 327:
				int LA161_425 = input.LA(1);


				int index161_425 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_425);
				if (s >= 0) return s;
				break;
			case 328:
				int LA161_426 = input.LA(1);


				int index161_426 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_426);
				if (s >= 0) return s;
				break;
			case 329:
				int LA161_427 = input.LA(1);


				int index161_427 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_427);
				if (s >= 0) return s;
				break;
			case 330:
				int LA161_428 = input.LA(1);


				int index161_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_428);
				if (s >= 0) return s;
				break;
			case 331:
				int LA161_429 = input.LA(1);


				int index161_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_429);
				if (s >= 0) return s;
				break;
			case 332:
				int LA161_430 = input.LA(1);


				int index161_430 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_430);
				if (s >= 0) return s;
				break;
			case 333:
				int LA161_431 = input.LA(1);


				int index161_431 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_431);
				if (s >= 0) return s;
				break;
			case 334:
				int LA161_432 = input.LA(1);


				int index161_432 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_432);
				if (s >= 0) return s;
				break;
			case 335:
				int LA161_433 = input.LA(1);


				int index161_433 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_433);
				if (s >= 0) return s;
				break;
			case 336:
				int LA161_434 = input.LA(1);


				int index161_434 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_434);
				if (s >= 0) return s;
				break;
			case 337:
				int LA161_435 = input.LA(1);


				int index161_435 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_435);
				if (s >= 0) return s;
				break;
			case 338:
				int LA161_436 = input.LA(1);


				int index161_436 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_436);
				if (s >= 0) return s;
				break;
			case 339:
				int LA161_437 = input.LA(1);


				int index161_437 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_437);
				if (s >= 0) return s;
				break;
			case 340:
				int LA161_438 = input.LA(1);


				int index161_438 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_438);
				if (s >= 0) return s;
				break;
			case 341:
				int LA161_439 = input.LA(1);


				int index161_439 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_439);
				if (s >= 0) return s;
				break;
			case 342:
				int LA161_440 = input.LA(1);


				int index161_440 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_440);
				if (s >= 0) return s;
				break;
			case 343:
				int LA161_441 = input.LA(1);


				int index161_441 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_441);
				if (s >= 0) return s;
				break;
			case 344:
				int LA161_442 = input.LA(1);


				int index161_442 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_442);
				if (s >= 0) return s;
				break;
			case 345:
				int LA161_443 = input.LA(1);


				int index161_443 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_443);
				if (s >= 0) return s;
				break;
			case 346:
				int LA161_444 = input.LA(1);


				int index161_444 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_444);
				if (s >= 0) return s;
				break;
			case 347:
				int LA161_445 = input.LA(1);


				int index161_445 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_445);
				if (s >= 0) return s;
				break;
			case 348:
				int LA161_446 = input.LA(1);


				int index161_446 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_446);
				if (s >= 0) return s;
				break;
			case 349:
				int LA161_447 = input.LA(1);


				int index161_447 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_447);
				if (s >= 0) return s;
				break;
			case 350:
				int LA161_448 = input.LA(1);


				int index161_448 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_448);
				if (s >= 0) return s;
				break;
			case 351:
				int LA161_449 = input.LA(1);


				int index161_449 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_449);
				if (s >= 0) return s;
				break;
			case 352:
				int LA161_450 = input.LA(1);


				int index161_450 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_450);
				if (s >= 0) return s;
				break;
			case 353:
				int LA161_451 = input.LA(1);


				int index161_451 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_451);
				if (s >= 0) return s;
				break;
			case 354:
				int LA161_452 = input.LA(1);


				int index161_452 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_452);
				if (s >= 0) return s;
				break;
			case 355:
				int LA161_453 = input.LA(1);


				int index161_453 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_453);
				if (s >= 0) return s;
				break;
			case 356:
				int LA161_454 = input.LA(1);


				int index161_454 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_454);
				if (s >= 0) return s;
				break;
			case 357:
				int LA161_455 = input.LA(1);


				int index161_455 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_455);
				if (s >= 0) return s;
				break;
			case 358:
				int LA161_456 = input.LA(1);


				int index161_456 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_456);
				if (s >= 0) return s;
				break;
			case 359:
				int LA161_457 = input.LA(1);


				int index161_457 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_457);
				if (s >= 0) return s;
				break;
			case 360:
				int LA161_458 = input.LA(1);


				int index161_458 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_458);
				if (s >= 0) return s;
				break;
			case 361:
				int LA161_459 = input.LA(1);


				int index161_459 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_459);
				if (s >= 0) return s;
				break;
			case 362:
				int LA161_460 = input.LA(1);


				int index161_460 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_460);
				if (s >= 0) return s;
				break;
			case 363:
				int LA161_461 = input.LA(1);


				int index161_461 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_461);
				if (s >= 0) return s;
				break;
			case 364:
				int LA161_462 = input.LA(1);


				int index161_462 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_462);
				if (s >= 0) return s;
				break;
			case 365:
				int LA161_463 = input.LA(1);


				int index161_463 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_463);
				if (s >= 0) return s;
				break;
			case 366:
				int LA161_464 = input.LA(1);


				int index161_464 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_464);
				if (s >= 0) return s;
				break;
			case 367:
				int LA161_465 = input.LA(1);


				int index161_465 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_465);
				if (s >= 0) return s;
				break;
			case 368:
				int LA161_466 = input.LA(1);


				int index161_466 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_466);
				if (s >= 0) return s;
				break;
			case 369:
				int LA161_467 = input.LA(1);


				int index161_467 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_467);
				if (s >= 0) return s;
				break;
			case 370:
				int LA161_468 = input.LA(1);


				int index161_468 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_468);
				if (s >= 0) return s;
				break;
			case 371:
				int LA161_469 = input.LA(1);


				int index161_469 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_469);
				if (s >= 0) return s;
				break;
			case 372:
				int LA161_470 = input.LA(1);


				int index161_470 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_470);
				if (s >= 0) return s;
				break;
			case 373:
				int LA161_471 = input.LA(1);


				int index161_471 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_471);
				if (s >= 0) return s;
				break;
			case 374:
				int LA161_472 = input.LA(1);


				int index161_472 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_472);
				if (s >= 0) return s;
				break;
			case 375:
				int LA161_473 = input.LA(1);


				int index161_473 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_473);
				if (s >= 0) return s;
				break;
			case 376:
				int LA161_474 = input.LA(1);


				int index161_474 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_474);
				if (s >= 0) return s;
				break;
			case 377:
				int LA161_475 = input.LA(1);


				int index161_475 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_475);
				if (s >= 0) return s;
				break;
			case 378:
				int LA161_476 = input.LA(1);


				int index161_476 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_476);
				if (s >= 0) return s;
				break;
			case 379:
				int LA161_477 = input.LA(1);


				int index161_477 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_477);
				if (s >= 0) return s;
				break;
			case 380:
				int LA161_478 = input.LA(1);


				int index161_478 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_478);
				if (s >= 0) return s;
				break;
			case 381:
				int LA161_479 = input.LA(1);


				int index161_479 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_479);
				if (s >= 0) return s;
				break;
			case 382:
				int LA161_480 = input.LA(1);


				int index161_480 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_480);
				if (s >= 0) return s;
				break;
			case 383:
				int LA161_481 = input.LA(1);


				int index161_481 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_481);
				if (s >= 0) return s;
				break;
			case 384:
				int LA161_482 = input.LA(1);


				int index161_482 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_482);
				if (s >= 0) return s;
				break;
			case 385:
				int LA161_483 = input.LA(1);


				int index161_483 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_483);
				if (s >= 0) return s;
				break;
			case 386:
				int LA161_484 = input.LA(1);


				int index161_484 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_484);
				if (s >= 0) return s;
				break;
			case 387:
				int LA161_485 = input.LA(1);


				int index161_485 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_485);
				if (s >= 0) return s;
				break;
			case 388:
				int LA161_486 = input.LA(1);


				int index161_486 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_486);
				if (s >= 0) return s;
				break;
			case 389:
				int LA161_487 = input.LA(1);


				int index161_487 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_487);
				if (s >= 0) return s;
				break;
			case 390:
				int LA161_488 = input.LA(1);


				int index161_488 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_488);
				if (s >= 0) return s;
				break;
			case 391:
				int LA161_489 = input.LA(1);


				int index161_489 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_489);
				if (s >= 0) return s;
				break;
			case 392:
				int LA161_490 = input.LA(1);


				int index161_490 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_490);
				if (s >= 0) return s;
				break;
			case 393:
				int LA161_491 = input.LA(1);


				int index161_491 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_491);
				if (s >= 0) return s;
				break;
			case 394:
				int LA161_492 = input.LA(1);


				int index161_492 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_492);
				if (s >= 0) return s;
				break;
			case 395:
				int LA161_493 = input.LA(1);


				int index161_493 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_493);
				if (s >= 0) return s;
				break;
			case 396:
				int LA161_494 = input.LA(1);


				int index161_494 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_494);
				if (s >= 0) return s;
				break;
			case 397:
				int LA161_495 = input.LA(1);


				int index161_495 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_495);
				if (s >= 0) return s;
				break;
			case 398:
				int LA161_496 = input.LA(1);


				int index161_496 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_496);
				if (s >= 0) return s;
				break;
			case 399:
				int LA161_497 = input.LA(1);


				int index161_497 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_497);
				if (s >= 0) return s;
				break;
			case 400:
				int LA161_498 = input.LA(1);


				int index161_498 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_498);
				if (s >= 0) return s;
				break;
			case 401:
				int LA161_499 = input.LA(1);


				int index161_499 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_499);
				if (s >= 0) return s;
				break;
			case 402:
				int LA161_500 = input.LA(1);


				int index161_500 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_500);
				if (s >= 0) return s;
				break;
			case 403:
				int LA161_501 = input.LA(1);


				int index161_501 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_501);
				if (s >= 0) return s;
				break;
			case 404:
				int LA161_502 = input.LA(1);


				int index161_502 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_502);
				if (s >= 0) return s;
				break;
			case 405:
				int LA161_503 = input.LA(1);


				int index161_503 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_503);
				if (s >= 0) return s;
				break;
			case 406:
				int LA161_504 = input.LA(1);


				int index161_504 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_504);
				if (s >= 0) return s;
				break;
			case 407:
				int LA161_505 = input.LA(1);


				int index161_505 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_505);
				if (s >= 0) return s;
				break;
			case 408:
				int LA161_506 = input.LA(1);


				int index161_506 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_506);
				if (s >= 0) return s;
				break;
			case 409:
				int LA161_507 = input.LA(1);


				int index161_507 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_507);
				if (s >= 0) return s;
				break;
			case 410:
				int LA161_508 = input.LA(1);


				int index161_508 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_508);
				if (s >= 0) return s;
				break;
			case 411:
				int LA161_509 = input.LA(1);


				int index161_509 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_509);
				if (s >= 0) return s;
				break;
			case 412:
				int LA161_510 = input.LA(1);


				int index161_510 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_510);
				if (s >= 0) return s;
				break;
			case 413:
				int LA161_511 = input.LA(1);


				int index161_511 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_511);
				if (s >= 0) return s;
				break;
			case 414:
				int LA161_512 = input.LA(1);


				int index161_512 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_512);
				if (s >= 0) return s;
				break;
			case 415:
				int LA161_513 = input.LA(1);


				int index161_513 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_513);
				if (s >= 0) return s;
				break;
			case 416:
				int LA161_514 = input.LA(1);


				int index161_514 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_514);
				if (s >= 0) return s;
				break;
			case 417:
				int LA161_515 = input.LA(1);


				int index161_515 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_515);
				if (s >= 0) return s;
				break;
			case 418:
				int LA161_516 = input.LA(1);


				int index161_516 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_516);
				if (s >= 0) return s;
				break;
			case 419:
				int LA161_517 = input.LA(1);


				int index161_517 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_517);
				if (s >= 0) return s;
				break;
			case 420:
				int LA161_518 = input.LA(1);


				int index161_518 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_518);
				if (s >= 0) return s;
				break;
			case 421:
				int LA161_519 = input.LA(1);


				int index161_519 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_519);
				if (s >= 0) return s;
				break;
			case 422:
				int LA161_520 = input.LA(1);


				int index161_520 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_520);
				if (s >= 0) return s;
				break;
			case 423:
				int LA161_521 = input.LA(1);


				int index161_521 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_521);
				if (s >= 0) return s;
				break;
			case 424:
				int LA161_522 = input.LA(1);


				int index161_522 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_522);
				if (s >= 0) return s;
				break;
			case 425:
				int LA161_523 = input.LA(1);


				int index161_523 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_523);
				if (s >= 0) return s;
				break;
			case 426:
				int LA161_524 = input.LA(1);


				int index161_524 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_524);
				if (s >= 0) return s;
				break;
			case 427:
				int LA161_525 = input.LA(1);


				int index161_525 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_525);
				if (s >= 0) return s;
				break;
			case 428:
				int LA161_526 = input.LA(1);


				int index161_526 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_526);
				if (s >= 0) return s;
				break;
			case 429:
				int LA161_527 = input.LA(1);


				int index161_527 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_527);
				if (s >= 0) return s;
				break;
			case 430:
				int LA161_528 = input.LA(1);


				int index161_528 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_528);
				if (s >= 0) return s;
				break;
			case 431:
				int LA161_529 = input.LA(1);


				int index161_529 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_529);
				if (s >= 0) return s;
				break;
			case 432:
				int LA161_530 = input.LA(1);


				int index161_530 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_530);
				if (s >= 0) return s;
				break;
			case 433:
				int LA161_531 = input.LA(1);


				int index161_531 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_531);
				if (s >= 0) return s;
				break;
			case 434:
				int LA161_532 = input.LA(1);


				int index161_532 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_532);
				if (s >= 0) return s;
				break;
			case 435:
				int LA161_533 = input.LA(1);


				int index161_533 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_533);
				if (s >= 0) return s;
				break;
			case 436:
				int LA161_534 = input.LA(1);


				int index161_534 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_534);
				if (s >= 0) return s;
				break;
			case 437:
				int LA161_535 = input.LA(1);


				int index161_535 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_535);
				if (s >= 0) return s;
				break;
			case 438:
				int LA161_536 = input.LA(1);


				int index161_536 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_536);
				if (s >= 0) return s;
				break;
			case 439:
				int LA161_537 = input.LA(1);


				int index161_537 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_537);
				if (s >= 0) return s;
				break;
			case 440:
				int LA161_538 = input.LA(1);


				int index161_538 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_538);
				if (s >= 0) return s;
				break;
			case 441:
				int LA161_539 = input.LA(1);


				int index161_539 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_539);
				if (s >= 0) return s;
				break;
			case 442:
				int LA161_540 = input.LA(1);


				int index161_540 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_540);
				if (s >= 0) return s;
				break;
			case 443:
				int LA161_541 = input.LA(1);


				int index161_541 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_541);
				if (s >= 0) return s;
				break;
			case 444:
				int LA161_542 = input.LA(1);


				int index161_542 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_542);
				if (s >= 0) return s;
				break;
			case 445:
				int LA161_543 = input.LA(1);


				int index161_543 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_543);
				if (s >= 0) return s;
				break;
			case 446:
				int LA161_544 = input.LA(1);


				int index161_544 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_544);
				if (s >= 0) return s;
				break;
			case 447:
				int LA161_545 = input.LA(1);


				int index161_545 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_545);
				if (s >= 0) return s;
				break;
			case 448:
				int LA161_546 = input.LA(1);


				int index161_546 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_546);
				if (s >= 0) return s;
				break;
			case 449:
				int LA161_547 = input.LA(1);


				int index161_547 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_547);
				if (s >= 0) return s;
				break;
			case 450:
				int LA161_548 = input.LA(1);


				int index161_548 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_548);
				if (s >= 0) return s;
				break;
			case 451:
				int LA161_549 = input.LA(1);


				int index161_549 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_549);
				if (s >= 0) return s;
				break;
			case 452:
				int LA161_550 = input.LA(1);


				int index161_550 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_550);
				if (s >= 0) return s;
				break;
			case 453:
				int LA161_551 = input.LA(1);


				int index161_551 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_551);
				if (s >= 0) return s;
				break;
			case 454:
				int LA161_552 = input.LA(1);


				int index161_552 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_552);
				if (s >= 0) return s;
				break;
			case 455:
				int LA161_553 = input.LA(1);


				int index161_553 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_553);
				if (s >= 0) return s;
				break;
			case 456:
				int LA161_554 = input.LA(1);


				int index161_554 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_554);
				if (s >= 0) return s;
				break;
			case 457:
				int LA161_555 = input.LA(1);


				int index161_555 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_555);
				if (s >= 0) return s;
				break;
			case 458:
				int LA161_556 = input.LA(1);


				int index161_556 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_556);
				if (s >= 0) return s;
				break;
			case 459:
				int LA161_557 = input.LA(1);


				int index161_557 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_557);
				if (s >= 0) return s;
				break;
			case 460:
				int LA161_558 = input.LA(1);


				int index161_558 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_558);
				if (s >= 0) return s;
				break;
			case 461:
				int LA161_559 = input.LA(1);


				int index161_559 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_559);
				if (s >= 0) return s;
				break;
			case 462:
				int LA161_560 = input.LA(1);


				int index161_560 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_560);
				if (s >= 0) return s;
				break;
			case 463:
				int LA161_561 = input.LA(1);


				int index161_561 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_561);
				if (s >= 0) return s;
				break;
			case 464:
				int LA161_562 = input.LA(1);


				int index161_562 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_562);
				if (s >= 0) return s;
				break;
			case 465:
				int LA161_563 = input.LA(1);


				int index161_563 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_563);
				if (s >= 0) return s;
				break;
			case 466:
				int LA161_564 = input.LA(1);


				int index161_564 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_564);
				if (s >= 0) return s;
				break;
			case 467:
				int LA161_565 = input.LA(1);


				int index161_565 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_565);
				if (s >= 0) return s;
				break;
			case 468:
				int LA161_566 = input.LA(1);


				int index161_566 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_566);
				if (s >= 0) return s;
				break;
			case 469:
				int LA161_567 = input.LA(1);


				int index161_567 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_567);
				if (s >= 0) return s;
				break;
			case 470:
				int LA161_568 = input.LA(1);


				int index161_568 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_568);
				if (s >= 0) return s;
				break;
			case 471:
				int LA161_569 = input.LA(1);


				int index161_569 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_569);
				if (s >= 0) return s;
				break;
			case 472:
				int LA161_570 = input.LA(1);


				int index161_570 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_570);
				if (s >= 0) return s;
				break;
			case 473:
				int LA161_571 = input.LA(1);


				int index161_571 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_571);
				if (s >= 0) return s;
				break;
			case 474:
				int LA161_572 = input.LA(1);


				int index161_572 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_572);
				if (s >= 0) return s;
				break;
			case 475:
				int LA161_573 = input.LA(1);


				int index161_573 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_573);
				if (s >= 0) return s;
				break;
			case 476:
				int LA161_574 = input.LA(1);


				int index161_574 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_574);
				if (s >= 0) return s;
				break;
			case 477:
				int LA161_575 = input.LA(1);


				int index161_575 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_575);
				if (s >= 0) return s;
				break;
			case 478:
				int LA161_576 = input.LA(1);


				int index161_576 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_576);
				if (s >= 0) return s;
				break;
			case 479:
				int LA161_577 = input.LA(1);


				int index161_577 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_577);
				if (s >= 0) return s;
				break;
			case 480:
				int LA161_578 = input.LA(1);


				int index161_578 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_578);
				if (s >= 0) return s;
				break;
			case 481:
				int LA161_579 = input.LA(1);


				int index161_579 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_579);
				if (s >= 0) return s;
				break;
			case 482:
				int LA161_580 = input.LA(1);


				int index161_580 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_580);
				if (s >= 0) return s;
				break;
			case 483:
				int LA161_581 = input.LA(1);


				int index161_581 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_581);
				if (s >= 0) return s;
				break;
			case 484:
				int LA161_582 = input.LA(1);


				int index161_582 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_582);
				if (s >= 0) return s;
				break;
			case 485:
				int LA161_583 = input.LA(1);


				int index161_583 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_583);
				if (s >= 0) return s;
				break;
			case 486:
				int LA161_584 = input.LA(1);


				int index161_584 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_584);
				if (s >= 0) return s;
				break;
			case 487:
				int LA161_585 = input.LA(1);


				int index161_585 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_585);
				if (s >= 0) return s;
				break;
			case 488:
				int LA161_586 = input.LA(1);


				int index161_586 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_586);
				if (s >= 0) return s;
				break;
			case 489:
				int LA161_587 = input.LA(1);


				int index161_587 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_587);
				if (s >= 0) return s;
				break;
			case 490:
				int LA161_588 = input.LA(1);


				int index161_588 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_588);
				if (s >= 0) return s;
				break;
			case 491:
				int LA161_589 = input.LA(1);


				int index161_589 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_589);
				if (s >= 0) return s;
				break;
			case 492:
				int LA161_590 = input.LA(1);


				int index161_590 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_590);
				if (s >= 0) return s;
				break;
			case 493:
				int LA161_591 = input.LA(1);


				int index161_591 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_591);
				if (s >= 0) return s;
				break;
			case 494:
				int LA161_592 = input.LA(1);


				int index161_592 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_592);
				if (s >= 0) return s;
				break;
			case 495:
				int LA161_593 = input.LA(1);


				int index161_593 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_593);
				if (s >= 0) return s;
				break;
			case 496:
				int LA161_594 = input.LA(1);


				int index161_594 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_594);
				if (s >= 0) return s;
				break;
			case 497:
				int LA161_595 = input.LA(1);


				int index161_595 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_595);
				if (s >= 0) return s;
				break;
			case 498:
				int LA161_596 = input.LA(1);


				int index161_596 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_596);
				if (s >= 0) return s;
				break;
			case 499:
				int LA161_597 = input.LA(1);


				int index161_597 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_597);
				if (s >= 0) return s;
				break;
			case 500:
				int LA161_598 = input.LA(1);


				int index161_598 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_598);
				if (s >= 0) return s;
				break;
			case 501:
				int LA161_599 = input.LA(1);


				int index161_599 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_599);
				if (s >= 0) return s;
				break;
			case 502:
				int LA161_600 = input.LA(1);


				int index161_600 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_600);
				if (s >= 0) return s;
				break;
			case 503:
				int LA161_601 = input.LA(1);


				int index161_601 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_601);
				if (s >= 0) return s;
				break;
			case 504:
				int LA161_602 = input.LA(1);


				int index161_602 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_602);
				if (s >= 0) return s;
				break;
			case 505:
				int LA161_603 = input.LA(1);


				int index161_603 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_603);
				if (s >= 0) return s;
				break;
			case 506:
				int LA161_604 = input.LA(1);


				int index161_604 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_604);
				if (s >= 0) return s;
				break;
			case 507:
				int LA161_605 = input.LA(1);


				int index161_605 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_605);
				if (s >= 0) return s;
				break;
			case 508:
				int LA161_606 = input.LA(1);


				int index161_606 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_606);
				if (s >= 0) return s;
				break;
			case 509:
				int LA161_607 = input.LA(1);


				int index161_607 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_607);
				if (s >= 0) return s;
				break;
			case 510:
				int LA161_608 = input.LA(1);


				int index161_608 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_608);
				if (s >= 0) return s;
				break;
			case 511:
				int LA161_609 = input.LA(1);


				int index161_609 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_609);
				if (s >= 0) return s;
				break;
			case 512:
				int LA161_610 = input.LA(1);


				int index161_610 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_610);
				if (s >= 0) return s;
				break;
			case 513:
				int LA161_611 = input.LA(1);


				int index161_611 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_611);
				if (s >= 0) return s;
				break;
			case 514:
				int LA161_612 = input.LA(1);


				int index161_612 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_612);
				if (s >= 0) return s;
				break;
			case 515:
				int LA161_613 = input.LA(1);


				int index161_613 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_613);
				if (s >= 0) return s;
				break;
			case 516:
				int LA161_614 = input.LA(1);


				int index161_614 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_614);
				if (s >= 0) return s;
				break;
			case 517:
				int LA161_615 = input.LA(1);


				int index161_615 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_615);
				if (s >= 0) return s;
				break;
			case 518:
				int LA161_616 = input.LA(1);


				int index161_616 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_616);
				if (s >= 0) return s;
				break;
			case 519:
				int LA161_617 = input.LA(1);


				int index161_617 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_617);
				if (s >= 0) return s;
				break;
			case 520:
				int LA161_618 = input.LA(1);


				int index161_618 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_618);
				if (s >= 0) return s;
				break;
			case 521:
				int LA161_619 = input.LA(1);


				int index161_619 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_619);
				if (s >= 0) return s;
				break;
			case 522:
				int LA161_620 = input.LA(1);


				int index161_620 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_620);
				if (s >= 0) return s;
				break;
			case 523:
				int LA161_621 = input.LA(1);


				int index161_621 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_621);
				if (s >= 0) return s;
				break;
			case 524:
				int LA161_622 = input.LA(1);


				int index161_622 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_622);
				if (s >= 0) return s;
				break;
			case 525:
				int LA161_623 = input.LA(1);


				int index161_623 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_623);
				if (s >= 0) return s;
				break;
			case 526:
				int LA161_624 = input.LA(1);


				int index161_624 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_624);
				if (s >= 0) return s;
				break;
			case 527:
				int LA161_625 = input.LA(1);


				int index161_625 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_625);
				if (s >= 0) return s;
				break;
			case 528:
				int LA161_626 = input.LA(1);


				int index161_626 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_626);
				if (s >= 0) return s;
				break;
			case 529:
				int LA161_627 = input.LA(1);


				int index161_627 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_627);
				if (s >= 0) return s;
				break;
			case 530:
				int LA161_628 = input.LA(1);


				int index161_628 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_628);
				if (s >= 0) return s;
				break;
			case 531:
				int LA161_629 = input.LA(1);


				int index161_629 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_629);
				if (s >= 0) return s;
				break;
			case 532:
				int LA161_630 = input.LA(1);


				int index161_630 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_630);
				if (s >= 0) return s;
				break;
			case 533:
				int LA161_631 = input.LA(1);


				int index161_631 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_631);
				if (s >= 0) return s;
				break;
			case 534:
				int LA161_632 = input.LA(1);


				int index161_632 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_632);
				if (s >= 0) return s;
				break;
			case 535:
				int LA161_633 = input.LA(1);


				int index161_633 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_633);
				if (s >= 0) return s;
				break;
			case 536:
				int LA161_634 = input.LA(1);


				int index161_634 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_634);
				if (s >= 0) return s;
				break;
			case 537:
				int LA161_635 = input.LA(1);


				int index161_635 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_635);
				if (s >= 0) return s;
				break;
			case 538:
				int LA161_636 = input.LA(1);


				int index161_636 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_636);
				if (s >= 0) return s;
				break;
			case 539:
				int LA161_637 = input.LA(1);


				int index161_637 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_637);
				if (s >= 0) return s;
				break;
			case 540:
				int LA161_638 = input.LA(1);


				int index161_638 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_638);
				if (s >= 0) return s;
				break;
			case 541:
				int LA161_639 = input.LA(1);


				int index161_639 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_639);
				if (s >= 0) return s;
				break;
			case 542:
				int LA161_640 = input.LA(1);


				int index161_640 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_640);
				if (s >= 0) return s;
				break;
			case 543:
				int LA161_641 = input.LA(1);


				int index161_641 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_641);
				if (s >= 0) return s;
				break;
			case 544:
				int LA161_642 = input.LA(1);


				int index161_642 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_642);
				if (s >= 0) return s;
				break;
			case 545:
				int LA161_643 = input.LA(1);


				int index161_643 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_643);
				if (s >= 0) return s;
				break;
			case 546:
				int LA161_644 = input.LA(1);


				int index161_644 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_644);
				if (s >= 0) return s;
				break;
			case 547:
				int LA161_645 = input.LA(1);


				int index161_645 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_645);
				if (s >= 0) return s;
				break;
			case 548:
				int LA161_646 = input.LA(1);


				int index161_646 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_646);
				if (s >= 0) return s;
				break;
			case 549:
				int LA161_647 = input.LA(1);


				int index161_647 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_647);
				if (s >= 0) return s;
				break;
			case 550:
				int LA161_648 = input.LA(1);


				int index161_648 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_648);
				if (s >= 0) return s;
				break;
			case 551:
				int LA161_649 = input.LA(1);


				int index161_649 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_649);
				if (s >= 0) return s;
				break;
			case 552:
				int LA161_650 = input.LA(1);


				int index161_650 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_650);
				if (s >= 0) return s;
				break;
			case 553:
				int LA161_651 = input.LA(1);


				int index161_651 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_651);
				if (s >= 0) return s;
				break;
			case 554:
				int LA161_652 = input.LA(1);


				int index161_652 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_652);
				if (s >= 0) return s;
				break;
			case 555:
				int LA161_653 = input.LA(1);


				int index161_653 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_653);
				if (s >= 0) return s;
				break;
			case 556:
				int LA161_654 = input.LA(1);


				int index161_654 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_654);
				if (s >= 0) return s;
				break;
			case 557:
				int LA161_655 = input.LA(1);


				int index161_655 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_655);
				if (s >= 0) return s;
				break;
			case 558:
				int LA161_656 = input.LA(1);


				int index161_656 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_656);
				if (s >= 0) return s;
				break;
			case 559:
				int LA161_657 = input.LA(1);


				int index161_657 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_657);
				if (s >= 0) return s;
				break;
			case 560:
				int LA161_658 = input.LA(1);


				int index161_658 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_658);
				if (s >= 0) return s;
				break;
			case 561:
				int LA161_659 = input.LA(1);


				int index161_659 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_659);
				if (s >= 0) return s;
				break;
			case 562:
				int LA161_660 = input.LA(1);


				int index161_660 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_660);
				if (s >= 0) return s;
				break;
			case 563:
				int LA161_661 = input.LA(1);


				int index161_661 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_661);
				if (s >= 0) return s;
				break;
			case 564:
				int LA161_662 = input.LA(1);


				int index161_662 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_662);
				if (s >= 0) return s;
				break;
			case 565:
				int LA161_663 = input.LA(1);


				int index161_663 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_663);
				if (s >= 0) return s;
				break;
			case 566:
				int LA161_664 = input.LA(1);


				int index161_664 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_664);
				if (s >= 0) return s;
				break;
			case 567:
				int LA161_665 = input.LA(1);


				int index161_665 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_665);
				if (s >= 0) return s;
				break;
			case 568:
				int LA161_666 = input.LA(1);


				int index161_666 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_666);
				if (s >= 0) return s;
				break;
			case 569:
				int LA161_667 = input.LA(1);


				int index161_667 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_667);
				if (s >= 0) return s;
				break;
			case 570:
				int LA161_668 = input.LA(1);


				int index161_668 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_668);
				if (s >= 0) return s;
				break;
			case 571:
				int LA161_669 = input.LA(1);


				int index161_669 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_669);
				if (s >= 0) return s;
				break;
			case 572:
				int LA161_670 = input.LA(1);


				int index161_670 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_670);
				if (s >= 0) return s;
				break;
			case 573:
				int LA161_671 = input.LA(1);


				int index161_671 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_671);
				if (s >= 0) return s;
				break;
			case 574:
				int LA161_672 = input.LA(1);


				int index161_672 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_672);
				if (s >= 0) return s;
				break;
			case 575:
				int LA161_673 = input.LA(1);


				int index161_673 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_673);
				if (s >= 0) return s;
				break;
			case 576:
				int LA161_674 = input.LA(1);


				int index161_674 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_674);
				if (s >= 0) return s;
				break;
			case 577:
				int LA161_675 = input.LA(1);


				int index161_675 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_675);
				if (s >= 0) return s;
				break;
			case 578:
				int LA161_676 = input.LA(1);


				int index161_676 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_676);
				if (s >= 0) return s;
				break;
			case 579:
				int LA161_677 = input.LA(1);


				int index161_677 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_677);
				if (s >= 0) return s;
				break;
			case 580:
				int LA161_678 = input.LA(1);


				int index161_678 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_678);
				if (s >= 0) return s;
				break;
			case 581:
				int LA161_679 = input.LA(1);


				int index161_679 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_679);
				if (s >= 0) return s;
				break;
			case 582:
				int LA161_680 = input.LA(1);


				int index161_680 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_680);
				if (s >= 0) return s;
				break;
			case 583:
				int LA161_681 = input.LA(1);


				int index161_681 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_681);
				if (s >= 0) return s;
				break;
			case 584:
				int LA161_682 = input.LA(1);


				int index161_682 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_682);
				if (s >= 0) return s;
				break;
			case 585:
				int LA161_683 = input.LA(1);


				int index161_683 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_683);
				if (s >= 0) return s;
				break;
			case 586:
				int LA161_684 = input.LA(1);


				int index161_684 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_684);
				if (s >= 0) return s;
				break;
			case 587:
				int LA161_685 = input.LA(1);


				int index161_685 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_685);
				if (s >= 0) return s;
				break;
			case 588:
				int LA161_686 = input.LA(1);


				int index161_686 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_686);
				if (s >= 0) return s;
				break;
			case 589:
				int LA161_687 = input.LA(1);


				int index161_687 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_687);
				if (s >= 0) return s;
				break;
			case 590:
				int LA161_688 = input.LA(1);


				int index161_688 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_688);
				if (s >= 0) return s;
				break;
			case 591:
				int LA161_689 = input.LA(1);


				int index161_689 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_689);
				if (s >= 0) return s;
				break;
			case 592:
				int LA161_690 = input.LA(1);


				int index161_690 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_690);
				if (s >= 0) return s;
				break;
			case 593:
				int LA161_691 = input.LA(1);


				int index161_691 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_691);
				if (s >= 0) return s;
				break;
			case 594:
				int LA161_692 = input.LA(1);


				int index161_692 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_692);
				if (s >= 0) return s;
				break;
			case 595:
				int LA161_693 = input.LA(1);


				int index161_693 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_693);
				if (s >= 0) return s;
				break;
			case 596:
				int LA161_694 = input.LA(1);


				int index161_694 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_694);
				if (s >= 0) return s;
				break;
			case 597:
				int LA161_695 = input.LA(1);


				int index161_695 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_695);
				if (s >= 0) return s;
				break;
			case 598:
				int LA161_696 = input.LA(1);


				int index161_696 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_696);
				if (s >= 0) return s;
				break;
			case 599:
				int LA161_697 = input.LA(1);


				int index161_697 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_697);
				if (s >= 0) return s;
				break;
			case 600:
				int LA161_698 = input.LA(1);


				int index161_698 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_698);
				if (s >= 0) return s;
				break;
			case 601:
				int LA161_699 = input.LA(1);


				int index161_699 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_699);
				if (s >= 0) return s;
				break;
			case 602:
				int LA161_700 = input.LA(1);


				int index161_700 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_700);
				if (s >= 0) return s;
				break;
			case 603:
				int LA161_701 = input.LA(1);


				int index161_701 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_701);
				if (s >= 0) return s;
				break;
			case 604:
				int LA161_702 = input.LA(1);


				int index161_702 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_702);
				if (s >= 0) return s;
				break;
			case 605:
				int LA161_703 = input.LA(1);


				int index161_703 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_703);
				if (s >= 0) return s;
				break;
			case 606:
				int LA161_704 = input.LA(1);


				int index161_704 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_704);
				if (s >= 0) return s;
				break;
			case 607:
				int LA161_705 = input.LA(1);


				int index161_705 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_705);
				if (s >= 0) return s;
				break;
			case 608:
				int LA161_706 = input.LA(1);


				int index161_706 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_706);
				if (s >= 0) return s;
				break;
			case 609:
				int LA161_707 = input.LA(1);


				int index161_707 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_707);
				if (s >= 0) return s;
				break;
			case 610:
				int LA161_708 = input.LA(1);


				int index161_708 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_708);
				if (s >= 0) return s;
				break;
			case 611:
				int LA161_709 = input.LA(1);


				int index161_709 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_709);
				if (s >= 0) return s;
				break;
			case 612:
				int LA161_710 = input.LA(1);


				int index161_710 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_710);
				if (s >= 0) return s;
				break;
			case 613:
				int LA161_711 = input.LA(1);


				int index161_711 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_711);
				if (s >= 0) return s;
				break;
			case 614:
				int LA161_712 = input.LA(1);


				int index161_712 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_712);
				if (s >= 0) return s;
				break;
			case 615:
				int LA161_713 = input.LA(1);


				int index161_713 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_713);
				if (s >= 0) return s;
				break;
			case 616:
				int LA161_714 = input.LA(1);


				int index161_714 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_714);
				if (s >= 0) return s;
				break;
			case 617:
				int LA161_715 = input.LA(1);


				int index161_715 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_715);
				if (s >= 0) return s;
				break;
			case 618:
				int LA161_716 = input.LA(1);


				int index161_716 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_716);
				if (s >= 0) return s;
				break;
			case 619:
				int LA161_717 = input.LA(1);


				int index161_717 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_717);
				if (s >= 0) return s;
				break;
			case 620:
				int LA161_718 = input.LA(1);


				int index161_718 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_718);
				if (s >= 0) return s;
				break;
			case 621:
				int LA161_719 = input.LA(1);


				int index161_719 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_719);
				if (s >= 0) return s;
				break;
			case 622:
				int LA161_720 = input.LA(1);


				int index161_720 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_720);
				if (s >= 0) return s;
				break;
			case 623:
				int LA161_721 = input.LA(1);


				int index161_721 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_721);
				if (s >= 0) return s;
				break;
			case 624:
				int LA161_722 = input.LA(1);


				int index161_722 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_722);
				if (s >= 0) return s;
				break;
			case 625:
				int LA161_723 = input.LA(1);


				int index161_723 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_723);
				if (s >= 0) return s;
				break;
			case 626:
				int LA161_724 = input.LA(1);


				int index161_724 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_MySQL51Parser_fragment))) {s = 823;}

				else if ((true)) {s = 828;}


				input.Seek(index161_724);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 161, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA169 : DFA
	{
		private const string DFA169_eotS =
			"\x17C\xFFFF";
		private const string DFA169_eofS =
			"\x17C\xFFFF";
		private const string DFA169_minS =
			"\x1\x5\x17B\xFFFF";
		private const string DFA169_maxS =
			"\x1\x27E\x17B\xFFFF";
		private const string DFA169_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x179\xFFFF";
		private const string DFA169_specialS =
			"\x17C\xFFFF}>";
		private static readonly string[] DFA169_transitionS =
			{
				"\x1\x2\x1\xFFFF\x5\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x7\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x4\x2\x4\xFFFF\x3\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x1\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x6\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x2\x2\xFFFF\x4\x2\x4\xFFFF\x1\x2\x4\xFFFF\x3\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x4\x2\x3\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x1\x2\x2\xFFFF\x4\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x3\x2\x3\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x3\x2\x7\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1"+
				"\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF"+
				"\x1\x2\x5\xFFFF\xF\x2\x1\xFFFF\xB\x2\x3\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2\x1\xFFFF\x7\x2\x3\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x5"+
				"\xFFFF\xC\x2\x1\xFFFF\x4\x2\x2\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x1\xFFFF\x3\x2\x8\xFFFF\x5\x2\x2\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x6\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x6\x2\x1\xFFFF\x3\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x6"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF"+
				"\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1"+
				"\xFFFF\xF\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\x5\xFFFF\x2"+
				"\x2\x1\xFFFF\x9\x2\x1\xFFFF\x4\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x2\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\x5\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA169_eot = DFA.UnpackEncodedString(DFA169_eotS);
		private static readonly short[] DFA169_eof = DFA.UnpackEncodedString(DFA169_eofS);
		private static readonly char[] DFA169_min = DFA.UnpackEncodedStringToUnsignedChars(DFA169_minS);
		private static readonly char[] DFA169_max = DFA.UnpackEncodedStringToUnsignedChars(DFA169_maxS);
		private static readonly short[] DFA169_accept = DFA.UnpackEncodedString(DFA169_acceptS);
		private static readonly short[] DFA169_special = DFA.UnpackEncodedString(DFA169_specialS);
		private static readonly short[][] DFA169_transition;

		static DFA169()
		{
			int numStates = DFA169_transitionS.Length;
			DFA169_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA169_transition[i] = DFA.UnpackEncodedString(DFA169_transitionS[i]);
			}
		}

		public DFA169( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 169;
			this.eot = DFA169_eot;
			this.eof = DFA169_eof;
			this.min = DFA169_min;
			this.max = DFA169_max;
			this.accept = DFA169_accept;
			this.special = DFA169_special;
			this.transition = DFA169_transition;
		}

		public override string Description { get { return "954:1: case_stmt : ( CASE ( ( WHEN expr THEN statement_list )+ ( ELSE statement_list )? END ) | ( primary ( WHEN primary THEN statement_list )+ ( ELSE statement_list )? END CASE ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA170 : DFA
	{
		private const string DFA170_eotS =
			"\x176\xFFFF";
		private const string DFA170_eofS =
			"\x176\xFFFF";
		private const string DFA170_minS =
			"\x1\x5\xB\xFFFF\x1\x0\x19\xFFFF\x1\x0\x5\xFFFF\x1\x0\x3\xFFFF\x1\x0\x3"+
			"\xFFFF\x2\x0\x3\xFFFF\x5\x0\x1\xFFFF\x1\x0\x1\xFFFF\x2\x0\x1\xFFFF\x8"+
			"\x0\x2\xFFFF\x2\x0\x2\xFFFF\x3\x0\x3\xFFFF\x2\x0\x1\xFFFF\x6\x0\x115"+
			"\xFFFF";
		private const string DFA170_maxS =
			"\x1\x27E\xB\xFFFF\x1\x0\x19\xFFFF\x1\x0\x5\xFFFF\x1\x0\x3\xFFFF\x1\x0"+
			"\x3\xFFFF\x2\x0\x3\xFFFF\x5\x0\x1\xFFFF\x1\x0\x1\xFFFF\x2\x0\x1\xFFFF"+
			"\x8\x0\x2\xFFFF\x2\x0\x2\xFFFF\x3\x0\x3\xFFFF\x2\x0\x1\xFFFF\x6\x0\x115"+
			"\xFFFF";
		private const string DFA170_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA"+
			"\x1\xB\x1\xFFFF\x19\xC\x1\xFFFF\x5\xC\x1\xFFFF\x3\xC\x1\xFFFF\x3\xC\x2"+
			"\xFFFF\x3\xC\x5\xFFFF\x1\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x8\xFFFF\x2"+
			"\xC\x2\xFFFF\x2\xC\x3\xFFFF\x3\xC\x2\xFFFF\x1\xC\x6\xFFFF\x1\xD\x114"+
			"\xFFFF";
		private const string DFA170_specialS =
			"\x1\x0\xB\xFFFF\x1\x1\x19\xFFFF\x1\x2\x5\xFFFF\x1\x3\x3\xFFFF\x1\x4\x3"+
			"\xFFFF\x1\x5\x1\x6\x3\xFFFF\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xFFFF\x1"+
			"\xC\x1\xFFFF\x1\xD\x1\xE\x1\xFFFF\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1"+
			"\x14\x1\x15\x1\x16\x2\xFFFF\x1\x17\x1\x18\x2\xFFFF\x1\x19\x1\x1A\x1\x1B"+
			"\x3\xFFFF\x1\x1C\x1\x1D\x1\xFFFF\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
			"\x23\x115\xFFFF}>";
		private static readonly string[] DFA170_transitionS =
			{
				"\x1\x61\x1\xFFFF\x1\x26\x4\x61\x4\xFFFF\x1\x61\x3\xFFFF\x1\x39\x2\xFFFF"+
				"\x4\x61\x1\xC\x2\x61\x2\xFFFF\x1\x61\x4\xFFFF\x1\x7\x2\x61\x4\xFFFF"+
				"\x1\xD\x1\xE\x1\xF\x2\xFFFF\x3\x61\x1\xFFFF\x1\x61\x1\xFFFF\x2\x61\x2"+
				"\xFFFF\x1\x61\x1\xFFFF\x1\x10\x1\x61\x1\xFFFF\x1\x61\x1\x50\x1\xFFFF"+
				"\x1\x3A\x1\xFFFF\x4\x61\x1\x3B\x1\x61\x1\xFFFF\x1\x3C\x2\xFFFF\x1\x61"+
				"\x1\xFFFF\x1\x61\x1\xFFFF\x6\x61\x1\xFFFF\x2\x61\x1\xFFFF\x1\x3D\x1"+
				"\x61\x1\xFFFF\x1\x61\x1\xFFFF\x1\x12\x1\x61\x3\xFFFF\x1\x61\x1\x27\x1"+
				"\x28\x1\x2A\x1\x2E\x1\x51\x1\xFFFF\x1\x29\x2\xFFFF\x1\x61\x1\x3E\x1"+
				"\xFFFF\x1\x61\x1\x52\x1\x61\x1\x13\x1\xFFFF\x1\x14\x1\xFFFF\x1\x53\x4"+
				"\xFFFF\x1\x61\x4\xFFFF\x1\x61\x1\xFFFF\x1\x61\x3\xFFFF\x1\x61\x2\xFFFF"+
				"\x4\x61\x4\xFFFF\x1\x61\x4\xFFFF\x3\x61\x3\xFFFF\x1\x61\x1\xFFFF\x5"+
				"\x61\x1\xFFFF\x2\x61\x2\xFFFF\x3\x61\x1\xFFFF\x1\x61\x2\xFFFF\x1\x61"+
				"\x1\xFFFF\x2\x61\x1\x2B\x1\xB\x2\x61\x2\xFFFF\x4\x61\x3\xFFFF\x1\x61"+
				"\x3\xFFFF\x2\x61\x1\xFFFF\x1\x61\x1\xFFFF\x2\x61\x1\x3F\x1\x2C\x1\x61"+
				"\x1\x4\x2\xFFFF\x1\x61\x2\xFFFF\x1\x61\x1\x16\x2\x61\x2\xFFFF\x1\x61"+
				"\x1\x8\x1\xFFFF\x2\x61\x1\x54\x3\xFFFF\x1\x60\x1\x61\x1\x40\x1\x15\x1"+
				"\xFFFF\x1\x61\x2\xFFFF\x1\x61\x1\xFFFF\x1\x61\x1\xFFFF\x1\x61\x3\xFFFF"+
				"\x1\x55\x2\x61\x7\xFFFF\x1\x56\x1\xFFFF\x1\x3\x3\x61\x1\xFFFF\x2\x61"+
				"\x4\xFFFF\x1\x61\x1\xFFFF\x3\x61\x3\xFFFF\x1\x61\x1\x57\x1\xFFFF\x1"+
				"\x61\x2\xFFFF\x1\x61\x4\xFFFF\x1\x41\x1\x61\x1\xFFFF\x1\x61\x3\xFFFF"+
				"\x2\x61\x2\xFFFF\x1\x61\x6\xFFFF\xE\x61\x1\xFFFF\x1\x61\x1\xFFFF\x1"+
				"\x17\x8\x61\x3\xFFFF\x2\x61\x1\x42\x1\x18\x1\xFFFF\x1\x61\x1\x19\x1"+
				"\xFFFF\x1\x58\x2\xFFFF\x1\x61\x1\x43\x1\x61\x1\xFFFF\x1\x61\x1\xFFFF"+
				"\x1\x59\x1\xFFFF\x1\x44\x1\x45\x1\x46\x1\x61\x1\xFFFF\x3\x61\x1\xFFFF"+
				"\x7\x61\x3\xFFFF\x1\x2D\x1\x61\x1\xFFFF\x1\x9\x1\x1A\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x2\x61\x1\x47\x1\xFFFF\x1\x61\x1\xFFFF\x2\x61\x3\xFFFF\x1"+
				"\x61\x5\xFFFF\x8\x61\x1\x48\x3\x61\x1\xFFFF\x1\x49\x1\x4A\x1\x61\x1"+
				"\x2F\x2\xFFFF\x3\x61\x1\xFFFF\x1\x61\x1\xFFFF\x4\x61\x1\xFFFF\x1\x4B"+
				"\x2\x61\x8\xFFFF\x5\x61\x2\xFFFF\x3\x61\x1\xFFFF\x2\x61\x1\xFFFF\x2"+
				"\x61\x1\x4C\x1\x61\x1\x4D\x1\x61\x1\xFFFF\x3\x61\x1\xFFFF\x1\x61\x1"+
				"\xFFFF\x1\x61\x1\xFFFF\x1\x5A\x2\xFFFF\x6\x61\x1\xFFFF\x3\x61\x3\xFFFF"+
				"\x1\x5B\x1\xFFFF\x1\x61\x4\xFFFF\x4\x61\x1\x1B\x1\x5\x1\xFFFF\x1\x61"+
				"\x1\xFFFF\x4\x61\x1\xFFFF\x2\x61\x1\xFFFF\x3\x61\x7\xFFFF\x2\x61\x1"+
				"\xFFFF\x1\x61\x1\xFFFF\x1\x61\x1\xFFFF\x1\x61\x1\xFFFF\x2\x61\x1\x1C"+
				"\x1\x1D\x1\x1E\x1\x1F\x2\x61\x1\xFFFF\x1\x1\x1\x61\x1\x30\x3\x61\x1"+
				"\x31\x1\x32\x1\x20\x4\x61\x1\x33\x1\x21\x1\xFFFF\x4\x61\x1\xFFFF\x2"+
				"\x61\x1\xFFFF\x1\x5C\x1\x5D\x1\x34\x1\x35\x5\xFFFF\x2\x61\x1\xFFFF\x1"+
				"\x61\x1\x22\x1\xA\x1\x4E\x5\x61\x1\xFFFF\x4\x61\x2\xFFFF\x1\x61\x2\xFFFF"+
				"\x1\x61\x1\xFFFF\x1\x61\x2\xFFFF\x1\x5E\x2\xFFFF\x1\x61\x1\xFFFF\x1"+
				"\x36\x1\x38\x1\x37\x1\x61\x1\xFFFF\x1\x6\x3\xFFFF\x1\x61\x1\x23\x1\xFFFF"+
				"\x1\x24\x1\x25\x3\x61\x1\x4F\x4\xFFFF\x2\x61\x2\xFFFF\x2\x61\x1\xFFFF"+
				"\x1\x5F\x5\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA170_eot = DFA.UnpackEncodedString(DFA170_eotS);
		private static readonly short[] DFA170_eof = DFA.UnpackEncodedString(DFA170_eofS);
		private static readonly char[] DFA170_min = DFA.UnpackEncodedStringToUnsignedChars(DFA170_minS);
		private static readonly char[] DFA170_max = DFA.UnpackEncodedStringToUnsignedChars(DFA170_maxS);
		private static readonly short[] DFA170_accept = DFA.UnpackEncodedString(DFA170_acceptS);
		private static readonly short[] DFA170_special = DFA.UnpackEncodedString(DFA170_specialS);
		private static readonly short[][] DFA170_transition;

		static DFA170()
		{
			int numStates = DFA170_transitionS.Length;
			DFA170_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA170_transition[i] = DFA.UnpackEncodedString(DFA170_transitionS[i]);
			}
		}

		public DFA170( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}

		public override string Description { get { return "960:1: literal : (value= STRING |value= NUMBER |value= INT_NUMBER |value= GLOBAL_VARIABLE |value= SESSION_VARIABLE |value= VALUE_PLACEHOLDER |value= BINARY_VALUE |value= HEXA_VALUE |value= NULL |value= TRUE |value= FALSE | ( functionCall )=> functionCall | field_name );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition170(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA170_0 = input.LA(1);


				int index170_0 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA170_0==STRING)) {s = 1;}

				else if ((LA170_0==NUMBER)) {s = 2;}

				else if ((LA170_0==INT_NUMBER)) {s = 3;}

				else if ((LA170_0==GLOBAL_VARIABLE)) {s = 4;}

				else if ((LA170_0==SESSION_VARIABLE)) {s = 5;}

				else if ((LA170_0==VALUE_PLACEHOLDER)) {s = 6;}

				else if ((LA170_0==BINARY_VALUE)) {s = 7;}

				else if ((LA170_0==HEXA_VALUE)) {s = 8;}

				else if ((LA170_0==NULL)) {s = 9;}

				else if ((LA170_0==TRUE)) {s = 10;}

				else if ((LA170_0==FALSE)) {s = 11;}

				else if ((LA170_0==AVG)) {s = 12;}

				else if ((LA170_0==BIT_AND) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 13;}

				else if ((LA170_0==BIT_OR) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 14;}

				else if ((LA170_0==BIT_XOR) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 15;}

				else if ((LA170_0==CAST) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 16;}

				else if ((LA170_0==CONCAT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 17;}

				else if ((LA170_0==COUNT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 18;}

				else if ((LA170_0==DATE_ADD) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 19;}

				else if ((LA170_0==DATE_SUB) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 20;}

				else if ((LA170_0==IFNULL) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 21;}

				else if ((LA170_0==GROUP_CONCAT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 22;}

				else if ((LA170_0==MAX) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 23;}

				else if ((LA170_0==MID) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 24;}

				else if ((LA170_0==MIN) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 25;}

				else if ((LA170_0==NULLIF) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 26;}

				else if ((LA170_0==SESSION_USER) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 27;}

				else if ((LA170_0==STD) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 28;}

				else if ((LA170_0==STDDEV) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 29;}

				else if ((LA170_0==STDDEV_POP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 30;}

				else if ((LA170_0==STDDEV_SAMP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 31;}

				else if ((LA170_0==SUM) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 32;}

				else if ((LA170_0==SYSTEM_USER) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 33;}

				else if ((LA170_0==TRIM) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 34;}

				else if ((LA170_0==VARIANCE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 35;}

				else if ((LA170_0==VAR_POP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 36;}

				else if ((LA170_0==VAR_SAMP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 37;}

				else if ((LA170_0==ADDDATE)) {s = 38;}

				else if ((LA170_0==CURDATE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 39;}

				else if ((LA170_0==CURRENT_DATE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 40;}

				else if ((LA170_0==CURTIME) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 41;}

				else if ((LA170_0==CURRENT_TIME) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 42;}

				else if ((LA170_0==EXTRACT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 43;}

				else if ((LA170_0==GET_FORMAT)) {s = 44;}

				else if ((LA170_0==NOW) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 45;}

				else if ((LA170_0==CURRENT_TIMESTAMP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 46;}

				else if ((LA170_0==POSITION) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 47;}

				else if ((LA170_0==SUBDATE)) {s = 48;}

				else if ((LA170_0==SUBSTR) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 49;}

				else if ((LA170_0==SUBSTRING) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 50;}

				else if ((LA170_0==SYSDATE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 51;}

				else if ((LA170_0==TIMESTAMP_ADD)) {s = 52;}

				else if ((LA170_0==TIMESTAMP_DIFF)) {s = 53;}

				else if ((LA170_0==UTC_DATE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 54;}

				else if ((LA170_0==UTC_TIMESTAMP) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 55;}

				else if ((LA170_0==UTC_TIME) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 56;}

				else if ((LA170_0==ASCII)) {s = 57;}

				else if ((LA170_0==CHARSET)) {s = 58;}

				else if ((LA170_0==COALESCE)) {s = 59;}

				else if ((LA170_0==COLLATION)) {s = 60;}

				else if ((LA170_0==CONTAINS)) {s = 61;}

				else if ((LA170_0==DATABASE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 62;}

				else if ((LA170_0==GEOMETRYCOLLECTION)) {s = 63;}

				else if ((LA170_0==IF) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 64;}

				else if ((LA170_0==LINESTRING)) {s = 65;}

				else if ((LA170_0==MICROSECOND)) {s = 66;}

				else if ((LA170_0==MOD) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 67;}

				else if ((LA170_0==MULTILINESTRING)) {s = 68;}

				else if ((LA170_0==MULTIPOINT)) {s = 69;}

				else if ((LA170_0==MULTIPOLYGON)) {s = 70;}

				else if ((LA170_0==OLD_PASSWORD)) {s = 71;}

				else if ((LA170_0==PASSWORD)) {s = 72;}

				else if ((LA170_0==POINT)) {s = 73;}

				else if ((LA170_0==POLYGON)) {s = 74;}

				else if ((LA170_0==QUARTER)) {s = 75;}

				else if ((LA170_0==REPEAT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 76;}

				else if ((LA170_0==REPLACE) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 77;}

				else if ((LA170_0==TRUNCATE)) {s = 78;}

				else if ((LA170_0==WEEK)) {s = 79;}

				else if ((LA170_0==CHAR) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 80;}

				else if ((LA170_0==CURRENT_USER) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 81;}

				else if ((LA170_0==DATE)) {s = 82;}

				else if ((LA170_0==DAY)) {s = 83;}

				else if ((LA170_0==HOUR)) {s = 84;}

				else if ((LA170_0==INSERT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 85;}

				else if ((LA170_0==INTERVAL) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 86;}

				else if ((LA170_0==LEFT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 87;}

				else if ((LA170_0==MINUTE)) {s = 88;}

				else if ((LA170_0==MONTH)) {s = 89;}

				else if ((LA170_0==RIGHT) && (EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((LA170_0==SECOND)) {s = 91;}

				else if ((LA170_0==TIME)) {s = 92;}

				else if ((LA170_0==TIMESTAMP)) {s = 93;}

				else if ((LA170_0==USER)) {s = 94;}

				else if ((LA170_0==YEAR)) {s = 95;}

				else if ((LA170_0==ID)) {s = 96;}

				else if ((LA170_0==ACTION||(LA170_0>=AFTER && LA170_0<=ALGORITHM)||LA170_0==ANY||(LA170_0>=AT && LA170_0<=AUTO_INCREMENT)||(LA170_0>=AVG_ROW_LENGTH && LA170_0<=BACKUP)||LA170_0==BEGIN||(LA170_0>=BINLOG && LA170_0<=BIT)||(LA170_0>=BLOCK && LA170_0<=BOOLEAN)||LA170_0==BTREE||(LA170_0>=BYTE && LA170_0<=CACHE)||LA170_0==CASCADED||LA170_0==CHAIN||LA170_0==CHANGED||(LA170_0>=CHECKSUM && LA170_0<=CLOSE)||LA170_0==CODE||LA170_0==COLUMNS||LA170_0==COMMENT||(LA170_0>=COMMIT && LA170_0<=CONCURRENT)||(LA170_0>=CONNECTION && LA170_0<=CONSISTENT)||LA170_0==CONTEXT||LA170_0==CONTRIBUTORS||LA170_0==CPU||LA170_0==CUBE||LA170_0==DATA||LA170_0==DATAFILE||LA170_0==DATETIME||LA170_0==DEALLOCATE||LA170_0==DEFINER||LA170_0==DELAY_KEY_WRITE||LA170_0==DES_KEY_FILE||(LA170_0>=DIRECTORY && LA170_0<=DISK)||LA170_0==DO||(LA170_0>=DUMPFILE && LA170_0<=DYNAMIC)||LA170_0==ENABLE||(LA170_0>=END && LA170_0<=ENUM)||(LA170_0>=ERRORS && LA170_0<=ESCAPE)||(LA170_0>=EVENT && LA170_0<=EVERY)||LA170_0==EXECUTE||LA170_0==EXPANSION||(LA170_0>=EXTENDED && LA170_0<=EXTENT_SIZE)||(LA170_0>=FAST && LA170_0<=FAULTS)||(LA170_0>=FIELDS && LA170_0<=FIXED)||LA170_0==FLUSH||(LA170_0>=FOUND && LA170_0<=FRAC_SECOND)||LA170_0==FULL||(LA170_0>=FUNCTION && LA170_0<=GEOMETRY)||LA170_0==GLOBAL||LA170_0==GRANTS||LA170_0==GROUP||(LA170_0>=HANDLER && LA170_0<=HASH)||LA170_0==HELP||(LA170_0>=HOST && LA170_0<=HOSTS)||LA170_0==IDENTIFIED||LA170_0==IMPORT||LA170_0==INDEXES||LA170_0==INITIAL_SIZE||LA170_0==INNOBASE||(LA170_0>=INSERT_METHOD && LA170_0<=INSTALL)||(LA170_0>=INVOKER && LA170_0<=IPC)||(LA170_0>=ISOLATION && LA170_0<=ISSUER)||LA170_0==KEY_BLOCK_SIZE||(LA170_0>=LABEL && LA170_0<=LAST)||LA170_0==LEAVES||LA170_0==LESS||LA170_0==LEVEL||LA170_0==LIST||LA170_0==LOCAL||(LA170_0>=LOCKS && LA170_0<=LOGFILE)||LA170_0==LOGS||(LA170_0>=MASTER && LA170_0<=MASTER_SSL_KEY)||LA170_0==MASTER_USER||(LA170_0>=MAX_CONNECTIONS_PER_HOUR && LA170_0<=MEDIUM)||(LA170_0>=MEMORY && LA170_0<=MERGE)||LA170_0==MIGRATE||LA170_0==MIN_ROWS||LA170_0==MODE||LA170_0==MODIFY||LA170_0==MUTEX||(LA170_0>=NAME && LA170_0<=NATIONAL)||(LA170_0>=NCHAR && LA170_0<=NONE)||LA170_0==NO_WAIT||(LA170_0>=NVARCHAR && LA170_0<=OFFSET)||LA170_0==ONE||(LA170_0>=ONE_SHOT && LA170_0<=OPEN)||LA170_0==OPTIONS||(LA170_0>=OWNER && LA170_0<=PARTITIONS)||(LA170_0>=PHASE && LA170_0<=PLUGINS)||LA170_0==PORT||(LA170_0>=PREPARE && LA170_0<=PREV)||LA170_0==PRIVILEGES||(LA170_0>=PROCESS && LA170_0<=PROFILES)||(LA170_0>=QUERY && LA170_0<=QUICK)||(LA170_0>=REBUILD && LA170_0<=REDUNDANT)||(LA170_0>=RELAY_LOG_FILE && LA170_0<=RELAY_THREAD)||(LA170_0>=RELOAD && LA170_0<=REMOVE)||(LA170_0>=REORGANIZE && LA170_0<=REPAIR)||LA170_0==REPEATABLE||LA170_0==REPLICATION||(LA170_0>=RESET && LA170_0<=RESTORE)||LA170_0==RESUME||LA170_0==RETURNS||(LA170_0>=ROLLBACK && LA170_0<=ROW_FORMAT)||(LA170_0>=RTREE && LA170_0<=SCHEDULE)||LA170_0==SECURITY||(LA170_0>=SERIAL && LA170_0<=SESSION)||LA170_0==SHARE||(LA170_0>=SHUTDOWN && LA170_0<=SLAVE)||(LA170_0>=SNAPSHOT && LA170_0<=SOCKET)||(LA170_0>=SONAME && LA170_0<=SOURCE)||(LA170_0>=SQL_BUFFER_RESULT && LA170_0<=SQL_CACHE)||LA170_0==SQL_NO_CACHE||LA170_0==SQL_THREAD||LA170_0==START||(LA170_0>=STARTS && LA170_0<=STATUS)||(LA170_0>=STOP && LA170_0<=STORAGE)||LA170_0==STRING_KEYWORD||(LA170_0>=SUBJECT && LA170_0<=SUBPARTITIONS)||(LA170_0>=SUPER && LA170_0<=SWITCHES)||(LA170_0>=TABLES && LA170_0<=TEMPTABLE)||(LA170_0>=TEXT && LA170_0<=THAN)||(LA170_0>=TRANSACTION && LA170_0<=TRANSACTIONAL)||LA170_0==TRIGGERS||(LA170_0>=TYPE && LA170_0<=UNDEFINED)||(LA170_0>=UNDOFILE && LA170_0<=UNINSTALL)||LA170_0==UNKNOWN||LA170_0==UNTIL||LA170_0==UPGRADE||LA170_0==USE_FRM||LA170_0==VALUE||LA170_0==VARIABLES||(LA170_0>=VIEW && LA170_0<=WARNINGS)||(LA170_0>=WORK && LA170_0<=WRAPPER)||(LA170_0>=X509 && LA170_0<=XA))) {s = 97;}


				input.Seek(index170_0);
				if (s >= 0) return s;
				break;
			case 1:
				int LA170_12 = input.LA(1);


				int index170_12 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_12);
				if (s >= 0) return s;
				break;
			case 2:
				int LA170_38 = input.LA(1);


				int index170_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_38);
				if (s >= 0) return s;
				break;
			case 3:
				int LA170_44 = input.LA(1);


				int index170_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_44);
				if (s >= 0) return s;
				break;
			case 4:
				int LA170_48 = input.LA(1);


				int index170_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_48);
				if (s >= 0) return s;
				break;
			case 5:
				int LA170_52 = input.LA(1);


				int index170_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_52);
				if (s >= 0) return s;
				break;
			case 6:
				int LA170_53 = input.LA(1);


				int index170_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_53);
				if (s >= 0) return s;
				break;
			case 7:
				int LA170_57 = input.LA(1);


				int index170_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_57);
				if (s >= 0) return s;
				break;
			case 8:
				int LA170_58 = input.LA(1);


				int index170_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_58);
				if (s >= 0) return s;
				break;
			case 9:
				int LA170_59 = input.LA(1);


				int index170_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_59);
				if (s >= 0) return s;
				break;
			case 10:
				int LA170_60 = input.LA(1);


				int index170_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_60);
				if (s >= 0) return s;
				break;
			case 11:
				int LA170_61 = input.LA(1);


				int index170_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_61);
				if (s >= 0) return s;
				break;
			case 12:
				int LA170_63 = input.LA(1);


				int index170_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_63);
				if (s >= 0) return s;
				break;
			case 13:
				int LA170_65 = input.LA(1);


				int index170_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_65);
				if (s >= 0) return s;
				break;
			case 14:
				int LA170_66 = input.LA(1);


				int index170_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_66);
				if (s >= 0) return s;
				break;
			case 15:
				int LA170_68 = input.LA(1);


				int index170_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_68);
				if (s >= 0) return s;
				break;
			case 16:
				int LA170_69 = input.LA(1);


				int index170_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_69);
				if (s >= 0) return s;
				break;
			case 17:
				int LA170_70 = input.LA(1);


				int index170_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_70);
				if (s >= 0) return s;
				break;
			case 18:
				int LA170_71 = input.LA(1);


				int index170_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_71);
				if (s >= 0) return s;
				break;
			case 19:
				int LA170_72 = input.LA(1);


				int index170_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_72);
				if (s >= 0) return s;
				break;
			case 20:
				int LA170_73 = input.LA(1);


				int index170_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_73);
				if (s >= 0) return s;
				break;
			case 21:
				int LA170_74 = input.LA(1);


				int index170_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_74);
				if (s >= 0) return s;
				break;
			case 22:
				int LA170_75 = input.LA(1);


				int index170_75 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_75);
				if (s >= 0) return s;
				break;
			case 23:
				int LA170_78 = input.LA(1);


				int index170_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_78);
				if (s >= 0) return s;
				break;
			case 24:
				int LA170_79 = input.LA(1);


				int index170_79 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_79);
				if (s >= 0) return s;
				break;
			case 25:
				int LA170_82 = input.LA(1);


				int index170_82 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_82);
				if (s >= 0) return s;
				break;
			case 26:
				int LA170_83 = input.LA(1);


				int index170_83 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_83);
				if (s >= 0) return s;
				break;
			case 27:
				int LA170_84 = input.LA(1);


				int index170_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_84);
				if (s >= 0) return s;
				break;
			case 28:
				int LA170_88 = input.LA(1);


				int index170_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_88);
				if (s >= 0) return s;
				break;
			case 29:
				int LA170_89 = input.LA(1);


				int index170_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_89);
				if (s >= 0) return s;
				break;
			case 30:
				int LA170_91 = input.LA(1);


				int index170_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_91);
				if (s >= 0) return s;
				break;
			case 31:
				int LA170_92 = input.LA(1);


				int index170_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_92);
				if (s >= 0) return s;
				break;
			case 32:
				int LA170_93 = input.LA(1);


				int index170_93 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_93);
				if (s >= 0) return s;
				break;
			case 33:
				int LA170_94 = input.LA(1);


				int index170_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_94);
				if (s >= 0) return s;
				break;
			case 34:
				int LA170_95 = input.LA(1);


				int index170_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_95);
				if (s >= 0) return s;
				break;
			case 35:
				int LA170_96 = input.LA(1);


				int index170_96 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred10_MySQL51Parser_fragment))) {s = 90;}

				else if ((true)) {s = 97;}


				input.Seek(index170_96);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 170, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA218 : DFA
	{
		private const string DFA218_eotS =
			"\x13C\xFFFF";
		private const string DFA218_eofS =
			"\x13C\xFFFF";
		private const string DFA218_minS =
			"\x1\x5\x13B\xFFFF";
		private const string DFA218_maxS =
			"\x1\x278\x13B\xFFFF";
		private const string DFA218_acceptS =
			"\x1\xFFFF\x1\x4\xE5\xFFFF\x1\x2\x52\xFFFF\x1\x1\x1\x3";
		private const string DFA218_specialS =
			"\x13C\xFFFF}>";
		private static readonly string[] DFA218_transitionS =
			{
				"\x1\x1\x1\xFFFF\x5\x1\x4\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x7\x1\x2"+
				"\xFFFF\x1\x1\x5\xFFFF\x2\x1\x9\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2"+
				"\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF"+
				"\x6\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6\x1\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x3\xFFFF\x1"+
				"\x1\x9\xFFFF\x1\x1\x2\xFFFF\x3\x1\x4\xFFFF\x1\x1\x4\xFFFF\x1\x1\x4\xFFFF"+
				"\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x4\x1\x4\xFFFF\x1\x1\x4"+
				"\xFFFF\x3\x1\x3\xFFFF\x1\x1\x1\xFFFF\x5\x1\x1\xFFFF\x2\x1\x2\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x2\xFFFF"+
				"\x4\x1\x3\xFFFF\x1\x1\x3\xFFFF\x4\x1\x1\xFFFF\x5\x1\x3\xFFFF\x1\x1\x2"+
				"\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x1\x1\x2\xFFFF\x3\x1\x3\xFFFF\x2"+
				"\x1\x2\xFFFF\x1\x13B\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1"+
				"\x1\x4\xFFFF\x2\x1\xA\xFFFF\x3\x1\x1\xFFFF\x2\x1\x4\xFFFF\x1\x1\x1\xFFFF"+
				"\x3\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x4\xFFFF\x2\x1\x1"+
				"\xFFFF\x1\x1\x3\xFFFF\x2\x1\x2\xFFFF\x1\x1\x4\xFFFF\x1\x13A\x1\xFFFF"+
				"\xE\x1\x1\xFFFF\x1\x1\x2\xFFFF\x8\x1\x3\xFFFF\x3\x1\x2\xFFFF\x1\x1\x2"+
				"\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1\x1\xFFFF\x7\x1\x4\xFFFF\x1\x1\x6\xFFFF"+
				"\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x3\xFFFF\x1\x1\x5\xFFFF\xC\x1\x1"+
				"\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x2"+
				"\x1\x1\xE7\x8\xFFFF\x5\x1\x2\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x1\x1\x4\xFFFF\x6\x1\x1\xFFFF\x3\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x4\x1\x3\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF\x3"+
				"\x1\x7\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x2\x1\x4\xFFFF\x2\x1\x2\xFFFF\x5\x1\x3\xFFFF\x4\x1\x3\xFFFF\x4\x1\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x4\x1\x5\xFFFF\x2\x1\x1\xFFFF\x1\x1\x2\xFFFF\x6"+
				"\x1\x1\xFFFF\x4\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x4\xFFFF\x1\x1\x5\xFFFF\x1\x1\x4\xFFFF\x4\x1\x4"+
				"\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA218_eot = DFA.UnpackEncodedString(DFA218_eotS);
		private static readonly short[] DFA218_eof = DFA.UnpackEncodedString(DFA218_eofS);
		private static readonly char[] DFA218_min = DFA.UnpackEncodedStringToUnsignedChars(DFA218_minS);
		private static readonly char[] DFA218_max = DFA.UnpackEncodedStringToUnsignedChars(DFA218_maxS);
		private static readonly short[] DFA218_accept = DFA.UnpackEncodedString(DFA218_acceptS);
		private static readonly short[] DFA218_special = DFA.UnpackEncodedString(DFA218_specialS);
		private static readonly short[][] DFA218_transition;

		static DFA218()
		{
			int numStates = DFA218_transitionS.Length;
			DFA218_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA218_transition[i] = DFA.UnpackEncodedString(DFA218_transitionS[i]);
			}
		}

		public DFA218( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 218;
			this.eot = DFA218_eot;
			this.eof = DFA218_eof;
			this.min = DFA218_min;
			this.max = DFA218_max;
			this.accept = DFA218_accept;
			this.special = DFA218_special;
			this.transition = DFA218_transition;
		}

		public override string Description { get { return "()* loopback of 1149:3: ( options {k=1; } :opts+= LOW_PRIORITY |opts+= QUICK |opts+= IGNORE )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA266 : DFA
	{
		private const string DFA266_eotS =
			"\x14\xFFFF";
		private const string DFA266_eofS =
			"\x14\xFFFF";
		private const string DFA266_minS =
			"\x1\x1A\x3\xFFFF\x1\x42\xF\xFFFF";
		private const string DFA266_maxS =
			"\x1\x24C\x3\xFFFF\x1\x4B\xF\xFFFF";
		private const string DFA266_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1"+
			"\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12";
		private const string DFA266_specialS =
			"\x14\xFFFF}>";
		private static readonly string[] DFA266_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x3\x25\xFFFF\x1\x5\x2\xFFFF\x1\x6\x5\xFFFF\x1\x7"+
				"\x5\xFFFF\x1\x8\x8\xFFFF\x1\x9\x16\xFFFF\x1\xA\x12\xFFFF\x1\x4\x2\xFFFF"+
				"\x1\xB\x1D\xFFFF\x1\x1\x49\xFFFF\x1\xC\x9\xFFFF\x1\xD\x4E\xFFFF\x1\xE"+
				"\x13\xFFFF\x1\xF\x34\xFFFF\x1\x10\x6\xFFFF\x1\x11\x45\xFFFF\x1\x12\x63"+
				"\xFFFF\x1\x1\x9\xFFFF\x1\x13",
				"",
				"",
				"",
				"\x1\x5\x8\xFFFF\x1\x7",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA266_eot = DFA.UnpackEncodedString(DFA266_eotS);
		private static readonly short[] DFA266_eof = DFA.UnpackEncodedString(DFA266_eofS);
		private static readonly char[] DFA266_min = DFA.UnpackEncodedStringToUnsignedChars(DFA266_minS);
		private static readonly char[] DFA266_max = DFA.UnpackEncodedStringToUnsignedChars(DFA266_maxS);
		private static readonly short[] DFA266_accept = DFA.UnpackEncodedString(DFA266_acceptS);
		private static readonly short[] DFA266_special = DFA.UnpackEncodedString(DFA266_specialS);
		private static readonly short[][] DFA266_transition;

		static DFA266()
		{
			int numStates = DFA266_transitionS.Length;
			DFA266_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA266_transition[i] = DFA.UnpackEncodedString(DFA266_transitionS[i]);
			}
		}

		public DFA266( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 266;
			this.eot = DFA266_eot;
			this.eof = DFA266_eof;
			this.min = DFA266_min;
			this.max = DFA266_max;
			this.accept = DFA266_accept;
			this.special = DFA266_special;
			this.transition = DFA266_transition;
		}

		public override string Description { get { return "1210:1: create_table_option : ( ( ( ENGINE | TYPE ) ( EQUALS )? engine_name ) | ( AUTO_INCREMENT ( EQUALS )? INT_NUMBER ) | ( AVG_ROW_LENGTH ( EQUALS )? INT_NUMBER ) | ( ( DEFAULT )? CHARACTER SET ( EQUALS )? ( ID | STRING ) ) | ( CHECKSUM ( EQUALS )? ( ZERO | ONE ) ) | ( ( DEFAULT )? COLLATE ( EQUALS )? ( ID | STRING ) ) | ( COMMENT ( EQUALS )? STRING ) | ( CONNECTION ( EQUALS )? STRING ) | ( DATA DIRECTORY ( EQUALS )? STRING ) | ( DELAY_KEY_WRITE ( EQUALS )? ( ZERO | ONE ) ) | ( INDEX DIRECTORY ( EQUALS )? STRING ) | ( INSERT_METHOD ( EQUALS )? ( NO | FIRST | LAST ) ) | ( MAX_ROWS ( EQUALS )? INT_NUMBER ) | ( MIN_ROWS ( EQUALS )? INT_NUMBER ) | ( PACK_KEYS ( EQUALS )? ( ZERO | ONE | DEFAULT ) ) | ( PASSWORD ( EQUALS )? STRING ) | ( ROW_FORMAT ( EQUALS )? ( DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT ) ) | ( UNION ( EQUALS )? ( simple_table_ref_no_alias ( COMMA simple_table_ref_no_alias )* ) ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA265 : DFA
	{
		private const string DFA265_eotS =
			"\x13\xFFFF";
		private const string DFA265_eofS =
			"\x1\x2\x2\xFFFF\xE\x11\x1\xFFFF\x1\x11";
		private const string DFA265_minS =
			"\x1\x12\x1\x5\x1\xFFFF\x1\x11\xD\x12\x1\xFFFF\x1\x11";
		private const string DFA265_maxS =
			"\x1\x1EA\x1\x278\x1\xFFFF\x3\x1EA\x1\x27A\x2\x21A\x1\x1EA\x1\x27A\x3"+
			"\x1EA\x1\x27A\x1\x21A\x1\x1EA\x1\xFFFF\x1\x1EA";
		private const string DFA265_acceptS =
			"\x2\xFFFF\x1\x2\xE\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA265_specialS =
			"\x13\xFFFF}>";
		private static readonly string[] DFA265_transitionS =
			{
				"\x1\x2\x3D\xFFFF\x1\x1\x9B\xFFFF\x1\x2\x46\xFFFF\x1\x2\x97\xFFFF\x1"+
				"\x2\x1D\xFFFF\x2\x2",
				"\x1\x11\x1\xFFFF\x5\x11\x4\xFFFF\x1\x11\x3\xFFFF\x1\x11\x2\xFFFF\x3"+
				"\x11\x1\x4\x1\x11\x1\x5\x1\x11\x2\xFFFF\x1\x11\x5\xFFFF\x2\x11\x9\xFFFF"+
				"\x3\x11\x1\xFFFF\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x1\x11\x2\xFFFF\x1"+
				"\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1\x2\x1\x11\x1\xFFFF\x1\x6\x5\x11\x1"+
				"\x2\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x7\x1\xFFFF\x6\x11\x1\xFFFF\x1"+
				"\x8\x1\x11\x1\xFFFF\x2\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x3\xFFFF"+
				"\x1\x11\x9\xFFFF\x1\x9\x2\xFFFF\x3\x11\x4\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x3\xFFFF\x1\x2\x1\x11\x1\xFFFF\x1\xA\x3\xFFFF\x1\x11\x2\xFFFF\x4\x11"+
				"\x4\xFFFF\x1\x11\x4\xFFFF\x3\x11\x3\xFFFF\x1\x11\x1\xFFFF\x2\x11\x1"+
				"\x3\x2\x11\x1\xFFFF\x2\x11\x2\xFFFF\x3\x11\x1\xFFFF\x1\x11\x2\xFFFF"+
				"\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x2\xFFFF\x4\x11\x3\xFFFF\x1"+
				"\x11\x3\xFFFF\x2\x11\x1\xFFFF\x1\x11\x1\xFFFF\x5\x11\x3\xFFFF\x1\x11"+
				"\x2\xFFFF\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x1\x11\x2\xFFFF\x3\x11\x3"+
				"\xFFFF\x2\x11\x3\xFFFF\x1\x11\x1\xFFFF\x1\x2\x1\x11\x1\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x11\x4\xFFFF\x1\xB\x1\x11\xA\xFFFF\x3\x11\x1\xFFFF\x2\x11"+
				"\x4\xFFFF\x1\x11\x1\xFFFF\x3\x11\x3\xFFFF\x1\x11\x2\xFFFF\x1\x11\x2"+
				"\xFFFF\x1\x11\x4\xFFFF\x2\x11\x1\xFFFF\x1\x11\x3\xFFFF\x2\x11\x2\xFFFF"+
				"\x1\x11\x6\xFFFF\xE\x11\x1\xFFFF\x1\x11\x2\xFFFF\x2\x11\x1\xC\x5\x11"+
				"\x3\xFFFF\x3\x11\x2\xFFFF\x1\x11\x2\xFFFF\x1\x11\x2\xFFFF\x1\xD\x1\xFFFF"+
				"\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x4\x11\x1\xFFFF\x3"+
				"\x11\x1\xFFFF\x7\x11\x4\xFFFF\x1\x11\x6\xFFFF\x3\x11\x1\xFFFF\x1\x11"+
				"\x1\xFFFF\x2\x11\x3\xFFFF\x1\x11\x5\xFFFF\x1\x11\x1\xE\x6\x11\x1\xF"+
				"\x3\x11\x1\xFFFF\x3\x11\x3\xFFFF\x3\x11\x1\xFFFF\x1\x11\x1\xFFFF\x4"+
				"\x11\x1\xFFFF\x3\x11\x8\xFFFF\x5\x11\x2\xFFFF\x3\x11\x1\xFFFF\x2\x11"+
				"\x1\xFFFF\x2\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x3\x11\x1"+
				"\xFFFF\x1\x11\x1\xFFFF\x1\x11\x4\xFFFF\x5\x11\x1\x10\x1\xFFFF\x3\x11"+
				"\x3\xFFFF\x1\x11\x1\xFFFF\x1\x11\x4\xFFFF\x4\x11\x3\xFFFF\x1\x11\x1"+
				"\xFFFF\x4\x11\x1\xFFFF\x2\x11\x1\xFFFF\x3\x11\x7\xFFFF\x2\x11\x1\xFFFF"+
				"\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x2\x11\x4\xFFFF\x2"+
				"\x11\x2\xFFFF\x5\x11\x3\xFFFF\x4\x11\x3\xFFFF\x4\x11\x1\xFFFF\x2\x11"+
				"\x1\xFFFF\x4\x11\x5\xFFFF\x2\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1"+
				"\x12\x4\x11\x1\xFFFF\x4\x11\x1\x2\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1"+
				"\xFFFF\x1\x11\x2\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11\x5\xFFFF"+
				"\x1\x11\x4\xFFFF\x4\x11\x4\xFFFF\x2\x11\x2\xFFFF\x2\x11\x1\xFFFF\x1"+
				"\x11",
				"",
				"\x1\x2\x1\x11\xB\xFFFF\x1\x2\x2\xFFFF\x1\x2\xD\xFFFF\x1\x2\x20\xFFFF"+
				"\x1\x11\x15\xFFFF\x1\x2\x30\xFFFF\x1\x11\x10\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\xB\xFFFF\x1\x2\x21\xFFFF\x1\x2\xD\xFFFF\x1\x11\x8\xFFFF\x1\x2\x3D"+
				"\xFFFF\x1\x11\x1D\xFFFF\x2\x2\x15\xFFFF\x1\x2\x62\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x17\xFFFF\x1\x2\x2E\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x17\xFFFF\x1\x2\x2E\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x46\xFFFF\x1\x11\x4F\xFFFF\x1\x2\x47\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11\x8F\xFFFF\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x46\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF\x2\x11\x2F\xFFFF"+
				"\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x46\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF\x2\x11\x2F\xFFFF"+
				"\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x3D\xFFFF\x1\x2\x8\xFFFF\x1\x11\x54\xFFFF\x1"+
				"\x11\x46\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x46\xFFFF\x1\x11\x4F\xFFFF\x1\x2\x47\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11\x8F\xFFFF\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x17\xFFFF"+
				"\x1\x2\x2B\xFFFF\x1\x11\x26\xFFFF\x1\x2\x1F\xFFFF\x1\x11\x3D\xFFFF\x1"+
				"\x2\x59\xFFFF\x1\x11\x1D\xFFFF\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x17\xFFFF\x1\x2\x2E\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x17\xFFFF\x1\x2\x2E\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"\x1\x11\x3D\xFFFF\x1\x11\x33\xFFFF\x1\x2\x12\xFFFF\x1\x11\x10\xFFFF"+
				"\x1\x2\x43\xFFFF\x1\x11\x46\xFFFF\x1\x11\x4F\xFFFF\x1\x2\x47\xFFFF\x1"+
				"\x11\x1D\xFFFF\x2\x11\x8F\xFFFF\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x46\xFFFF\x1\x11\x10\xFFFF\x1\x2\x43\xFFFF"+
				"\x1\x11\x46\xFFFF\x1\x11\x97\xFFFF\x1\x11\x1D\xFFFF\x2\x11\x2F\xFFFF"+
				"\x1\x2",
				"\x1\x11\x3D\xFFFF\x1\x11\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2C\xFFFF\x1"+
				"\x2\x12\xFFFF\x1\x11\x5\xFFFF\x1\x2\xA\xFFFF\x1\x2\x18\xFFFF\x1\x2\x2A"+
				"\xFFFF\x1\x11\x46\xFFFF\x1\x11\x89\xFFFF\x1\x2\xD\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11",
				"",
				"\x1\x2\x1\x11\xB\xFFFF\x1\x2\x2\xFFFF\x1\x2\xD\xFFFF\x1\x2\x20\xFFFF"+
				"\x1\x11\x15\xFFFF\x1\x2\x30\xFFFF\x1\x11\x10\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\xB\xFFFF\x1\x2\x21\xFFFF\x1\x2\xD\xFFFF\x1\x11\x8\xFFFF\x1\x2\x3D"+
				"\xFFFF\x1\x11\x1D\xFFFF\x2\x2\x15\xFFFF\x1\x2\x62\xFFFF\x1\x11\x1D\xFFFF"+
				"\x2\x11"
			};

		private static readonly short[] DFA265_eot = DFA.UnpackEncodedString(DFA265_eotS);
		private static readonly short[] DFA265_eof = DFA.UnpackEncodedString(DFA265_eofS);
		private static readonly char[] DFA265_min = DFA.UnpackEncodedStringToUnsignedChars(DFA265_minS);
		private static readonly char[] DFA265_max = DFA.UnpackEncodedStringToUnsignedChars(DFA265_maxS);
		private static readonly short[] DFA265_accept = DFA.UnpackEncodedString(DFA265_acceptS);
		private static readonly short[] DFA265_special = DFA.UnpackEncodedString(DFA265_specialS);
		private static readonly short[][] DFA265_transition;

		static DFA265()
		{
			int numStates = DFA265_transitionS.Length;
			DFA265_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA265_transition[i] = DFA.UnpackEncodedString(DFA265_transitionS[i]);
			}
		}

		public DFA265( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 265;
			this.eot = DFA265_eot;
			this.eof = DFA265_eof;
			this.min = DFA265_min;
			this.max = DFA265_max;
			this.accept = DFA265_accept;
			this.special = DFA265_special;
			this.transition = DFA265_transition;
		}

		public override string Description { get { return "()* loopback of 1228:48: ( COMMA simple_table_ref_no_alias )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA346 : DFA
	{
		private const string DFA346_eotS =
			"\x34\xFFFF";
		private const string DFA346_eofS =
			"\x34\xFFFF";
		private const string DFA346_minS =
			"\x1\x7\x6\xFFFF\x1\x133\x28\xFFFF\x1\x5\x3\xFFFF";
		private const string DFA346_maxS =
			"\x1\x27E\x6\xFFFF\x1\x133\x28\xFFFF\x1\x27E\x3\xFFFF";
		private const string DFA346_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\xA\x1\xB\x1"+
			"\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16"+
			"\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20"+
			"\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A"+
			"\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\xFFFF\x1\x7\x1\x9"+
			"\x1\x8";
		private const string DFA346_specialS =
			"\x34\xFFFF}>";
		private static readonly string[] DFA346_transitionS =
			{
				"\x1\x1B\xC\xFFFF\x1\x2D\x6\xFFFF\x1\x1\x10\xFFFF\x1\x2\x1\x3\x1\x4\xE"+
				"\xFFFF\x1\x5\x3\xFFFF\x1\x2E\x1\xFFFF\x1\x2D\x5\xFFFF\x1\x2D\x2\xFFFF"+
				"\x1\x2D\x10\xFFFF\x1\x2D\x4\xFFFF\x1\x7\x5\xFFFF\x1\x1C\x1\x1D\x1\x1F"+
				"\x1\x23\x1\x2E\x1\xFFFF\x1\x1E\x3\xFFFF\x1\x2D\x2\xFFFF\x1\x2E\x1\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x9\x1\xFFFF\x1\x2E\x3C\xFFFF\x1\x20\x17\xFFFF\x1"+
				"\x2D\x1\x21\x8\xFFFF\x1\xB\x9\xFFFF\x1\x2E\x3\xFFFF\x1\x2F\x1\xFFFF"+
				"\x1\x2D\x1\xA\xC\xFFFF\x1\x2E\x9\xFFFF\x1\x2E\x15\xFFFF\x1\x2E\x9\xFFFF"+
				"\x1\x2D\x22\xFFFF\x1\xC\xD\xFFFF\x1\x2D\x1\xD\x2\xFFFF\x1\xE\x1\xFFFF"+
				"\x1\x2E\x3\xFFFF\x1\x2D\x4\xFFFF\x1\x2E\x1\xFFFF\x3\x2D\x10\xFFFF\x1"+
				"\x22\x3\xFFFF\x1\xF\x5\xFFFF\x1\x2D\x16\xFFFF\x1\x2D\x4\xFFFF\x2\x2D"+
				"\x1\xFFFF\x1\x24\xD\xFFFF\x1\x2D\x1A\xFFFF\x1\x2D\x1\xFFFF\x1\x2D\xA"+
				"\xFFFF\x1\x2E\xF\xFFFF\x1\x2E\xA\xFFFF\x1\x10\x21\xFFFF\x1\x11\x1\x12"+
				"\x1\x13\x1\x14\x5\xFFFF\x1\x25\x3\xFFFF\x2\x26\x1\x15\x4\xFFFF\x1\x27"+
				"\x1\x16\x9\xFFFF\x2\x2E\x1\x28\x1\x29\x9\xFFFF\x1\x17\x1\xFFFF\x1\x2D"+
				"\x14\xFFFF\x1\x2E\x4\xFFFF\x1\x2A\x1\x2C\x1\x2B\x7\xFFFF\x1\x18\x1\xFFFF"+
				"\x1\x19\x1\x1A\x3\xFFFF\x1\x2D\xB\xFFFF\x1\x2E\x5\xFFFF\x1\x6",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x30",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x33\x1\xFFFF\x5\x33\x4\xFFFF\x1\x33\x3\xFFFF\x1\x33\x2\xFFFF\x7"+
				"\x33\x2\xFFFF\x1\x33\x3\xFFFF\x4\x33\x1\xFFFF\x1\x33\x2\xFFFF\x3\x33"+
				"\x2\xFFFF\x3\x33\x1\xFFFF\x1\x33\x1\xFFFF\x2\x33\x2\xFFFF\x4\x33\x1"+
				"\xFFFF\x2\x33\x1\xFFFF\x1\x33\x1\xFFFF\x8\x33\x2\xFFFF\x1\x33\x1\xFFFF"+
				"\x1\x33\x1\xFFFF\x6\x33\x1\xFFFF\x2\x33\x1\xFFFF\x2\x33\x1\xFFFF\x1"+
				"\x33\x1\xFFFF\x2\x33\x3\xFFFF\x6\x33\x1\xFFFF\x1\x33\x2\xFFFF\x2\x33"+
				"\x1\xFFFF\x4\x33\x1\xFFFF\x1\x33\x1\xFFFF\x1\x33\x4\xFFFF\x1\x33\x4"+
				"\xFFFF\x1\x33\x1\xFFFF\x1\x33\x3\xFFFF\x1\x33\x2\xFFFF\x4\x33\x1\x32"+
				"\x3\xFFFF\x1\x33\x4\xFFFF\x3\x33\x3\xFFFF\x1\x33\x1\xFFFF\x5\x33\x1"+
				"\xFFFF\x2\x33\x2\xFFFF\x3\x33\x1\xFFFF\x2\x33\x1\xFFFF\x1\x33\x1\xFFFF"+
				"\x6\x33\x2\xFFFF\x4\x33\x3\xFFFF\x1\x33\x3\xFFFF\x2\x33\x1\xFFFF\x1"+
				"\x33\x1\xFFFF\x6\x33\x2\xFFFF\x1\x33\x2\xFFFF\x4\x33\x2\xFFFF\x2\x33"+
				"\x1\xFFFF\x3\x33\x3\xFFFF\x4\x33\x1\xFFFF\x1\x33\x2\xFFFF\x1\x33\x1"+
				"\xFFFF\x1\x33\x1\xFFFF\x1\x33\x3\xFFFF\x3\x33\x7\xFFFF\x1\x33\x1\xFFFF"+
				"\x4\x33\x1\xFFFF\x2\x33\x4\xFFFF\x1\x33\x1\xFFFF\x4\x33\x2\xFFFF\x2"+
				"\x33\x1\xFFFF\x1\x33\x2\xFFFF\x1\x33\x4\xFFFF\x2\x33\x1\xFFFF\x1\x33"+
				"\x3\xFFFF\x2\x33\x2\xFFFF\x1\x33\x5\xFFFF\xF\x33\x1\xFFFF\xB\x33\x3"+
				"\xFFFF\x4\x33\x1\xFFFF\x4\x33\x2\xFFFF\x3\x33\x1\xFFFF\x1\x33\x1\xFFFF"+
				"\x1\x33\x1\x31\x4\x33\x1\xFFFF\x3\x33\x1\xFFFF\x8\x33\x1\xFFFF\x3\x33"+
				"\x1\xFFFF\x2\x33\x1\xFFFF\x1\x33\x1\xFFFF\x3\x33\x1\xFFFF\x1\x33\x1"+
				"\xFFFF\x2\x33\x3\xFFFF\x1\x33\x5\xFFFF\x11\x33\x2\xFFFF\x3\x33\x1\xFFFF"+
				"\x1\x33\x1\xFFFF\x4\x33\x1\xFFFF\x3\x33\x8\xFFFF\x5\x33\x2\xFFFF\x3"+
				"\x33\x1\xFFFF\x2\x33\x1\xFFFF\x6\x33\x1\xFFFF\x3\x33\x1\xFFFF\x1\x33"+
				"\x1\xFFFF\x1\x33\x1\xFFFF\x1\x33\x2\xFFFF\x6\x33\x1\xFFFF\x3\x33\x3"+
				"\xFFFF\x1\x33\x1\xFFFF\x1\x33\x4\xFFFF\x6\x33\x1\xFFFF\x1\x33\x1\xFFFF"+
				"\x4\x33\x1\xFFFF\x2\x33\x1\xFFFF\x3\x33\x7\xFFFF\x2\x33\x1\xFFFF\x1"+
				"\x33\x1\xFFFF\x1\x33\x1\xFFFF\x1\x33\x1\xFFFF\x8\x33\x1\xFFFF\xF\x33"+
				"\x1\xFFFF\x4\x33\x1\xFFFF\x2\x33\x1\xFFFF\x4\x33\x5\xFFFF\x2\x33\x1"+
				"\xFFFF\x9\x33\x1\xFFFF\x4\x33\x2\xFFFF\x1\x33\x2\xFFFF\x1\x33\x1\xFFFF"+
				"\x1\x33\x2\xFFFF\x1\x33\x2\xFFFF\x1\x33\x1\xFFFF\x4\x33\x1\xFFFF\x1"+
				"\x33\x3\xFFFF\x2\x33\x1\xFFFF\x6\x33\x4\xFFFF\x2\x33\x2\xFFFF\x2\x33"+
				"\x1\xFFFF\x1\x33\x5\xFFFF\x1\x33",
				"",
				"",
				""
			};

		private static readonly short[] DFA346_eot = DFA.UnpackEncodedString(DFA346_eotS);
		private static readonly short[] DFA346_eof = DFA.UnpackEncodedString(DFA346_eofS);
		private static readonly char[] DFA346_min = DFA.UnpackEncodedStringToUnsignedChars(DFA346_minS);
		private static readonly char[] DFA346_max = DFA.UnpackEncodedStringToUnsignedChars(DFA346_maxS);
		private static readonly short[] DFA346_accept = DFA.UnpackEncodedString(DFA346_acceptS);
		private static readonly short[] DFA346_special = DFA.UnpackEncodedString(DFA346_specialS);
		private static readonly short[][] DFA346_transition;

		static DFA346()
		{
			int numStates = DFA346_transitionS.Length;
			DFA346_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA346_transition[i] = DFA.UnpackEncodedString(DFA346_transitionS[i]);
			}
		}

		public DFA346( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 346;
			this.eot = DFA346_eot;
			this.eof = DFA346_eof;
			this.min = DFA346_min;
			this.max = DFA346_max;
			this.accept = DFA346_accept;
			this.special = DFA346_special;
			this.transition = DFA346_transition;
		}

		public override string Description { get { return "1381:1: functionCall : ( AVG LPAREN expr RPAREN -> ^( FUNC ^( AVG expr ) ) | BIT_AND LPAREN expr RPAREN -> ^( FUNC ^( BIT_AND expr ) ) | BIT_OR LPAREN expr RPAREN -> ^( FUNC ^( BIT_OR expr ) ) | BIT_XOR LPAREN expr RPAREN -> ^( FUNC ^( BIT_XOR expr ) ) | CAST LPAREN expr AS cast_data_type RPAREN -> ^( FUNC ^( CAST expr cast_data_type ) ) | CONCAT LPAREN exprList RPAREN -> ^( FUNC ^( CONCAT exprList ) ) | COUNT LPAREN MULT RPAREN -> ^( FUNC ^( COUNT_STAR[$MULT] ) ) | COUNT LPAREN expr RPAREN -> ^( FUNC ^( COUNT expr ) ) | COUNT LPAREN DISTINCT exprList RPAREN -> ^( FUNC ^( COUNT exprList DISTINCT ) ) | DATE_ADD LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_ADD $date $interval timeUnit ) ) | DATE_SUB LPAREN date= expr COMMA INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( DATE_SUB $date $interval timeUnit ) ) | IFNULL LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( IFNULL $expr1 $expr2) ) | GROUP_CONCAT LPAREN ( DISTINCT )? exprList ( order_by )? ( SEPARATOR text_string )? RPAREN -> ^( FUNC ^( GROUP_CONCAT exprList ( DISTINCT )? ( order_by )? ( text_string )? ) ) | MAX LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MAX expr ( DISTINCT )? ) ) | MID LPAREN expr COMMA expr COMMA expr RPAREN -> ^( FUNC ^( MID ( expr )+ ) ) | MIN LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( MIN expr ( DISTINCT )? ) ) | NULLIF LPAREN expr1= expr COMMA expr2= expr RPAREN -> ^( FUNC ^( NULLIF $expr1 $expr2) ) | SESSION_USER LPAREN RPAREN -> ^( FUNC ^( SESSION_USER LPAREN ) ) | STD LPAREN expr RPAREN -> ^( FUNC ^( STD expr ) ) | STDDEV LPAREN expr RPAREN -> ^( FUNC ^( STDDEV expr ) ) | STDDEV_POP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_POP expr ) ) | STDDEV_SAMP LPAREN expr RPAREN -> ^( FUNC ^( STDDEV_SAMP expr ) ) | SUM LPAREN ( DISTINCT )? expr RPAREN -> ^( FUNC ^( SUM expr ( DISTINCT )? ) ) | SYSTEM_USER LPAREN RPAREN -> ^( FUNC ^( SYSTEM_USER LPAREN ) ) | TRIM LPAREN ( (pos= BOTH |pos= LEADING |pos= TRAILING ) (remstr= expr )? FROM str= expr -> ^( FUNC ^( TRIM $str ( $pos)? ( $remstr)? ) ) |str1= expr ( FROM str2= expr -> ^( FUNC ^( TRIM $str2 $str1) ) | -> ^( FUNC ^( TRIM $str1) ) ) ) RPAREN | VARIANCE LPAREN expr RPAREN -> ^( FUNC ^( VARIANCE expr ) ) | VAR_POP LPAREN expr RPAREN -> ^( FUNC ^( VAR_POP expr ) ) | VAR_SAMP LPAREN expr RPAREN -> ^( FUNC ^( VAR_SAMP expr ) ) | ADDDATE LPAREN date= expr COMMA ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) ) | CURDATE LPAREN RPAREN -> ^( FUNC ^( CURDATE LPAREN ) ) | CURRENT_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_DATE ( LPAREN )? ) ) | CURTIME LPAREN RPAREN -> ^( FUNC ^( CURTIME LPAREN ) ) | CURRENT_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIME ( LPAREN )? ) ) | EXTRACT LPAREN timeUnit FROM expr RPAREN -> ^( FUNC ^( EXTRACT timeUnit expr ) ) | GET_FORMAT LPAREN (type= DATE |type= TIME |type= DATETIME ) locale= expr RPAREN -> ^( FUNC ^( GET_FORMAT $type $locale) ) | NOW LPAREN RPAREN -> ^( FUNC ^( NOW LPAREN ) ) | CURRENT_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( CURRENT_TIMESTAMP ( LPAREN )? ) ) | POSITION LPAREN substr= expr IN str= expr RPAREN -> ^( FUNC ^( POSITION $substr $str) ) | SUBDATE LPAREN date= expr COMMA (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) ) RPAREN | (funcName= SUBSTR |funcName= SUBSTRING ) LPAREN str= expr ( COMMA position= expr COMMA (len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ) ) | FROM position= expr ( FOR len= expr )? -> ^( FUNC ^( $funcName $str $position ( $len)? ( FROM )? ) ) ) RPAREN | SYSDATE LPAREN RPAREN -> ^( FUNC ^( SYSDATE LPAREN ) ) | TIMESTAMP_ADD LPAREN timestampUnit interval= expr date= expr RPAREN -> ^( FUNC ^( TIMESTAMP_ADD $date $interval timestampUnit ) ) | TIMESTAMP_DIFF LPAREN timestampUnit date1= expr date2= expr RPAREN -> ^( FUNC ^( TIMESTAMP_DIFF $date1 $date2 timestampUnit ) ) | UTC_DATE ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_DATE ( LPAREN )? ) ) | UTC_TIMESTAMP ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIMESTAMP ( LPAREN )? ) ) | UTC_TIME ( LPAREN RPAREN )? -> ^( FUNC ^( UTC_TIME ( LPAREN )? ) ) | functionCall_conflicts | functionCall_reserved |name= ID args= parenOptExprList -> ^( FUNC ^( $name $args) ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA333 : DFA
	{
		private const string DFA333_eotS =
			"\x183\xFFFF";
		private const string DFA333_eofS =
			"\x183\xFFFF";
		private const string DFA333_minS =
			"\x1\x5\x1\x0\x181\xFFFF";
		private const string DFA333_maxS =
			"\x1\x27E\x1\x0\x181\xFFFF";
		private const string DFA333_acceptS =
			"\x2\xFFFF\x1\x2\x17F\xFFFF\x1\x1";
		private const string DFA333_specialS =
			"\x1\xFFFF\x1\x0\x181\xFFFF}>";
		private static readonly string[] DFA333_transitionS =
			{
				"\x1\x2\x1\xFFFF\x5\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x7\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x3\x2\x2\xFFFF\x3"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x4\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x8\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3\xFFFF\x6"+
				"\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x4\x2\x4\xFFFF\x1\x2\x4\xFFFF\x3\x2\x3\xFFFF\x1\x2\x1\xFFFF\x5"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x6\x2\x2\xFFFF\x4\x2\x3\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x6\x2\x2\xFFFF\x1\x2\x2\xFFFF\x4\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x3\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x3\xFFFF\x3\x2\x7\xFFFF\x1\x1\x1\xFFFF\x4\x2\x1\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF"+
				"\xF\x2\x1\xFFFF\xB\x2\x3\xFFFF\x4\x2\x1\xFFFF\x4\x2\x2\xFFFF\x3\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x1\xFFFF\x8"+
				"\x2\x1\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\x11\x2\x2\xFFFF\x3\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x8\xFFFF\x5\x2\x2\xFFFF"+
				"\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x6\x2\x1\xFFFF\x3\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x1\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\xF\x2\x1\xFFFF\x4\x2\x1\xFFFF\x2"+
				"\x2\x1\xFFFF\x4\x2\x5\xFFFF\x2\x2\x1\xFFFF\x9\x2\x1\xFFFF\x4\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA333_eot = DFA.UnpackEncodedString(DFA333_eotS);
		private static readonly short[] DFA333_eof = DFA.UnpackEncodedString(DFA333_eofS);
		private static readonly char[] DFA333_min = DFA.UnpackEncodedStringToUnsignedChars(DFA333_minS);
		private static readonly char[] DFA333_max = DFA.UnpackEncodedStringToUnsignedChars(DFA333_maxS);
		private static readonly short[] DFA333_accept = DFA.UnpackEncodedString(DFA333_acceptS);
		private static readonly short[] DFA333_special = DFA.UnpackEncodedString(DFA333_specialS);
		private static readonly short[][] DFA333_transition;

		static DFA333()
		{
			int numStates = DFA333_transitionS.Length;
			DFA333_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA333_transition[i] = DFA.UnpackEncodedString(DFA333_transitionS[i]);
			}
		}

		public DFA333( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 333;
			this.eot = DFA333_eot;
			this.eof = DFA333_eof;
			this.min = DFA333_min;
			this.max = DFA333_max;
			this.accept = DFA333_accept;
			this.special = DFA333_special;
			this.transition = DFA333_transition;
		}

		public override string Description { get { return "1429:3: ( ( INTERVAL )=> INTERVAL interval= expr timeUnit RPAREN -> ^( FUNC ^( ADDDATE $date $interval timeUnit ) ) |days= expr RPAREN -> ^( FUNC ^( ADDDATE $date $days) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition333(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA333_1 = input.LA(1);


				int index333_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred11_MySQL51Parser_fragment))) {s = 386;}

				else if ((true)) {s = 2;}


				input.Seek(index333_1);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 333, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA338 : DFA
	{
		private const string DFA338_eotS =
			"\x183\xFFFF";
		private const string DFA338_eofS =
			"\x183\xFFFF";
		private const string DFA338_minS =
			"\x1\x5\x6\xFFFF\x1\x0\x17B\xFFFF";
		private const string DFA338_maxS =
			"\x1\x27E\x6\xFFFF\x1\x0\x17B\xFFFF";
		private const string DFA338_acceptS =
			"\x1\xFFFF\x1\x1\x180\xFFFF\x1\x2";
		private const string DFA338_specialS =
			"\x7\xFFFF\x1\x0\x17B\xFFFF}>";
		private static readonly string[] DFA338_transitionS =
			{
				"\x1\x1\x1\xFFFF\x5\x1\x4\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x7\x1\x2"+
				"\xFFFF\x1\x1\x3\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF\x3\x1\x2\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x8\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6\x1\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x3\xFFFF\x6"+
				"\x1\x1\xFFFF\x1\x1\x2\xFFFF\x2\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x1\x1\x4\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2"+
				"\xFFFF\x4\x1\x4\xFFFF\x1\x1\x4\xFFFF\x3\x1\x3\xFFFF\x1\x1\x1\xFFFF\x5"+
				"\x1\x1\xFFFF\x2\x1\x2\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x6\x1\x2\xFFFF\x4\x1\x3\xFFFF\x1\x1\x3\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x6\x1\x2\xFFFF\x1\x1\x2\xFFFF\x4\x1\x2\xFFFF\x2\x1\x1\xFFFF\x3"+
				"\x1\x3\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x1\x1\x3\xFFFF\x3\x1\x7\xFFFF\x1\x7\x1\xFFFF\x4\x1\x1\xFFFF\x2\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x4\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1"+
				"\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x3\xFFFF\x2\x1\x2\xFFFF\x1\x1\x5\xFFFF"+
				"\xF\x1\x1\xFFFF\xB\x1\x3\xFFFF\x4\x1\x1\xFFFF\x4\x1\x2\xFFFF\x3\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1\x1\xFFFF\x8"+
				"\x1\x1\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x2\x1\x3\xFFFF\x1\x1\x5\xFFFF\x11\x1\x2\xFFFF\x3\x1"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x3\x1\x8\xFFFF\x5\x1\x2\xFFFF"+
				"\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x6\x1\x1\xFFFF\x3\x1\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x1\x4\xFFFF\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x3\x1\x7\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x8\x1\x1\xFFFF\xF\x1\x1\xFFFF\x4\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x4\x1\x5\xFFFF\x2\x1\x1\xFFFF\x9\x1\x1\xFFFF\x4\x1\x2\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1"+
				"\xFFFF\x4\x1\x1\xFFFF\x1\x1\x3\xFFFF\x2\x1\x1\xFFFF\x6\x1\x4\xFFFF\x2"+
				"\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x5\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA338_eot = DFA.UnpackEncodedString(DFA338_eotS);
		private static readonly short[] DFA338_eof = DFA.UnpackEncodedString(DFA338_eofS);
		private static readonly char[] DFA338_min = DFA.UnpackEncodedStringToUnsignedChars(DFA338_minS);
		private static readonly char[] DFA338_max = DFA.UnpackEncodedStringToUnsignedChars(DFA338_maxS);
		private static readonly short[] DFA338_accept = DFA.UnpackEncodedString(DFA338_acceptS);
		private static readonly short[] DFA338_special = DFA.UnpackEncodedString(DFA338_specialS);
		private static readonly short[][] DFA338_transition;

		static DFA338()
		{
			int numStates = DFA338_transitionS.Length;
			DFA338_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA338_transition[i] = DFA.UnpackEncodedString(DFA338_transitionS[i]);
			}
		}

		public DFA338( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 338;
			this.eot = DFA338_eot;
			this.eof = DFA338_eof;
			this.min = DFA338_min;
			this.max = DFA338_max;
			this.accept = DFA338_accept;
			this.special = DFA338_special;
			this.transition = DFA338_transition;
		}

		public override string Description { get { return "1445:4: (days= expr -> ^( FUNC ^( SUBDATE $date $days) ) | ( INTERVAL )=> INTERVAL interval= expr timeUnit -> ^( FUNC ^( SUBDATE $date $interval timeUnit ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition338(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA338_7 = input.LA(1);


				int index338_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((true)) {s = 1;}

				else if ((EvaluatePredicate(synpred12_MySQL51Parser_fragment))) {s = 386;}


				input.Seek(index338_7);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 338, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_statement_list124 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _SEMI_in_statement_list127 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A1UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_in_statement_list131 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _SEMI_in_statement_list135 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _EOF_in_statement_list138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_statement173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _do_stmt_in_statement179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _show_stmt_in_statement185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explain_stmt_in_statement191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insert_in_statement197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _update_in_statement203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delete_in_statement209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _transaction_in_statement215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMENT_RULE_in_statement221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_table_in_statement227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_database_in_statement236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_database_in_statement244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_event_in_statement250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_routine_in_statement256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_index_in_statement262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_logfile_in_statement268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_server_in_statement274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_in_statement280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_trigger_in_statement286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_in_statement292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rename_database_in_statement298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rename_table_in_statement304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncate_table_in_statement310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _begin_end_stmt_in_statement316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_begin_end_stmt335 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _COLON_in_begin_end_stmt337 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _BEGIN_in_begin_end_stmt342 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _declare_stmt_in_begin_end_stmt344 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_list_in_begin_end_stmt347 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _END_in_begin_end_stmt349 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_begin_end_stmt351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_stmt363 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_declare_stmt365 = new BitSet(new ulong[]{0x1009800000000UL,0x60000000010002UL,0x8001000004UL,0x800000000000004UL,0x1800000000002UL,0x400000000001C000UL,0x80000000000000UL,0x408000000000000UL,0x1CC800000000000UL,0x100000600000000UL});
		public static readonly BitSet _COMMA_in_declare_stmt369 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_declare_stmt371 = new BitSet(new ulong[]{0x1009800000000UL,0x60000000010002UL,0x8001000004UL,0x800000000000004UL,0x1800000000002UL,0x400000000001C000UL,0x80000000000000UL,0x408000000000000UL,0x1CC800000000000UL,0x100000600000000UL});
		public static readonly BitSet _data_type_in_declare_stmt376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_database387 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _DATABASE_in_create_database391 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _SCHEMA_in_create_database395 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_create_database401 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NOT_in_create_database403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_create_database405 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_create_database410 = new BitSet(new ulong[]{0x2UL,0x804UL,0x10UL});
		public static readonly BitSet _create_specification_in_create_database412 = new BitSet(new ulong[]{0x2UL,0x804UL,0x10UL});
		public static readonly BitSet _RETURN_in_return_stmt436 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_return_stmt438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_do_stmt448 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_do_stmt450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHOW_in_show_stmt473 = new BitSet(new ulong[]{0x5001000000UL,0x8001100009004UL,0x426000000000UL,0x20000000445000UL,0x10002000000000UL,0x0UL,0x1D8008000040UL,0x201000800000000UL,0x4000060001040000UL,0x81000000000UL,0x80UL});
		public static readonly BitSet _AUTHORS_in_show_stmt488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINLOG_in_show_stmt511 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _EVENTS_in_show_stmt513 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x80000000UL});
		public static readonly BitSet _IN_in_show_stmt516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_show_stmt520 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x800UL,0x80000000UL});
		public static readonly BitSet _FROM_in_show_stmt525 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_show_stmt527 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _limit_in_show_stmt531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_in_show_stmt562 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SET_in_show_stmt564 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLATION_in_show_stmt590 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_show_stmt618 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _COLUMNS_in_show_stmt621 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x400000000800UL});
		public static readonly BitSet _FROM_in_show_stmt624 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt626 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_show_stmt629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _FROM_in_show_stmt633 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt635 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt638 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTRIBUTORS_in_show_stmt673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt694 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _DATABASE_in_show_stmt696 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _EVENT_in_show_stmt723 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt751 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _FUNCTION_in_show_stmt753 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt778 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _PROCEDURE_in_show_stmt780 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _TABLE_in_show_stmt808 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_show_stmt810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt834 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _TRIGGER_in_show_stmt836 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_show_stmt862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _VIEW_in_show_stmt864 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATABASES_in_show_stmt891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENGINE_in_show_stmt917 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x635231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _INNODB_in_show_stmt920 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _ident_in_show_stmt924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MUTEX_in_show_stmt936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STORAGE_in_show_stmt986 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _ENGINES_in_show_stmt989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERRORS_in_show_stmt1011 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _limit_in_show_stmt1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_show_stmt1040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _EVENTS_in_show_stmt1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_show_stmt1070 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _CODE_in_show_stmt1072 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_show_stmt1099 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1101 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GRANTS_in_show_stmt1129 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _FOR_in_show_stmt1131 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_show_stmt1154 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _USER_HOST_in_show_stmt1158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_show_stmt1167 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _USER_HOST_in_show_stmt1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_USER_in_show_stmt1186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_USER_in_show_stmt1200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_show_stmt1202 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_show_stmt1204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_SYM_in_show_stmt1244 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _FROM_in_show_stmt1246 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_show_stmt1248 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL});
		public static readonly BitSet _FROM_in_show_stmt1252 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt1254 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INNODB_in_show_stmt1286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_show_stmt1311 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _TABLES_in_show_stmt1313 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _FROM_in_show_stmt1317 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt1319 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1322 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUGINS_in_show_stmt1352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_show_stmt1375 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _CODE_in_show_stmt1377 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_show_stmt1407 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1409 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVILEGES_in_show_stmt1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_show_stmt1459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _PROCESSLIST_in_show_stmt1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROFILE_in_show_stmt1484 = new BitSet(new ulong[]{0x2000000001000UL,0x840000000UL,0x0UL,0x0UL,0x80UL,0x20000UL,0x40000UL,0x0UL,0x2000000001UL});
		public static readonly BitSet _show_profile_types_in_show_stmt1486 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x80000000UL});
		public static readonly BitSet _FOR_in_show_stmt1489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _QUERY_in_show_stmt1491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_show_stmt1493 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _limit_in_show_stmt1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROFILES_in_show_stmt1525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SCHEDULER_in_show_stmt1547 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _optScopeModifier_in_show_stmt1571 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1573 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TABLE_in_show_stmt1602 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1604 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _FROM_in_show_stmt1608 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt1610 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1613 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TABLES_in_show_stmt1651 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _FROM_in_show_stmt1655 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt1657 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1660 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRIGGERS_in_show_stmt1699 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x400000000800UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _FROM_in_show_stmt1703 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IN_in_show_stmt1705 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_show_stmt1708 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _optScopeModifier_in_show_stmt1745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _VARIABLES_in_show_stmt1747 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x40000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _like_or_where_in_show_stmt1749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WARNINGS_in_show_stmt1777 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _limit_in_show_stmt1779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLAVE_in_show_stmt1801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _HOSTS_in_show_stmt1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLAVE_in_show_stmt1821 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_in_show_stmt1841 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _STATUS_in_show_stmt1843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINARY_in_show_stmt1861 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _LOGS_in_show_stmt1863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_in_show_stmt1881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _LOGS_in_show_stmt1883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_create_specification1920 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _CHARACTER_in_create_specification1925 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SET_in_create_specification1927 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_specification1929 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_create_specification1932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_create_specification1948 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _COLLATE_in_create_specification1953 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_specification1955 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_create_specification1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_optScopeModifier1979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SESSION_in_optScopeModifier1992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCAL_in_optScopeModifier2006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_show_profile_types2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BLOCK_in_show_profile_types2042 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _IO_in_show_profile_types2044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTEXT_in_show_profile_types2050 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _SWITCHES_in_show_profile_types2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CPU_in_show_profile_types2058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IPC_in_show_profile_types2064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEMORY_in_show_profile_types2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PAGE_in_show_profile_types2076 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _FAULTS_in_show_profile_types2078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOURCE_in_show_profile_types2084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWAPS_in_show_profile_types2090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_like_or_where2108 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL,0x100000000UL});
		public static readonly BitSet _string_or_placeholder_in_like_or_where2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_like_or_where2126 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_like_or_where2128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPLAIN_in_explain_stmt2154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_in_explain_stmt2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_paren_in_select2181 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _UNION_in_select2186 = new BitSet(new ulong[]{0x1000UL,0x0UL,0x40000UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _ALL_in_select2191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _DISTINCT_in_select2197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_in_select2203 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _LPAREN_in_select_paren2261 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_paren_in_select_paren2263 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_select_paren2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_inner_in_select_paren2274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_inner2292 = new BitSet(new ulong[]{0x79AE72F13F911FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA384FC8A1UL,0x7152F1F9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEFD73DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFFFEBF81UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _select_options_in_select_inner2302 = new BitSet(new ulong[]{0x79AE72F13F911FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA384FC8A1UL,0x7152F1F9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEFD73DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFFFEBF81UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _select_expr_in_select_inner2310 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x800UL,0x80000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _COMMA_in_select_inner2313 = new BitSet(new ulong[]{0x79AE72F13F911FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA384FC8A1UL,0x7152F1F9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEFD73DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFFFEBF81UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _select_expr_in_select_inner2317 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x800UL,0x80000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _FROM_in_select_inner2338 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_references_in_select_inner2340 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x22000040UL,0x10080000008UL,0x0UL,0x10000001000UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _WHERE_in_select_inner2356 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_select_inner2360 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x22000040UL,0x10080000008UL,0x0UL,0x10000001000UL});
		public static readonly BitSet _group_by_in_select_inner2376 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20000040UL,0x10080000008UL,0x0UL,0x10000001000UL});
		public static readonly BitSet _HAVING_in_select_inner2392 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_select_inner2396 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10080000008UL,0x0UL,0x10000001000UL});
		public static readonly BitSet _order_by_in_select_inner2412 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10080000008UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _limit_in_select_inner2427 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10000000008UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _PROCEDURE_in_select_inner2456 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_select_inner2460 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _parenOptExprList_in_select_inner2464 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10000000008UL});
		public static readonly BitSet _INTO_in_select_inner2497 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _OUTFILE_in_select_inner2499 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_select_inner2503 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x4000000000000000UL,0x40UL,0x10200000000UL});
		public static readonly BitSet _infile_options_helper_in_select_inner2507 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10000000000UL});
		public static readonly BitSet _INTO_in_select_inner2527 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _DUMPFILE_in_select_inner2529 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_select_inner2533 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL,0x10000000000UL});
		public static readonly BitSet _INTO_in_select_inner2553 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x80000UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _variable_in_select_inner2557 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x40UL,0x10000000000UL});
		public static readonly BitSet _COMMA_in_select_inner2560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x80000UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _variable_in_select_inner2564 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x40UL,0x10000000000UL});
		public static readonly BitSet _FOR_in_select_inner2617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _UPDATE_in_select_inner2619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCK_in_select_inner2625 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _IN_in_select_inner2627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _SHARE_in_select_inner2629 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _MODE_in_select_inner2631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _order_by_in_select_inner2647 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _limit_in_select_inner2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _limit_in_select_inner2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_infile_options_helper2801 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80400000000UL,0x0UL,0x200000000UL,0x0UL,0x200UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _TERMINATED_in_infile_options_helper2811 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_infile_options_helper2813 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_infile_options_helper2817 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80400000000UL,0x0UL,0x200000000UL,0x0UL,0x200UL});
		public static readonly BitSet _OPTIONALLY_in_infile_options_helper2827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _ENCLOSED_in_infile_options_helper2830 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_infile_options_helper2832 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_infile_options_helper2836 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _ESCAPED_in_infile_options_helper2848 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_infile_options_helper2850 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_infile_options_helper2854 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _LINES_in_infile_options_helper2877 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000010000UL});
		public static readonly BitSet _STARTING_in_infile_options_helper2883 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_infile_options_helper2885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_infile_options_helper2889 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _TERMINATED_in_infile_options_helper2897 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_infile_options_helper2899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_infile_options_helper2903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_variable2920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIMIT_in_limit2938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _number_or_placeholder_in_limit2949 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_limit2951 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _number_or_placeholder_in_limit2957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_or_placeholder_in_limit2970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _OFFSET_in_limit2974 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _number_or_placeholder_in_limit2978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_string_or_placeholder3012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_number_or_placeholder3028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_text_string3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_group_by3067 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_group_by3069 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _order_group_by_elements_in_group_by3077 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _COMMA_in_group_by3080 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _order_group_by_elements_in_group_by3084 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _WITH_in_group_by3094 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _ROLLUP_in_group_by3096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_order_by3125 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_order_by3127 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _order_group_by_elements_in_order_by3134 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_order_by3137 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _order_group_by_elements_in_order_by3141 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _expr_in_order_group_by_elements3168 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x200UL});
		public static readonly BitSet _ASC_in_order_group_by_elements3177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_order_group_by_elements3199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_select_options3242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULT_in_select_expr3308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_select_expr3325 = new BitSet(new ulong[]{0x49AE00C13F950FA2UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _AS_in_select_expr3328 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_select_expr3331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_ref_in_table_references3383 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_table_references3398 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_ref_in_table_references3402 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _table_factor_in_table_ref3437 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x0UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _LEFT_in_table_ref3462 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL,0x0UL,0x4000UL});
		public static readonly BitSet _RIGHT_in_table_ref3466 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL,0x0UL,0x4000UL});
		public static readonly BitSet _OUTER_in_table_ref3471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _JOIN_in_table_ref3474 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_ref_in_table_ref3478 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _join_condition_both_in_table_ref3482 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x0UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _INNER_in_table_ref3515 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _CROSS_in_table_ref3519 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _JOIN_in_table_ref3523 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_factor_in_table_ref3527 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x4UL,0x400000UL,0x2000000UL,0x4000000UL});
		public static readonly BitSet _join_condition_both_in_table_ref3531 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x0UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _STRAIGHT_JOIN_in_table_ref3566 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_factor_in_table_ref3570 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x4UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _join_condition_on_in_table_ref3586 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x0UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _NATURAL_in_table_ref3647 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1001000UL,0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _LEFT_in_table_ref3653 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL,0x0UL,0x4000UL});
		public static readonly BitSet _RIGHT_in_table_ref3657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL,0x0UL,0x4000UL});
		public static readonly BitSet _OUTER_in_table_ref3662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _JOIN_in_table_ref3667 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_factor_in_table_ref3671 = new BitSet(new ulong[]{0x2UL,0x2000000000UL,0x0UL,0x8000000000000UL,0x1001000UL,0x100000000000UL,0x0UL,0x400000UL,0x2000000UL});
		public static readonly BitSet _simple_table_ref_alias_in_table_factor3707 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100000000080UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _index_hint_list_in_table_factor3709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_table_factor3728 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_inner_in_table_factor3730 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_table_factor3732 = new BitSet(new ulong[]{0x49AE00C13F950FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _AS_in_table_factor3734 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_table_factor3737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_table_factor3764 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_ref_in_table_factor3766 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_table_factor3771 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_ref_in_table_factor3773 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_table_factor3780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_table_factor3802 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_table_factor3804 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_ref_in_table_factor3806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _RCURLY_in_table_factor3808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DUAL_in_table_factor3823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ON_in_join_condition_on3847 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_join_condition_on3849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _join_condition_on_in_join_condition_both3869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_join_condition_both3874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_join_condition_both3876 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_join_condition_both3880 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_join_condition_both3883 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_join_condition_both3887 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_join_condition_both3891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_simple_obj_ref_no_alias3915 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _DOT_in_simple_obj_ref_no_alias3918 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_simple_obj_ref_no_alias3922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_simple_table_ref_no_alias3951 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _DOT_in_simple_table_ref_no_alias3954 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_simple_table_ref_no_alias3958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_simple_table_ref_alias3983 = new BitSet(new ulong[]{0x49AE00C13F950FA2UL,0x87200896DFA97E9UL,0xCCD2E6FA38C3C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _DOT_in_simple_table_ref_alias3986 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_simple_table_ref_alias3990 = new BitSet(new ulong[]{0x49AE00C13F950FA2UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_alias_in_simple_table_ref_alias3994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_table_alias4019 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_table_alias4024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_field_name4049 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _DOT_in_field_name4063 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEFD524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_field_name4076 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _MULT_in_field_name4082 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000UL});
		public static readonly BitSet _ASCII_in_ident4135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BACKUP_in_ident4142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BEGIN_in_ident4149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_ident4156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CACHE_in_ident4163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARSET_in_ident4170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHECKSUM_in_ident4177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLOSE_in_ident4184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMENT_in_ident4191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMIT_in_ident4198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTAINS_in_ident4205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEALLOCATE_in_ident4212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_ident4219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _END_in_ident4226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXECUTE_in_ident4233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLUSH_in_ident4240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_ident4247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HANDLER_in_ident4254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HELP_in_ident4261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HOST_in_ident4268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSTALL_in_ident4275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LABEL_in_ident4282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LANGUAGE_in_ident4289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NO_in_ident4296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_ident4303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONS_in_ident4310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OWNER_in_ident4317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARSER_in_ident4324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARTITION_in_ident4331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PORT_in_ident4338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PREPARE_in_ident4345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REMOVE_in_ident4352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPAIR_in_ident4359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESET_in_ident4366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESTORE_in_ident4373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROLLBACK_in_ident4380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SAVEPOINT_in_ident4387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SECURITY_in_ident4394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SERVER_in_ident4401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIGNED_in_ident4408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOCKET_in_ident4415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLAVE_in_ident4422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SONAME_in_ident4429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _START_in_ident4436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STOP_in_ident4443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_ident4450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNICODE_in_ident4457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNINSTALL_in_ident4464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WRAPPER_in_ident4471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _XA_in_ident4478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPGRADE_in_ident4485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_sp_label_in_ident4498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_ident_sp_label4520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ACTION_in_ident_sp_label4528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADDDATE_in_ident_sp_label4536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AFTER_in_ident_sp_label4544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AGAINST_in_ident_sp_label4552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AGGREGATE_in_ident_sp_label4560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALGORITHM_in_ident_sp_label4568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_in_ident_sp_label4576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_ident_sp_label4584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AUTHORS_in_ident_sp_label4592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AUTO_INCREMENT_in_ident_sp_label4600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AUTOEXTEND_SIZE_in_ident_sp_label4608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AVG_ROW_LENGTH_in_ident_sp_label4616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AVG_in_ident_sp_label4624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINLOG_in_ident_sp_label4632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_in_ident_sp_label4640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BLOCK_in_ident_sp_label4648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_ident_sp_label4656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOLEAN_in_ident_sp_label4664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BTREE_in_ident_sp_label4672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASCADED_in_ident_sp_label4680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAIN_in_ident_sp_label4688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHANGED_in_ident_sp_label4696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CIPHER_in_ident_sp_label4704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLIENT_in_ident_sp_label4712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COALESCE_in_ident_sp_label4720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CODE_in_ident_sp_label4728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLATION_in_ident_sp_label4736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLUMNS_in_ident_sp_label4744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FIELDS_in_ident_sp_label4752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMITTED_in_ident_sp_label4760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPACT_in_ident_sp_label4768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPLETION_in_ident_sp_label4776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMPRESSED_in_ident_sp_label4784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONCURRENT_in_ident_sp_label4792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONNECTION_in_ident_sp_label4800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONSISTENT_in_ident_sp_label4808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTEXT_in_ident_sp_label4816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTRIBUTORS_in_ident_sp_label4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CPU_in_ident_sp_label4832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CUBE_in_ident_sp_label4840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATA_in_ident_sp_label4848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATAFILE_in_ident_sp_label4856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_ident_sp_label4864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_ident_sp_label4872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DAY_in_ident_sp_label4880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFINER_in_ident_sp_label4888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELAY_KEY_WRITE_in_ident_sp_label4896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DES_KEY_FILE_in_ident_sp_label4904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIRECTORY_in_ident_sp_label4912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISABLE_in_ident_sp_label4920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISCARD_in_ident_sp_label4928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISK_in_ident_sp_label4936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DUMPFILE_in_ident_sp_label4944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DUPLICATE_in_ident_sp_label4952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMIC_in_ident_sp_label4960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENDS_in_ident_sp_label4968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUM_in_ident_sp_label4976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENGINE_in_ident_sp_label4984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENGINES_in_ident_sp_label4992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ERRORS_in_ident_sp_label5000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ESCAPE_in_ident_sp_label5008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EVENT_in_ident_sp_label5016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EVENTS_in_ident_sp_label5024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EVERY_in_ident_sp_label5032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPANSION_in_ident_sp_label5040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENDED_in_ident_sp_label5048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTENT_SIZE_in_ident_sp_label5056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FAULTS_in_ident_sp_label5064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FAST_in_ident_sp_label5072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOUND_in_ident_sp_label5080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENABLE_in_ident_sp_label5088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_ident_sp_label5096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FILE_in_ident_sp_label5104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FIRST_in_ident_sp_label5112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FIXED_in_ident_sp_label5120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FRAC_SECOND_in_ident_sp_label5128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GEOMETRY_in_ident_sp_label5136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GEOMETRYCOLLECTION_in_ident_sp_label5144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GET_FORMAT_in_ident_sp_label5152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GRANTS_in_ident_sp_label5160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_in_ident_sp_label5168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_ident_sp_label5176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HOSTS_in_ident_sp_label5184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HOUR_in_ident_sp_label5192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIED_in_ident_sp_label5200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INVOKER_in_ident_sp_label5208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_ident_sp_label5216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEXES_in_ident_sp_label5224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INITIAL_SIZE_in_ident_sp_label5232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IO_in_ident_sp_label5240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IPC_in_ident_sp_label5248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ISOLATION_in_ident_sp_label5256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ISSUER_in_ident_sp_label5264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INNOBASE_in_ident_sp_label5272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_METHOD_in_ident_sp_label5280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KEY_BLOCK_SIZE_in_ident_sp_label5288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LAST_in_ident_sp_label5296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LEAVES_in_ident_sp_label5304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_in_ident_sp_label5312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LEVEL_in_ident_sp_label5320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LINESTRING_in_ident_sp_label5328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIST_in_ident_sp_label5336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCAL_in_ident_sp_label5344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCKS_in_ident_sp_label5352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGFILE_in_ident_sp_label5360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOGS_in_ident_sp_label5368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_ROWS_in_ident_sp_label5376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_in_ident_sp_label5384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_HOST_in_ident_sp_label5392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_PORT_in_ident_sp_label5400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_LOG_FILE_in_ident_sp_label5408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_LOG_POS_in_ident_sp_label5416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_USER_in_ident_sp_label5424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_PASSWORD_in_ident_sp_label5432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SERVER_ID_in_ident_sp_label5440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_CONNECT_RETRY_in_ident_sp_label5448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_in_ident_sp_label5456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_CA_in_ident_sp_label5464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_CAPATH_in_ident_sp_label5472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_CERT_in_ident_sp_label5480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_CIPHER_in_ident_sp_label5488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MASTER_SSL_KEY_in_ident_sp_label5496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_CONNECTIONS_PER_HOUR_in_ident_sp_label5504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_QUERIES_PER_HOUR_in_ident_sp_label5512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_SIZE_in_ident_sp_label5520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_UPDATES_PER_HOUR_in_ident_sp_label5528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_USER_CONNECTIONS_in_ident_sp_label5536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_VALUE_in_ident_sp_label5544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEDIUM_in_ident_sp_label5552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEMORY_in_ident_sp_label5560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MERGE_in_ident_sp_label5568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MICROSECOND_in_ident_sp_label5576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MIGRATE_in_ident_sp_label5584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUTE_in_ident_sp_label5592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MIN_ROWS_in_ident_sp_label5600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MODIFY_in_ident_sp_label5608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MODE_in_ident_sp_label5616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MONTH_in_ident_sp_label5624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTILINESTRING_in_ident_sp_label5632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTIPOINT_in_ident_sp_label5640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTIPOLYGON_in_ident_sp_label5648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MUTEX_in_ident_sp_label5656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_ident_sp_label5664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAMES_in_ident_sp_label5672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATIONAL_in_ident_sp_label5680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NCHAR_in_ident_sp_label5688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NDBCLUSTER_in_ident_sp_label5696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEXT_in_ident_sp_label5704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_ident_sp_label5712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NO_WAIT_in_ident_sp_label5720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NODEGROUP_in_ident_sp_label5728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NONE_in_ident_sp_label5736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NVARCHAR_in_ident_sp_label5744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OFFSET_in_ident_sp_label5752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OLD_PASSWORD_in_ident_sp_label5760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ONE_SHOT_in_ident_sp_label5768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ONE_in_ident_sp_label5776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACK_KEYS_in_ident_sp_label5784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PAGE_in_ident_sp_label5792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARTIAL_in_ident_sp_label5800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARTITIONING_in_ident_sp_label5808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARTITIONS_in_ident_sp_label5816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PASSWORD_in_ident_sp_label5824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PHASE_in_ident_sp_label5832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUGIN_in_ident_sp_label5840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUGINS_in_ident_sp_label5848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POINT_in_ident_sp_label5856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POLYGON_in_ident_sp_label5864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRESERVE_in_ident_sp_label5872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PREV_in_ident_sp_label5880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIVILEGES_in_ident_sp_label5888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCESS_in_ident_sp_label5896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCESSLIST_in_ident_sp_label5904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROFILE_in_ident_sp_label5912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROFILES_in_ident_sp_label5920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUARTER_in_ident_sp_label5928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUERY_in_ident_sp_label5936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUICK_in_ident_sp_label5944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REBUILD_in_ident_sp_label5952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RECOVER_in_ident_sp_label5960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REDO_BUFFER_SIZE_in_ident_sp_label5968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REDOFILE_in_ident_sp_label5976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REDUNDANT_in_ident_sp_label5984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RELAY_LOG_FILE_in_ident_sp_label5992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RELAY_LOG_POS_in_ident_sp_label6000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RELAY_THREAD_in_ident_sp_label6008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RELOAD_in_ident_sp_label6016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REORGANIZE_in_ident_sp_label6024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPEATABLE_in_ident_sp_label6032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLICATION_in_ident_sp_label6040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESOURCES_in_ident_sp_label6048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESUME_in_ident_sp_label6056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURNS_in_ident_sp_label6064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROLLUP_in_ident_sp_label6072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROUTINE_in_ident_sp_label6080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROWS_in_ident_sp_label6088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROW_FORMAT_in_ident_sp_label6096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROW_in_ident_sp_label6104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RTREE_in_ident_sp_label6112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SCHEDULE_in_ident_sp_label6120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SECOND_in_ident_sp_label6128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SERIAL_in_ident_sp_label6136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SERIALIZABLE_in_ident_sp_label6144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SESSION_in_ident_sp_label6152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_in_ident_sp_label6160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHARE_in_ident_sp_label6168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHUTDOWN_in_ident_sp_label6176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SNAPSHOT_in_ident_sp_label6184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOUNDS_in_ident_sp_label6192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOURCE_in_ident_sp_label6200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQL_CACHE_in_ident_sp_label6208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQL_BUFFER_RESULT_in_ident_sp_label6216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQL_NO_CACHE_in_ident_sp_label6224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQL_THREAD_in_ident_sp_label6232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STARTS_in_ident_sp_label6240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATUS_in_ident_sp_label6248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STORAGE_in_ident_sp_label6256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_KEYWORD_in_ident_sp_label6264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBDATE_in_ident_sp_label6272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBJECT_in_ident_sp_label6280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBPARTITION_in_ident_sp_label6288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBPARTITIONS_in_ident_sp_label6296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_ident_sp_label6304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUSPEND_in_ident_sp_label6312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWAPS_in_ident_sp_label6320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCHES_in_ident_sp_label6328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TABLES_in_ident_sp_label6336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TABLESPACE_in_ident_sp_label6344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEMPORARY_in_ident_sp_label6352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEMPTABLE_in_ident_sp_label6360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEXT_in_ident_sp_label6368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THAN_in_ident_sp_label6376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSACTION_in_ident_sp_label6384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRANSACTIONAL_in_ident_sp_label6392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRIGGERS_in_ident_sp_label6400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_in_ident_sp_label6408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_ADD_in_ident_sp_label6416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_DIFF_in_ident_sp_label6424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIME_in_ident_sp_label6432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPES_in_ident_sp_label6440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_ident_sp_label6448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UDF_RETURNS_in_ident_sp_label6456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_ident_sp_label6464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNCOMMITTED_in_ident_sp_label6472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNDEFINED_in_ident_sp_label6480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNDO_BUFFER_SIZE_in_ident_sp_label6488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNDOFILE_in_ident_sp_label6496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNKNOWN_in_ident_sp_label6504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNTIL_in_ident_sp_label6512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USER_in_ident_sp_label6520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_FRM_in_ident_sp_label6528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLES_in_ident_sp_label6536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VIEW_in_ident_sp_label6544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_in_ident_sp_label6552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WARNINGS_in_ident_sp_label6560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WAIT_in_ident_sp_label6568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WEEK_in_ident_sp_label6576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WORK_in_ident_sp_label6584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _X509_in_ident_sp_label6592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _YEAR_in_ident_sp_label6600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _index_hint_in_index_hint_list6619 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_index_hint_list6622 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x100000000080UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _index_hint_in_index_hint_list6624 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _USE_in_index_hint6656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _index_hint_rest_in_index_hint6660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IGNORE_in_index_hint6674 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _index_hint_rest_in_index_hint6678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FORCE_in_index_hint6691 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _index_hint_rest_in_index_hint6695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_index_hint_rest6717 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x40UL,0x8000000000000UL});
		public static readonly BitSet _KEY_in_index_hint_rest6721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x40UL,0x8000000000000UL});
		public static readonly BitSet _FOR_in_index_hint_rest6725 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x2000000UL,0x1000UL,0x0UL,0x1000UL});
		public static readonly BitSet _JOIN_in_index_hint_rest6730 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _ORDER_in_index_hint_rest6736 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_index_hint_rest6738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _GROUP_in_index_hint_rest6744 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_index_hint_rest6746 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_index_hint_rest6753 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E147FE15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_index_hint_rest6765 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_index_hint_rest6768 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_index_hint_rest6772 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _ident_in_index_hint_rest6784 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_index_hint_rest6787 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_index_hint_rest6791 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_index_hint_rest6802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_exprList6835 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_exprList6838 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_exprList6842 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _LPAREN_in_parenExpr6861 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_parenExpr6863 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_parenExpr6865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenExprList6885 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_parenExprList6887 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_parenExprList6889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parenOptExprList6909 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E147FE55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_parenOptExprList6913 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_parenOptExprList6916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignOrExpr_in_expr6939 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _ASSIGN_in_expr6944 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_expr6949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignXORExpr_in_assignOrExpr6964 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x100000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _LOGICAL_OR_in_assignOrExpr6970 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _OR_in_assignOrExpr6977 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _assignXORExpr_in_assignOrExpr6983 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x100000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _assignAndExpr_in_assignXORExpr6998 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _XOR_in_assignXORExpr7003 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _assignAndExpr_in_assignXORExpr7008 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _assignNotExpr_in_assignAndExpr7023 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _LOGICAL_AND_in_assignAndExpr7030 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _AND_in_assignAndExpr7037 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _assignNotExpr_in_assignAndExpr7044 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _equalityExpr_in_assignNotExpr7059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_assignNotExpr7066 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _equalityExpr_in_assignNotExpr7071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseOrExpr_in_equalityExpr7082 = new BitSet(new ulong[]{0x400000002UL,0x0UL,0x10000000000UL,0x1800000UL,0x18000000UL,0x1020000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _equalityOperator_in_equalityExpr7089 = new BitSet(new ulong[]{0x79AE72F13F911FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xFBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _subselect_in_expr_rhs_in_equalityExpr7098 = new BitSet(new ulong[]{0x400000002UL,0x0UL,0x10000000000UL,0x1800000UL,0x18000000UL,0x1020000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _bitwiseOrExpr_in_equalityExpr7102 = new BitSet(new ulong[]{0x400000002UL,0x0UL,0x10000000000UL,0x1800000UL,0x18000000UL,0x1020000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _ANY_in_subselect_in_expr_rhs7119 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SOME_in_subselect_in_expr_rhs7125 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _ALL_in_subselect_in_expr_rhs7131 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_subselect_in_expr_rhs7134 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_in_subselect_in_expr_rhs7136 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_subselect_in_expr_rhs7138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_subselect7161 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_inner_in_subselect7163 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_subselect7165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IS_in_isOperator7184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000000UL,0x0UL,0x0UL,0x410000000000000UL,0x0UL,0x0UL,0x0UL,0x4001UL});
		public static readonly BitSet _NOT_in_isOperator7186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000000UL,0x0UL,0x0UL,0x400000000000000UL,0x0UL,0x0UL,0x0UL,0x4001UL});
		public static readonly BitSet _NULL_in_isOperator7192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_isOperator7198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_isOperator7204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNKNOWN_in_isOperator7210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQUALS_in_equalityOperator7238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_EQUAL_in_equalityOperator7246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_equalityOperator7254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_EQUAL_in_equalityOperator7262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_in_equalityOperator7270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_THAN_EQUAL_in_equalityOperator7283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_SAFE_NOT_EQUAL_in_equalityOperator7293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REGEXP_in_equalityOperator7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_equalityOperator7312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseAndExpr_in_bitwiseOrExpr7334 = new BitSet(new ulong[]{0x40400000002UL,0x0UL,0x0UL,0x400000000000UL,0x40000100UL,0x10000000000000UL,0x0UL,0x8000000000000000UL});
		public static readonly BitSet _BITWISE_OR_in_bitwiseOrExpr7346 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _bitwiseAndExpr_in_bitwiseOrExpr7351 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NOT_in_bitwiseOrExpr7363 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _IN_in_bitwiseOrExpr7368 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _parenExprList_in_bitwiseOrExpr7372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subselect_in_bitwiseOrExpr7376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_bitwiseOrExpr7386 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryExpr_in_bitwiseOrExpr7389 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _ESCAPE_in_bitwiseOrExpr7392 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_bitwiseOrExpr7394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_bitwiseOrExpr7403 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _bitwiseAndExpr_in_bitwiseOrExpr7405 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _AND_in_bitwiseOrExpr7407 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _bitwiseOrExpr_in_bitwiseOrExpr7409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOUNDS_in_bitwiseOrExpr7414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _LIKE_in_bitwiseOrExpr7416 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _bitwiseAndExpr_in_bitwiseOrExpr7418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _isOperator_in_bitwiseOrExpr7426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpr_in_bitwiseAndExpr7448 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _BITWISE_AND_in_bitwiseAndExpr7453 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _shiftExpr_in_bitwiseAndExpr7458 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _additiveExpr_in_shiftExpr7473 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x2000000UL,0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _LEFT_SHIFT_in_shiftExpr7479 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _RIGHT_SHIFT_in_shiftExpr7486 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _additiveExpr_in_shiftExpr7492 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x2000000UL,0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _multiplicativeExpr_in_additiveExpr7509 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000UL,0x10000000UL});
		public static readonly BitSet _PLUS_in_additiveExpr7515 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _MINUS_in_additiveExpr7520 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _multiplicativeExpr_in_additiveExpr7526 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000UL,0x10000000UL});
		public static readonly BitSet _MULT_in_multOperator7541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIVISION_in_multOperator7548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIV_in_multOperator7555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MODULO_in_multOperator7562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseXORExpr_in_multiplicativeExpr7575 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300000UL,0x0UL,0x0UL,0xA00000000UL});
		public static readonly BitSet _multOperator_in_multiplicativeExpr7580 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _bitwiseXORExpr_in_multiplicativeExpr7585 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300000UL,0x0UL,0x0UL,0xA00000000UL});
		public static readonly BitSet _unaryExpr_in_bitwiseXORExpr7600 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _BITWISE_XOR_in_bitwiseXORExpr7605 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryExpr_in_bitwiseXORExpr7610 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _MINUS_in_unaryExpr7625 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryExpr_in_unaryExpr7629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpr7646 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryExpr_in_unaryExpr7650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BITWISE_INVERSION_in_unaryExpr7667 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryExpr_in_unaryExpr7671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryNotExpr_in_unaryExpr7687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_OP_in_unaryNotExpr7705 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _unaryNotExpr_in_unaryNotExpr7709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _binaryCollateExpr_in_unaryNotExpr7725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINARY_in_binaryCollateExpr7742 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _binaryCollateExpr_in_binaryCollateExpr7746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLATE_in_binaryCollateExpr7763 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _binaryCollateExpr_in_binaryCollateExpr7767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _intervalExpr_in_binaryCollateExpr7781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERVAL_in_intervalExpr7804 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_intervalExpr7806 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_intervalExpr7808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_intervalExpr7827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary7858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subselect_in_primary7871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_primary7876 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _subselect_in_primary7878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _param_marker_in_primary7896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINARY_in_primary7905 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _primary_in_primary7907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_primary7912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primary7917 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_primary7919 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_primary7921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROW_in_primary7926 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_primary7928 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_primary7930 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_primary7932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_primary7937 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_primary7939 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_primary7941 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _RCURLY_in_primary7943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_primary7948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_expr_in_primary7953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_PLACEHOLDER_in_param_marker7967 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_param_marker7969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_match_expr7990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_match_expr7992 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_name_list_in_match_expr7994 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_match_expr7996 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _AGAINST_in_match_expr7998 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_match_expr8000 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_match_expr8002 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x400000000000UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _IN_in_match_expr8007 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _BOOLEAN_in_match_expr8009 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _MODE_in_match_expr8011 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _WITH_in_match_expr8019 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _QUERY_in_match_expr8021 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _EXPANSION_in_match_expr8023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_match_expr8029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case_expr8040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _WHEN_in_case_expr8051 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_case_expr8061 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _THEN_in_case_expr8063 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_case_expr8065 = new BitSet(new ulong[]{0x0UL,0x0UL,0x880000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _ELSE_in_case_expr8074 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_case_expr8076 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _END_in_case_expr8081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case_stmt8097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _WHEN_in_case_stmt8106 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_case_stmt8108 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _THEN_in_case_stmt8110 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_list_in_case_stmt8112 = new BitSet(new ulong[]{0x0UL,0x0UL,0x880000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _ELSE_in_case_stmt8119 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_list_in_case_stmt8121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _END_in_case_stmt8126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_case_stmt8135 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _WHEN_in_case_stmt8139 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADCFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _primary_in_case_stmt8141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _THEN_in_case_stmt8143 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_list_in_case_stmt8145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x880000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _ELSE_in_case_stmt8152 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200996DFE97E9UL,0xCCF2E6FA3A43C9A9UL,0x715231C9A47D623UL,0xFFF8272C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBF9E3477E15D5FFUL,0x583DBC78F986AB01UL,0x1661E10424ECF7EUL});
		public static readonly BitSet _statement_list_in_case_stmt8154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _END_in_case_stmt8159 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _CASE_in_case_stmt8161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_literal8176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_literal8183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_NUMBER_in_literal8190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GLOBAL_VARIABLE_in_literal8197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SESSION_VARIABLE_in_literal8204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_PLACEHOLDER_in_literal8211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINARY_VALUE_in_literal8218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEXA_VALUE_in_literal8225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal8232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_literal8239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_literal8246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_literal8255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_name_in_literal8260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BINARY_in_cast_data_type8272 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_cast_data_type8275 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_cast_data_type8277 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_cast_data_type8279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_cast_data_type8286 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_cast_data_type8289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_cast_data_type8291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_cast_data_type8293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_cast_data_type8300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_cast_data_type8305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIME_in_cast_data_type8310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_in_cast_data_type8315 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_cast_data_type8318 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_cast_data_type8322 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_cast_data_type8324 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_cast_data_type8328 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_cast_data_type8330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIGNED_in_cast_data_type8337 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _INTEGER_in_cast_data_type8339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNSIGNED_in_cast_data_type8345 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _INTEGER_in_cast_data_type8347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_timeUnit8358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_timestampUnit8466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_condition8524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BEGIN_in_transaction8543 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _WORK_in_transaction8546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _START_in_transaction8571 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _TRANSACTION_in_transaction8573 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _WITH_in_transaction8576 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _CONSISTENT_in_transaction8578 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _SNAPSHOT_in_transaction8580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMIT_in_transaction8601 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _WORK_in_transaction8603 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _AND_in_transaction8609 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NO_in_transaction8611 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _CHAIN_in_transaction8614 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _NO_in_transaction8621 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _RELEASE_in_transaction8624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROLLBACK_in_transaction8663 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _WORK_in_transaction8665 = new BitSet(new ulong[]{0x8002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _AND_in_transaction8671 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NO_in_transaction8673 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _CHAIN_in_transaction8676 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _NO_in_transaction8683 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _RELEASE_in_transaction8686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_transaction8728 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x40000UL,0x0UL,0x0UL,0x0UL,0x1000000000000UL,0x800000000000000UL});
		public static readonly BitSet _GLOBAL_in_transaction8737 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _SESSION_in_transaction8746 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _TRANSACTION_in_transaction8756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _ISOLATION_in_transaction8758 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _LEVEL_in_transaction8760 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x400000000400UL});
		public static readonly BitSet _READ_in_transaction8766 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _UNCOMMITTED_in_transaction8768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _READ_in_transaction8787 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _COMMITTED_in_transaction8789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPEATABLE_in_transaction8810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _READ_in_transaction8812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SERIALIZABLE_in_transaction8832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _savepoint_in_transaction8856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lockTables_in_transaction8861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RELEASE_in_savepoint8875 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _SAVEPOINT_in_savepoint8878 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_savepoint8880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROLLBACK_in_savepoint8899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000000UL,0x2000000000000UL});
		public static readonly BitSet _WORK_in_savepoint8901 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _TO_in_savepoint8904 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _SAVEPOINT_in_savepoint8906 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_savepoint8909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_in_insert8933 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8E1UL,0x615331E9A47D623UL,0xFFF4262C248E86E8UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _LOW_PRIORITY_in_insert8938 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47D623UL,0xFFF0262C248E86E8UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _DELAYED_in_insert8944 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47D623UL,0xFFF0262C248E86E8UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _HIGH_PRIORITY_in_insert8950 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47D623UL,0xFFF0262C248E86E8UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IGNORE_in_insert8956 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E8UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _INTO_in_insert8959 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_insert8966 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x8020000000000UL,0x0UL,0xC0000000UL});
		public static readonly BitSet _insert_columns_in_insert8972 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL,0x0UL,0xC0000000UL});
		public static readonly BitSet _select_in_insert8976 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _insert_values_in_insert8980 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _set_columns_in_insert8988 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _on_dup_key_in_insert8996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_insert_columns9068 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E147FE55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_name_list_in_insert_columns9070 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_insert_columns9073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_in_insert_values9089 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _VALUES_in_insert_values9091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_insert_values9094 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8B1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _insert_default_or_expression_in_insert_values9098 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_insert_values9101 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8B1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _insert_default_or_expression_in_insert_values9105 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_insert_values9109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_insert_default_or_expression9136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_insert_default_or_expression9141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_columns9153 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_assignment_in_set_columns9155 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_set_columns9158 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_assignment_in_set_columns9160 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _ON_in_on_dup_key9182 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _DUPLICATE_in_on_dup_key9184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _KEY_in_on_dup_key9186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _UPDATE_in_on_dup_key9188 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_assignment_in_on_dup_key9192 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_on_dup_key9195 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _column_assignment_in_on_dup_key9197 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _field_name_in_column_assignment9219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _EQUALS_in_column_assignment9221 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8B1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DEFAULT_in_column_assignment9228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_column_assignment9246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_name_in_column_name_list9274 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_column_name_list9277 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _field_name_in_column_name_list9279 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _UPDATE_in_update9304 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615331C9A47D623UL,0xFFFC262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _LOW_PRIORITY_in_update9306 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615331C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IGNORE_in_update9309 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_references_in_update9316 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x8020000000000UL,0x0UL,0xC0000000UL});
		public static readonly BitSet _set_columns_in_update9325 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _WHERE_in_update9330 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_update9332 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _order_by_in_update9350 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _LIMIT_in_update9357 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_update9359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_delete9427 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47DE23UL,0xFFF4262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _LOW_PRIORITY_in_delete9442 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47DE23UL,0xFFF4262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _QUICK_in_delete9448 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47DE23UL,0xFFF4262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IGNORE_in_delete9454 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615331C9A47DE23UL,0xFFF4262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _FROM_in_delete9464 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_delete9472 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x800000UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400004000000UL});
		public static readonly BitSet _DOT_in_delete9475 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _MULT_in_delete9477 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400004000000UL});
		public static readonly BitSet _COMMA_in_delete9485 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_delete9489 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x800000UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400004000000UL});
		public static readonly BitSet _DOT_in_delete9492 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _MULT_in_delete9494 = new BitSet(new ulong[]{0x2UL,0x10000UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400004000000UL});
		public static readonly BitSet _USING_in_delete9507 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_references_in_delete9511 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _WHERE_in_delete9521 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_delete9523 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _order_by_in_delete9538 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _LIMIT_in_delete9546 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_delete9548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simple_table_ref_no_alias_in_delete9675 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x800000UL,0x800UL});
		public static readonly BitSet _DOT_in_delete9678 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _MULT_in_delete9680 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x800UL});
		public static readonly BitSet _COMMA_in_delete9685 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_delete9689 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x800000UL,0x800UL});
		public static readonly BitSet _DOT_in_delete9692 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _MULT_in_delete9694 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x800UL});
		public static readonly BitSet _FROM_in_delete9703 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3C43C8A1UL,0x615231C9A47D623UL,0xFFF8262C249E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_references_in_delete9707 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _WHERE_in_delete9713 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _where_condition_in_delete9715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCK_in_lockTables9775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _TABLES_in_lockTables9777 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _lock_table_ref_in_lockTables9781 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_lockTables9784 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _lock_table_ref_in_lockTables9788 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _UNLOCK_in_lockTables9804 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _TABLES_in_lockTables9806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simple_table_ref_alias_in_lock_table_ref9838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _READ_in_lock_table_ref9844 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _LOCAL_in_lock_table_ref9848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOW_PRIORITY_in_lock_table_ref9873 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _WRITE_in_lock_table_ref9878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_table9915 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x120000000000UL});
		public static readonly BitSet _TEMPORARY_in_create_table9918 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _TABLE_in_create_table9923 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_create_table9928 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NOT_in_create_table9930 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_create_table9932 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_create_table9941 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_create_table9945 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _create_definition_in_create_table9949 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_create_table9952 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _create_definition_in_create_table9956 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_create_table9960 = new BitSet(new ulong[]{0x14040002UL,0x2000004020824UL,0x2000000090UL,0x200900000000000UL,0x8000000000000UL,0x10000100UL,0x1020000UL,0x20040000800UL,0x0UL,0x1004UL});
		public static readonly BitSet _create_table_options_in_create_table9964 = new BitSet(new ulong[]{0x40002UL,0x0UL,0x0UL,0x100000000000UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000800UL});
		public static readonly BitSet _IGNORE_in_create_table9971 = new BitSet(new ulong[]{0x40000UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _REPLACE_in_create_table9975 = new BitSet(new ulong[]{0x40000UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _AS_in_create_table9980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_in_create_table9983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_table_option_in_create_table_options10045 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_create_table_options10049 = new BitSet(new ulong[]{0x14000000UL,0x2000004020824UL,0x2000000090UL,0x200800000000000UL,0x0UL,0x10000100UL,0x1020000UL,0x40000000UL,0x0UL,0x1004UL});
		public static readonly BitSet _create_table_option_in_create_table_options10051 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _set_in_create_table_option10066 = new BitSet(new ulong[]{0x800240020000UL,0x4000000000UL,0x1001010000000000UL,0x20000040000000UL,0x0UL,0x10000060000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10076 = new BitSet(new ulong[]{0x800240020000UL,0x4000000000UL,0x1001010000000000UL,0x20000040000000UL,0x0UL,0x10000060000UL});
		public static readonly BitSet _engine_name_in_create_table_option10079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AUTO_INCREMENT_in_create_table_option10088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _EQUALS_in_create_table_option10090 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_create_table_option10093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AVG_ROW_LENGTH_in_create_table_option10102 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _EQUALS_in_create_table_option10104 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_create_table_option10107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_create_table_option10116 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _CHARACTER_in_create_table_option10119 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SET_in_create_table_option10121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10123 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_create_table_option10126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHECKSUM_in_create_table_option10143 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _set_in_create_table_option10148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_create_table_option10165 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _COLLATE_in_create_table_option10168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10170 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_create_table_option10173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMENT_in_create_table_option10190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_create_table_option10195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONNECTION_in_create_table_option10204 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10206 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_create_table_option10209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATA_in_create_table_option10218 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _DIRECTORY_in_create_table_option10220 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10222 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_create_table_option10225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELAY_KEY_WRITE_in_create_table_option10234 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10236 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _set_in_create_table_option10239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDEX_in_create_table_option10256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _DIRECTORY_in_create_table_option10258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_create_table_option10263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_METHOD_in_create_table_option10272 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x1UL,0x80000UL,0x2000000000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10274 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1UL,0x80000UL,0x2000000000000UL});
		public static readonly BitSet _set_in_create_table_option10277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_ROWS_in_create_table_option10298 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _EQUALS_in_create_table_option10300 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_create_table_option10303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MIN_ROWS_in_create_table_option10312 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _EQUALS_in_create_table_option10314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_create_table_option10317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PACK_KEYS_in_create_table_option10326 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000010UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10328 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL,0x0UL,0x0UL,0x0UL,0x8UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _set_in_create_table_option10331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PASSWORD_in_create_table_option10352 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10354 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_create_table_option10357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ROW_FORMAT_in_create_table_option10366 = new BitSet(new ulong[]{0x0UL,0xA00000UL,0x10020000010UL,0x2UL,0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _EQUALS_in_create_table_option10368 = new BitSet(new ulong[]{0x0UL,0xA00000UL,0x20000010UL,0x2UL,0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _set_in_create_table_option10371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNION_in_create_table_option10404 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E7FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _EQUALS_in_create_table_option10406 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_create_table_option10411 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_create_table_option10415 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_create_table_option10417 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _set_in_engine_name10436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_create_definition10500 = new BitSet(new ulong[]{0x1009800000000UL,0x60000010010012UL,0x8001000004UL,0x800800000002104UL,0x1800000002002UL,0x400000000001C000UL,0x80004000000000UL,0x408000000000000UL,0x1CC800000000002UL,0x100000600002000UL});
		public static readonly BitSet _column_definition_in_create_definition10502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _data_type_in_column_definition10529 = new BitSet(new ulong[]{0x4000002UL,0x20000UL,0x10UL,0x0UL,0x0UL,0x410000000000000UL});
		public static readonly BitSet _NOT_in_column_definition10536 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _NULL_in_column_definition10538 = new BitSet(new ulong[]{0x4000002UL,0x20000UL,0x10UL});
		public static readonly BitSet _NULL_in_column_definition10544 = new BitSet(new ulong[]{0x4000002UL,0x20000UL,0x10UL});
		public static readonly BitSet _DEFAULT_in_column_definition10551 = new BitSet(new ulong[]{0x69AE70E13F910FA0UL,0xAF65F8D6DFA97EBUL,0xCFD2E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF0262C258E86F4UL,0xAD8FEEF572DE3FEBUL,0x3E01DEB9EFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _literal_in_column_definition10553 = new BitSet(new ulong[]{0x4000002UL,0x20000UL});
		public static readonly BitSet _AUTO_INCREMENT_in_column_definition10563 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _COMMENT_in_column_definition10572 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_column_definition10574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONSTRAINT_in_column_definition10649 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D723UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEF8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A6F7EUL});
		public static readonly BitSet _ident_in_column_definition10651 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x100UL,0x0UL,0x0UL,0x4000000000UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _PRIMARY_in_column_definition10663 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _KEY_in_column_definition10665 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10670 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10672 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10676 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10678 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10683 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOREIGN_in_column_definition10697 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _KEY_in_column_definition10699 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10705 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10710 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10712 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10721 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10723 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10728 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000000UL});
		public static readonly BitSet _reference_definition_in_column_definition10730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNIQUE_in_column_definition10741 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _set_in_column_definition10743 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10464A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10755 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10758 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10770 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10772 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10776 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10778 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10783 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIMARY_in_column_definition10797 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _KEY_in_column_definition10799 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10804 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10806 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10810 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10812 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10817 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOREIGN_in_column_definition10829 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _KEY_in_column_definition10831 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10837 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10842 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10844 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10853 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10855 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10860 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000000UL});
		public static readonly BitSet _reference_definition_in_column_definition10862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNIQUE_in_column_definition10871 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _set_in_column_definition10873 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10464A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10888 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10900 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10902 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10906 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10908 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10913 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_column_definition10925 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10464A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10935 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10941 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10943 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10947 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10949 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition10954 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition10956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_column_definition10966 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x2000UL});
		public static readonly BitSet _set_in_column_definition10976 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF8262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_column_definition10988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition10991 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10993 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_column_definition10997 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_column_definition10999 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition11004 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _index_type_in_column_definition11008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHECK_in_column_definition11018 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_column_definition11020 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_column_definition11022 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_column_definition11024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_in_data_type11046 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_data_type11053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11055 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11066 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x80000000000000UL,0x0UL,0x800000000010000UL});
		public static readonly BitSet _LPAREN_in_data_type11118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11120 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11123 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000000000UL,0x0UL,0x800000000010000UL});
		public static readonly BitSet _set_in_data_type11129 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _ZEROFILL_in_data_type11142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11150 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL,0x0UL,0x0UL,0x80000000000000UL,0x0UL,0x800000000010000UL});
		public static readonly BitSet _LPAREN_in_data_type11196 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11200 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_data_type11202 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11206 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000000000UL,0x0UL,0x800000000010000UL});
		public static readonly BitSet _set_in_data_type11215 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000000UL});
		public static readonly BitSet _ZEROFILL_in_data_type11228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_data_type11236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIME_in_data_type11243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_in_data_type11250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_data_type11256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _YEAR_in_data_type11262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TINYBLOB_in_data_type11269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BLOB_in_data_type11275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEDIUMBLOB_in_data_type11282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONGBLOB_in_data_type11288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11294 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_data_type11312 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11316 = new BitSet(new ulong[]{0x2UL,0x804UL});
		public static readonly BitSet _charset_in_data_type11321 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _collate_in_data_type11329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_data_type11356 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_data_type11358 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11365 = new BitSet(new ulong[]{0x1000000002UL,0x804UL});
		public static readonly BitSet _BINARY_in_data_type11399 = new BitSet(new ulong[]{0x2UL,0x804UL});
		public static readonly BitSet _charset_in_data_type11407 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _collate_in_data_type11415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_data_type11423 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_data_type11442 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_data_type11446 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_data_type11449 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_data_type11453 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_data_type11457 = new BitSet(new ulong[]{0x2UL,0x804UL});
		public static readonly BitSet _charset_in_data_type11463 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _collate_in_data_type11471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_in_charset11485 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SET_in_charset11487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_charset11491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLATE_in_collate11516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _set_in_collate11521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REFERENCES_in_reference_definition11547 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_reference_definition11549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_reference_definition11551 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_reference_definition11553 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_reference_definition11557 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _index_col_name_in_reference_definition11559 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_reference_definition11564 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x10UL,0x4UL});
		public static readonly BitSet _MATCH_in_reference_definition11570 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _FULL_in_reference_definition11572 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _MATCH_in_reference_definition11576 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _PARTIAL_in_reference_definition11578 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _MATCH_in_reference_definition11582 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _SIMPLE_in_reference_definition11584 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _ON_in_reference_definition11593 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _DELETE_in_reference_definition11595 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8000000020000UL});
		public static readonly BitSet _reference_option_in_reference_definition11597 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _ON_in_reference_definition11606 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _UPDATE_in_reference_definition11608 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000UL,0x0UL,0x8000000020000UL});
		public static readonly BitSet _reference_option_in_reference_definition11610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RESTRICT_in_reference_option11624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASCADE_in_reference_option11629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_reference_option11634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _NULL_in_reference_option11636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NO_in_reference_option11641 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ACTION_in_reference_option11643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_index_col_name11654 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x200UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_index_col_name11658 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _INT_NUMBER_in_index_col_name11662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_index_col_name11664 = new BitSet(new ulong[]{0x80002UL,0x0UL,0x200UL});
		public static readonly BitSet _set_in_index_col_name11669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_index_type11691 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _set_in_index_type11693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IFNULL_in_ifnull_expr11716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_ifnull_expr11718 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_ifnull_expr11720 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_ifnull_expr11722 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_ifnull_expr11724 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_ifnull_expr11726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULLIF_in_nullif_expr11737 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_nullif_expr11739 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_nullif_expr11741 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_nullif_expr11743 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_nullif_expr11745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_nullif_expr11747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AVG_in_functionCall11764 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11766 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11768 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_AND_in_functionCall11791 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11793 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_OR_in_functionCall11815 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11817 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11819 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_XOR_in_functionCall11839 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11841 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11843 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_functionCall11863 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11865 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11867 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _AS_in_functionCall11869 = new BitSet(new ulong[]{0x1000000000UL,0x60000000000002UL,0x4UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000000000UL,0x4000000000000UL,0x10000UL});
		public static readonly BitSet _cast_data_type_in_functionCall11871 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONCAT_in_functionCall11895 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11897 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall11899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functionCall11919 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11921 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _MULT_in_functionCall11923 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functionCall11943 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11945 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall11947 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functionCall11968 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _DISTINCT_in_functionCall11972 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall11974 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall11976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_ADD_in_functionCall11996 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall11998 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12002 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _INTERVAL_in_functionCall12006 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12010 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_functionCall12012 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_SUB_in_functionCall12040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12042 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12046 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12048 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _INTERVAL_in_functionCall12050 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12054 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_functionCall12056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IFNULL_in_functionCall12082 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12084 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12088 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12090 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12094 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_CONCAT_in_functionCall12120 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12122 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3847C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DISTINCT_in_functionCall12128 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall12131 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000UL,0x100080000000UL});
		public static readonly BitSet _order_by_in_functionCall12136 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x100080000000UL});
		public static readonly BitSet _SEPARATOR_in_functionCall12143 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x0UL,0x100000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _text_string_in_functionCall12145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MAX_in_functionCall12185 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12187 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3847C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DISTINCT_in_functionCall12189 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MID_in_functionCall12218 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12220 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12222 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12224 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12226 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12228 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12230 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MIN_in_functionCall12251 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12253 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3847C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DISTINCT_in_functionCall12255 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULLIF_in_functionCall12282 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12284 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12288 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12290 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12294 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SESSION_USER_in_functionCall12320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STD_in_functionCall12342 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12344 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12346 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STDDEV_in_functionCall12366 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12368 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STDDEV_POP_in_functionCall12390 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12392 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12394 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STDDEV_SAMP_in_functionCall12414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12416 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUM_in_functionCall12438 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12440 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3847C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DISTINCT_in_functionCall12442 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12445 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEM_USER_in_functionCall12471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12473 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRIM_in_functionCall12493 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12495 = new BitSet(new ulong[]{0x79BE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C25BE86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xDC3DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _BOTH_in_functionCall12505 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FDE23UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _LEADING_in_functionCall12511 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FDE23UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _TRAILING_in_functionCall12517 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FDE23UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12526 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _FROM_in_functionCall12529 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12533 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _expr_in_functionCall12564 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _FROM_in_functionCall12572 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12576 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIANCE_in_functionCall12641 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12643 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12645 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_POP_in_functionCall12665 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12667 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_SAMP_in_functionCall12689 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12691 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12693 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADDDATE_in_functionCall12716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12718 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12722 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall12724 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _INTERVAL_in_functionCall12736 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12740 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_functionCall12742 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_functionCall12771 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURDATE_in_functionCall12799 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_DATE_in_functionCall12821 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12824 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURTIME_in_functionCall12846 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12848 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_TIME_in_functionCall12869 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12872 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTRACT_in_functionCall12894 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12896 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_functionCall12898 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _FROM_in_functionCall12900 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12902 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GET_FORMAT_in_functionCall12924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12926 = new BitSet(new ulong[]{0x0UL,0x60000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _DATE_in_functionCall12935 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _TIME_in_functionCall12941 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _DATETIME_in_functionCall12947 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall12955 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOW_in_functionCall12987 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall12989 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall12991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_TIMESTAMP_in_functionCall13012 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13015 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POSITION_in_functionCall13037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13039 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13043 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _IN_in_functionCall13045 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13049 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBDATE_in_functionCall13075 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13077 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13081 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall13083 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13092 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _INTERVAL_in_functionCall13121 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13125 = new BitSet(new ulong[]{0x0UL,0xF800000000000000UL,0x0UL,0xF000000000UL,0x0UL,0x40E080000UL,0x400000000000UL,0xC000000000UL,0x0UL,0x300100000000000UL});
		public static readonly BitSet _timeUnit_in_functionCall13127 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSTR_in_functionCall13164 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _SUBSTRING_in_functionCall13170 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13173 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13181 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x800UL});
		public static readonly BitSet _COMMA_in_functionCall13189 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13193 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall13195 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E147FE55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13199 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _FROM_in_functionCall13232 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13236 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x40UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _FOR_in_functionCall13239 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13243 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSDATE_in_functionCall13286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13288 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_ADD_in_functionCall13310 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13312 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x0UL,0x1000000400UL,0x0UL,0x402080000UL,0x400000000000UL,0x4000000000UL,0x0UL,0x100100000000000UL});
		public static readonly BitSet _timestampUnit_in_functionCall13317 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13324 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_DIFF_in_functionCall13366 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13368 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x0UL,0x1000000400UL,0x0UL,0x402080000UL,0x400000000000UL,0x4000000000UL,0x0UL,0x100100000000000UL});
		public static readonly BitSet _timestampUnit_in_functionCall13373 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13380 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall13387 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UTC_DATE_in_functionCall13422 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13425 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UTC_TIMESTAMP_in_functionCall13450 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13453 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UTC_TIME_in_functionCall13477 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall13480 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall13482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_conflicts_in_functionCall13506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_reserved_in_functionCall13511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_functionCall13522 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _parenOptExprList_in_functionCall13526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASCII_in_functionCall_conflicts13561 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13563 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13565 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARSET_in_functionCall_conflicts13585 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13587 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13589 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COALESCE_in_functionCall_conflicts13609 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13611 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13613 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLATION_in_functionCall_conflicts13633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13635 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13637 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTAINS_in_functionCall_conflicts13657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13659 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13663 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts13665 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATABASE_in_functionCall_conflicts13694 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13696 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GEOMETRYCOLLECTION_in_functionCall_conflicts13716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13718 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13720 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_functionCall_conflicts13741 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13743 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13747 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts13749 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13753 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts13755 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LINESTRING_in_functionCall_conflicts13785 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13787 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13789 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MICROSECOND_in_functionCall_conflicts13810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13812 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13814 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOD_in_functionCall_conflicts13834 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13836 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13840 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts13842 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13846 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTILINESTRING_in_functionCall_conflicts13870 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13872 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTIPOINT_in_functionCall_conflicts13895 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13897 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MULTIPOLYGON_in_functionCall_conflicts13920 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13922 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts13924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OLD_PASSWORD_in_functionCall_conflicts13945 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13947 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13949 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PASSWORD_in_functionCall_conflicts13969 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13971 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13973 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts13975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POINT_in_functionCall_conflicts13993 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts13995 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts13999 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14001 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14005 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POLYGON_in_functionCall_conflicts14030 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14032 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_conflicts14034 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUARTER_in_functionCall_conflicts14055 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14057 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPEAT_in_functionCall_conflicts14079 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14081 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14085 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14087 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_functionCall_conflicts14115 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14117 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14121 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14123 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14127 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14129 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14133 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_functionCall_conflicts14160 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14162 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14166 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14168 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14172 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WEEK_in_functionCall_conflicts14196 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_conflicts14198 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14202 = new BitSet(new ulong[]{0x0UL,0x10000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_functionCall_conflicts14205 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_conflicts14209 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_conflicts14213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_functionCall_reserved14246 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14248 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_reserved14250 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _USING_in_functionCall_reserved14253 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _ID_in_functionCall_reserved14258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _STRING_in_functionCall_reserved14262 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CURRENT_USER_in_functionCall_reserved14290 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14293 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_functionCall_reserved14321 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14323 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DAY_in_functionCall_reserved14345 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14347 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HOUR_in_functionCall_reserved14369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14371 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14373 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_in_functionCall_reserved14393 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14395 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14403 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_reserved14405 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14409 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_reserved14411 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14415 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _COMMA_in_functionCall_reserved14417 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERVAL_in_functionCall_reserved14459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14461 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _exprList_in_functionCall_reserved14463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LEFT_in_functionCall_reserved14483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14485 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUTE_in_functionCall_reserved14507 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14509 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14511 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MONTH_in_functionCall_reserved14531 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14533 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RIGHT_in_functionCall_reserved14555 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14557 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14559 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SECOND_in_functionCall_reserved14579 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14581 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIME_in_functionCall_reserved14603 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14605 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESTAMP_in_functionCall_reserved14627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14629 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14631 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USER_in_functionCall_reserved14651 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14653 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _YEAR_in_functionCall_reserved14673 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _LPAREN_in_functionCall_reserved14675 = new BitSet(new ulong[]{0x79AE72F13F910FA0UL,0xAF65F8D6DFA9FEBUL,0xCFD6E6FA3843C8A1UL,0x7152F1D9E4FD623UL,0xFFF8262C259E86F4UL,0xADDFEEF573DE3FFBUL,0x3E01DEB9FFFF046BUL,0xDBD7E1477E55DFB7UL,0xD83DBDFFFDFEAB01UL,0x41661FB17A4A4F7FUL});
		public static readonly BitSet _expr_in_functionCall_reserved14677 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _RPAREN_in_functionCall_reserved14679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_database14705 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _database_or_schema_in_drop_database14707 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_database14711 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_database14713 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_drop_database14718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_database_or_schema14739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_event14756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _EVENT_in_drop_event14758 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_event14762 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_event14764 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_drop_event14769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_routine14780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4000UL,0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _set_in_drop_routine14782 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_routine14794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_routine14796 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_drop_routine14801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_index14812 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x3000UL});
		public static readonly BitSet _set_in_drop_index14814 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _INDEX_in_drop_index14825 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_drop_index14827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _ON_in_drop_index14829 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_drop_index14831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_logfile14842 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _LOGILE_in_drop_logfile14844 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _GROUP_in_drop_logfile14846 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_drop_logfile14848 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _ENGINE_in_drop_logfile14850 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL,0x0UL,0x0UL,0x400000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _EQUALS_in_drop_logfile14854 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _set_in_drop_logfile14859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_server14879 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _SERVER_in_drop_server14881 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_server14885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_server14887 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_drop_server14892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table14903 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x160000000000UL});
		public static readonly BitSet _TEMPORARY_in_drop_table14907 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x60000000000UL});
		public static readonly BitSet _set_in_drop_table14912 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_table14924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_table14926 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_obj_ref_no_alias_list_in_drop_table14931 = new BitSet(new ulong[]{0x400000000000002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _cascade_or_restrict_in_drop_table14935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simple_table_ref_no_alias_in_simple_obj_ref_no_alias_list14949 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_simple_obj_ref_no_alias_list14953 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_simple_obj_ref_no_alias_list14955 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _DROP_in_drop_trigger14977 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x2000000000000000UL});
		public static readonly BitSet _TRIGGER_in_drop_trigger14979 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_trigger14983 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_trigger14985 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_obj_ref_no_alias_in_drop_trigger14990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view15001 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _VIEW_in_drop_view15003 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _IF_in_drop_view15007 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _EXISTS_in_drop_view15009 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615271C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_obj_ref_no_alias_list_in_drop_view15014 = new BitSet(new ulong[]{0x400000000000002UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _cascade_or_restrict_in_drop_view15018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_cascade_or_restrict15030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RENAME_in_rename_database15047 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _set_in_rename_database15049 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_rename_database15061 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _TO_in_rename_database15063 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _ident_in_rename_database15067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RENAME_in_rename_table15078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _TABLE_in_rename_table15080 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _table_src_to_dst_list_in_rename_table15082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simple_table_ref_no_alias_in_table_src_to_dst_list15095 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _TO_in_table_src_to_dst_list15097 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_table_src_to_dst_list15101 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_table_src_to_dst_list15108 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_table_src_to_dst_list15112 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _TO_in_table_src_to_dst_list15114 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_table_src_to_dst_list15118 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _TRUNCATE_in_truncate_table15132 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBE78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _TABLE_in_truncate_table15136 = new BitSet(new ulong[]{0x49AE00C13F910FA0UL,0x87200896DFA97E9UL,0xCCD2E6FA3843C8A1UL,0x615231C9A47D623UL,0xFFF0262C248E86E0UL,0x810FEEF5524E3FCBUL,0x3E01DEB8EFFF046BUL,0xDBD1E1477E15D5B7UL,0x583DBC78F986AB01UL,0x1661E10424A4F7EUL});
		public static readonly BitSet _simple_table_ref_no_alias_in_truncate_table15141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_user15152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _USER_in_create_user15154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _user_specification_list_in_create_user15156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _user_specification_in_user_specification_list15167 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _COMMA_in_user_specification_list15171 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _user_specification_in_user_specification_list15173 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _USER_HOST_or_ID_or_STRING_in_user_specification15187 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _IDENTIFIED_in_user_specification15191 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _BY_in_user_specification15193 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x1000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _PASSWORD_in_user_specification15197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_in_user_specification15202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred2_MySQL51Parser3453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _join_condition_on_in_synpred3_MySQL51Parser3580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NATURAL_in_synpred4_MySQL51Parser3643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subselect_in_expr_rhs_in_synpred5_MySQL51Parser7094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERVAL_in_synpred6_MySQL51Parser7795 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFF7FFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0xFFFFFFFFFFFFFFFFUL,0x7FFFFUL});
		public static readonly BitSet _set_in_synpred6_MySQL51Parser7797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_synpred7_MySQL51Parser7852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subselect_in_synpred8_MySQL51Parser7865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_synpred10_MySQL51Parser8252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERVAL_in_synpred11_MySQL51Parser12732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERVAL_in_synpred12_MySQL51Parser13118 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace MySqlParser
