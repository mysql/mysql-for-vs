<topic id="34e3033f-b986-4073-95c8-945f73aa79b0" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="connector-net-programming-tutorial">
      <title>Tutorial: An Introduction to Connector/NET Programming</title>
      <content>
        <autoOutline />
        <para>
    This section provides a gentle introduction to programming with
    Connector/NET. The example code is written in C#, and is designed to
    work on both Microsoft .NET Framework and Mono.
  </para>
        <para>
    This tutorial is designed to get you up and running with
    Connector/NET as quickly as possible, it does not go into detail on
    any particular topic. However, the following sections of this manual
    describe each of the topics introduced in this tutorial in more
    detail. In this tutorial you are encouraged to type in and run the
    code, modifying it as required for your setup.
  </para>
        <para>
    This tutorial assumes you have MySQL and Connector/NET already
    installed. It also assumes that you have installed the World example
    database, which can be downloaded from the
    <externalLink><linkText>MySQL Documentation
    page</linkText><linkUri>http://dev.mysql.com/doc/</linkUri></externalLink>. You can also find details on how to install the
    database on the same page.
  </para>
        <alert class="note">
          <para>
      Before compiling the example code make sure that you have added
      References to your project as required. The References required
      are <literal>System</literal>, <literal>System.Data</literal> and
      <literal>MySql.Data</literal>.
    </para>
        </alert>
      </content>
    </section>
    <section address="connector-net-programming-tutorial-connection">
      <title>The MySqlConnection Object</title>
      <content>
        <para>
      For your Connector/NET application to connect to a MySQL database
      it needs to establish a connection. This is achieved through the
      use of a <literal>MySqlConnection</literal> object.
    </para>
        <para>
      The MySqlConnection constructor takes a connection string as one
      of its parameters. The connection string provides necessary
      information to make the connection to the MySQL database. The
      connection string is discussed more fully in
      <link xlink:href="8b7d06e8-0177-4dd0-acca-f9c9caaa1072#connector-net-programming-connecting">Connecting to MySQL Using Connector/NET</link>. A
      reference containing a list of supported connection string options
      can also be found in
      <link xlink:href="c26b6c1a-1652-4d9d-ac74-96cee9531a3b"></link>.
    </para>
        <para>
      The following code shows how to create a connection object.
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial1
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();
            // Perform databse operations
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      When the <literal>MySqlConnection</literal> constructor is invoked
      it returns a connection object, which is used for subsequent
      database operations. The first operation in this example is to
      open the connection. This needs to be done before further
      operations take place. Before the application exits the connection
      to the database needs to be closed by calling
      <literal>Close</literal> on the connection object.
    </para>
        <para>
      Sometimes an attempt to perform an <literal>Open</literal> on a
      connection object can fail, this will generate an exception that
      can be handled via standard exception handling code.
    </para>
        <para>
      In this section you have learned how to create a connection to a
      MySQL database, and open and close the corresponding connection
      object.
    </para>
      </content>
    </section>
    <section address="connector-net-programming-tutorial-sql-command">
      <title>The MySqlCommand Object</title>
      <content>
        <para>
      Once a connection has been established with the MySQL database,
      the next step is do carry out the desired database operations.
      This can be achieved through the use of the
      <literal>MySqlCommand</literal> object.
    </para>
        <para>
      You will see how to create a <literal>MySqlCommand</literal>
      object. Once it has been created there are three main methods of
      interest that you can call:
    </para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>ExecuteReader</legacyBold> - used to query
          the database. Results are usually returned in a
          <literal>MySqlDataReader</literal> object, created by
          <literal>ExecuteReader</literal>.
        </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>ExecuteNonQuery</legacyBold> - used to
          insert and delete data.
        </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>ExecuteScalar</legacyBold> - used to
          return a single value.
        </para>
          </listItem>
        </list>
        <para>
      Once a <literal>MySqlCommand</literal> object has been created,
      you will call one of the above methods on it to carry out a
      database operation, such as perform a query. The results are
      usually returned into a <literal>MySqlDataReader</literal> object,
      and then processed, for example the results might be displayed.
      The following code demonstrates how this could be done.
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial2
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();

            string sql = "SELECT Name, HeadOfState FROM Country WHERE Continent='Oceania'";
            MySqlCommand cmd = new MySqlCommand(sql, conn);
            MySqlDataReader rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                Console.WriteLine(rdr[0]+" -- "+rdr[1]);
            }

            rdr.Close();
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      When a connection has been created and opened, the code then
      creates a <literal>MySqlCommand</literal> object. Note that the
      SQL query to be executed is passed to the
      <literal>MySqlCommand</literal> constructor. The
      <literal>ExecuteReader</literal> method is then used to generate a
      <literal>MySqlReader</literal> object. The
      <literal>MySqlReader</literal> object contains the results
      generated by the SQL executed on the command object. Once the
      results have been obtained in a <literal>MySqlReader</literal>
      object, the results can be processed. In this case the information
      is simply printed out as part of a <literal>while</literal> loop.
      Finally, the <literal>MySqlReader</literal> object is displosed of
      by running its <literal>Close</literal> method on it.
    </para>
        <para>
      In the next example you will see how to use the
      <literal>ExecuteNonQuery</literal> method.
    </para>
        <para>
      The procedure for performing an <literal>ExecuteNonQuery</literal>
      method call is simpler, as there is no need to create an object to
      store results. This is because <literal>ExecuteNonQuery</literal>
      is only used for inserting, updating and deleting data. The
      following example illustrates a simple update to the Country
      table:
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial3
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();

            string sql = "INSERT INTO Country (Name, HeadOfState, Continent) VALUES ('Disneyland','Mickey Mouse', 'North America')";
            MySqlCommand cmd = new MySqlCommand(sql, conn);
            cmd.ExecuteNonQuery();

            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      The query is constructed, the command object created and the
      <literal>ExecuteNonQuery</literal> method called on the command
      object. You can access your MySQL database with the MySQL Client
      program and verify that the update was carried out correctly.
    </para>
        <para>
      Finally, you will see how the <literal>ExecuteScalar</literal>
      method can be used to return a single value. Again, this is
      straightforward, as a <literal>MySqlDataReader</literal> object is
      not required to store results, a simple variable will do. The
      following code illustrates how to use
      <literal>ExecuteScalar</literal>:
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial4
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();

            string sql = "SELECT COUNT(*) FROM Country";
            MySqlCommand cmd = new MySqlCommand(sql, conn);
            object result = cmd.ExecuteScalar();
            if (result != null)
            {
                int r = Convert.ToInt32(result);
                Console.WriteLine("Number of countries in the World database is: " + r);
            }

            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      This example uses a simple query to count the rows in the Country
      table. The result is obtained by calling
      <literal>ExecuteScaler</literal> on the command object.
    </para>
      </content>
    </section>
    <section address="connector-net-programming-tutorial-data-adapter">
      <title>Working with Decoupled Data</title>
      <content>
        <para>
      Previously, when using MySqlDataReader, the connection to the
      database was continually maintained, unless explicitly closed. It
      is also possible to work in a manner where a connection is only
      established when needed. For example, in this mode, a connection
      could be established in order to read a chunk of data, the data
      could then be modified by the application as required. A
      connection could then be reestablished only if and when the
      application needs to write data back to the database. This
      decouples the working data set from the database.
    </para>
        <para>
      This decouple mode of working with data is supported by
      Connector/NET. There are several parts involved in allowing this
      method to work:
    </para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>Data Set</legacyBold> - The Data Set is
          the area in which data is loaded in order to read or modify
          it. A <literal>DataSet</literal> object is instantiated, which
          can store multiple tables of data.
        </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Data Adapter</legacyBold> - The Data
          Adapter is the interface between the Data Set and the database
          itself. The Data Adapter is responsible for efficiently
          managing connections to the database, opening and closing them
          as required. The Data Adapter is created by instantiating an
          object of the <literal>MySqlDataAdapter</literal> class. The
          <literal>MySqlDataAdapter</literal> object has two main
          methods: <literal>Fill</literal> which reads data into the
          Data Set, and <literal>Update</literal>, which writes data
          from the Data Set to the database.
        </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Command Builder</legacyBold> - The Command
          Builder is a support object. The Command Builder works in
          conjunction with the Data Adapter. When a
          <literal>MySqlDataAdapter</literal> object is created it is
          typically given an initial SELECT statement. From this SELECT
          statement the Command Builder can work out the corresponding
          INSERT, UPDATE and DELETE statements that would be required
          should the database need to be updated. To create the Command
          Builder an object of the class
          <literal>MySqlCommandBuilder</literal> is created.
        </para>
          </listItem>
        </list>
        <para>
      Each of these classes will now be discussed in more detail.
    </para>
        <para>
          <legacyBold>Instantiating a DataSet object</legacyBold>
        </para>
        <para>
      A <literal>DataSet</literal> object can be created simply, as
      shown in the following example code snippet:
    </para>
        <code>DataSet dsCountry;
...
dsCountry = new DataSet();</code>
        <para>
      Although this creates the <literal>DataSet</literal> object it has
      not yet filled it with data. For that a Data Adapter is required.
    </para>
        <para>
          <legacyBold>Instantiating a MySqlDataAdapter
      object</legacyBold>
        </para>
        <para>
      The <literal>MySqlDataAdapter</literal> can be created as
      illustrated by the following example:
    </para>
        <code>MySqlDataAdapter daCountry;
...
string sql = "SELECT Code, Name, HeadOfState FROM Country WHERE Continent='North America'";
daCountry = new MySqlDataAdapter (sql, conn);</code>
        <para>
      Note, the <literal>MySqlDataAdapter</literal> is given the SQL
      specifying the data you wish to work with.
    </para>
        <para>
          <legacyBold>Instantiating a MySqlCommandBuilder
      object</legacyBold>
        </para>
        <para>
      Once the <literal>MySqlDataAdapter</literal> has been created, it
      is necessary to generate the additional statements required for
      inserting, updating and deleting data. There are several ways to
      do this, but in this tutorial you will see how this can most
      easily be done with <literal>MySqlCommandBuilder</literal>. The
      following code snippet ilustrates how this is done:
    </para>
        <codeInline>MySqlCommandBuilder cb = new MySqlCommandBuilder(daCountry);</codeInline>
        <para>
      Note that the <literal>MySqlDataAdapter</literal> object is passed
      as a parameter to the command builder.
    </para>
        <para>
          <legacyBold>Filling the Data Set</legacyBold>
        </para>
        <para>
      In order to do anything useful with the data from your datbase,
      you need to load it into a Data Set. This is one of the jobs of
      the <literal>MySqlDataAdapter</literal> object, and is carried out
      with its <literal>Fill</literal> method. The following example
      code illustrates this:
    </para>
        <code>DataSet dsCountry;
...
dsCountry = new DataSet();
...
daCountry.Fill(dsCountry, "Country");</code>
        <para>
      Note the <literal>Fill</literal> method is a
      <literal>MySqlDataAdapter</literal> method, the Data Adapter knows
      how to establish a connec tion with the database and retrieve the
      required data, and then populates the Data Set when the
      <literal>Fill</literal> method is called. The second parameter
       is the table in the Data Set to update.
    </para>
        <para>
          <legacyBold>Updating the Data Set</legacyBold>
        </para>
        <para>
      The data in the Data Set can now be manipulated by the application
      as required. At some point, changes to data will need to be
      written back to the database. This is achieved through a
      <literal>MySqlDataAdapter</literal> method, the
      <literal>Update</literal> method.
    </para>
        <code>
daCountry.Update(dsCountry, "Country");
</code>
        <para>
      Again, the Data Set and the table within the Data Set to update
      are specified.
    </para>
        <para>
          <legacyBold>Working Example</legacyBold>
        </para>
        <para>
      The interactions between the <literal>DataSet</literal>,
      <literal>MySqlDataAdapter</literal> and
      <literal>MySqlCommandBuilder</literal> classes can be a little
      confusing, so their operation can perhaps be best illustrated by
      working code.
    </para>
        <para>
      In this example, data from the World database is read into a Data
      Grid View control. Here, the data can be viewed and changed before
      clicking an update button. The update button then activates code
      to write changes back to the database. The code uses the
      principles explained above. The application was built using the
      Microsoft Visual Studio in order to place and create the user
      interface controls, but the main code that uses the key classes
      descibed above is shown below, and is portable.
    </para>
        <code>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using MySql.Data;
using MySql.Data.MySqlClient;

namespace WindowsFormsApplication5
{
    public partial class Form1 : Form
    {
        MySqlDataAdapter daCountry;
        DataSet dsCountry;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

            string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
            MySqlConnection conn = new MySqlConnection(connStr);
            try
            {
                label2.Text = "Connecting to MySQL...";

                string sql = "SELECT Code, Name, HeadOfState FROM Country WHERE Continent='North America'";
                daCountry = new MySqlDataAdapter (sql, conn);
                MySqlCommandBuilder cb = new MySqlCommandBuilder(daCountry);

                dsCountry = new DataSet();
                daCountry.Fill(dsCountry, "Country");
                dataGridView1.DataSource = dsCountry;
                dataGridView1.DataMember = "Country";
            }
            catch (Exception ex)
            {
                label2.Text = ex.ToString();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            daCountry.Update(dsCountry, "Country");
            label2.Text = "MySQL Database Updated!";
        }

    }
}</code>
        <para>
      The application running is shown below:
    </para>
        <mediaLink>
          <para />
          <caption>World Database Application</caption>
          <image xlink:href="connector-net-programming-tutorial-1" />
        </mediaLink>
        <para />
      </content>
    </section>
    <section address="connector-net-programming-tutorial-parameters">
      <title>Working with Parameters</title>
      <content>
        <para>
      This part of the tutorial shows you how to use parameters in your
      Connector/NET application.
    </para>
        <para>
      Although it is possible to build SQL query strings directly from
      user input, this is not advisable as it does not prevent from
      erroneous or malicious information being entered. It is safer to
      use parameters as they will be processed as field data only. For
      example, imagine the following query was contructed from user
      input:
    </para>
        <codeInline>string sql = "SELECT Name, HeadOfState FROM Country WHERE Continent = "+user_continent;</codeInline>
        <para>
      If the string <literal>user_continent</literal> came from a Text
      Box control, there would potentially be no control over the string
      enetred by the user. The user could enter a string that generates
      a run time error, or in the worst case actually harms the system.
      When using parameters it is not possible to do this because a
      parameter is only ever treated as a field parameter, rather than
      an arbitrary piece of SQL code.
    </para>
        <para>
      The same query written user a parameter for user input would be:
    </para>
        <codeInline>string sql = "SELECT Name, HeadOfState FROM Country WHERE Continent = @Continent";</codeInline>
        <para>
      Note that the parameter is preceded by an '@' symbol to indicate
      it is to be treated as a parameter.
    </para>
        <para>
      As well as marking the position of the parameter in the query
      string, it is necessary to create a parameter object that can be
      passed to the Command object. In Connector/NET the class
      <literal>MySqlParameter</literal> is used for this purpose. The
      use of <literal>MySqlParameter</literal> is best illustrated by a
      small code snippet:
    </para>
        <code>MySqlParameter param = new MySqlParameter();
param.ParameterName = "@Continent";
param.Value = "North America";
cmd.Parameters.Add(param);</code>
        <para>
      In this example the string "North America" is supplied as the
      parameter value statically, but in a more practical example it
      would come from a user input control. Once the parameter has its
      name and value set it needs to be added to the Command object
      using the <literal>Add</literal> method.
    </para>
        <para>
      A further example illustrates this:
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial5
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();

            string sql = "SELECT Name, HeadOfState FROM Country WHERE Continent=@Continent";
            MySqlCommand cmd = new MySqlCommand(sql, conn);

            Console.WriteLine("Enter a continent e.g. 'North America', 'Europe': ");
            string user_input = Console.ReadLine();

            MySqlParameter param = new MySqlParameter();
            param.ParameterName = "@Continent";
            param.Value = user_input;
            cmd.Parameters.Add(param);

            MySqlDataReader rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                Console.WriteLine(rdr["Name"]+" --- "+rdr["HeadOfState"]);
            }

            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      In this part of the tutorial you have see how to use parameters to
      make your code more secure.
    </para>
      </content>
    </section>
    <section address="connector-net-programming-tutorial-stored-procedures">
      <title>Working with Stored Procedures</title>
      <content>
        <para>
      In this section you will see how to work with Stored Procedures.
      This section assumes you have a basic understanding of what a
      Stored Procedure is, and how to create one.
    </para>
        <para>
      For the purposes of this tutorial, you will create a simple Stored
      Procedure to see how it can be called from Connector/NET. In the
      MySQL Client program, connect to the World database and enter the
      following Stored Procedure:
    </para>
        <code>DELIMITER //
CREATE PROCEDURE country_hos
(IN con CHAR(20))
BEGIN
  SELECT Name, HeadOfState FROM Country
  WHERE Continent = con;
END //
DELIMITER ;</code>
        <para>
      Test the Stored Procedure wors as expec ted by typing the
      following into the MySQL Client program:
    </para>
        <codeInline>CALL country_hos('Europe');</codeInline>
        <para>
      Note that The Stored Routine takes a single parameter, which is
      the continent you wish to restrict your search to.
    </para>
        <para>
      Having confirmed that the Stored Procedure is present and correct
      you can now move on to seeing how it can be accessed from
      Connector/NET.
    </para>
        <para>
      Calling a Stored Procedure from your Connector/NET application is
      similar to techniques you have seen earlier in this tutorial. A
      <literal>MySqlCommand</literal> object is created, but rather than
      taking a SQL query as a parameter it takes the name of the Stored
      Procedure to call. The <literal>MySqlCommand</literal> object also
      needs to be set to the type of Stored Procedure. This is
      illustrated by the following code snippet:
    </para>
        <code>string rtn = "country_hos";
MySqlCommand cmd = new MySqlCommand(rtn, conn);
cmd.CommandType = CommandType.StoredProcedure;</code>
        <para>
      In this case you also need to pass a parameter to the Stored
      Procedure. This can be achieved using the techniques seen in the
      previous section on parameters,
      <link xlink:href="34e3033f-b986-4073-95c8-945f73aa79b0#connector-net-programming-tutorial-parameters">Working with Parameters</link>.
      This is shown in the following code snippet:
    </para>
        <code>MySqlParameter param = new MySqlParameter();
param.ParameterName = "@con";
param.Value = "Europe";
cmd.Parameters.Add(param);</code>
        <para>
      The value of the parameter <literal>@con</literal> could more
      realistically have come from a user input control, but for
      simplicity it is set as a static string in this example.
    </para>
        <para>
      At this point everything is set up and all that now needs to be
      done is to call the routine. This can be achieved using techniques
      also learned in earlier sections, but in this case the
      <literal>ExecuteReader</literal> method of the
      <literal>MySqlCommand</literal> object is used.
    </para>
        <para>
      Complete working code for the Stored Procedure example is shown
      below:
    </para>
        <code>using System;
using System.Data;

using MySql.Data;
using MySql.Data.MySqlClient;

public class Tutorial6
{
    public static void Main()
    {
        string connStr = "server=localhost;user=root;database=world;port=3306;password=******;";
        MySqlConnection conn = new MySqlConnection(connStr);
        try
        {
            Console.WriteLine("Connecting to MySQL...");
            conn.Open();

            string rtn = "country_hos";
            MySqlCommand cmd = new MySqlCommand(rtn, conn);
            cmd.CommandType = CommandType.StoredProcedure;
            MySqlParameter param = new MySqlParameter();
            param.ParameterName = "@con";
            param.Value = "Europe";
            cmd.Parameters.Add(param);

            MySqlDataReader rdr = cmd.ExecuteReader();
            while (rdr.Read())
            {
                Console.WriteLine(rdr[0] + " --- " + rdr[1]);
            }
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        Console.WriteLine("Done.");
    }
}</code>
        <para>
      In this section you have seen how to call a Stored Procedure from
      Connector/NET. For the moment, this concludes our introductory
      tutorial on programming with Connector/NET.
    </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>